
mTEMProject.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007574  080001e0  080001e0  000011e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000328  08007754  08007754  00008754  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007a7c  08007a7c  0000907c  2**0
                  CONTENTS
  4 .ARM          00000008  08007a7c  08007a7c  00008a7c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007a84  08007a84  0000907c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007a84  08007a84  00008a84  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08007a88  08007a88  00008a88  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000007c  20000000  08007a8c  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000004c8  2000007c  08007b08  0000907c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000544  08007b08  00009544  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000907c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001411a  00000000  00000000  000090ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002d27  00000000  00000000  0001d1c6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f60  00000000  00000000  0001fef0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000be2  00000000  00000000  00020e50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00003b0e  00000000  00000000  00021a32  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00014f96  00000000  00000000  00025540  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ef3c8  00000000  00000000  0003a4d6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0012989e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004cac  00000000  00000000  001298e4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005b  00000000  00000000  0012e590  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	@ (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	@ (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	2000007c 	.word	0x2000007c
 80001fc:	00000000 	.word	0x00000000
 8000200:	0800773c 	.word	0x0800773c

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	@ (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	@ (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	@ (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000080 	.word	0x20000080
 800021c:	0800773c 	.word	0x0800773c

08000220 <strlen>:
 8000220:	4603      	mov	r3, r0
 8000222:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000226:	2a00      	cmp	r2, #0
 8000228:	d1fb      	bne.n	8000222 <strlen+0x2>
 800022a:	1a18      	subs	r0, r3, r0
 800022c:	3801      	subs	r0, #1
 800022e:	4770      	bx	lr

08000230 <memchr>:
 8000230:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000234:	2a10      	cmp	r2, #16
 8000236:	db2b      	blt.n	8000290 <memchr+0x60>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	d008      	beq.n	8000250 <memchr+0x20>
 800023e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000242:	3a01      	subs	r2, #1
 8000244:	428b      	cmp	r3, r1
 8000246:	d02d      	beq.n	80002a4 <memchr+0x74>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	b342      	cbz	r2, 80002a0 <memchr+0x70>
 800024e:	d1f6      	bne.n	800023e <memchr+0xe>
 8000250:	b4f0      	push	{r4, r5, r6, r7}
 8000252:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000256:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800025a:	f022 0407 	bic.w	r4, r2, #7
 800025e:	f07f 0700 	mvns.w	r7, #0
 8000262:	2300      	movs	r3, #0
 8000264:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000268:	3c08      	subs	r4, #8
 800026a:	ea85 0501 	eor.w	r5, r5, r1
 800026e:	ea86 0601 	eor.w	r6, r6, r1
 8000272:	fa85 f547 	uadd8	r5, r5, r7
 8000276:	faa3 f587 	sel	r5, r3, r7
 800027a:	fa86 f647 	uadd8	r6, r6, r7
 800027e:	faa5 f687 	sel	r6, r5, r7
 8000282:	b98e      	cbnz	r6, 80002a8 <memchr+0x78>
 8000284:	d1ee      	bne.n	8000264 <memchr+0x34>
 8000286:	bcf0      	pop	{r4, r5, r6, r7}
 8000288:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800028c:	f002 0207 	and.w	r2, r2, #7
 8000290:	b132      	cbz	r2, 80002a0 <memchr+0x70>
 8000292:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000296:	3a01      	subs	r2, #1
 8000298:	ea83 0301 	eor.w	r3, r3, r1
 800029c:	b113      	cbz	r3, 80002a4 <memchr+0x74>
 800029e:	d1f8      	bne.n	8000292 <memchr+0x62>
 80002a0:	2000      	movs	r0, #0
 80002a2:	4770      	bx	lr
 80002a4:	3801      	subs	r0, #1
 80002a6:	4770      	bx	lr
 80002a8:	2d00      	cmp	r5, #0
 80002aa:	bf06      	itte	eq
 80002ac:	4635      	moveq	r5, r6
 80002ae:	3803      	subeq	r0, #3
 80002b0:	3807      	subne	r0, #7
 80002b2:	f015 0f01 	tst.w	r5, #1
 80002b6:	d107      	bne.n	80002c8 <memchr+0x98>
 80002b8:	3001      	adds	r0, #1
 80002ba:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002be:	bf02      	ittt	eq
 80002c0:	3001      	addeq	r0, #1
 80002c2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002c6:	3001      	addeq	r0, #1
 80002c8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ca:	3801      	subs	r0, #1
 80002cc:	4770      	bx	lr
 80002ce:	bf00      	nop

080002d0 <__aeabi_uldivmod>:
 80002d0:	b953      	cbnz	r3, 80002e8 <__aeabi_uldivmod+0x18>
 80002d2:	b94a      	cbnz	r2, 80002e8 <__aeabi_uldivmod+0x18>
 80002d4:	2900      	cmp	r1, #0
 80002d6:	bf08      	it	eq
 80002d8:	2800      	cmpeq	r0, #0
 80002da:	bf1c      	itt	ne
 80002dc:	f04f 31ff 	movne.w	r1, #4294967295
 80002e0:	f04f 30ff 	movne.w	r0, #4294967295
 80002e4:	f000 b96a 	b.w	80005bc <__aeabi_idiv0>
 80002e8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ec:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002f0:	f000 f806 	bl	8000300 <__udivmoddi4>
 80002f4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002fc:	b004      	add	sp, #16
 80002fe:	4770      	bx	lr

08000300 <__udivmoddi4>:
 8000300:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000304:	9d08      	ldr	r5, [sp, #32]
 8000306:	460c      	mov	r4, r1
 8000308:	2b00      	cmp	r3, #0
 800030a:	d14e      	bne.n	80003aa <__udivmoddi4+0xaa>
 800030c:	4694      	mov	ip, r2
 800030e:	458c      	cmp	ip, r1
 8000310:	4686      	mov	lr, r0
 8000312:	fab2 f282 	clz	r2, r2
 8000316:	d962      	bls.n	80003de <__udivmoddi4+0xde>
 8000318:	b14a      	cbz	r2, 800032e <__udivmoddi4+0x2e>
 800031a:	f1c2 0320 	rsb	r3, r2, #32
 800031e:	4091      	lsls	r1, r2
 8000320:	fa20 f303 	lsr.w	r3, r0, r3
 8000324:	fa0c fc02 	lsl.w	ip, ip, r2
 8000328:	4319      	orrs	r1, r3
 800032a:	fa00 fe02 	lsl.w	lr, r0, r2
 800032e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000332:	fa1f f68c 	uxth.w	r6, ip
 8000336:	fbb1 f4f7 	udiv	r4, r1, r7
 800033a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800033e:	fb07 1114 	mls	r1, r7, r4, r1
 8000342:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000346:	fb04 f106 	mul.w	r1, r4, r6
 800034a:	4299      	cmp	r1, r3
 800034c:	d90a      	bls.n	8000364 <__udivmoddi4+0x64>
 800034e:	eb1c 0303 	adds.w	r3, ip, r3
 8000352:	f104 30ff 	add.w	r0, r4, #4294967295
 8000356:	f080 8112 	bcs.w	800057e <__udivmoddi4+0x27e>
 800035a:	4299      	cmp	r1, r3
 800035c:	f240 810f 	bls.w	800057e <__udivmoddi4+0x27e>
 8000360:	3c02      	subs	r4, #2
 8000362:	4463      	add	r3, ip
 8000364:	1a59      	subs	r1, r3, r1
 8000366:	fa1f f38e 	uxth.w	r3, lr
 800036a:	fbb1 f0f7 	udiv	r0, r1, r7
 800036e:	fb07 1110 	mls	r1, r7, r0, r1
 8000372:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000376:	fb00 f606 	mul.w	r6, r0, r6
 800037a:	429e      	cmp	r6, r3
 800037c:	d90a      	bls.n	8000394 <__udivmoddi4+0x94>
 800037e:	eb1c 0303 	adds.w	r3, ip, r3
 8000382:	f100 31ff 	add.w	r1, r0, #4294967295
 8000386:	f080 80fc 	bcs.w	8000582 <__udivmoddi4+0x282>
 800038a:	429e      	cmp	r6, r3
 800038c:	f240 80f9 	bls.w	8000582 <__udivmoddi4+0x282>
 8000390:	4463      	add	r3, ip
 8000392:	3802      	subs	r0, #2
 8000394:	1b9b      	subs	r3, r3, r6
 8000396:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800039a:	2100      	movs	r1, #0
 800039c:	b11d      	cbz	r5, 80003a6 <__udivmoddi4+0xa6>
 800039e:	40d3      	lsrs	r3, r2
 80003a0:	2200      	movs	r2, #0
 80003a2:	e9c5 3200 	strd	r3, r2, [r5]
 80003a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003aa:	428b      	cmp	r3, r1
 80003ac:	d905      	bls.n	80003ba <__udivmoddi4+0xba>
 80003ae:	b10d      	cbz	r5, 80003b4 <__udivmoddi4+0xb4>
 80003b0:	e9c5 0100 	strd	r0, r1, [r5]
 80003b4:	2100      	movs	r1, #0
 80003b6:	4608      	mov	r0, r1
 80003b8:	e7f5      	b.n	80003a6 <__udivmoddi4+0xa6>
 80003ba:	fab3 f183 	clz	r1, r3
 80003be:	2900      	cmp	r1, #0
 80003c0:	d146      	bne.n	8000450 <__udivmoddi4+0x150>
 80003c2:	42a3      	cmp	r3, r4
 80003c4:	d302      	bcc.n	80003cc <__udivmoddi4+0xcc>
 80003c6:	4290      	cmp	r0, r2
 80003c8:	f0c0 80f0 	bcc.w	80005ac <__udivmoddi4+0x2ac>
 80003cc:	1a86      	subs	r6, r0, r2
 80003ce:	eb64 0303 	sbc.w	r3, r4, r3
 80003d2:	2001      	movs	r0, #1
 80003d4:	2d00      	cmp	r5, #0
 80003d6:	d0e6      	beq.n	80003a6 <__udivmoddi4+0xa6>
 80003d8:	e9c5 6300 	strd	r6, r3, [r5]
 80003dc:	e7e3      	b.n	80003a6 <__udivmoddi4+0xa6>
 80003de:	2a00      	cmp	r2, #0
 80003e0:	f040 8090 	bne.w	8000504 <__udivmoddi4+0x204>
 80003e4:	eba1 040c 	sub.w	r4, r1, ip
 80003e8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003ec:	fa1f f78c 	uxth.w	r7, ip
 80003f0:	2101      	movs	r1, #1
 80003f2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003f6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003fa:	fb08 4416 	mls	r4, r8, r6, r4
 80003fe:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000402:	fb07 f006 	mul.w	r0, r7, r6
 8000406:	4298      	cmp	r0, r3
 8000408:	d908      	bls.n	800041c <__udivmoddi4+0x11c>
 800040a:	eb1c 0303 	adds.w	r3, ip, r3
 800040e:	f106 34ff 	add.w	r4, r6, #4294967295
 8000412:	d202      	bcs.n	800041a <__udivmoddi4+0x11a>
 8000414:	4298      	cmp	r0, r3
 8000416:	f200 80cd 	bhi.w	80005b4 <__udivmoddi4+0x2b4>
 800041a:	4626      	mov	r6, r4
 800041c:	1a1c      	subs	r4, r3, r0
 800041e:	fa1f f38e 	uxth.w	r3, lr
 8000422:	fbb4 f0f8 	udiv	r0, r4, r8
 8000426:	fb08 4410 	mls	r4, r8, r0, r4
 800042a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800042e:	fb00 f707 	mul.w	r7, r0, r7
 8000432:	429f      	cmp	r7, r3
 8000434:	d908      	bls.n	8000448 <__udivmoddi4+0x148>
 8000436:	eb1c 0303 	adds.w	r3, ip, r3
 800043a:	f100 34ff 	add.w	r4, r0, #4294967295
 800043e:	d202      	bcs.n	8000446 <__udivmoddi4+0x146>
 8000440:	429f      	cmp	r7, r3
 8000442:	f200 80b0 	bhi.w	80005a6 <__udivmoddi4+0x2a6>
 8000446:	4620      	mov	r0, r4
 8000448:	1bdb      	subs	r3, r3, r7
 800044a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800044e:	e7a5      	b.n	800039c <__udivmoddi4+0x9c>
 8000450:	f1c1 0620 	rsb	r6, r1, #32
 8000454:	408b      	lsls	r3, r1
 8000456:	fa22 f706 	lsr.w	r7, r2, r6
 800045a:	431f      	orrs	r7, r3
 800045c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000460:	fa04 f301 	lsl.w	r3, r4, r1
 8000464:	ea43 030c 	orr.w	r3, r3, ip
 8000468:	40f4      	lsrs	r4, r6
 800046a:	fa00 f801 	lsl.w	r8, r0, r1
 800046e:	0c38      	lsrs	r0, r7, #16
 8000470:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000474:	fbb4 fef0 	udiv	lr, r4, r0
 8000478:	fa1f fc87 	uxth.w	ip, r7
 800047c:	fb00 441e 	mls	r4, r0, lr, r4
 8000480:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000484:	fb0e f90c 	mul.w	r9, lr, ip
 8000488:	45a1      	cmp	r9, r4
 800048a:	fa02 f201 	lsl.w	r2, r2, r1
 800048e:	d90a      	bls.n	80004a6 <__udivmoddi4+0x1a6>
 8000490:	193c      	adds	r4, r7, r4
 8000492:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000496:	f080 8084 	bcs.w	80005a2 <__udivmoddi4+0x2a2>
 800049a:	45a1      	cmp	r9, r4
 800049c:	f240 8081 	bls.w	80005a2 <__udivmoddi4+0x2a2>
 80004a0:	f1ae 0e02 	sub.w	lr, lr, #2
 80004a4:	443c      	add	r4, r7
 80004a6:	eba4 0409 	sub.w	r4, r4, r9
 80004aa:	fa1f f983 	uxth.w	r9, r3
 80004ae:	fbb4 f3f0 	udiv	r3, r4, r0
 80004b2:	fb00 4413 	mls	r4, r0, r3, r4
 80004b6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004ba:	fb03 fc0c 	mul.w	ip, r3, ip
 80004be:	45a4      	cmp	ip, r4
 80004c0:	d907      	bls.n	80004d2 <__udivmoddi4+0x1d2>
 80004c2:	193c      	adds	r4, r7, r4
 80004c4:	f103 30ff 	add.w	r0, r3, #4294967295
 80004c8:	d267      	bcs.n	800059a <__udivmoddi4+0x29a>
 80004ca:	45a4      	cmp	ip, r4
 80004cc:	d965      	bls.n	800059a <__udivmoddi4+0x29a>
 80004ce:	3b02      	subs	r3, #2
 80004d0:	443c      	add	r4, r7
 80004d2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004d6:	fba0 9302 	umull	r9, r3, r0, r2
 80004da:	eba4 040c 	sub.w	r4, r4, ip
 80004de:	429c      	cmp	r4, r3
 80004e0:	46ce      	mov	lr, r9
 80004e2:	469c      	mov	ip, r3
 80004e4:	d351      	bcc.n	800058a <__udivmoddi4+0x28a>
 80004e6:	d04e      	beq.n	8000586 <__udivmoddi4+0x286>
 80004e8:	b155      	cbz	r5, 8000500 <__udivmoddi4+0x200>
 80004ea:	ebb8 030e 	subs.w	r3, r8, lr
 80004ee:	eb64 040c 	sbc.w	r4, r4, ip
 80004f2:	fa04 f606 	lsl.w	r6, r4, r6
 80004f6:	40cb      	lsrs	r3, r1
 80004f8:	431e      	orrs	r6, r3
 80004fa:	40cc      	lsrs	r4, r1
 80004fc:	e9c5 6400 	strd	r6, r4, [r5]
 8000500:	2100      	movs	r1, #0
 8000502:	e750      	b.n	80003a6 <__udivmoddi4+0xa6>
 8000504:	f1c2 0320 	rsb	r3, r2, #32
 8000508:	fa20 f103 	lsr.w	r1, r0, r3
 800050c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000510:	fa24 f303 	lsr.w	r3, r4, r3
 8000514:	4094      	lsls	r4, r2
 8000516:	430c      	orrs	r4, r1
 8000518:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800051c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000520:	fa1f f78c 	uxth.w	r7, ip
 8000524:	fbb3 f0f8 	udiv	r0, r3, r8
 8000528:	fb08 3110 	mls	r1, r8, r0, r3
 800052c:	0c23      	lsrs	r3, r4, #16
 800052e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000532:	fb00 f107 	mul.w	r1, r0, r7
 8000536:	4299      	cmp	r1, r3
 8000538:	d908      	bls.n	800054c <__udivmoddi4+0x24c>
 800053a:	eb1c 0303 	adds.w	r3, ip, r3
 800053e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000542:	d22c      	bcs.n	800059e <__udivmoddi4+0x29e>
 8000544:	4299      	cmp	r1, r3
 8000546:	d92a      	bls.n	800059e <__udivmoddi4+0x29e>
 8000548:	3802      	subs	r0, #2
 800054a:	4463      	add	r3, ip
 800054c:	1a5b      	subs	r3, r3, r1
 800054e:	b2a4      	uxth	r4, r4
 8000550:	fbb3 f1f8 	udiv	r1, r3, r8
 8000554:	fb08 3311 	mls	r3, r8, r1, r3
 8000558:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800055c:	fb01 f307 	mul.w	r3, r1, r7
 8000560:	42a3      	cmp	r3, r4
 8000562:	d908      	bls.n	8000576 <__udivmoddi4+0x276>
 8000564:	eb1c 0404 	adds.w	r4, ip, r4
 8000568:	f101 36ff 	add.w	r6, r1, #4294967295
 800056c:	d213      	bcs.n	8000596 <__udivmoddi4+0x296>
 800056e:	42a3      	cmp	r3, r4
 8000570:	d911      	bls.n	8000596 <__udivmoddi4+0x296>
 8000572:	3902      	subs	r1, #2
 8000574:	4464      	add	r4, ip
 8000576:	1ae4      	subs	r4, r4, r3
 8000578:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800057c:	e739      	b.n	80003f2 <__udivmoddi4+0xf2>
 800057e:	4604      	mov	r4, r0
 8000580:	e6f0      	b.n	8000364 <__udivmoddi4+0x64>
 8000582:	4608      	mov	r0, r1
 8000584:	e706      	b.n	8000394 <__udivmoddi4+0x94>
 8000586:	45c8      	cmp	r8, r9
 8000588:	d2ae      	bcs.n	80004e8 <__udivmoddi4+0x1e8>
 800058a:	ebb9 0e02 	subs.w	lr, r9, r2
 800058e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000592:	3801      	subs	r0, #1
 8000594:	e7a8      	b.n	80004e8 <__udivmoddi4+0x1e8>
 8000596:	4631      	mov	r1, r6
 8000598:	e7ed      	b.n	8000576 <__udivmoddi4+0x276>
 800059a:	4603      	mov	r3, r0
 800059c:	e799      	b.n	80004d2 <__udivmoddi4+0x1d2>
 800059e:	4630      	mov	r0, r6
 80005a0:	e7d4      	b.n	800054c <__udivmoddi4+0x24c>
 80005a2:	46d6      	mov	lr, sl
 80005a4:	e77f      	b.n	80004a6 <__udivmoddi4+0x1a6>
 80005a6:	4463      	add	r3, ip
 80005a8:	3802      	subs	r0, #2
 80005aa:	e74d      	b.n	8000448 <__udivmoddi4+0x148>
 80005ac:	4606      	mov	r6, r0
 80005ae:	4623      	mov	r3, r4
 80005b0:	4608      	mov	r0, r1
 80005b2:	e70f      	b.n	80003d4 <__udivmoddi4+0xd4>
 80005b4:	3e02      	subs	r6, #2
 80005b6:	4463      	add	r3, ip
 80005b8:	e730      	b.n	800041c <__udivmoddi4+0x11c>
 80005ba:	bf00      	nop

080005bc <__aeabi_idiv0>:
 80005bc:	4770      	bx	lr
 80005be:	bf00      	nop

080005c0 <recieve_SMS>:
	HAL_UART_Receive_IT(&huart1, GSM_buffer, sizeof(GSM_buffer));
	memset(GSM_buffer,0, sizeof(GSM_buffer));
	HAL_Delay(4000);
}

void recieve_SMS(){
 80005c0:	b580      	push	{r7, lr}
 80005c2:	af00      	add	r7, sp, #0

	while(!ATisOK){
 80005c4:	e02a      	b.n	800061c <recieve_SMS+0x5c>
		sprintf(ATcommand,"AT\r\n");
 80005c6:	4931      	ldr	r1, [pc, #196]	@ (800068c <recieve_SMS+0xcc>)
 80005c8:	4831      	ldr	r0, [pc, #196]	@ (8000690 <recieve_SMS+0xd0>)
 80005ca:	f005 fac9 	bl	8005b60 <siprintf>
		HAL_UART_Transmit(&huart1,(uint8_t *)ATcommand, strlen(ATcommand),100);
 80005ce:	4830      	ldr	r0, [pc, #192]	@ (8000690 <recieve_SMS+0xd0>)
 80005d0:	f7ff fe26 	bl	8000220 <strlen>
 80005d4:	4603      	mov	r3, r0
 80005d6:	b29a      	uxth	r2, r3
 80005d8:	2364      	movs	r3, #100	@ 0x64
 80005da:	492d      	ldr	r1, [pc, #180]	@ (8000690 <recieve_SMS+0xd0>)
 80005dc:	482d      	ldr	r0, [pc, #180]	@ (8000694 <recieve_SMS+0xd4>)
 80005de:	f002 fe05 	bl	80031ec <HAL_UART_Transmit>
		HAL_UART_Receive (&huart1, GSM_buffer, sizeof(GSM_buffer), 100);
 80005e2:	2364      	movs	r3, #100	@ 0x64
 80005e4:	221e      	movs	r2, #30
 80005e6:	492c      	ldr	r1, [pc, #176]	@ (8000698 <recieve_SMS+0xd8>)
 80005e8:	482a      	ldr	r0, [pc, #168]	@ (8000694 <recieve_SMS+0xd4>)
 80005ea:	f002 fe8d 	bl	8003308 <HAL_UART_Receive>
		HAL_Delay(1000);
 80005ee:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80005f2:	f001 f85d 	bl	80016b0 <HAL_Delay>
		if(strstr((char *)GSM_buffer,"OK")){
 80005f6:	4929      	ldr	r1, [pc, #164]	@ (800069c <recieve_SMS+0xdc>)
 80005f8:	4827      	ldr	r0, [pc, #156]	@ (8000698 <recieve_SMS+0xd8>)
 80005fa:	f005 fbc5 	bl	8005d88 <strstr>
 80005fe:	4603      	mov	r3, r0
 8000600:	2b00      	cmp	r3, #0
 8000602:	d002      	beq.n	800060a <recieve_SMS+0x4a>
			ATisOK = 1;
 8000604:	4b26      	ldr	r3, [pc, #152]	@ (80006a0 <recieve_SMS+0xe0>)
 8000606:	2201      	movs	r2, #1
 8000608:	701a      	strb	r2, [r3, #0]
		}
		HAL_Delay(1000);
 800060a:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800060e:	f001 f84f 	bl	80016b0 <HAL_Delay>
		memset(GSM_buffer,0,sizeof(GSM_buffer));
 8000612:	221e      	movs	r2, #30
 8000614:	2100      	movs	r1, #0
 8000616:	4820      	ldr	r0, [pc, #128]	@ (8000698 <recieve_SMS+0xd8>)
 8000618:	f005 fb31 	bl	8005c7e <memset>
	while(!ATisOK){
 800061c:	4b20      	ldr	r3, [pc, #128]	@ (80006a0 <recieve_SMS+0xe0>)
 800061e:	781b      	ldrb	r3, [r3, #0]
 8000620:	2b00      	cmp	r3, #0
 8000622:	d0d0      	beq.n	80005c6 <recieve_SMS+0x6>
	}

	sprintf(ATcommand, "AT+CMGF=1\r\n");
 8000624:	491f      	ldr	r1, [pc, #124]	@ (80006a4 <recieve_SMS+0xe4>)
 8000626:	481a      	ldr	r0, [pc, #104]	@ (8000690 <recieve_SMS+0xd0>)
 8000628:	f005 fa9a 	bl	8005b60 <siprintf>
	HAL_UART_Transmit(&huart1, (uint8_t *)ATcommand, strlen(ATcommand), 1000);
 800062c:	4818      	ldr	r0, [pc, #96]	@ (8000690 <recieve_SMS+0xd0>)
 800062e:	f7ff fdf7 	bl	8000220 <strlen>
 8000632:	4603      	mov	r3, r0
 8000634:	b29a      	uxth	r2, r3
 8000636:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800063a:	4915      	ldr	r1, [pc, #84]	@ (8000690 <recieve_SMS+0xd0>)
 800063c:	4815      	ldr	r0, [pc, #84]	@ (8000694 <recieve_SMS+0xd4>)
 800063e:	f002 fdd5 	bl	80031ec <HAL_UART_Transmit>
	HAL_UART_Receive(&huart1, GSM_buffer, 100, 100);
 8000642:	2364      	movs	r3, #100	@ 0x64
 8000644:	2264      	movs	r2, #100	@ 0x64
 8000646:	4914      	ldr	r1, [pc, #80]	@ (8000698 <recieve_SMS+0xd8>)
 8000648:	4812      	ldr	r0, [pc, #72]	@ (8000694 <recieve_SMS+0xd4>)
 800064a:	f002 fe5d 	bl	8003308 <HAL_UART_Receive>
	HAL_Delay(1000);
 800064e:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000652:	f001 f82d 	bl	80016b0 <HAL_Delay>
	memset(GSM_buffer, 0, sizeof(GSM_buffer));
 8000656:	221e      	movs	r2, #30
 8000658:	2100      	movs	r1, #0
 800065a:	480f      	ldr	r0, [pc, #60]	@ (8000698 <recieve_SMS+0xd8>)
 800065c:	f005 fb0f 	bl	8005c7e <memset>

	sprintf(ATcommand, "AT+CNMI=2,1\r\n");
 8000660:	4911      	ldr	r1, [pc, #68]	@ (80006a8 <recieve_SMS+0xe8>)
 8000662:	480b      	ldr	r0, [pc, #44]	@ (8000690 <recieve_SMS+0xd0>)
 8000664:	f005 fa7c 	bl	8005b60 <siprintf>
	HAL_UART_Transmit(&huart1, (uint8_t *)ATcommand, strlen(ATcommand),1000);
 8000668:	4809      	ldr	r0, [pc, #36]	@ (8000690 <recieve_SMS+0xd0>)
 800066a:	f7ff fdd9 	bl	8000220 <strlen>
 800066e:	4603      	mov	r3, r0
 8000670:	b29a      	uxth	r2, r3
 8000672:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000676:	4906      	ldr	r1, [pc, #24]	@ (8000690 <recieve_SMS+0xd0>)
 8000678:	4806      	ldr	r0, [pc, #24]	@ (8000694 <recieve_SMS+0xd4>)
 800067a:	f002 fdb7 	bl	80031ec <HAL_UART_Transmit>
	HAL_UART_Receive_IT(&huart1, GSM_buffer, 1);
 800067e:	2201      	movs	r2, #1
 8000680:	4905      	ldr	r1, [pc, #20]	@ (8000698 <recieve_SMS+0xd8>)
 8000682:	4804      	ldr	r0, [pc, #16]	@ (8000694 <recieve_SMS+0xd4>)
 8000684:	f002 ff9c 	bl	80035c0 <HAL_UART_Receive_IT>
}
 8000688:	bf00      	nop
 800068a:	bd80      	pop	{r7, pc}
 800068c:	08007754 	.word	0x08007754
 8000690:	20000098 	.word	0x20000098
 8000694:	20000228 	.word	0x20000228
 8000698:	200000e8 	.word	0x200000e8
 800069c:	0800775c 	.word	0x0800775c
 80006a0:	20000106 	.word	0x20000106
 80006a4:	08007760 	.word	0x08007760
 80006a8:	08007784 	.word	0x08007784

080006ac <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 80006ac:	b580      	push	{r7, lr}
 80006ae:	b082      	sub	sp, #8
 80006b0:	af00      	add	r7, sp, #0
 80006b2:	6078      	str	r0, [r7, #4]
  if(huart->Instance==USART1)
 80006b4:	687b      	ldr	r3, [r7, #4]
 80006b6:	681b      	ldr	r3, [r3, #0]
 80006b8:	4a36      	ldr	r2, [pc, #216]	@ (8000794 <HAL_UART_RxCpltCallback+0xe8>)
 80006ba:	4293      	cmp	r3, r2
 80006bc:	d166      	bne.n	800078c <HAL_UART_RxCpltCallback+0xe0>
  {
    // if the character received is other than 'enter' ascii13, save the data in buffer
    if(rx_data!=13)
 80006be:	4b36      	ldr	r3, [pc, #216]	@ (8000798 <HAL_UART_RxCpltCallback+0xec>)
 80006c0:	781b      	ldrb	r3, [r3, #0]
 80006c2:	2b0d      	cmp	r3, #13
 80006c4:	d00b      	beq.n	80006de <HAL_UART_RxCpltCallback+0x32>
    {
    	GSM_buffer[rx_index++]=rx_data;
 80006c6:	4b35      	ldr	r3, [pc, #212]	@ (800079c <HAL_UART_RxCpltCallback+0xf0>)
 80006c8:	781b      	ldrb	r3, [r3, #0]
 80006ca:	1c5a      	adds	r2, r3, #1
 80006cc:	b2d1      	uxtb	r1, r2
 80006ce:	4a33      	ldr	r2, [pc, #204]	@ (800079c <HAL_UART_RxCpltCallback+0xf0>)
 80006d0:	7011      	strb	r1, [r2, #0]
 80006d2:	461a      	mov	r2, r3
 80006d4:	4b30      	ldr	r3, [pc, #192]	@ (8000798 <HAL_UART_RxCpltCallback+0xec>)
 80006d6:	7819      	ldrb	r1, [r3, #0]
 80006d8:	4b31      	ldr	r3, [pc, #196]	@ (80007a0 <HAL_UART_RxCpltCallback+0xf4>)
 80006da:	5499      	strb	r1, [r3, r2]
 80006dc:	e051      	b.n	8000782 <HAL_UART_RxCpltCallback+0xd6>
    }
    else
    {
      // if new message arrived, read the message
      if( sscanf((char*)GSM_buffer, "\n+CMTI: " PREF_SMS_STORAGE ",%hhd", &slot)==1)
 80006de:	4a31      	ldr	r2, [pc, #196]	@ (80007a4 <HAL_UART_RxCpltCallback+0xf8>)
 80006e0:	4931      	ldr	r1, [pc, #196]	@ (80007a8 <HAL_UART_RxCpltCallback+0xfc>)
 80006e2:	482f      	ldr	r0, [pc, #188]	@ (80007a0 <HAL_UART_RxCpltCallback+0xf4>)
 80006e4:	f005 fa5c 	bl	8005ba0 <siscanf>
 80006e8:	4603      	mov	r3, r0
 80006ea:	2b01      	cmp	r3, #1
 80006ec:	d111      	bne.n	8000712 <HAL_UART_RxCpltCallback+0x66>
      {
        sprintf(ATcommand,"AT+CMGR=%d\r\n",slot);
 80006ee:	4b2d      	ldr	r3, [pc, #180]	@ (80007a4 <HAL_UART_RxCpltCallback+0xf8>)
 80006f0:	781b      	ldrb	r3, [r3, #0]
 80006f2:	461a      	mov	r2, r3
 80006f4:	492d      	ldr	r1, [pc, #180]	@ (80007ac <HAL_UART_RxCpltCallback+0x100>)
 80006f6:	482e      	ldr	r0, [pc, #184]	@ (80007b0 <HAL_UART_RxCpltCallback+0x104>)
 80006f8:	f005 fa32 	bl	8005b60 <siprintf>
        HAL_UART_Transmit_IT(&huart1,(uint8_t *)ATcommand,strlen(ATcommand));
 80006fc:	482c      	ldr	r0, [pc, #176]	@ (80007b0 <HAL_UART_RxCpltCallback+0x104>)
 80006fe:	f7ff fd8f 	bl	8000220 <strlen>
 8000702:	4603      	mov	r3, r0
 8000704:	b29b      	uxth	r3, r3
 8000706:	461a      	mov	r2, r3
 8000708:	4929      	ldr	r1, [pc, #164]	@ (80007b0 <HAL_UART_RxCpltCallback+0x104>)
 800070a:	482a      	ldr	r0, [pc, #168]	@ (80007b4 <HAL_UART_RxCpltCallback+0x108>)
 800070c:	f002 fec4 	bl	8003498 <HAL_UART_Transmit_IT>
 8000710:	e01a      	b.n	8000748 <HAL_UART_RxCpltCallback+0x9c>
      }
      // if message read contains "ledon", switch the LED ON
      else if (strstr((char *)GSM_buffer,"LEDON"))
 8000712:	4929      	ldr	r1, [pc, #164]	@ (80007b8 <HAL_UART_RxCpltCallback+0x10c>)
 8000714:	4822      	ldr	r0, [pc, #136]	@ (80007a0 <HAL_UART_RxCpltCallback+0xf4>)
 8000716:	f005 fb37 	bl	8005d88 <strstr>
 800071a:	4603      	mov	r3, r0
 800071c:	2b00      	cmp	r3, #0
 800071e:	d006      	beq.n	800072e <HAL_UART_RxCpltCallback+0x82>
      {
        HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 8000720:	2201      	movs	r2, #1
 8000722:	2120      	movs	r1, #32
 8000724:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000728:	f001 fb96 	bl	8001e58 <HAL_GPIO_WritePin>
 800072c:	e00c      	b.n	8000748 <HAL_UART_RxCpltCallback+0x9c>
      }
      // if message read contains "ledoff", switch the LED OFF
      else if (strstr((char *)GSM_buffer,"LEDOFF"))
 800072e:	4923      	ldr	r1, [pc, #140]	@ (80007bc <HAL_UART_RxCpltCallback+0x110>)
 8000730:	481b      	ldr	r0, [pc, #108]	@ (80007a0 <HAL_UART_RxCpltCallback+0xf4>)
 8000732:	f005 fb29 	bl	8005d88 <strstr>
 8000736:	4603      	mov	r3, r0
 8000738:	2b00      	cmp	r3, #0
 800073a:	d005      	beq.n	8000748 <HAL_UART_RxCpltCallback+0x9c>
      {
        HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 800073c:	2200      	movs	r2, #0
 800073e:	2120      	movs	r1, #32
 8000740:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000744:	f001 fb88 	bl	8001e58 <HAL_GPIO_WritePin>
      }
      // This will delete all messages in the SIM card)
      if (strstr((char *)GSM_buffer,"DELALL"))
 8000748:	491d      	ldr	r1, [pc, #116]	@ (80007c0 <HAL_UART_RxCpltCallback+0x114>)
 800074a:	4815      	ldr	r0, [pc, #84]	@ (80007a0 <HAL_UART_RxCpltCallback+0xf4>)
 800074c:	f005 fb1c 	bl	8005d88 <strstr>
 8000750:	4603      	mov	r3, r0
 8000752:	2b00      	cmp	r3, #0
 8000754:	d00d      	beq.n	8000772 <HAL_UART_RxCpltCallback+0xc6>
      {
          sprintf(ATcommand,"AT+CMGD=,4\r\n");
 8000756:	491b      	ldr	r1, [pc, #108]	@ (80007c4 <HAL_UART_RxCpltCallback+0x118>)
 8000758:	4815      	ldr	r0, [pc, #84]	@ (80007b0 <HAL_UART_RxCpltCallback+0x104>)
 800075a:	f005 fa01 	bl	8005b60 <siprintf>
          HAL_UART_Transmit_IT(&huart1,(uint8_t *)ATcommand,strlen(ATcommand));
 800075e:	4814      	ldr	r0, [pc, #80]	@ (80007b0 <HAL_UART_RxCpltCallback+0x104>)
 8000760:	f7ff fd5e 	bl	8000220 <strlen>
 8000764:	4603      	mov	r3, r0
 8000766:	b29b      	uxth	r3, r3
 8000768:	461a      	mov	r2, r3
 800076a:	4911      	ldr	r1, [pc, #68]	@ (80007b0 <HAL_UART_RxCpltCallback+0x104>)
 800076c:	4811      	ldr	r0, [pc, #68]	@ (80007b4 <HAL_UART_RxCpltCallback+0x108>)
 800076e:	f002 fe93 	bl	8003498 <HAL_UART_Transmit_IT>
      }
      rx_index=0;
 8000772:	4b0a      	ldr	r3, [pc, #40]	@ (800079c <HAL_UART_RxCpltCallback+0xf0>)
 8000774:	2200      	movs	r2, #0
 8000776:	701a      	strb	r2, [r3, #0]
      memset(GSM_buffer,0,sizeof(GSM_buffer));
 8000778:	221e      	movs	r2, #30
 800077a:	2100      	movs	r1, #0
 800077c:	4808      	ldr	r0, [pc, #32]	@ (80007a0 <HAL_UART_RxCpltCallback+0xf4>)
 800077e:	f005 fa7e 	bl	8005c7e <memset>
    }
    // Enabling interrupt receive again
    HAL_UART_Receive_IT(&huart1,&rx_data,1); // receive data (one character only)
 8000782:	2201      	movs	r2, #1
 8000784:	4904      	ldr	r1, [pc, #16]	@ (8000798 <HAL_UART_RxCpltCallback+0xec>)
 8000786:	480b      	ldr	r0, [pc, #44]	@ (80007b4 <HAL_UART_RxCpltCallback+0x108>)
 8000788:	f002 ff1a 	bl	80035c0 <HAL_UART_Receive_IT>
  }
}
 800078c:	bf00      	nop
 800078e:	3708      	adds	r7, #8
 8000790:	46bd      	mov	sp, r7
 8000792:	bd80      	pop	{r7, pc}
 8000794:	40013800 	.word	0x40013800
 8000798:	20000109 	.word	0x20000109
 800079c:	20000108 	.word	0x20000108
 80007a0:	200000e8 	.word	0x200000e8
 80007a4:	20000107 	.word	0x20000107
 80007a8:	08007794 	.word	0x08007794
 80007ac:	080077a8 	.word	0x080077a8
 80007b0:	20000098 	.word	0x20000098
 80007b4:	20000228 	.word	0x20000228
 80007b8:	080077b8 	.word	0x080077b8
 80007bc:	080077c0 	.word	0x080077c0
 80007c0:	080077c8 	.word	0x080077c8
 80007c4:	080077d0 	.word	0x080077d0

080007c8 <SIMTransmitTime>:
extern UART_HandleTypeDef huart3;

uint8_t buffer_time[100] = {0};

//Resets buffer and transmits and receives from uart1
void SIMTransmitTime(char *cmd){
 80007c8:	b580      	push	{r7, lr}
 80007ca:	b082      	sub	sp, #8
 80007cc:	af00      	add	r7, sp, #0
 80007ce:	6078      	str	r0, [r7, #4]
  memset(buffer_time,0,sizeof(buffer_time));
 80007d0:	2264      	movs	r2, #100	@ 0x64
 80007d2:	2100      	movs	r1, #0
 80007d4:	480c      	ldr	r0, [pc, #48]	@ (8000808 <SIMTransmitTime+0x40>)
 80007d6:	f005 fa52 	bl	8005c7e <memset>
  HAL_UART_Transmit(&huart1,(uint8_t *)cmd,strlen(cmd),1000);
 80007da:	6878      	ldr	r0, [r7, #4]
 80007dc:	f7ff fd20 	bl	8000220 <strlen>
 80007e0:	4603      	mov	r3, r0
 80007e2:	b29a      	uxth	r2, r3
 80007e4:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80007e8:	6879      	ldr	r1, [r7, #4]
 80007ea:	4808      	ldr	r0, [pc, #32]	@ (800080c <SIMTransmitTime+0x44>)
 80007ec:	f002 fcfe 	bl	80031ec <HAL_UART_Transmit>
  HAL_UART_Receive(&huart1, buffer_time, sizeof(buffer_time), 1000);
 80007f0:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80007f4:	2264      	movs	r2, #100	@ 0x64
 80007f6:	4904      	ldr	r1, [pc, #16]	@ (8000808 <SIMTransmitTime+0x40>)
 80007f8:	4804      	ldr	r0, [pc, #16]	@ (800080c <SIMTransmitTime+0x44>)
 80007fa:	f002 fd85 	bl	8003308 <HAL_UART_Receive>
}
 80007fe:	bf00      	nop
 8000800:	3708      	adds	r7, #8
 8000802:	46bd      	mov	sp, r7
 8000804:	bd80      	pop	{r7, pc}
 8000806:	bf00      	nop
 8000808:	2000010c 	.word	0x2000010c
 800080c:	20000228 	.word	0x20000228

08000810 <date_time>:

void date_time(){
 8000810:	b580      	push	{r7, lr}
 8000812:	b086      	sub	sp, #24
 8000814:	af00      	add	r7, sp, #0
	SIMTransmitTime("AT\r\n");
 8000816:	4832      	ldr	r0, [pc, #200]	@ (80008e0 <date_time+0xd0>)
 8000818:	f7ff ffd6 	bl	80007c8 <SIMTransmitTime>
	HAL_Delay(100);
 800081c:	2064      	movs	r0, #100	@ 0x64
 800081e:	f000 ff47 	bl	80016b0 <HAL_Delay>
	SIMTransmitTime("AT+CGPS=1\r\n");
 8000822:	4830      	ldr	r0, [pc, #192]	@ (80008e4 <date_time+0xd4>)
 8000824:	f7ff ffd0 	bl	80007c8 <SIMTransmitTime>
	HAL_Delay(60000);
 8000828:	f64e 2060 	movw	r0, #60000	@ 0xea60
 800082c:	f000 ff40 	bl	80016b0 <HAL_Delay>
	SIMTransmitTime("AT+CGPSINFO\r\n");
 8000830:	482d      	ldr	r0, [pc, #180]	@ (80008e8 <date_time+0xd8>)
 8000832:	f7ff ffc9 	bl	80007c8 <SIMTransmitTime>

	char *start = strstr((char*)buffer_time, "+CGPSINFO:");
 8000836:	492d      	ldr	r1, [pc, #180]	@ (80008ec <date_time+0xdc>)
 8000838:	482d      	ldr	r0, [pc, #180]	@ (80008f0 <date_time+0xe0>)
 800083a:	f005 faa5 	bl	8005d88 <strstr>
 800083e:	60f8      	str	r0, [r7, #12]
	if(start != NULL){
 8000840:	68fb      	ldr	r3, [r7, #12]
 8000842:	2b00      	cmp	r3, #0
 8000844:	d042      	beq.n	80008cc <date_time+0xbc>
		start = strchr(start, ':');
 8000846:	213a      	movs	r1, #58	@ 0x3a
 8000848:	68f8      	ldr	r0, [r7, #12]
 800084a:	f005 fa20 	bl	8005c8e <strchr>
 800084e:	60f8      	str	r0, [r7, #12]
		if(start != NULL){
 8000850:	68fb      	ldr	r3, [r7, #12]
 8000852:	2b00      	cmp	r3, #0
 8000854:	d040      	beq.n	80008d8 <date_time+0xc8>
			start++;
 8000856:	68fb      	ldr	r3, [r7, #12]
 8000858:	3301      	adds	r3, #1
 800085a:	60fb      	str	r3, [r7, #12]

			char *token;
			int fieldIndex = 0;
 800085c:	2300      	movs	r3, #0
 800085e:	613b      	str	r3, [r7, #16]
			token = strtok(start, ",");
 8000860:	4924      	ldr	r1, [pc, #144]	@ (80008f4 <date_time+0xe4>)
 8000862:	68f8      	ldr	r0, [r7, #12]
 8000864:	f005 fa34 	bl	8005cd0 <strtok>
 8000868:	6178      	str	r0, [r7, #20]

			while(token != NULL){
 800086a:	e02b      	b.n	80008c4 <date_time+0xb4>
				fieldIndex++;
 800086c:	693b      	ldr	r3, [r7, #16]
 800086e:	3301      	adds	r3, #1
 8000870:	613b      	str	r3, [r7, #16]

				if(fieldIndex == 6){
 8000872:	693b      	ldr	r3, [r7, #16]
 8000874:	2b06      	cmp	r3, #6
 8000876:	d120      	bne.n	80008ba <date_time+0xaa>
					char time[10] = {0};
 8000878:	2300      	movs	r3, #0
 800087a:	603b      	str	r3, [r7, #0]
 800087c:	1d3b      	adds	r3, r7, #4
 800087e:	2200      	movs	r2, #0
 8000880:	601a      	str	r2, [r3, #0]
 8000882:	809a      	strh	r2, [r3, #4]
					strncpy(time, token, 6);
 8000884:	463b      	mov	r3, r7
 8000886:	2206      	movs	r2, #6
 8000888:	6979      	ldr	r1, [r7, #20]
 800088a:	4618      	mov	r0, r3
 800088c:	f005 fa0c 	bl	8005ca8 <strncpy>
					time[6] = '\0';
 8000890:	2300      	movs	r3, #0
 8000892:	71bb      	strb	r3, [r7, #6]

					HAL_UART_Transmit(&huart3, (uint8_t*)time, strlen(time), 100);
 8000894:	463b      	mov	r3, r7
 8000896:	4618      	mov	r0, r3
 8000898:	f7ff fcc2 	bl	8000220 <strlen>
 800089c:	4603      	mov	r3, r0
 800089e:	b29a      	uxth	r2, r3
 80008a0:	4639      	mov	r1, r7
 80008a2:	2364      	movs	r3, #100	@ 0x64
 80008a4:	4814      	ldr	r0, [pc, #80]	@ (80008f8 <date_time+0xe8>)
 80008a6:	f002 fca1 	bl	80031ec <HAL_UART_Transmit>
					HAL_UART_Transmit(&huart3, (uint8_t*)"\r\n", 2, 100);
 80008aa:	2364      	movs	r3, #100	@ 0x64
 80008ac:	2202      	movs	r2, #2
 80008ae:	4913      	ldr	r1, [pc, #76]	@ (80008fc <date_time+0xec>)
 80008b0:	4811      	ldr	r0, [pc, #68]	@ (80008f8 <date_time+0xe8>)
 80008b2:	f002 fc9b 	bl	80031ec <HAL_UART_Transmit>
					break;
 80008b6:	bf00      	nop
			}
		}
	}else{
		HAL_UART_Transmit(&huart3, (uint8_t*)"GPS info not found\r\n", 21, 100);
	}
}
 80008b8:	e00e      	b.n	80008d8 <date_time+0xc8>
				token = strtok(NULL, ",");
 80008ba:	490e      	ldr	r1, [pc, #56]	@ (80008f4 <date_time+0xe4>)
 80008bc:	2000      	movs	r0, #0
 80008be:	f005 fa07 	bl	8005cd0 <strtok>
 80008c2:	6178      	str	r0, [r7, #20]
			while(token != NULL){
 80008c4:	697b      	ldr	r3, [r7, #20]
 80008c6:	2b00      	cmp	r3, #0
 80008c8:	d1d0      	bne.n	800086c <date_time+0x5c>
}
 80008ca:	e005      	b.n	80008d8 <date_time+0xc8>
		HAL_UART_Transmit(&huart3, (uint8_t*)"GPS info not found\r\n", 21, 100);
 80008cc:	2364      	movs	r3, #100	@ 0x64
 80008ce:	2215      	movs	r2, #21
 80008d0:	490b      	ldr	r1, [pc, #44]	@ (8000900 <date_time+0xf0>)
 80008d2:	4809      	ldr	r0, [pc, #36]	@ (80008f8 <date_time+0xe8>)
 80008d4:	f002 fc8a 	bl	80031ec <HAL_UART_Transmit>
}
 80008d8:	bf00      	nop
 80008da:	3718      	adds	r7, #24
 80008dc:	46bd      	mov	sp, r7
 80008de:	bd80      	pop	{r7, pc}
 80008e0:	080077e0 	.word	0x080077e0
 80008e4:	080077e8 	.word	0x080077e8
 80008e8:	080077f4 	.word	0x080077f4
 80008ec:	08007804 	.word	0x08007804
 80008f0:	2000010c 	.word	0x2000010c
 80008f4:	08007810 	.word	0x08007810
 80008f8:	200002bc 	.word	0x200002bc
 80008fc:	08007814 	.word	0x08007814
 8000900:	08007818 	.word	0x08007818

08000904 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000904:	b580      	push	{r7, lr}
 8000906:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000908:	f000 fe62 	bl	80015d0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800090c:	f000 f834 	bl	8000978 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000910:	f000 f996 	bl	8000c40 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8000914:	f000 f8fc 	bl	8000b10 <MX_USART1_UART_Init>
  MX_I2C1_Init();
 8000918:	f000 f87a 	bl	8000a10 <MX_I2C1_Init>
  MX_I2C2_Init();
 800091c:	f000 f8b8 	bl	8000a90 <MX_I2C2_Init>
  MX_USART3_UART_Init();
 8000920:	f000 f942 	bl	8000ba8 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
  recieve_SMS();
 8000924:	f7ff fe4c 	bl	80005c0 <recieve_SMS>
//  mqtt_send();
//  mqtt_receive();
  date_time();
 8000928:	f7ff ff72 	bl	8000810 <date_time>
//  sleep();
  /* USER CODE END 2 */

  /* Initialize led */
  BSP_LED_Init(LED_GREEN);
 800092c:	2000      	movs	r0, #0
 800092e:	f000 fcbb 	bl	80012a8 <BSP_LED_Init>

  /* Initialize USER push-button, will be used to trigger an interrupt each time it's pressed.*/
  BSP_PB_Init(BUTTON_USER, BUTTON_MODE_EXTI);
 8000932:	2101      	movs	r1, #1
 8000934:	2000      	movs	r0, #0
 8000936:	f000 fced 	bl	8001314 <BSP_PB_Init>

  /* Initialize COM1 port (115200, 8 bits (7-bit data + 1 stop bit), no parity */
  BspCOMInit.BaudRate   = 115200;
 800093a:	4b0e      	ldr	r3, [pc, #56]	@ (8000974 <main+0x70>)
 800093c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000940:	601a      	str	r2, [r3, #0]
  BspCOMInit.WordLength = COM_WORDLENGTH_8B;
 8000942:	4b0c      	ldr	r3, [pc, #48]	@ (8000974 <main+0x70>)
 8000944:	2200      	movs	r2, #0
 8000946:	605a      	str	r2, [r3, #4]
  BspCOMInit.StopBits   = COM_STOPBITS_1;
 8000948:	4b0a      	ldr	r3, [pc, #40]	@ (8000974 <main+0x70>)
 800094a:	2200      	movs	r2, #0
 800094c:	811a      	strh	r2, [r3, #8]
  BspCOMInit.Parity     = COM_PARITY_NONE;
 800094e:	4b09      	ldr	r3, [pc, #36]	@ (8000974 <main+0x70>)
 8000950:	2200      	movs	r2, #0
 8000952:	815a      	strh	r2, [r3, #10]
  BspCOMInit.HwFlowCtl  = COM_HWCONTROL_NONE;
 8000954:	4b07      	ldr	r3, [pc, #28]	@ (8000974 <main+0x70>)
 8000956:	2200      	movs	r2, #0
 8000958:	819a      	strh	r2, [r3, #12]
  if (BSP_COM_Init(COM1, &BspCOMInit) != BSP_ERROR_NONE)
 800095a:	4906      	ldr	r1, [pc, #24]	@ (8000974 <main+0x70>)
 800095c:	2000      	movs	r0, #0
 800095e:	f000 fd65 	bl	800142c <BSP_COM_Init>
 8000962:	4603      	mov	r3, r0
 8000964:	2b00      	cmp	r3, #0
 8000966:	d002      	beq.n	800096e <main+0x6a>
  {
    Error_Handler();
 8000968:	f000 f9c0 	bl	8000cec <Error_Handler>
  }

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800096c:	bf00      	nop
 800096e:	bf00      	nop
 8000970:	e7fd      	b.n	800096e <main+0x6a>
 8000972:	bf00      	nop
 8000974:	20000170 	.word	0x20000170

08000978 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000978:	b580      	push	{r7, lr}
 800097a:	b094      	sub	sp, #80	@ 0x50
 800097c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800097e:	f107 0318 	add.w	r3, r7, #24
 8000982:	2238      	movs	r2, #56	@ 0x38
 8000984:	2100      	movs	r1, #0
 8000986:	4618      	mov	r0, r3
 8000988:	f005 f979 	bl	8005c7e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800098c:	1d3b      	adds	r3, r7, #4
 800098e:	2200      	movs	r2, #0
 8000990:	601a      	str	r2, [r3, #0]
 8000992:	605a      	str	r2, [r3, #4]
 8000994:	609a      	str	r2, [r3, #8]
 8000996:	60da      	str	r2, [r3, #12]
 8000998:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 800099a:	f44f 7000 	mov.w	r0, #512	@ 0x200
 800099e:	f001 fba5 	bl	80020ec <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80009a2:	2302      	movs	r3, #2
 80009a4:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80009a6:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80009aa:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80009ac:	2340      	movs	r3, #64	@ 0x40
 80009ae:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80009b0:	2302      	movs	r3, #2
 80009b2:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80009b4:	2302      	movs	r3, #2
 80009b6:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 80009b8:	2301      	movs	r3, #1
 80009ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 12;
 80009bc:	230c      	movs	r3, #12
 80009be:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80009c0:	2302      	movs	r3, #2
 80009c2:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV4;
 80009c4:	2304      	movs	r3, #4
 80009c6:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80009c8:	2302      	movs	r3, #2
 80009ca:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80009cc:	f107 0318 	add.w	r3, r7, #24
 80009d0:	4618      	mov	r0, r3
 80009d2:	f001 fc3f 	bl	8002254 <HAL_RCC_OscConfig>
 80009d6:	4603      	mov	r3, r0
 80009d8:	2b00      	cmp	r3, #0
 80009da:	d001      	beq.n	80009e0 <SystemClock_Config+0x68>
  {
    Error_Handler();
 80009dc:	f000 f986 	bl	8000cec <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80009e0:	230f      	movs	r3, #15
 80009e2:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80009e4:	2303      	movs	r3, #3
 80009e6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80009e8:	2300      	movs	r3, #0
 80009ea:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80009ec:	2300      	movs	r3, #0
 80009ee:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80009f0:	2300      	movs	r3, #0
 80009f2:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80009f4:	1d3b      	adds	r3, r7, #4
 80009f6:	2103      	movs	r1, #3
 80009f8:	4618      	mov	r0, r3
 80009fa:	f001 ff3d 	bl	8002878 <HAL_RCC_ClockConfig>
 80009fe:	4603      	mov	r3, r0
 8000a00:	2b00      	cmp	r3, #0
 8000a02:	d001      	beq.n	8000a08 <SystemClock_Config+0x90>
  {
    Error_Handler();
 8000a04:	f000 f972 	bl	8000cec <Error_Handler>
  }
}
 8000a08:	bf00      	nop
 8000a0a:	3750      	adds	r7, #80	@ 0x50
 8000a0c:	46bd      	mov	sp, r7
 8000a0e:	bd80      	pop	{r7, pc}

08000a10 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000a10:	b580      	push	{r7, lr}
 8000a12:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000a14:	4b1b      	ldr	r3, [pc, #108]	@ (8000a84 <MX_I2C1_Init+0x74>)
 8000a16:	4a1c      	ldr	r2, [pc, #112]	@ (8000a88 <MX_I2C1_Init+0x78>)
 8000a18:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x20B17DB6;
 8000a1a:	4b1a      	ldr	r3, [pc, #104]	@ (8000a84 <MX_I2C1_Init+0x74>)
 8000a1c:	4a1b      	ldr	r2, [pc, #108]	@ (8000a8c <MX_I2C1_Init+0x7c>)
 8000a1e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000a20:	4b18      	ldr	r3, [pc, #96]	@ (8000a84 <MX_I2C1_Init+0x74>)
 8000a22:	2200      	movs	r2, #0
 8000a24:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000a26:	4b17      	ldr	r3, [pc, #92]	@ (8000a84 <MX_I2C1_Init+0x74>)
 8000a28:	2201      	movs	r2, #1
 8000a2a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000a2c:	4b15      	ldr	r3, [pc, #84]	@ (8000a84 <MX_I2C1_Init+0x74>)
 8000a2e:	2200      	movs	r2, #0
 8000a30:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000a32:	4b14      	ldr	r3, [pc, #80]	@ (8000a84 <MX_I2C1_Init+0x74>)
 8000a34:	2200      	movs	r2, #0
 8000a36:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000a38:	4b12      	ldr	r3, [pc, #72]	@ (8000a84 <MX_I2C1_Init+0x74>)
 8000a3a:	2200      	movs	r2, #0
 8000a3c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000a3e:	4b11      	ldr	r3, [pc, #68]	@ (8000a84 <MX_I2C1_Init+0x74>)
 8000a40:	2200      	movs	r2, #0
 8000a42:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000a44:	4b0f      	ldr	r3, [pc, #60]	@ (8000a84 <MX_I2C1_Init+0x74>)
 8000a46:	2200      	movs	r2, #0
 8000a48:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000a4a:	480e      	ldr	r0, [pc, #56]	@ (8000a84 <MX_I2C1_Init+0x74>)
 8000a4c:	f001 fa1c 	bl	8001e88 <HAL_I2C_Init>
 8000a50:	4603      	mov	r3, r0
 8000a52:	2b00      	cmp	r3, #0
 8000a54:	d001      	beq.n	8000a5a <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000a56:	f000 f949 	bl	8000cec <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000a5a:	2100      	movs	r1, #0
 8000a5c:	4809      	ldr	r0, [pc, #36]	@ (8000a84 <MX_I2C1_Init+0x74>)
 8000a5e:	f001 faae 	bl	8001fbe <HAL_I2CEx_ConfigAnalogFilter>
 8000a62:	4603      	mov	r3, r0
 8000a64:	2b00      	cmp	r3, #0
 8000a66:	d001      	beq.n	8000a6c <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000a68:	f000 f940 	bl	8000cec <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000a6c:	2100      	movs	r1, #0
 8000a6e:	4805      	ldr	r0, [pc, #20]	@ (8000a84 <MX_I2C1_Init+0x74>)
 8000a70:	f001 faf0 	bl	8002054 <HAL_I2CEx_ConfigDigitalFilter>
 8000a74:	4603      	mov	r3, r0
 8000a76:	2b00      	cmp	r3, #0
 8000a78:	d001      	beq.n	8000a7e <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000a7a:	f000 f937 	bl	8000cec <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000a7e:	bf00      	nop
 8000a80:	bd80      	pop	{r7, pc}
 8000a82:	bf00      	nop
 8000a84:	20000180 	.word	0x20000180
 8000a88:	40005400 	.word	0x40005400
 8000a8c:	20b17db6 	.word	0x20b17db6

08000a90 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000a90:	b580      	push	{r7, lr}
 8000a92:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000a94:	4b1b      	ldr	r3, [pc, #108]	@ (8000b04 <MX_I2C2_Init+0x74>)
 8000a96:	4a1c      	ldr	r2, [pc, #112]	@ (8000b08 <MX_I2C2_Init+0x78>)
 8000a98:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x20B17DB6;
 8000a9a:	4b1a      	ldr	r3, [pc, #104]	@ (8000b04 <MX_I2C2_Init+0x74>)
 8000a9c:	4a1b      	ldr	r2, [pc, #108]	@ (8000b0c <MX_I2C2_Init+0x7c>)
 8000a9e:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8000aa0:	4b18      	ldr	r3, [pc, #96]	@ (8000b04 <MX_I2C2_Init+0x74>)
 8000aa2:	2200      	movs	r2, #0
 8000aa4:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000aa6:	4b17      	ldr	r3, [pc, #92]	@ (8000b04 <MX_I2C2_Init+0x74>)
 8000aa8:	2201      	movs	r2, #1
 8000aaa:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000aac:	4b15      	ldr	r3, [pc, #84]	@ (8000b04 <MX_I2C2_Init+0x74>)
 8000aae:	2200      	movs	r2, #0
 8000ab0:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8000ab2:	4b14      	ldr	r3, [pc, #80]	@ (8000b04 <MX_I2C2_Init+0x74>)
 8000ab4:	2200      	movs	r2, #0
 8000ab6:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000ab8:	4b12      	ldr	r3, [pc, #72]	@ (8000b04 <MX_I2C2_Init+0x74>)
 8000aba:	2200      	movs	r2, #0
 8000abc:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000abe:	4b11      	ldr	r3, [pc, #68]	@ (8000b04 <MX_I2C2_Init+0x74>)
 8000ac0:	2200      	movs	r2, #0
 8000ac2:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000ac4:	4b0f      	ldr	r3, [pc, #60]	@ (8000b04 <MX_I2C2_Init+0x74>)
 8000ac6:	2200      	movs	r2, #0
 8000ac8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000aca:	480e      	ldr	r0, [pc, #56]	@ (8000b04 <MX_I2C2_Init+0x74>)
 8000acc:	f001 f9dc 	bl	8001e88 <HAL_I2C_Init>
 8000ad0:	4603      	mov	r3, r0
 8000ad2:	2b00      	cmp	r3, #0
 8000ad4:	d001      	beq.n	8000ada <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8000ad6:	f000 f909 	bl	8000cec <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000ada:	2100      	movs	r1, #0
 8000adc:	4809      	ldr	r0, [pc, #36]	@ (8000b04 <MX_I2C2_Init+0x74>)
 8000ade:	f001 fa6e 	bl	8001fbe <HAL_I2CEx_ConfigAnalogFilter>
 8000ae2:	4603      	mov	r3, r0
 8000ae4:	2b00      	cmp	r3, #0
 8000ae6:	d001      	beq.n	8000aec <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8000ae8:	f000 f900 	bl	8000cec <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8000aec:	2100      	movs	r1, #0
 8000aee:	4805      	ldr	r0, [pc, #20]	@ (8000b04 <MX_I2C2_Init+0x74>)
 8000af0:	f001 fab0 	bl	8002054 <HAL_I2CEx_ConfigDigitalFilter>
 8000af4:	4603      	mov	r3, r0
 8000af6:	2b00      	cmp	r3, #0
 8000af8:	d001      	beq.n	8000afe <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8000afa:	f000 f8f7 	bl	8000cec <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000afe:	bf00      	nop
 8000b00:	bd80      	pop	{r7, pc}
 8000b02:	bf00      	nop
 8000b04:	200001d4 	.word	0x200001d4
 8000b08:	40005800 	.word	0x40005800
 8000b0c:	20b17db6 	.word	0x20b17db6

08000b10 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000b10:	b580      	push	{r7, lr}
 8000b12:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000b14:	4b22      	ldr	r3, [pc, #136]	@ (8000ba0 <MX_USART1_UART_Init+0x90>)
 8000b16:	4a23      	ldr	r2, [pc, #140]	@ (8000ba4 <MX_USART1_UART_Init+0x94>)
 8000b18:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000b1a:	4b21      	ldr	r3, [pc, #132]	@ (8000ba0 <MX_USART1_UART_Init+0x90>)
 8000b1c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000b20:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000b22:	4b1f      	ldr	r3, [pc, #124]	@ (8000ba0 <MX_USART1_UART_Init+0x90>)
 8000b24:	2200      	movs	r2, #0
 8000b26:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000b28:	4b1d      	ldr	r3, [pc, #116]	@ (8000ba0 <MX_USART1_UART_Init+0x90>)
 8000b2a:	2200      	movs	r2, #0
 8000b2c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000b2e:	4b1c      	ldr	r3, [pc, #112]	@ (8000ba0 <MX_USART1_UART_Init+0x90>)
 8000b30:	2200      	movs	r2, #0
 8000b32:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000b34:	4b1a      	ldr	r3, [pc, #104]	@ (8000ba0 <MX_USART1_UART_Init+0x90>)
 8000b36:	220c      	movs	r2, #12
 8000b38:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b3a:	4b19      	ldr	r3, [pc, #100]	@ (8000ba0 <MX_USART1_UART_Init+0x90>)
 8000b3c:	2200      	movs	r2, #0
 8000b3e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b40:	4b17      	ldr	r3, [pc, #92]	@ (8000ba0 <MX_USART1_UART_Init+0x90>)
 8000b42:	2200      	movs	r2, #0
 8000b44:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000b46:	4b16      	ldr	r3, [pc, #88]	@ (8000ba0 <MX_USART1_UART_Init+0x90>)
 8000b48:	2200      	movs	r2, #0
 8000b4a:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000b4c:	4b14      	ldr	r3, [pc, #80]	@ (8000ba0 <MX_USART1_UART_Init+0x90>)
 8000b4e:	2200      	movs	r2, #0
 8000b50:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000b52:	4b13      	ldr	r3, [pc, #76]	@ (8000ba0 <MX_USART1_UART_Init+0x90>)
 8000b54:	2200      	movs	r2, #0
 8000b56:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000b58:	4811      	ldr	r0, [pc, #68]	@ (8000ba0 <MX_USART1_UART_Init+0x90>)
 8000b5a:	f002 faf7 	bl	800314c <HAL_UART_Init>
 8000b5e:	4603      	mov	r3, r0
 8000b60:	2b00      	cmp	r3, #0
 8000b62:	d001      	beq.n	8000b68 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8000b64:	f000 f8c2 	bl	8000cec <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000b68:	2100      	movs	r1, #0
 8000b6a:	480d      	ldr	r0, [pc, #52]	@ (8000ba0 <MX_USART1_UART_Init+0x90>)
 8000b6c:	f004 fe6b 	bl	8005846 <HAL_UARTEx_SetTxFifoThreshold>
 8000b70:	4603      	mov	r3, r0
 8000b72:	2b00      	cmp	r3, #0
 8000b74:	d001      	beq.n	8000b7a <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8000b76:	f000 f8b9 	bl	8000cec <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000b7a:	2100      	movs	r1, #0
 8000b7c:	4808      	ldr	r0, [pc, #32]	@ (8000ba0 <MX_USART1_UART_Init+0x90>)
 8000b7e:	f004 fea0 	bl	80058c2 <HAL_UARTEx_SetRxFifoThreshold>
 8000b82:	4603      	mov	r3, r0
 8000b84:	2b00      	cmp	r3, #0
 8000b86:	d001      	beq.n	8000b8c <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8000b88:	f000 f8b0 	bl	8000cec <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8000b8c:	4804      	ldr	r0, [pc, #16]	@ (8000ba0 <MX_USART1_UART_Init+0x90>)
 8000b8e:	f004 fe21 	bl	80057d4 <HAL_UARTEx_DisableFifoMode>
 8000b92:	4603      	mov	r3, r0
 8000b94:	2b00      	cmp	r3, #0
 8000b96:	d001      	beq.n	8000b9c <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8000b98:	f000 f8a8 	bl	8000cec <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000b9c:	bf00      	nop
 8000b9e:	bd80      	pop	{r7, pc}
 8000ba0:	20000228 	.word	0x20000228
 8000ba4:	40013800 	.word	0x40013800

08000ba8 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000bac:	4b22      	ldr	r3, [pc, #136]	@ (8000c38 <MX_USART3_UART_Init+0x90>)
 8000bae:	4a23      	ldr	r2, [pc, #140]	@ (8000c3c <MX_USART3_UART_Init+0x94>)
 8000bb0:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000bb2:	4b21      	ldr	r3, [pc, #132]	@ (8000c38 <MX_USART3_UART_Init+0x90>)
 8000bb4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000bb8:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000bba:	4b1f      	ldr	r3, [pc, #124]	@ (8000c38 <MX_USART3_UART_Init+0x90>)
 8000bbc:	2200      	movs	r2, #0
 8000bbe:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000bc0:	4b1d      	ldr	r3, [pc, #116]	@ (8000c38 <MX_USART3_UART_Init+0x90>)
 8000bc2:	2200      	movs	r2, #0
 8000bc4:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000bc6:	4b1c      	ldr	r3, [pc, #112]	@ (8000c38 <MX_USART3_UART_Init+0x90>)
 8000bc8:	2200      	movs	r2, #0
 8000bca:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000bcc:	4b1a      	ldr	r3, [pc, #104]	@ (8000c38 <MX_USART3_UART_Init+0x90>)
 8000bce:	220c      	movs	r2, #12
 8000bd0:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000bd2:	4b19      	ldr	r3, [pc, #100]	@ (8000c38 <MX_USART3_UART_Init+0x90>)
 8000bd4:	2200      	movs	r2, #0
 8000bd6:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000bd8:	4b17      	ldr	r3, [pc, #92]	@ (8000c38 <MX_USART3_UART_Init+0x90>)
 8000bda:	2200      	movs	r2, #0
 8000bdc:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000bde:	4b16      	ldr	r3, [pc, #88]	@ (8000c38 <MX_USART3_UART_Init+0x90>)
 8000be0:	2200      	movs	r2, #0
 8000be2:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000be4:	4b14      	ldr	r3, [pc, #80]	@ (8000c38 <MX_USART3_UART_Init+0x90>)
 8000be6:	2200      	movs	r2, #0
 8000be8:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000bea:	4b13      	ldr	r3, [pc, #76]	@ (8000c38 <MX_USART3_UART_Init+0x90>)
 8000bec:	2200      	movs	r2, #0
 8000bee:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000bf0:	4811      	ldr	r0, [pc, #68]	@ (8000c38 <MX_USART3_UART_Init+0x90>)
 8000bf2:	f002 faab 	bl	800314c <HAL_UART_Init>
 8000bf6:	4603      	mov	r3, r0
 8000bf8:	2b00      	cmp	r3, #0
 8000bfa:	d001      	beq.n	8000c00 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8000bfc:	f000 f876 	bl	8000cec <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000c00:	2100      	movs	r1, #0
 8000c02:	480d      	ldr	r0, [pc, #52]	@ (8000c38 <MX_USART3_UART_Init+0x90>)
 8000c04:	f004 fe1f 	bl	8005846 <HAL_UARTEx_SetTxFifoThreshold>
 8000c08:	4603      	mov	r3, r0
 8000c0a:	2b00      	cmp	r3, #0
 8000c0c:	d001      	beq.n	8000c12 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8000c0e:	f000 f86d 	bl	8000cec <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000c12:	2100      	movs	r1, #0
 8000c14:	4808      	ldr	r0, [pc, #32]	@ (8000c38 <MX_USART3_UART_Init+0x90>)
 8000c16:	f004 fe54 	bl	80058c2 <HAL_UARTEx_SetRxFifoThreshold>
 8000c1a:	4603      	mov	r3, r0
 8000c1c:	2b00      	cmp	r3, #0
 8000c1e:	d001      	beq.n	8000c24 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8000c20:	f000 f864 	bl	8000cec <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000c24:	4804      	ldr	r0, [pc, #16]	@ (8000c38 <MX_USART3_UART_Init+0x90>)
 8000c26:	f004 fdd5 	bl	80057d4 <HAL_UARTEx_DisableFifoMode>
 8000c2a:	4603      	mov	r3, r0
 8000c2c:	2b00      	cmp	r3, #0
 8000c2e:	d001      	beq.n	8000c34 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8000c30:	f000 f85c 	bl	8000cec <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000c34:	bf00      	nop
 8000c36:	bd80      	pop	{r7, pc}
 8000c38:	200002bc 	.word	0x200002bc
 8000c3c:	40004800 	.word	0x40004800

08000c40 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000c40:	b580      	push	{r7, lr}
 8000c42:	b08a      	sub	sp, #40	@ 0x28
 8000c44:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c46:	f107 0314 	add.w	r3, r7, #20
 8000c4a:	2200      	movs	r2, #0
 8000c4c:	601a      	str	r2, [r3, #0]
 8000c4e:	605a      	str	r2, [r3, #4]
 8000c50:	609a      	str	r2, [r3, #8]
 8000c52:	60da      	str	r2, [r3, #12]
 8000c54:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c56:	4b24      	ldr	r3, [pc, #144]	@ (8000ce8 <MX_GPIO_Init+0xa8>)
 8000c58:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c5a:	4a23      	ldr	r2, [pc, #140]	@ (8000ce8 <MX_GPIO_Init+0xa8>)
 8000c5c:	f043 0304 	orr.w	r3, r3, #4
 8000c60:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000c62:	4b21      	ldr	r3, [pc, #132]	@ (8000ce8 <MX_GPIO_Init+0xa8>)
 8000c64:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c66:	f003 0304 	and.w	r3, r3, #4
 8000c6a:	613b      	str	r3, [r7, #16]
 8000c6c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000c6e:	4b1e      	ldr	r3, [pc, #120]	@ (8000ce8 <MX_GPIO_Init+0xa8>)
 8000c70:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c72:	4a1d      	ldr	r2, [pc, #116]	@ (8000ce8 <MX_GPIO_Init+0xa8>)
 8000c74:	f043 0320 	orr.w	r3, r3, #32
 8000c78:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000c7a:	4b1b      	ldr	r3, [pc, #108]	@ (8000ce8 <MX_GPIO_Init+0xa8>)
 8000c7c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c7e:	f003 0320 	and.w	r3, r3, #32
 8000c82:	60fb      	str	r3, [r7, #12]
 8000c84:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c86:	4b18      	ldr	r3, [pc, #96]	@ (8000ce8 <MX_GPIO_Init+0xa8>)
 8000c88:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c8a:	4a17      	ldr	r2, [pc, #92]	@ (8000ce8 <MX_GPIO_Init+0xa8>)
 8000c8c:	f043 0301 	orr.w	r3, r3, #1
 8000c90:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000c92:	4b15      	ldr	r3, [pc, #84]	@ (8000ce8 <MX_GPIO_Init+0xa8>)
 8000c94:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c96:	f003 0301 	and.w	r3, r3, #1
 8000c9a:	60bb      	str	r3, [r7, #8]
 8000c9c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c9e:	4b12      	ldr	r3, [pc, #72]	@ (8000ce8 <MX_GPIO_Init+0xa8>)
 8000ca0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ca2:	4a11      	ldr	r2, [pc, #68]	@ (8000ce8 <MX_GPIO_Init+0xa8>)
 8000ca4:	f043 0302 	orr.w	r3, r3, #2
 8000ca8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000caa:	4b0f      	ldr	r3, [pc, #60]	@ (8000ce8 <MX_GPIO_Init+0xa8>)
 8000cac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000cae:	f003 0302 	and.w	r3, r3, #2
 8000cb2:	607b      	str	r3, [r7, #4]
 8000cb4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_RESET);
 8000cb6:	2200      	movs	r2, #0
 8000cb8:	2101      	movs	r1, #1
 8000cba:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000cbe:	f001 f8cb 	bl	8001e58 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000cc2:	2301      	movs	r3, #1
 8000cc4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cc6:	2301      	movs	r3, #1
 8000cc8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cca:	2300      	movs	r3, #0
 8000ccc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cce:	2300      	movs	r3, #0
 8000cd0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cd2:	f107 0314 	add.w	r3, r7, #20
 8000cd6:	4619      	mov	r1, r3
 8000cd8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000cdc:	f000 ff3a 	bl	8001b54 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000ce0:	bf00      	nop
 8000ce2:	3728      	adds	r7, #40	@ 0x28
 8000ce4:	46bd      	mov	sp, r7
 8000ce6:	bd80      	pop	{r7, pc}
 8000ce8:	40021000 	.word	0x40021000

08000cec <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000cec:	b480      	push	{r7}
 8000cee:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000cf0:	b672      	cpsid	i
}
 8000cf2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000cf4:	bf00      	nop
 8000cf6:	e7fd      	b.n	8000cf4 <Error_Handler+0x8>

08000cf8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000cf8:	b580      	push	{r7, lr}
 8000cfa:	b082      	sub	sp, #8
 8000cfc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000cfe:	4b0f      	ldr	r3, [pc, #60]	@ (8000d3c <HAL_MspInit+0x44>)
 8000d00:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000d02:	4a0e      	ldr	r2, [pc, #56]	@ (8000d3c <HAL_MspInit+0x44>)
 8000d04:	f043 0301 	orr.w	r3, r3, #1
 8000d08:	6613      	str	r3, [r2, #96]	@ 0x60
 8000d0a:	4b0c      	ldr	r3, [pc, #48]	@ (8000d3c <HAL_MspInit+0x44>)
 8000d0c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000d0e:	f003 0301 	and.w	r3, r3, #1
 8000d12:	607b      	str	r3, [r7, #4]
 8000d14:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d16:	4b09      	ldr	r3, [pc, #36]	@ (8000d3c <HAL_MspInit+0x44>)
 8000d18:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000d1a:	4a08      	ldr	r2, [pc, #32]	@ (8000d3c <HAL_MspInit+0x44>)
 8000d1c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000d20:	6593      	str	r3, [r2, #88]	@ 0x58
 8000d22:	4b06      	ldr	r3, [pc, #24]	@ (8000d3c <HAL_MspInit+0x44>)
 8000d24:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000d26:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000d2a:	603b      	str	r3, [r7, #0]
 8000d2c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8000d2e:	f001 fa81 	bl	8002234 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d32:	bf00      	nop
 8000d34:	3708      	adds	r7, #8
 8000d36:	46bd      	mov	sp, r7
 8000d38:	bd80      	pop	{r7, pc}
 8000d3a:	bf00      	nop
 8000d3c:	40021000 	.word	0x40021000

08000d40 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000d40:	b580      	push	{r7, lr}
 8000d42:	b0a2      	sub	sp, #136	@ 0x88
 8000d44:	af00      	add	r7, sp, #0
 8000d46:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d48:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 8000d4c:	2200      	movs	r2, #0
 8000d4e:	601a      	str	r2, [r3, #0]
 8000d50:	605a      	str	r2, [r3, #4]
 8000d52:	609a      	str	r2, [r3, #8]
 8000d54:	60da      	str	r2, [r3, #12]
 8000d56:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000d58:	f107 0320 	add.w	r3, r7, #32
 8000d5c:	2254      	movs	r2, #84	@ 0x54
 8000d5e:	2100      	movs	r1, #0
 8000d60:	4618      	mov	r0, r3
 8000d62:	f004 ff8c 	bl	8005c7e <memset>
  if(hi2c->Instance==I2C1)
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	681b      	ldr	r3, [r3, #0]
 8000d6a:	4a4f      	ldr	r2, [pc, #316]	@ (8000ea8 <HAL_I2C_MspInit+0x168>)
 8000d6c:	4293      	cmp	r3, r2
 8000d6e:	d158      	bne.n	8000e22 <HAL_I2C_MspInit+0xe2>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000d70:	2340      	movs	r3, #64	@ 0x40
 8000d72:	623b      	str	r3, [r7, #32]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000d74:	2300      	movs	r3, #0
 8000d76:	63fb      	str	r3, [r7, #60]	@ 0x3c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000d78:	f107 0320 	add.w	r3, r7, #32
 8000d7c:	4618      	mov	r0, r3
 8000d7e:	f001 ff97 	bl	8002cb0 <HAL_RCCEx_PeriphCLKConfig>
 8000d82:	4603      	mov	r3, r0
 8000d84:	2b00      	cmp	r3, #0
 8000d86:	d001      	beq.n	8000d8c <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8000d88:	f7ff ffb0 	bl	8000cec <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d8c:	4b47      	ldr	r3, [pc, #284]	@ (8000eac <HAL_I2C_MspInit+0x16c>)
 8000d8e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d90:	4a46      	ldr	r2, [pc, #280]	@ (8000eac <HAL_I2C_MspInit+0x16c>)
 8000d92:	f043 0301 	orr.w	r3, r3, #1
 8000d96:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000d98:	4b44      	ldr	r3, [pc, #272]	@ (8000eac <HAL_I2C_MspInit+0x16c>)
 8000d9a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d9c:	f003 0301 	and.w	r3, r3, #1
 8000da0:	61fb      	str	r3, [r7, #28]
 8000da2:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000da4:	4b41      	ldr	r3, [pc, #260]	@ (8000eac <HAL_I2C_MspInit+0x16c>)
 8000da6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000da8:	4a40      	ldr	r2, [pc, #256]	@ (8000eac <HAL_I2C_MspInit+0x16c>)
 8000daa:	f043 0302 	orr.w	r3, r3, #2
 8000dae:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000db0:	4b3e      	ldr	r3, [pc, #248]	@ (8000eac <HAL_I2C_MspInit+0x16c>)
 8000db2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000db4:	f003 0302 	and.w	r3, r3, #2
 8000db8:	61bb      	str	r3, [r7, #24]
 8000dba:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PA15     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8000dbc:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000dc0:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000dc2:	2312      	movs	r3, #18
 8000dc4:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dc6:	2300      	movs	r3, #0
 8000dc8:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dca:	2300      	movs	r3, #0
 8000dcc:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000dd0:	2304      	movs	r3, #4
 8000dd2:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000dd6:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 8000dda:	4619      	mov	r1, r3
 8000ddc:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000de0:	f000 feb8 	bl	8001b54 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000de4:	2380      	movs	r3, #128	@ 0x80
 8000de6:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000de8:	2312      	movs	r3, #18
 8000dea:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dec:	2300      	movs	r3, #0
 8000dee:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000df0:	2300      	movs	r3, #0
 8000df2:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000df6:	2304      	movs	r3, #4
 8000df8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000dfc:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 8000e00:	4619      	mov	r1, r3
 8000e02:	482b      	ldr	r0, [pc, #172]	@ (8000eb0 <HAL_I2C_MspInit+0x170>)
 8000e04:	f000 fea6 	bl	8001b54 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000e08:	4b28      	ldr	r3, [pc, #160]	@ (8000eac <HAL_I2C_MspInit+0x16c>)
 8000e0a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000e0c:	4a27      	ldr	r2, [pc, #156]	@ (8000eac <HAL_I2C_MspInit+0x16c>)
 8000e0e:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000e12:	6593      	str	r3, [r2, #88]	@ 0x58
 8000e14:	4b25      	ldr	r3, [pc, #148]	@ (8000eac <HAL_I2C_MspInit+0x16c>)
 8000e16:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000e18:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000e1c:	617b      	str	r3, [r7, #20]
 8000e1e:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8000e20:	e03e      	b.n	8000ea0 <HAL_I2C_MspInit+0x160>
  else if(hi2c->Instance==I2C2)
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	681b      	ldr	r3, [r3, #0]
 8000e26:	4a23      	ldr	r2, [pc, #140]	@ (8000eb4 <HAL_I2C_MspInit+0x174>)
 8000e28:	4293      	cmp	r3, r2
 8000e2a:	d139      	bne.n	8000ea0 <HAL_I2C_MspInit+0x160>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8000e2c:	2380      	movs	r3, #128	@ 0x80
 8000e2e:	623b      	str	r3, [r7, #32]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8000e30:	2300      	movs	r3, #0
 8000e32:	643b      	str	r3, [r7, #64]	@ 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000e34:	f107 0320 	add.w	r3, r7, #32
 8000e38:	4618      	mov	r0, r3
 8000e3a:	f001 ff39 	bl	8002cb0 <HAL_RCCEx_PeriphCLKConfig>
 8000e3e:	4603      	mov	r3, r0
 8000e40:	2b00      	cmp	r3, #0
 8000e42:	d001      	beq.n	8000e48 <HAL_I2C_MspInit+0x108>
      Error_Handler();
 8000e44:	f7ff ff52 	bl	8000cec <Error_Handler>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e48:	4b18      	ldr	r3, [pc, #96]	@ (8000eac <HAL_I2C_MspInit+0x16c>)
 8000e4a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e4c:	4a17      	ldr	r2, [pc, #92]	@ (8000eac <HAL_I2C_MspInit+0x16c>)
 8000e4e:	f043 0301 	orr.w	r3, r3, #1
 8000e52:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000e54:	4b15      	ldr	r3, [pc, #84]	@ (8000eac <HAL_I2C_MspInit+0x16c>)
 8000e56:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e58:	f003 0301 	and.w	r3, r3, #1
 8000e5c:	613b      	str	r3, [r7, #16]
 8000e5e:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000e60:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000e64:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000e66:	2312      	movs	r3, #18
 8000e68:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e6a:	2300      	movs	r3, #0
 8000e6c:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e6e:	2300      	movs	r3, #0
 8000e70:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8000e74:	2304      	movs	r3, #4
 8000e76:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e7a:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 8000e7e:	4619      	mov	r1, r3
 8000e80:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000e84:	f000 fe66 	bl	8001b54 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8000e88:	4b08      	ldr	r3, [pc, #32]	@ (8000eac <HAL_I2C_MspInit+0x16c>)
 8000e8a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000e8c:	4a07      	ldr	r2, [pc, #28]	@ (8000eac <HAL_I2C_MspInit+0x16c>)
 8000e8e:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000e92:	6593      	str	r3, [r2, #88]	@ 0x58
 8000e94:	4b05      	ldr	r3, [pc, #20]	@ (8000eac <HAL_I2C_MspInit+0x16c>)
 8000e96:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000e98:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000e9c:	60fb      	str	r3, [r7, #12]
 8000e9e:	68fb      	ldr	r3, [r7, #12]
}
 8000ea0:	bf00      	nop
 8000ea2:	3788      	adds	r7, #136	@ 0x88
 8000ea4:	46bd      	mov	sp, r7
 8000ea6:	bd80      	pop	{r7, pc}
 8000ea8:	40005400 	.word	0x40005400
 8000eac:	40021000 	.word	0x40021000
 8000eb0:	48000400 	.word	0x48000400
 8000eb4:	40005800 	.word	0x40005800

08000eb8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000eb8:	b580      	push	{r7, lr}
 8000eba:	b0a0      	sub	sp, #128	@ 0x80
 8000ebc:	af00      	add	r7, sp, #0
 8000ebe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ec0:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8000ec4:	2200      	movs	r2, #0
 8000ec6:	601a      	str	r2, [r3, #0]
 8000ec8:	605a      	str	r2, [r3, #4]
 8000eca:	609a      	str	r2, [r3, #8]
 8000ecc:	60da      	str	r2, [r3, #12]
 8000ece:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000ed0:	f107 0318 	add.w	r3, r7, #24
 8000ed4:	2254      	movs	r2, #84	@ 0x54
 8000ed6:	2100      	movs	r1, #0
 8000ed8:	4618      	mov	r0, r3
 8000eda:	f004 fed0 	bl	8005c7e <memset>
  if(huart->Instance==USART1)
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	681b      	ldr	r3, [r3, #0]
 8000ee2:	4a45      	ldr	r2, [pc, #276]	@ (8000ff8 <HAL_UART_MspInit+0x140>)
 8000ee4:	4293      	cmp	r3, r2
 8000ee6:	d13e      	bne.n	8000f66 <HAL_UART_MspInit+0xae>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000ee8:	2301      	movs	r3, #1
 8000eea:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000eec:	2300      	movs	r3, #0
 8000eee:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000ef0:	f107 0318 	add.w	r3, r7, #24
 8000ef4:	4618      	mov	r0, r3
 8000ef6:	f001 fedb 	bl	8002cb0 <HAL_RCCEx_PeriphCLKConfig>
 8000efa:	4603      	mov	r3, r0
 8000efc:	2b00      	cmp	r3, #0
 8000efe:	d001      	beq.n	8000f04 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000f00:	f7ff fef4 	bl	8000cec <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000f04:	4b3d      	ldr	r3, [pc, #244]	@ (8000ffc <HAL_UART_MspInit+0x144>)
 8000f06:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000f08:	4a3c      	ldr	r2, [pc, #240]	@ (8000ffc <HAL_UART_MspInit+0x144>)
 8000f0a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000f0e:	6613      	str	r3, [r2, #96]	@ 0x60
 8000f10:	4b3a      	ldr	r3, [pc, #232]	@ (8000ffc <HAL_UART_MspInit+0x144>)
 8000f12:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000f14:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000f18:	617b      	str	r3, [r7, #20]
 8000f1a:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f1c:	4b37      	ldr	r3, [pc, #220]	@ (8000ffc <HAL_UART_MspInit+0x144>)
 8000f1e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f20:	4a36      	ldr	r2, [pc, #216]	@ (8000ffc <HAL_UART_MspInit+0x144>)
 8000f22:	f043 0304 	orr.w	r3, r3, #4
 8000f26:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000f28:	4b34      	ldr	r3, [pc, #208]	@ (8000ffc <HAL_UART_MspInit+0x144>)
 8000f2a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f2c:	f003 0304 	and.w	r3, r3, #4
 8000f30:	613b      	str	r3, [r7, #16]
 8000f32:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PC4     ------> USART1_TX
    PC5     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8000f34:	2330      	movs	r3, #48	@ 0x30
 8000f36:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f38:	2302      	movs	r3, #2
 8000f3a:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f3c:	2300      	movs	r3, #0
 8000f3e:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f40:	2300      	movs	r3, #0
 8000f42:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000f44:	2307      	movs	r3, #7
 8000f46:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f48:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8000f4c:	4619      	mov	r1, r3
 8000f4e:	482c      	ldr	r0, [pc, #176]	@ (8001000 <HAL_UART_MspInit+0x148>)
 8000f50:	f000 fe00 	bl	8001b54 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000f54:	2200      	movs	r2, #0
 8000f56:	2100      	movs	r1, #0
 8000f58:	2025      	movs	r0, #37	@ 0x25
 8000f5a:	f000 fca6 	bl	80018aa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000f5e:	2025      	movs	r0, #37	@ 0x25
 8000f60:	f000 fcbd 	bl	80018de <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000f64:	e043      	b.n	8000fee <HAL_UART_MspInit+0x136>
  else if(huart->Instance==USART3)
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	681b      	ldr	r3, [r3, #0]
 8000f6a:	4a26      	ldr	r2, [pc, #152]	@ (8001004 <HAL_UART_MspInit+0x14c>)
 8000f6c:	4293      	cmp	r3, r2
 8000f6e:	d13e      	bne.n	8000fee <HAL_UART_MspInit+0x136>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000f70:	2304      	movs	r3, #4
 8000f72:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8000f74:	2300      	movs	r3, #0
 8000f76:	627b      	str	r3, [r7, #36]	@ 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000f78:	f107 0318 	add.w	r3, r7, #24
 8000f7c:	4618      	mov	r0, r3
 8000f7e:	f001 fe97 	bl	8002cb0 <HAL_RCCEx_PeriphCLKConfig>
 8000f82:	4603      	mov	r3, r0
 8000f84:	2b00      	cmp	r3, #0
 8000f86:	d001      	beq.n	8000f8c <HAL_UART_MspInit+0xd4>
      Error_Handler();
 8000f88:	f7ff feb0 	bl	8000cec <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8000f8c:	4b1b      	ldr	r3, [pc, #108]	@ (8000ffc <HAL_UART_MspInit+0x144>)
 8000f8e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000f90:	4a1a      	ldr	r2, [pc, #104]	@ (8000ffc <HAL_UART_MspInit+0x144>)
 8000f92:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000f96:	6593      	str	r3, [r2, #88]	@ 0x58
 8000f98:	4b18      	ldr	r3, [pc, #96]	@ (8000ffc <HAL_UART_MspInit+0x144>)
 8000f9a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000f9c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000fa0:	60fb      	str	r3, [r7, #12]
 8000fa2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fa4:	4b15      	ldr	r3, [pc, #84]	@ (8000ffc <HAL_UART_MspInit+0x144>)
 8000fa6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000fa8:	4a14      	ldr	r2, [pc, #80]	@ (8000ffc <HAL_UART_MspInit+0x144>)
 8000faa:	f043 0302 	orr.w	r3, r3, #2
 8000fae:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000fb0:	4b12      	ldr	r3, [pc, #72]	@ (8000ffc <HAL_UART_MspInit+0x144>)
 8000fb2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000fb4:	f003 0302 	and.w	r3, r3, #2
 8000fb8:	60bb      	str	r3, [r7, #8]
 8000fba:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8000fbc:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8000fc0:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fc2:	2302      	movs	r3, #2
 8000fc4:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fc6:	2300      	movs	r3, #0
 8000fc8:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fca:	2300      	movs	r3, #0
 8000fcc:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000fce:	2307      	movs	r3, #7
 8000fd0:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000fd2:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8000fd6:	4619      	mov	r1, r3
 8000fd8:	480b      	ldr	r0, [pc, #44]	@ (8001008 <HAL_UART_MspInit+0x150>)
 8000fda:	f000 fdbb 	bl	8001b54 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8000fde:	2200      	movs	r2, #0
 8000fe0:	2100      	movs	r1, #0
 8000fe2:	2027      	movs	r0, #39	@ 0x27
 8000fe4:	f000 fc61 	bl	80018aa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8000fe8:	2027      	movs	r0, #39	@ 0x27
 8000fea:	f000 fc78 	bl	80018de <HAL_NVIC_EnableIRQ>
}
 8000fee:	bf00      	nop
 8000ff0:	3780      	adds	r7, #128	@ 0x80
 8000ff2:	46bd      	mov	sp, r7
 8000ff4:	bd80      	pop	{r7, pc}
 8000ff6:	bf00      	nop
 8000ff8:	40013800 	.word	0x40013800
 8000ffc:	40021000 	.word	0x40021000
 8001000:	48000800 	.word	0x48000800
 8001004:	40004800 	.word	0x40004800
 8001008:	48000400 	.word	0x48000400

0800100c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800100c:	b480      	push	{r7}
 800100e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001010:	bf00      	nop
 8001012:	e7fd      	b.n	8001010 <NMI_Handler+0x4>

08001014 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001014:	b480      	push	{r7}
 8001016:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001018:	bf00      	nop
 800101a:	e7fd      	b.n	8001018 <HardFault_Handler+0x4>

0800101c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800101c:	b480      	push	{r7}
 800101e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001020:	bf00      	nop
 8001022:	e7fd      	b.n	8001020 <MemManage_Handler+0x4>

08001024 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001024:	b480      	push	{r7}
 8001026:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001028:	bf00      	nop
 800102a:	e7fd      	b.n	8001028 <BusFault_Handler+0x4>

0800102c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800102c:	b480      	push	{r7}
 800102e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001030:	bf00      	nop
 8001032:	e7fd      	b.n	8001030 <UsageFault_Handler+0x4>

08001034 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001034:	b480      	push	{r7}
 8001036:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001038:	bf00      	nop
 800103a:	46bd      	mov	sp, r7
 800103c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001040:	4770      	bx	lr

08001042 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001042:	b480      	push	{r7}
 8001044:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001046:	bf00      	nop
 8001048:	46bd      	mov	sp, r7
 800104a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800104e:	4770      	bx	lr

08001050 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001050:	b480      	push	{r7}
 8001052:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001054:	bf00      	nop
 8001056:	46bd      	mov	sp, r7
 8001058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800105c:	4770      	bx	lr

0800105e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800105e:	b580      	push	{r7, lr}
 8001060:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001062:	f000 fb07 	bl	8001674 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001066:	bf00      	nop
 8001068:	bd80      	pop	{r7, pc}
	...

0800106c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 800106c:	b580      	push	{r7, lr}
 800106e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001070:	4802      	ldr	r0, [pc, #8]	@ (800107c <USART1_IRQHandler+0x10>)
 8001072:	f002 faf1 	bl	8003658 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001076:	bf00      	nop
 8001078:	bd80      	pop	{r7, pc}
 800107a:	bf00      	nop
 800107c:	20000228 	.word	0x20000228

08001080 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt / USART3 wake-up interrupt through EXTI line 28.
  */
void USART3_IRQHandler(void)
{
 8001080:	b580      	push	{r7, lr}
 8001082:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8001084:	4802      	ldr	r0, [pc, #8]	@ (8001090 <USART3_IRQHandler+0x10>)
 8001086:	f002 fae7 	bl	8003658 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 800108a:	bf00      	nop
 800108c:	bd80      	pop	{r7, pc}
 800108e:	bf00      	nop
 8001090:	200002bc 	.word	0x200002bc

08001094 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001094:	b580      	push	{r7, lr}
 8001096:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  BSP_PB_IRQHandler(BUTTON_USER);
 8001098:	2000      	movs	r0, #0
 800109a:	f000 f9a9 	bl	80013f0 <BSP_PB_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800109e:	bf00      	nop
 80010a0:	bd80      	pop	{r7, pc}

080010a2 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80010a2:	b480      	push	{r7}
 80010a4:	af00      	add	r7, sp, #0
  return 1;
 80010a6:	2301      	movs	r3, #1
}
 80010a8:	4618      	mov	r0, r3
 80010aa:	46bd      	mov	sp, r7
 80010ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b0:	4770      	bx	lr

080010b2 <_kill>:

int _kill(int pid, int sig)
{
 80010b2:	b580      	push	{r7, lr}
 80010b4:	b082      	sub	sp, #8
 80010b6:	af00      	add	r7, sp, #0
 80010b8:	6078      	str	r0, [r7, #4]
 80010ba:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80010bc:	f004 fec0 	bl	8005e40 <__errno>
 80010c0:	4603      	mov	r3, r0
 80010c2:	2216      	movs	r2, #22
 80010c4:	601a      	str	r2, [r3, #0]
  return -1;
 80010c6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80010ca:	4618      	mov	r0, r3
 80010cc:	3708      	adds	r7, #8
 80010ce:	46bd      	mov	sp, r7
 80010d0:	bd80      	pop	{r7, pc}

080010d2 <_exit>:

void _exit (int status)
{
 80010d2:	b580      	push	{r7, lr}
 80010d4:	b082      	sub	sp, #8
 80010d6:	af00      	add	r7, sp, #0
 80010d8:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80010da:	f04f 31ff 	mov.w	r1, #4294967295
 80010de:	6878      	ldr	r0, [r7, #4]
 80010e0:	f7ff ffe7 	bl	80010b2 <_kill>
  while (1) {}    /* Make sure we hang here */
 80010e4:	bf00      	nop
 80010e6:	e7fd      	b.n	80010e4 <_exit+0x12>

080010e8 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80010e8:	b580      	push	{r7, lr}
 80010ea:	b086      	sub	sp, #24
 80010ec:	af00      	add	r7, sp, #0
 80010ee:	60f8      	str	r0, [r7, #12]
 80010f0:	60b9      	str	r1, [r7, #8]
 80010f2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80010f4:	2300      	movs	r3, #0
 80010f6:	617b      	str	r3, [r7, #20]
 80010f8:	e00a      	b.n	8001110 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80010fa:	f3af 8000 	nop.w
 80010fe:	4601      	mov	r1, r0
 8001100:	68bb      	ldr	r3, [r7, #8]
 8001102:	1c5a      	adds	r2, r3, #1
 8001104:	60ba      	str	r2, [r7, #8]
 8001106:	b2ca      	uxtb	r2, r1
 8001108:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800110a:	697b      	ldr	r3, [r7, #20]
 800110c:	3301      	adds	r3, #1
 800110e:	617b      	str	r3, [r7, #20]
 8001110:	697a      	ldr	r2, [r7, #20]
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	429a      	cmp	r2, r3
 8001116:	dbf0      	blt.n	80010fa <_read+0x12>
  }

  return len;
 8001118:	687b      	ldr	r3, [r7, #4]
}
 800111a:	4618      	mov	r0, r3
 800111c:	3718      	adds	r7, #24
 800111e:	46bd      	mov	sp, r7
 8001120:	bd80      	pop	{r7, pc}

08001122 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001122:	b580      	push	{r7, lr}
 8001124:	b086      	sub	sp, #24
 8001126:	af00      	add	r7, sp, #0
 8001128:	60f8      	str	r0, [r7, #12]
 800112a:	60b9      	str	r1, [r7, #8]
 800112c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800112e:	2300      	movs	r3, #0
 8001130:	617b      	str	r3, [r7, #20]
 8001132:	e009      	b.n	8001148 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001134:	68bb      	ldr	r3, [r7, #8]
 8001136:	1c5a      	adds	r2, r3, #1
 8001138:	60ba      	str	r2, [r7, #8]
 800113a:	781b      	ldrb	r3, [r3, #0]
 800113c:	4618      	mov	r0, r3
 800113e:	f000 f9d7 	bl	80014f0 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001142:	697b      	ldr	r3, [r7, #20]
 8001144:	3301      	adds	r3, #1
 8001146:	617b      	str	r3, [r7, #20]
 8001148:	697a      	ldr	r2, [r7, #20]
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	429a      	cmp	r2, r3
 800114e:	dbf1      	blt.n	8001134 <_write+0x12>
  }
  return len;
 8001150:	687b      	ldr	r3, [r7, #4]
}
 8001152:	4618      	mov	r0, r3
 8001154:	3718      	adds	r7, #24
 8001156:	46bd      	mov	sp, r7
 8001158:	bd80      	pop	{r7, pc}

0800115a <_close>:

int _close(int file)
{
 800115a:	b480      	push	{r7}
 800115c:	b083      	sub	sp, #12
 800115e:	af00      	add	r7, sp, #0
 8001160:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001162:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001166:	4618      	mov	r0, r3
 8001168:	370c      	adds	r7, #12
 800116a:	46bd      	mov	sp, r7
 800116c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001170:	4770      	bx	lr

08001172 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001172:	b480      	push	{r7}
 8001174:	b083      	sub	sp, #12
 8001176:	af00      	add	r7, sp, #0
 8001178:	6078      	str	r0, [r7, #4]
 800117a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800117c:	683b      	ldr	r3, [r7, #0]
 800117e:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001182:	605a      	str	r2, [r3, #4]
  return 0;
 8001184:	2300      	movs	r3, #0
}
 8001186:	4618      	mov	r0, r3
 8001188:	370c      	adds	r7, #12
 800118a:	46bd      	mov	sp, r7
 800118c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001190:	4770      	bx	lr

08001192 <_isatty>:

int _isatty(int file)
{
 8001192:	b480      	push	{r7}
 8001194:	b083      	sub	sp, #12
 8001196:	af00      	add	r7, sp, #0
 8001198:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800119a:	2301      	movs	r3, #1
}
 800119c:	4618      	mov	r0, r3
 800119e:	370c      	adds	r7, #12
 80011a0:	46bd      	mov	sp, r7
 80011a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a6:	4770      	bx	lr

080011a8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80011a8:	b480      	push	{r7}
 80011aa:	b085      	sub	sp, #20
 80011ac:	af00      	add	r7, sp, #0
 80011ae:	60f8      	str	r0, [r7, #12]
 80011b0:	60b9      	str	r1, [r7, #8]
 80011b2:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80011b4:	2300      	movs	r3, #0
}
 80011b6:	4618      	mov	r0, r3
 80011b8:	3714      	adds	r7, #20
 80011ba:	46bd      	mov	sp, r7
 80011bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c0:	4770      	bx	lr
	...

080011c4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80011c4:	b580      	push	{r7, lr}
 80011c6:	b086      	sub	sp, #24
 80011c8:	af00      	add	r7, sp, #0
 80011ca:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80011cc:	4a14      	ldr	r2, [pc, #80]	@ (8001220 <_sbrk+0x5c>)
 80011ce:	4b15      	ldr	r3, [pc, #84]	@ (8001224 <_sbrk+0x60>)
 80011d0:	1ad3      	subs	r3, r2, r3
 80011d2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80011d4:	697b      	ldr	r3, [r7, #20]
 80011d6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80011d8:	4b13      	ldr	r3, [pc, #76]	@ (8001228 <_sbrk+0x64>)
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	2b00      	cmp	r3, #0
 80011de:	d102      	bne.n	80011e6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80011e0:	4b11      	ldr	r3, [pc, #68]	@ (8001228 <_sbrk+0x64>)
 80011e2:	4a12      	ldr	r2, [pc, #72]	@ (800122c <_sbrk+0x68>)
 80011e4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80011e6:	4b10      	ldr	r3, [pc, #64]	@ (8001228 <_sbrk+0x64>)
 80011e8:	681a      	ldr	r2, [r3, #0]
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	4413      	add	r3, r2
 80011ee:	693a      	ldr	r2, [r7, #16]
 80011f0:	429a      	cmp	r2, r3
 80011f2:	d207      	bcs.n	8001204 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80011f4:	f004 fe24 	bl	8005e40 <__errno>
 80011f8:	4603      	mov	r3, r0
 80011fa:	220c      	movs	r2, #12
 80011fc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80011fe:	f04f 33ff 	mov.w	r3, #4294967295
 8001202:	e009      	b.n	8001218 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001204:	4b08      	ldr	r3, [pc, #32]	@ (8001228 <_sbrk+0x64>)
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800120a:	4b07      	ldr	r3, [pc, #28]	@ (8001228 <_sbrk+0x64>)
 800120c:	681a      	ldr	r2, [r3, #0]
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	4413      	add	r3, r2
 8001212:	4a05      	ldr	r2, [pc, #20]	@ (8001228 <_sbrk+0x64>)
 8001214:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001216:	68fb      	ldr	r3, [r7, #12]
}
 8001218:	4618      	mov	r0, r3
 800121a:	3718      	adds	r7, #24
 800121c:	46bd      	mov	sp, r7
 800121e:	bd80      	pop	{r7, pc}
 8001220:	20020000 	.word	0x20020000
 8001224:	00000400 	.word	0x00000400
 8001228:	20000350 	.word	0x20000350
 800122c:	20000548 	.word	0x20000548

08001230 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001230:	b480      	push	{r7}
 8001232:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001234:	4b06      	ldr	r3, [pc, #24]	@ (8001250 <SystemInit+0x20>)
 8001236:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800123a:	4a05      	ldr	r2, [pc, #20]	@ (8001250 <SystemInit+0x20>)
 800123c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001240:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001244:	bf00      	nop
 8001246:	46bd      	mov	sp, r7
 8001248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800124c:	4770      	bx	lr
 800124e:	bf00      	nop
 8001250:	e000ed00 	.word	0xe000ed00

08001254 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001254:	480d      	ldr	r0, [pc, #52]	@ (800128c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001256:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001258:	f7ff ffea 	bl	8001230 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800125c:	480c      	ldr	r0, [pc, #48]	@ (8001290 <LoopForever+0x6>)
  ldr r1, =_edata
 800125e:	490d      	ldr	r1, [pc, #52]	@ (8001294 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001260:	4a0d      	ldr	r2, [pc, #52]	@ (8001298 <LoopForever+0xe>)
  movs r3, #0
 8001262:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8001264:	e002      	b.n	800126c <LoopCopyDataInit>

08001266 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001266:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001268:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800126a:	3304      	adds	r3, #4

0800126c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800126c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800126e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001270:	d3f9      	bcc.n	8001266 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001272:	4a0a      	ldr	r2, [pc, #40]	@ (800129c <LoopForever+0x12>)
  ldr r4, =_ebss
 8001274:	4c0a      	ldr	r4, [pc, #40]	@ (80012a0 <LoopForever+0x16>)
  movs r3, #0
 8001276:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001278:	e001      	b.n	800127e <LoopFillZerobss>

0800127a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800127a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800127c:	3204      	adds	r2, #4

0800127e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800127e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001280:	d3fb      	bcc.n	800127a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001282:	f004 fde3 	bl	8005e4c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001286:	f7ff fb3d 	bl	8000904 <main>

0800128a <LoopForever>:

LoopForever:
    b LoopForever
 800128a:	e7fe      	b.n	800128a <LoopForever>
  ldr   r0, =_estack
 800128c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001290:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001294:	2000007c 	.word	0x2000007c
  ldr r2, =_sidata
 8001298:	08007a8c 	.word	0x08007a8c
  ldr r2, =_sbss
 800129c:	2000007c 	.word	0x2000007c
  ldr r4, =_ebss
 80012a0:	20000544 	.word	0x20000544

080012a4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80012a4:	e7fe      	b.n	80012a4 <ADC1_2_IRQHandler>
	...

080012a8 <BSP_LED_Init>:
  *         This parameter can be one of following parameters:
  *           @arg  LED2
  * @retval BSP status
  */
int32_t BSP_LED_Init(Led_TypeDef Led)
{
 80012a8:	b580      	push	{r7, lr}
 80012aa:	b088      	sub	sp, #32
 80012ac:	af00      	add	r7, sp, #0
 80012ae:	4603      	mov	r3, r0
 80012b0:	71fb      	strb	r3, [r7, #7]
  GPIO_InitTypeDef  gpio_init_structure;

  /* Enable the GPIO LED Clock */
  LED2_GPIO_CLK_ENABLE();
 80012b2:	4b16      	ldr	r3, [pc, #88]	@ (800130c <BSP_LED_Init+0x64>)
 80012b4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80012b6:	4a15      	ldr	r2, [pc, #84]	@ (800130c <BSP_LED_Init+0x64>)
 80012b8:	f043 0301 	orr.w	r3, r3, #1
 80012bc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80012be:	4b13      	ldr	r3, [pc, #76]	@ (800130c <BSP_LED_Init+0x64>)
 80012c0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80012c2:	f003 0301 	and.w	r3, r3, #1
 80012c6:	60bb      	str	r3, [r7, #8]
 80012c8:	68bb      	ldr	r3, [r7, #8]

  /* Configure the GPIO_LED pin */
  gpio_init_structure.Pin   = LED_PIN[Led];
 80012ca:	2320      	movs	r3, #32
 80012cc:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Mode  = GPIO_MODE_OUTPUT_PP;
 80012ce:	2301      	movs	r3, #1
 80012d0:	613b      	str	r3, [r7, #16]
  gpio_init_structure.Pull  = GPIO_NOPULL;
 80012d2:	2300      	movs	r3, #0
 80012d4:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012d6:	2303      	movs	r3, #3
 80012d8:	61bb      	str	r3, [r7, #24]

  HAL_GPIO_Init(LED_PORT[Led], &gpio_init_structure);
 80012da:	79fb      	ldrb	r3, [r7, #7]
 80012dc:	4a0c      	ldr	r2, [pc, #48]	@ (8001310 <BSP_LED_Init+0x68>)
 80012de:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80012e2:	f107 020c 	add.w	r2, r7, #12
 80012e6:	4611      	mov	r1, r2
 80012e8:	4618      	mov	r0, r3
 80012ea:	f000 fc33 	bl	8001b54 <HAL_GPIO_Init>
  HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_RESET);
 80012ee:	79fb      	ldrb	r3, [r7, #7]
 80012f0:	4a07      	ldr	r2, [pc, #28]	@ (8001310 <BSP_LED_Init+0x68>)
 80012f2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80012f6:	2120      	movs	r1, #32
 80012f8:	2200      	movs	r2, #0
 80012fa:	4618      	mov	r0, r3
 80012fc:	f000 fdac 	bl	8001e58 <HAL_GPIO_WritePin>

  return BSP_ERROR_NONE;
 8001300:	2300      	movs	r3, #0
}
 8001302:	4618      	mov	r0, r3
 8001304:	3720      	adds	r7, #32
 8001306:	46bd      	mov	sp, r7
 8001308:	bd80      	pop	{r7, pc}
 800130a:	bf00      	nop
 800130c:	40021000 	.word	0x40021000
 8001310:	20000004 	.word	0x20000004

08001314 <BSP_PB_Init>:
  *           @arg BUTTON_MODE_EXTI: Button will be connected to EXTI line
  *                                  with interrupt generation capability
  * @retval BSP status
  */
int32_t BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef ButtonMode)
{
 8001314:	b580      	push	{r7, lr}
 8001316:	b088      	sub	sp, #32
 8001318:	af00      	add	r7, sp, #0
 800131a:	4603      	mov	r3, r0
 800131c:	460a      	mov	r2, r1
 800131e:	71fb      	strb	r3, [r7, #7]
 8001320:	4613      	mov	r3, r2
 8001322:	71bb      	strb	r3, [r7, #6]
  static BSP_EXTI_LineCallback ButtonCallback[BUTTONn] = {BUTTON_USER_EXTI_Callback};
  static uint32_t BSP_BUTTON_PRIO [BUTTONn] = {BSP_BUTTON_USER_IT_PRIORITY};
  static const uint32_t BUTTON_EXTI_LINE[BUTTONn] = {USER_BUTTON_EXTI_LINE};

  /* Enable the BUTTON Clock */
  USER_BUTTON_GPIO_CLK_ENABLE();
 8001324:	4b2c      	ldr	r3, [pc, #176]	@ (80013d8 <BSP_PB_Init+0xc4>)
 8001326:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001328:	4a2b      	ldr	r2, [pc, #172]	@ (80013d8 <BSP_PB_Init+0xc4>)
 800132a:	f043 0304 	orr.w	r3, r3, #4
 800132e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001330:	4b29      	ldr	r3, [pc, #164]	@ (80013d8 <BSP_PB_Init+0xc4>)
 8001332:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001334:	f003 0304 	and.w	r3, r3, #4
 8001338:	60bb      	str	r3, [r7, #8]
 800133a:	68bb      	ldr	r3, [r7, #8]

  gpio_init_structure.Pin = BUTTON_PIN[Button];
 800133c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001340:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Pull = GPIO_PULLDOWN;
 8001342:	2302      	movs	r3, #2
 8001344:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 8001346:	2302      	movs	r3, #2
 8001348:	61bb      	str	r3, [r7, #24]

  if(ButtonMode == BUTTON_MODE_GPIO)
 800134a:	79bb      	ldrb	r3, [r7, #6]
 800134c:	2b00      	cmp	r3, #0
 800134e:	d10c      	bne.n	800136a <BSP_PB_Init+0x56>
  {
    /* Configure Button pin as input */
    gpio_init_structure.Mode = GPIO_MODE_INPUT;
 8001350:	2300      	movs	r3, #0
 8001352:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(BUTTON_PORT[Button], &gpio_init_structure);
 8001354:	79fb      	ldrb	r3, [r7, #7]
 8001356:	4a21      	ldr	r2, [pc, #132]	@ (80013dc <BSP_PB_Init+0xc8>)
 8001358:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800135c:	f107 020c 	add.w	r2, r7, #12
 8001360:	4611      	mov	r1, r2
 8001362:	4618      	mov	r0, r3
 8001364:	f000 fbf6 	bl	8001b54 <HAL_GPIO_Init>
 8001368:	e031      	b.n	80013ce <BSP_PB_Init+0xba>
  }
  else /* (ButtonMode == BUTTON_MODE_EXTI) */
  {
    /* Configure Button pin as input with External interrupt */
    gpio_init_structure.Mode = GPIO_MODE_IT_RISING;
 800136a:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 800136e:	613b      	str	r3, [r7, #16]

    HAL_GPIO_Init(BUTTON_PORT[Button], &gpio_init_structure);
 8001370:	79fb      	ldrb	r3, [r7, #7]
 8001372:	4a1a      	ldr	r2, [pc, #104]	@ (80013dc <BSP_PB_Init+0xc8>)
 8001374:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001378:	f107 020c 	add.w	r2, r7, #12
 800137c:	4611      	mov	r1, r2
 800137e:	4618      	mov	r0, r3
 8001380:	f000 fbe8 	bl	8001b54 <HAL_GPIO_Init>

    (void)HAL_EXTI_GetHandle(&hpb_exti[Button], BUTTON_EXTI_LINE[Button]);
 8001384:	79fb      	ldrb	r3, [r7, #7]
 8001386:	00db      	lsls	r3, r3, #3
 8001388:	4a15      	ldr	r2, [pc, #84]	@ (80013e0 <BSP_PB_Init+0xcc>)
 800138a:	441a      	add	r2, r3
 800138c:	79fb      	ldrb	r3, [r7, #7]
 800138e:	4915      	ldr	r1, [pc, #84]	@ (80013e4 <BSP_PB_Init+0xd0>)
 8001390:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001394:	4619      	mov	r1, r3
 8001396:	4610      	mov	r0, r2
 8001398:	f000 fb98 	bl	8001acc <HAL_EXTI_GetHandle>
    (void)HAL_EXTI_RegisterCallback(&hpb_exti[Button],  HAL_EXTI_COMMON_CB_ID, ButtonCallback[Button]);
 800139c:	79fb      	ldrb	r3, [r7, #7]
 800139e:	00db      	lsls	r3, r3, #3
 80013a0:	4a0f      	ldr	r2, [pc, #60]	@ (80013e0 <BSP_PB_Init+0xcc>)
 80013a2:	1898      	adds	r0, r3, r2
 80013a4:	79fb      	ldrb	r3, [r7, #7]
 80013a6:	4a10      	ldr	r2, [pc, #64]	@ (80013e8 <BSP_PB_Init+0xd4>)
 80013a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80013ac:	461a      	mov	r2, r3
 80013ae:	2100      	movs	r1, #0
 80013b0:	f000 fb6f 	bl	8001a92 <HAL_EXTI_RegisterCallback>

    /* Enable and set Button EXTI Interrupt to the lowest priority */
    HAL_NVIC_SetPriority((BUTTON_IRQn[Button]), BSP_BUTTON_PRIO[Button], 0x00);
 80013b4:	2028      	movs	r0, #40	@ 0x28
 80013b6:	79fb      	ldrb	r3, [r7, #7]
 80013b8:	4a0c      	ldr	r2, [pc, #48]	@ (80013ec <BSP_PB_Init+0xd8>)
 80013ba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80013be:	2200      	movs	r2, #0
 80013c0:	4619      	mov	r1, r3
 80013c2:	f000 fa72 	bl	80018aa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ((BUTTON_IRQn[Button]));
 80013c6:	2328      	movs	r3, #40	@ 0x28
 80013c8:	4618      	mov	r0, r3
 80013ca:	f000 fa88 	bl	80018de <HAL_NVIC_EnableIRQ>
  }

  return BSP_ERROR_NONE;
 80013ce:	2300      	movs	r3, #0
}
 80013d0:	4618      	mov	r0, r3
 80013d2:	3720      	adds	r7, #32
 80013d4:	46bd      	mov	sp, r7
 80013d6:	bd80      	pop	{r7, pc}
 80013d8:	40021000 	.word	0x40021000
 80013dc:	20000008 	.word	0x20000008
 80013e0:	20000354 	.word	0x20000354
 80013e4:	08007854 	.word	0x08007854
 80013e8:	20000010 	.word	0x20000010
 80013ec:	20000014 	.word	0x20000014

080013f0 <BSP_PB_IRQHandler>:
  * @brief  This function handles Push-Button interrupt requests.
  * @param  Button Specifies the pin connected EXTI line
  * @retval None
  */
void BSP_PB_IRQHandler(Button_TypeDef Button)
{
 80013f0:	b580      	push	{r7, lr}
 80013f2:	b082      	sub	sp, #8
 80013f4:	af00      	add	r7, sp, #0
 80013f6:	4603      	mov	r3, r0
 80013f8:	71fb      	strb	r3, [r7, #7]
  HAL_EXTI_IRQHandler(&hpb_exti[Button]);
 80013fa:	79fb      	ldrb	r3, [r7, #7]
 80013fc:	00db      	lsls	r3, r3, #3
 80013fe:	4a04      	ldr	r2, [pc, #16]	@ (8001410 <BSP_PB_IRQHandler+0x20>)
 8001400:	4413      	add	r3, r2
 8001402:	4618      	mov	r0, r3
 8001404:	f000 fb76 	bl	8001af4 <HAL_EXTI_IRQHandler>
}
 8001408:	bf00      	nop
 800140a:	3708      	adds	r7, #8
 800140c:	46bd      	mov	sp, r7
 800140e:	bd80      	pop	{r7, pc}
 8001410:	20000354 	.word	0x20000354

08001414 <BSP_PB_Callback>:
  * @brief  BSP Push Button callback
  * @param  Button Specifies the pin connected EXTI line
  * @retval None.
  */
__weak void BSP_PB_Callback(Button_TypeDef Button)
{
 8001414:	b480      	push	{r7}
 8001416:	b083      	sub	sp, #12
 8001418:	af00      	add	r7, sp, #0
 800141a:	4603      	mov	r3, r0
 800141c:	71fb      	strb	r3, [r7, #7]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Button);

  /* This function should be implemented by the user application.
     It is called into this driver when an event on Button is triggered. */
}
 800141e:	bf00      	nop
 8001420:	370c      	adds	r7, #12
 8001422:	46bd      	mov	sp, r7
 8001424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001428:	4770      	bx	lr
	...

0800142c <BSP_COM_Init>:
  * @param  COM_Init Pointer to a UART_HandleTypeDef structure that contains the
  *                  configuration information for the specified USART peripheral.
  * @retval BSP error code
  */
int32_t BSP_COM_Init(COM_TypeDef COM, COM_InitTypeDef *COM_Init)
{
 800142c:	b580      	push	{r7, lr}
 800142e:	b084      	sub	sp, #16
 8001430:	af00      	add	r7, sp, #0
 8001432:	4603      	mov	r3, r0
 8001434:	6039      	str	r1, [r7, #0]
 8001436:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 8001438:	2300      	movs	r3, #0
 800143a:	60fb      	str	r3, [r7, #12]

  if(COM > COMn)
 800143c:	79fb      	ldrb	r3, [r7, #7]
 800143e:	2b01      	cmp	r3, #1
 8001440:	d903      	bls.n	800144a <BSP_COM_Init+0x1e>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8001442:	f06f 0301 	mvn.w	r3, #1
 8001446:	60fb      	str	r3, [r7, #12]
 8001448:	e018      	b.n	800147c <BSP_COM_Init+0x50>
  }
  else
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 0)
    /* Init the UART Msp */
    COM1_MspInit(&hcom_uart[COM]);
 800144a:	79fb      	ldrb	r3, [r7, #7]
 800144c:	2294      	movs	r2, #148	@ 0x94
 800144e:	fb02 f303 	mul.w	r3, r2, r3
 8001452:	4a0d      	ldr	r2, [pc, #52]	@ (8001488 <BSP_COM_Init+0x5c>)
 8001454:	4413      	add	r3, r2
 8001456:	4618      	mov	r0, r3
 8001458:	f000 f86e 	bl	8001538 <COM1_MspInit>
        return BSP_ERROR_MSP_FAILURE;
      }
    }
#endif

    if(MX_LPUART1_Init(&hcom_uart[COM], COM_Init) != HAL_OK)
 800145c:	79fb      	ldrb	r3, [r7, #7]
 800145e:	2294      	movs	r2, #148	@ 0x94
 8001460:	fb02 f303 	mul.w	r3, r2, r3
 8001464:	4a08      	ldr	r2, [pc, #32]	@ (8001488 <BSP_COM_Init+0x5c>)
 8001466:	4413      	add	r3, r2
 8001468:	6839      	ldr	r1, [r7, #0]
 800146a:	4618      	mov	r0, r3
 800146c:	f000 f80e 	bl	800148c <MX_LPUART1_Init>
 8001470:	4603      	mov	r3, r0
 8001472:	2b00      	cmp	r3, #0
 8001474:	d002      	beq.n	800147c <BSP_COM_Init+0x50>
    {
      return BSP_ERROR_PERIPH_FAILURE;
 8001476:	f06f 0303 	mvn.w	r3, #3
 800147a:	e000      	b.n	800147e <BSP_COM_Init+0x52>
    }
  }

  return ret;
 800147c:	68fb      	ldr	r3, [r7, #12]
}
 800147e:	4618      	mov	r0, r3
 8001480:	3710      	adds	r7, #16
 8001482:	46bd      	mov	sp, r7
 8001484:	bd80      	pop	{r7, pc}
 8001486:	bf00      	nop
 8001488:	2000035c 	.word	0x2000035c

0800148c <MX_LPUART1_Init>:
  * @param  COM_Init Pointer to a UART_HandleTypeDef structure that contains the
  *                  configuration information for the specified USART peripheral.
  * @retval HAL error code
  */
__weak HAL_StatusTypeDef MX_LPUART1_Init(UART_HandleTypeDef *huart, MX_UART_InitTypeDef *COM_Init)
{
 800148c:	b580      	push	{r7, lr}
 800148e:	b082      	sub	sp, #8
 8001490:	af00      	add	r7, sp, #0
 8001492:	6078      	str	r0, [r7, #4]
 8001494:	6039      	str	r1, [r7, #0]
  /* USART configuration */
 huart->Instance          = COM_USART[COM1];
 8001496:	4b15      	ldr	r3, [pc, #84]	@ (80014ec <MX_LPUART1_Init+0x60>)
 8001498:	681a      	ldr	r2, [r3, #0]
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	601a      	str	r2, [r3, #0]
 huart->Init.BaudRate     = COM_Init->BaudRate;
 800149e:	683b      	ldr	r3, [r7, #0]
 80014a0:	681a      	ldr	r2, [r3, #0]
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	605a      	str	r2, [r3, #4]
 huart->Init.Mode         = UART_MODE_TX_RX;
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	220c      	movs	r2, #12
 80014aa:	615a      	str	r2, [r3, #20]
 huart->Init.Parity       = (uint32_t)COM_Init->Parity;
 80014ac:	683b      	ldr	r3, [r7, #0]
 80014ae:	895b      	ldrh	r3, [r3, #10]
 80014b0:	461a      	mov	r2, r3
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	611a      	str	r2, [r3, #16]
 huart->Init.WordLength   = COM_Init->WordLength;
 80014b6:	683b      	ldr	r3, [r7, #0]
 80014b8:	685a      	ldr	r2, [r3, #4]
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	609a      	str	r2, [r3, #8]
 huart->Init.StopBits     = (uint32_t)COM_Init->StopBits;
 80014be:	683b      	ldr	r3, [r7, #0]
 80014c0:	891b      	ldrh	r3, [r3, #8]
 80014c2:	461a      	mov	r2, r3
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	60da      	str	r2, [r3, #12]
 huart->Init.HwFlowCtl    = (uint32_t)COM_Init->HwFlowCtl;
 80014c8:	683b      	ldr	r3, [r7, #0]
 80014ca:	899b      	ldrh	r3, [r3, #12]
 80014cc:	461a      	mov	r2, r3
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	619a      	str	r2, [r3, #24]
 huart->Init.OverSampling = UART_OVERSAMPLING_8;
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 80014d8:	61da      	str	r2, [r3, #28]

 return HAL_UART_Init(huart);
 80014da:	6878      	ldr	r0, [r7, #4]
 80014dc:	f001 fe36 	bl	800314c <HAL_UART_Init>
 80014e0:	4603      	mov	r3, r0
}
 80014e2:	4618      	mov	r0, r3
 80014e4:	3708      	adds	r7, #8
 80014e6:	46bd      	mov	sp, r7
 80014e8:	bd80      	pop	{r7, pc}
 80014ea:	bf00      	nop
 80014ec:	2000000c 	.word	0x2000000c

080014f0 <__io_putchar>:

/**
  * @brief  Redirect console output to COM
  */
PUTCHAR_PROTOTYPE
{
 80014f0:	b580      	push	{r7, lr}
 80014f2:	b082      	sub	sp, #8
 80014f4:	af00      	add	r7, sp, #0
 80014f6:	6078      	str	r0, [r7, #4]
  (void) HAL_UART_Transmit(&hcom_uart [COM_ActiveLogPort], (uint8_t *) &ch, 1, COM_POLL_TIMEOUT);
 80014f8:	4b09      	ldr	r3, [pc, #36]	@ (8001520 <__io_putchar+0x30>)
 80014fa:	781b      	ldrb	r3, [r3, #0]
 80014fc:	461a      	mov	r2, r3
 80014fe:	2394      	movs	r3, #148	@ 0x94
 8001500:	fb02 f303 	mul.w	r3, r2, r3
 8001504:	4a07      	ldr	r2, [pc, #28]	@ (8001524 <__io_putchar+0x34>)
 8001506:	1898      	adds	r0, r3, r2
 8001508:	1d39      	adds	r1, r7, #4
 800150a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800150e:	2201      	movs	r2, #1
 8001510:	f001 fe6c 	bl	80031ec <HAL_UART_Transmit>
  return ch;
 8001514:	687b      	ldr	r3, [r7, #4]
}
 8001516:	4618      	mov	r0, r3
 8001518:	3708      	adds	r7, #8
 800151a:	46bd      	mov	sp, r7
 800151c:	bd80      	pop	{r7, pc}
 800151e:	bf00      	nop
 8001520:	200003f0 	.word	0x200003f0
 8001524:	2000035c 	.word	0x2000035c

08001528 <BUTTON_USER_EXTI_Callback>:
/**
  * @brief  Key EXTI line detection callbacks.
  * @retval BSP status
  */
static void BUTTON_USER_EXTI_Callback(void)
{
 8001528:	b580      	push	{r7, lr}
 800152a:	af00      	add	r7, sp, #0
  BSP_PB_Callback(BUTTON_USER);
 800152c:	2000      	movs	r0, #0
 800152e:	f7ff ff71 	bl	8001414 <BSP_PB_Callback>
}
 8001532:	bf00      	nop
 8001534:	bd80      	pop	{r7, pc}
	...

08001538 <COM1_MspInit>:
  * @brief  Initializes COM1 MSP.
  * @param  huart UART handle
  * @retval BSP status
  */
static void COM1_MspInit(UART_HandleTypeDef *huart)
{
 8001538:	b580      	push	{r7, lr}
 800153a:	b08a      	sub	sp, #40	@ 0x28
 800153c:	af00      	add	r7, sp, #0
 800153e:	6078      	str	r0, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);

  /* Enable GPIO clock */
  COM1_TX_GPIO_CLK_ENABLE();
 8001540:	4b22      	ldr	r3, [pc, #136]	@ (80015cc <COM1_MspInit+0x94>)
 8001542:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001544:	4a21      	ldr	r2, [pc, #132]	@ (80015cc <COM1_MspInit+0x94>)
 8001546:	f043 0301 	orr.w	r3, r3, #1
 800154a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800154c:	4b1f      	ldr	r3, [pc, #124]	@ (80015cc <COM1_MspInit+0x94>)
 800154e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001550:	f003 0301 	and.w	r3, r3, #1
 8001554:	613b      	str	r3, [r7, #16]
 8001556:	693b      	ldr	r3, [r7, #16]
  COM1_RX_GPIO_CLK_ENABLE();
 8001558:	4b1c      	ldr	r3, [pc, #112]	@ (80015cc <COM1_MspInit+0x94>)
 800155a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800155c:	4a1b      	ldr	r2, [pc, #108]	@ (80015cc <COM1_MspInit+0x94>)
 800155e:	f043 0301 	orr.w	r3, r3, #1
 8001562:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001564:	4b19      	ldr	r3, [pc, #100]	@ (80015cc <COM1_MspInit+0x94>)
 8001566:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001568:	f003 0301 	and.w	r3, r3, #1
 800156c:	60fb      	str	r3, [r7, #12]
 800156e:	68fb      	ldr	r3, [r7, #12]

  /* Enable USART clock */
  COM1_CLK_ENABLE();
 8001570:	4b16      	ldr	r3, [pc, #88]	@ (80015cc <COM1_MspInit+0x94>)
 8001572:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001574:	4a15      	ldr	r2, [pc, #84]	@ (80015cc <COM1_MspInit+0x94>)
 8001576:	f043 0301 	orr.w	r3, r3, #1
 800157a:	65d3      	str	r3, [r2, #92]	@ 0x5c
 800157c:	4b13      	ldr	r3, [pc, #76]	@ (80015cc <COM1_MspInit+0x94>)
 800157e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001580:	f003 0301 	and.w	r3, r3, #1
 8001584:	60bb      	str	r3, [r7, #8]
 8001586:	68bb      	ldr	r3, [r7, #8]

  /* Configure USART Tx as alternate function */
  gpio_init_structure.Pin       = COM1_TX_PIN;
 8001588:	2304      	movs	r3, #4
 800158a:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 800158c:	2302      	movs	r3, #2
 800158e:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Speed     = GPIO_SPEED_FREQ_HIGH;
 8001590:	2302      	movs	r3, #2
 8001592:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Pull      = GPIO_PULLUP;
 8001594:	2301      	movs	r3, #1
 8001596:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Alternate = COM1_TX_AF;
 8001598:	230c      	movs	r3, #12
 800159a:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(COM1_TX_GPIO_PORT, &gpio_init_structure);
 800159c:	f107 0314 	add.w	r3, r7, #20
 80015a0:	4619      	mov	r1, r3
 80015a2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80015a6:	f000 fad5 	bl	8001b54 <HAL_GPIO_Init>

  /* Configure USART Rx as alternate function */
  gpio_init_structure.Pin = COM1_RX_PIN;
 80015aa:	2308      	movs	r3, #8
 80015ac:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 80015ae:	2302      	movs	r3, #2
 80015b0:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Alternate = COM1_RX_AF;
 80015b2:	230c      	movs	r3, #12
 80015b4:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(COM1_RX_GPIO_PORT, &gpio_init_structure);
 80015b6:	f107 0314 	add.w	r3, r7, #20
 80015ba:	4619      	mov	r1, r3
 80015bc:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80015c0:	f000 fac8 	bl	8001b54 <HAL_GPIO_Init>
}
 80015c4:	bf00      	nop
 80015c6:	3728      	adds	r7, #40	@ 0x28
 80015c8:	46bd      	mov	sp, r7
 80015ca:	bd80      	pop	{r7, pc}
 80015cc:	40021000 	.word	0x40021000

080015d0 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80015d0:	b580      	push	{r7, lr}
 80015d2:	b082      	sub	sp, #8
 80015d4:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80015d6:	2300      	movs	r3, #0
 80015d8:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80015da:	2003      	movs	r0, #3
 80015dc:	f000 f95a 	bl	8001894 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80015e0:	2000      	movs	r0, #0
 80015e2:	f000 f80d 	bl	8001600 <HAL_InitTick>
 80015e6:	4603      	mov	r3, r0
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	d002      	beq.n	80015f2 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80015ec:	2301      	movs	r3, #1
 80015ee:	71fb      	strb	r3, [r7, #7]
 80015f0:	e001      	b.n	80015f6 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80015f2:	f7ff fb81 	bl	8000cf8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80015f6:	79fb      	ldrb	r3, [r7, #7]

}
 80015f8:	4618      	mov	r0, r3
 80015fa:	3708      	adds	r7, #8
 80015fc:	46bd      	mov	sp, r7
 80015fe:	bd80      	pop	{r7, pc}

08001600 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001600:	b580      	push	{r7, lr}
 8001602:	b084      	sub	sp, #16
 8001604:	af00      	add	r7, sp, #0
 8001606:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001608:	2300      	movs	r3, #0
 800160a:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 800160c:	4b16      	ldr	r3, [pc, #88]	@ (8001668 <HAL_InitTick+0x68>)
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	2b00      	cmp	r3, #0
 8001612:	d022      	beq.n	800165a <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8001614:	4b15      	ldr	r3, [pc, #84]	@ (800166c <HAL_InitTick+0x6c>)
 8001616:	681a      	ldr	r2, [r3, #0]
 8001618:	4b13      	ldr	r3, [pc, #76]	@ (8001668 <HAL_InitTick+0x68>)
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8001620:	fbb1 f3f3 	udiv	r3, r1, r3
 8001624:	fbb2 f3f3 	udiv	r3, r2, r3
 8001628:	4618      	mov	r0, r3
 800162a:	f000 f966 	bl	80018fa <HAL_SYSTICK_Config>
 800162e:	4603      	mov	r3, r0
 8001630:	2b00      	cmp	r3, #0
 8001632:	d10f      	bne.n	8001654 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	2b0f      	cmp	r3, #15
 8001638:	d809      	bhi.n	800164e <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800163a:	2200      	movs	r2, #0
 800163c:	6879      	ldr	r1, [r7, #4]
 800163e:	f04f 30ff 	mov.w	r0, #4294967295
 8001642:	f000 f932 	bl	80018aa <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001646:	4a0a      	ldr	r2, [pc, #40]	@ (8001670 <HAL_InitTick+0x70>)
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	6013      	str	r3, [r2, #0]
 800164c:	e007      	b.n	800165e <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 800164e:	2301      	movs	r3, #1
 8001650:	73fb      	strb	r3, [r7, #15]
 8001652:	e004      	b.n	800165e <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001654:	2301      	movs	r3, #1
 8001656:	73fb      	strb	r3, [r7, #15]
 8001658:	e001      	b.n	800165e <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 800165a:	2301      	movs	r3, #1
 800165c:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800165e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001660:	4618      	mov	r0, r3
 8001662:	3710      	adds	r7, #16
 8001664:	46bd      	mov	sp, r7
 8001666:	bd80      	pop	{r7, pc}
 8001668:	2000001c 	.word	0x2000001c
 800166c:	20000000 	.word	0x20000000
 8001670:	20000018 	.word	0x20000018

08001674 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001674:	b480      	push	{r7}
 8001676:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001678:	4b05      	ldr	r3, [pc, #20]	@ (8001690 <HAL_IncTick+0x1c>)
 800167a:	681a      	ldr	r2, [r3, #0]
 800167c:	4b05      	ldr	r3, [pc, #20]	@ (8001694 <HAL_IncTick+0x20>)
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	4413      	add	r3, r2
 8001682:	4a03      	ldr	r2, [pc, #12]	@ (8001690 <HAL_IncTick+0x1c>)
 8001684:	6013      	str	r3, [r2, #0]
}
 8001686:	bf00      	nop
 8001688:	46bd      	mov	sp, r7
 800168a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800168e:	4770      	bx	lr
 8001690:	200003f4 	.word	0x200003f4
 8001694:	2000001c 	.word	0x2000001c

08001698 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001698:	b480      	push	{r7}
 800169a:	af00      	add	r7, sp, #0
  return uwTick;
 800169c:	4b03      	ldr	r3, [pc, #12]	@ (80016ac <HAL_GetTick+0x14>)
 800169e:	681b      	ldr	r3, [r3, #0]
}
 80016a0:	4618      	mov	r0, r3
 80016a2:	46bd      	mov	sp, r7
 80016a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a8:	4770      	bx	lr
 80016aa:	bf00      	nop
 80016ac:	200003f4 	.word	0x200003f4

080016b0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80016b0:	b580      	push	{r7, lr}
 80016b2:	b084      	sub	sp, #16
 80016b4:	af00      	add	r7, sp, #0
 80016b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80016b8:	f7ff ffee 	bl	8001698 <HAL_GetTick>
 80016bc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80016c2:	68fb      	ldr	r3, [r7, #12]
 80016c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80016c8:	d004      	beq.n	80016d4 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 80016ca:	4b09      	ldr	r3, [pc, #36]	@ (80016f0 <HAL_Delay+0x40>)
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	68fa      	ldr	r2, [r7, #12]
 80016d0:	4413      	add	r3, r2
 80016d2:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80016d4:	bf00      	nop
 80016d6:	f7ff ffdf 	bl	8001698 <HAL_GetTick>
 80016da:	4602      	mov	r2, r0
 80016dc:	68bb      	ldr	r3, [r7, #8]
 80016de:	1ad3      	subs	r3, r2, r3
 80016e0:	68fa      	ldr	r2, [r7, #12]
 80016e2:	429a      	cmp	r2, r3
 80016e4:	d8f7      	bhi.n	80016d6 <HAL_Delay+0x26>
  {
  }
}
 80016e6:	bf00      	nop
 80016e8:	bf00      	nop
 80016ea:	3710      	adds	r7, #16
 80016ec:	46bd      	mov	sp, r7
 80016ee:	bd80      	pop	{r7, pc}
 80016f0:	2000001c 	.word	0x2000001c

080016f4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80016f4:	b480      	push	{r7}
 80016f6:	b085      	sub	sp, #20
 80016f8:	af00      	add	r7, sp, #0
 80016fa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	f003 0307 	and.w	r3, r3, #7
 8001702:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001704:	4b0c      	ldr	r3, [pc, #48]	@ (8001738 <__NVIC_SetPriorityGrouping+0x44>)
 8001706:	68db      	ldr	r3, [r3, #12]
 8001708:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800170a:	68ba      	ldr	r2, [r7, #8]
 800170c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001710:	4013      	ands	r3, r2
 8001712:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001714:	68fb      	ldr	r3, [r7, #12]
 8001716:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001718:	68bb      	ldr	r3, [r7, #8]
 800171a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800171c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001720:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001724:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001726:	4a04      	ldr	r2, [pc, #16]	@ (8001738 <__NVIC_SetPriorityGrouping+0x44>)
 8001728:	68bb      	ldr	r3, [r7, #8]
 800172a:	60d3      	str	r3, [r2, #12]
}
 800172c:	bf00      	nop
 800172e:	3714      	adds	r7, #20
 8001730:	46bd      	mov	sp, r7
 8001732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001736:	4770      	bx	lr
 8001738:	e000ed00 	.word	0xe000ed00

0800173c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800173c:	b480      	push	{r7}
 800173e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001740:	4b04      	ldr	r3, [pc, #16]	@ (8001754 <__NVIC_GetPriorityGrouping+0x18>)
 8001742:	68db      	ldr	r3, [r3, #12]
 8001744:	0a1b      	lsrs	r3, r3, #8
 8001746:	f003 0307 	and.w	r3, r3, #7
}
 800174a:	4618      	mov	r0, r3
 800174c:	46bd      	mov	sp, r7
 800174e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001752:	4770      	bx	lr
 8001754:	e000ed00 	.word	0xe000ed00

08001758 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001758:	b480      	push	{r7}
 800175a:	b083      	sub	sp, #12
 800175c:	af00      	add	r7, sp, #0
 800175e:	4603      	mov	r3, r0
 8001760:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001762:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001766:	2b00      	cmp	r3, #0
 8001768:	db0b      	blt.n	8001782 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800176a:	79fb      	ldrb	r3, [r7, #7]
 800176c:	f003 021f 	and.w	r2, r3, #31
 8001770:	4907      	ldr	r1, [pc, #28]	@ (8001790 <__NVIC_EnableIRQ+0x38>)
 8001772:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001776:	095b      	lsrs	r3, r3, #5
 8001778:	2001      	movs	r0, #1
 800177a:	fa00 f202 	lsl.w	r2, r0, r2
 800177e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001782:	bf00      	nop
 8001784:	370c      	adds	r7, #12
 8001786:	46bd      	mov	sp, r7
 8001788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800178c:	4770      	bx	lr
 800178e:	bf00      	nop
 8001790:	e000e100 	.word	0xe000e100

08001794 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001794:	b480      	push	{r7}
 8001796:	b083      	sub	sp, #12
 8001798:	af00      	add	r7, sp, #0
 800179a:	4603      	mov	r3, r0
 800179c:	6039      	str	r1, [r7, #0]
 800179e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80017a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	db0a      	blt.n	80017be <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80017a8:	683b      	ldr	r3, [r7, #0]
 80017aa:	b2da      	uxtb	r2, r3
 80017ac:	490c      	ldr	r1, [pc, #48]	@ (80017e0 <__NVIC_SetPriority+0x4c>)
 80017ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017b2:	0112      	lsls	r2, r2, #4
 80017b4:	b2d2      	uxtb	r2, r2
 80017b6:	440b      	add	r3, r1
 80017b8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80017bc:	e00a      	b.n	80017d4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80017be:	683b      	ldr	r3, [r7, #0]
 80017c0:	b2da      	uxtb	r2, r3
 80017c2:	4908      	ldr	r1, [pc, #32]	@ (80017e4 <__NVIC_SetPriority+0x50>)
 80017c4:	79fb      	ldrb	r3, [r7, #7]
 80017c6:	f003 030f 	and.w	r3, r3, #15
 80017ca:	3b04      	subs	r3, #4
 80017cc:	0112      	lsls	r2, r2, #4
 80017ce:	b2d2      	uxtb	r2, r2
 80017d0:	440b      	add	r3, r1
 80017d2:	761a      	strb	r2, [r3, #24]
}
 80017d4:	bf00      	nop
 80017d6:	370c      	adds	r7, #12
 80017d8:	46bd      	mov	sp, r7
 80017da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017de:	4770      	bx	lr
 80017e0:	e000e100 	.word	0xe000e100
 80017e4:	e000ed00 	.word	0xe000ed00

080017e8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80017e8:	b480      	push	{r7}
 80017ea:	b089      	sub	sp, #36	@ 0x24
 80017ec:	af00      	add	r7, sp, #0
 80017ee:	60f8      	str	r0, [r7, #12]
 80017f0:	60b9      	str	r1, [r7, #8]
 80017f2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80017f4:	68fb      	ldr	r3, [r7, #12]
 80017f6:	f003 0307 	and.w	r3, r3, #7
 80017fa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80017fc:	69fb      	ldr	r3, [r7, #28]
 80017fe:	f1c3 0307 	rsb	r3, r3, #7
 8001802:	2b04      	cmp	r3, #4
 8001804:	bf28      	it	cs
 8001806:	2304      	movcs	r3, #4
 8001808:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800180a:	69fb      	ldr	r3, [r7, #28]
 800180c:	3304      	adds	r3, #4
 800180e:	2b06      	cmp	r3, #6
 8001810:	d902      	bls.n	8001818 <NVIC_EncodePriority+0x30>
 8001812:	69fb      	ldr	r3, [r7, #28]
 8001814:	3b03      	subs	r3, #3
 8001816:	e000      	b.n	800181a <NVIC_EncodePriority+0x32>
 8001818:	2300      	movs	r3, #0
 800181a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800181c:	f04f 32ff 	mov.w	r2, #4294967295
 8001820:	69bb      	ldr	r3, [r7, #24]
 8001822:	fa02 f303 	lsl.w	r3, r2, r3
 8001826:	43da      	mvns	r2, r3
 8001828:	68bb      	ldr	r3, [r7, #8]
 800182a:	401a      	ands	r2, r3
 800182c:	697b      	ldr	r3, [r7, #20]
 800182e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001830:	f04f 31ff 	mov.w	r1, #4294967295
 8001834:	697b      	ldr	r3, [r7, #20]
 8001836:	fa01 f303 	lsl.w	r3, r1, r3
 800183a:	43d9      	mvns	r1, r3
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001840:	4313      	orrs	r3, r2
         );
}
 8001842:	4618      	mov	r0, r3
 8001844:	3724      	adds	r7, #36	@ 0x24
 8001846:	46bd      	mov	sp, r7
 8001848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800184c:	4770      	bx	lr
	...

08001850 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001850:	b580      	push	{r7, lr}
 8001852:	b082      	sub	sp, #8
 8001854:	af00      	add	r7, sp, #0
 8001856:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	3b01      	subs	r3, #1
 800185c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001860:	d301      	bcc.n	8001866 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001862:	2301      	movs	r3, #1
 8001864:	e00f      	b.n	8001886 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001866:	4a0a      	ldr	r2, [pc, #40]	@ (8001890 <SysTick_Config+0x40>)
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	3b01      	subs	r3, #1
 800186c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800186e:	210f      	movs	r1, #15
 8001870:	f04f 30ff 	mov.w	r0, #4294967295
 8001874:	f7ff ff8e 	bl	8001794 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001878:	4b05      	ldr	r3, [pc, #20]	@ (8001890 <SysTick_Config+0x40>)
 800187a:	2200      	movs	r2, #0
 800187c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800187e:	4b04      	ldr	r3, [pc, #16]	@ (8001890 <SysTick_Config+0x40>)
 8001880:	2207      	movs	r2, #7
 8001882:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001884:	2300      	movs	r3, #0
}
 8001886:	4618      	mov	r0, r3
 8001888:	3708      	adds	r7, #8
 800188a:	46bd      	mov	sp, r7
 800188c:	bd80      	pop	{r7, pc}
 800188e:	bf00      	nop
 8001890:	e000e010 	.word	0xe000e010

08001894 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001894:	b580      	push	{r7, lr}
 8001896:	b082      	sub	sp, #8
 8001898:	af00      	add	r7, sp, #0
 800189a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800189c:	6878      	ldr	r0, [r7, #4]
 800189e:	f7ff ff29 	bl	80016f4 <__NVIC_SetPriorityGrouping>
}
 80018a2:	bf00      	nop
 80018a4:	3708      	adds	r7, #8
 80018a6:	46bd      	mov	sp, r7
 80018a8:	bd80      	pop	{r7, pc}

080018aa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80018aa:	b580      	push	{r7, lr}
 80018ac:	b086      	sub	sp, #24
 80018ae:	af00      	add	r7, sp, #0
 80018b0:	4603      	mov	r3, r0
 80018b2:	60b9      	str	r1, [r7, #8]
 80018b4:	607a      	str	r2, [r7, #4]
 80018b6:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80018b8:	f7ff ff40 	bl	800173c <__NVIC_GetPriorityGrouping>
 80018bc:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80018be:	687a      	ldr	r2, [r7, #4]
 80018c0:	68b9      	ldr	r1, [r7, #8]
 80018c2:	6978      	ldr	r0, [r7, #20]
 80018c4:	f7ff ff90 	bl	80017e8 <NVIC_EncodePriority>
 80018c8:	4602      	mov	r2, r0
 80018ca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80018ce:	4611      	mov	r1, r2
 80018d0:	4618      	mov	r0, r3
 80018d2:	f7ff ff5f 	bl	8001794 <__NVIC_SetPriority>
}
 80018d6:	bf00      	nop
 80018d8:	3718      	adds	r7, #24
 80018da:	46bd      	mov	sp, r7
 80018dc:	bd80      	pop	{r7, pc}

080018de <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80018de:	b580      	push	{r7, lr}
 80018e0:	b082      	sub	sp, #8
 80018e2:	af00      	add	r7, sp, #0
 80018e4:	4603      	mov	r3, r0
 80018e6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80018e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018ec:	4618      	mov	r0, r3
 80018ee:	f7ff ff33 	bl	8001758 <__NVIC_EnableIRQ>
}
 80018f2:	bf00      	nop
 80018f4:	3708      	adds	r7, #8
 80018f6:	46bd      	mov	sp, r7
 80018f8:	bd80      	pop	{r7, pc}

080018fa <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80018fa:	b580      	push	{r7, lr}
 80018fc:	b082      	sub	sp, #8
 80018fe:	af00      	add	r7, sp, #0
 8001900:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001902:	6878      	ldr	r0, [r7, #4]
 8001904:	f7ff ffa4 	bl	8001850 <SysTick_Config>
 8001908:	4603      	mov	r3, r0
}
 800190a:	4618      	mov	r0, r3
 800190c:	3708      	adds	r7, #8
 800190e:	46bd      	mov	sp, r7
 8001910:	bd80      	pop	{r7, pc}

08001912 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001912:	b480      	push	{r7}
 8001914:	b085      	sub	sp, #20
 8001916:	af00      	add	r7, sp, #0
 8001918:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800191a:	2300      	movs	r3, #0
 800191c:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8001924:	b2db      	uxtb	r3, r3
 8001926:	2b02      	cmp	r3, #2
 8001928:	d005      	beq.n	8001936 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	2204      	movs	r2, #4
 800192e:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8001930:	2301      	movs	r3, #1
 8001932:	73fb      	strb	r3, [r7, #15]
 8001934:	e037      	b.n	80019a6 <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	681a      	ldr	r2, [r3, #0]
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	f022 020e 	bic.w	r2, r2, #14
 8001944:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800194a:	681a      	ldr	r2, [r3, #0]
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001950:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001954:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	681a      	ldr	r2, [r3, #0]
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	f022 0201 	bic.w	r2, r2, #1
 8001964:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800196a:	f003 021f 	and.w	r2, r3, #31
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001972:	2101      	movs	r1, #1
 8001974:	fa01 f202 	lsl.w	r2, r1, r2
 8001978:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800197e:	687a      	ldr	r2, [r7, #4]
 8001980:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8001982:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001988:	2b00      	cmp	r3, #0
 800198a:	d00c      	beq.n	80019a6 <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001990:	681a      	ldr	r2, [r3, #0]
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001996:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800199a:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80019a0:	687a      	ldr	r2, [r7, #4]
 80019a2:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80019a4:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	2201      	movs	r2, #1
 80019aa:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	2200      	movs	r2, #0
 80019b2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return status;
 80019b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80019b8:	4618      	mov	r0, r3
 80019ba:	3714      	adds	r7, #20
 80019bc:	46bd      	mov	sp, r7
 80019be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c2:	4770      	bx	lr

080019c4 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80019c4:	b580      	push	{r7, lr}
 80019c6:	b084      	sub	sp, #16
 80019c8:	af00      	add	r7, sp, #0
 80019ca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80019cc:	2300      	movs	r3, #0
 80019ce:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80019d6:	b2db      	uxtb	r3, r3
 80019d8:	2b02      	cmp	r3, #2
 80019da:	d00d      	beq.n	80019f8 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	2204      	movs	r2, #4
 80019e0:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	2201      	movs	r2, #1
 80019e6:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	2200      	movs	r2, #0
 80019ee:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    status = HAL_ERROR;
 80019f2:	2301      	movs	r3, #1
 80019f4:	73fb      	strb	r3, [r7, #15]
 80019f6:	e047      	b.n	8001a88 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	681a      	ldr	r2, [r3, #0]
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	f022 020e 	bic.w	r2, r2, #14
 8001a06:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	681a      	ldr	r2, [r3, #0]
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	f022 0201 	bic.w	r2, r2, #1
 8001a16:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001a1c:	681a      	ldr	r2, [r3, #0]
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001a22:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001a26:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a2c:	f003 021f 	and.w	r2, r3, #31
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a34:	2101      	movs	r1, #1
 8001a36:	fa01 f202 	lsl.w	r2, r1, r2
 8001a3a:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001a40:	687a      	ldr	r2, [r7, #4]
 8001a42:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8001a44:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d00c      	beq.n	8001a68 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001a52:	681a      	ldr	r2, [r3, #0]
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001a58:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001a5c:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001a62:	687a      	ldr	r2, [r7, #4]
 8001a64:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8001a66:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	2201      	movs	r2, #1
 8001a6c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	2200      	movs	r2, #0
 8001a74:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	d003      	beq.n	8001a88 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001a84:	6878      	ldr	r0, [r7, #4]
 8001a86:	4798      	blx	r3
    }
  }
  return status;
 8001a88:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a8a:	4618      	mov	r0, r3
 8001a8c:	3710      	adds	r7, #16
 8001a8e:	46bd      	mov	sp, r7
 8001a90:	bd80      	pop	{r7, pc}

08001a92 <HAL_EXTI_RegisterCallback>:
  *         This parameter can be one of @arg @ref EXTI_CallbackIDTypeDef values.
  * @param  pPendingCbfn function pointer to be stored as callback.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_RegisterCallback(EXTI_HandleTypeDef *hexti, EXTI_CallbackIDTypeDef CallbackID, void (*pPendingCbfn)(void))
{
 8001a92:	b480      	push	{r7}
 8001a94:	b087      	sub	sp, #28
 8001a96:	af00      	add	r7, sp, #0
 8001a98:	60f8      	str	r0, [r7, #12]
 8001a9a:	460b      	mov	r3, r1
 8001a9c:	607a      	str	r2, [r7, #4]
 8001a9e:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 8001aa0:	2300      	movs	r3, #0
 8001aa2:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_EXTI_CB(CallbackID));

  switch (CallbackID)
 8001aa4:	7afb      	ldrb	r3, [r7, #11]
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d103      	bne.n	8001ab2 <HAL_EXTI_RegisterCallback+0x20>
  {
    /* set common callback */
    case  HAL_EXTI_COMMON_CB_ID:
      hexti->PendingCallback = pPendingCbfn;
 8001aaa:	68fb      	ldr	r3, [r7, #12]
 8001aac:	687a      	ldr	r2, [r7, #4]
 8001aae:	605a      	str	r2, [r3, #4]
      break;
 8001ab0:	e005      	b.n	8001abe <HAL_EXTI_RegisterCallback+0x2c>

    default:
      hexti->PendingCallback = NULL;
 8001ab2:	68fb      	ldr	r3, [r7, #12]
 8001ab4:	2200      	movs	r2, #0
 8001ab6:	605a      	str	r2, [r3, #4]
      status = HAL_ERROR;
 8001ab8:	2301      	movs	r3, #1
 8001aba:	75fb      	strb	r3, [r7, #23]
      break;
 8001abc:	bf00      	nop
  }

  return status;
 8001abe:	7dfb      	ldrb	r3, [r7, #23]
}
 8001ac0:	4618      	mov	r0, r3
 8001ac2:	371c      	adds	r7, #28
 8001ac4:	46bd      	mov	sp, r7
 8001ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aca:	4770      	bx	lr

08001acc <HAL_EXTI_GetHandle>:
  * @param  ExtiLine Exti line number.
  *         This parameter can be from 0 to @ref EXTI_LINE_NB.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_GetHandle(EXTI_HandleTypeDef *hexti, uint32_t ExtiLine)
{
 8001acc:	b480      	push	{r7}
 8001ace:	b083      	sub	sp, #12
 8001ad0:	af00      	add	r7, sp, #0
 8001ad2:	6078      	str	r0, [r7, #4]
 8001ad4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(ExtiLine));

  /* Check null pointer */
  if (hexti == NULL)
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d101      	bne.n	8001ae0 <HAL_EXTI_GetHandle+0x14>
  {
    return HAL_ERROR;
 8001adc:	2301      	movs	r3, #1
 8001ade:	e003      	b.n	8001ae8 <HAL_EXTI_GetHandle+0x1c>
  }
  else
  {
    /* Store line number as handle private field */
    hexti->Line = ExtiLine;
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	683a      	ldr	r2, [r7, #0]
 8001ae4:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 8001ae6:	2300      	movs	r3, #0
  }
}
 8001ae8:	4618      	mov	r0, r3
 8001aea:	370c      	adds	r7, #12
 8001aec:	46bd      	mov	sp, r7
 8001aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af2:	4770      	bx	lr

08001af4 <HAL_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  hexti Exti handle.
  * @retval none.
  */
void HAL_EXTI_IRQHandler(EXTI_HandleTypeDef *hexti)
{
 8001af4:	b580      	push	{r7, lr}
 8001af6:	b086      	sub	sp, #24
 8001af8:	af00      	add	r7, sp, #0
 8001afa:	6078      	str	r0, [r7, #4]
  uint32_t regval;
  uint32_t maskline;
  uint32_t offset;

  /* Compute line register offset */
  offset = ((hexti->Line & EXTI_REG_MASK) >> EXTI_REG_SHIFT);
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	0c1b      	lsrs	r3, r3, #16
 8001b02:	f003 0301 	and.w	r3, r3, #1
 8001b06:	617b      	str	r3, [r7, #20]
  /* compute line mask */
  maskline = (1uL << (hexti->Line & EXTI_PIN_MASK));
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	f003 031f 	and.w	r3, r3, #31
 8001b10:	2201      	movs	r2, #1
 8001b12:	fa02 f303 	lsl.w	r3, r2, r3
 8001b16:	613b      	str	r3, [r7, #16]

  /* Get pending bit  */
  regaddr = (&EXTI->PR1 + (EXTI_CONFIG_OFFSET * offset));
 8001b18:	697b      	ldr	r3, [r7, #20]
 8001b1a:	015a      	lsls	r2, r3, #5
 8001b1c:	4b0c      	ldr	r3, [pc, #48]	@ (8001b50 <HAL_EXTI_IRQHandler+0x5c>)
 8001b1e:	4413      	add	r3, r2
 8001b20:	60fb      	str	r3, [r7, #12]
  regval = (*regaddr & maskline);
 8001b22:	68fb      	ldr	r3, [r7, #12]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	693a      	ldr	r2, [r7, #16]
 8001b28:	4013      	ands	r3, r2
 8001b2a:	60bb      	str	r3, [r7, #8]

  if (regval != 0x00u)
 8001b2c:	68bb      	ldr	r3, [r7, #8]
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d009      	beq.n	8001b46 <HAL_EXTI_IRQHandler+0x52>
  {
    /* Clear pending bit */
    *regaddr = maskline;
 8001b32:	68fb      	ldr	r3, [r7, #12]
 8001b34:	693a      	ldr	r2, [r7, #16]
 8001b36:	601a      	str	r2, [r3, #0]

    /* Call pending callback */
    if (hexti->PendingCallback != NULL)
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	685b      	ldr	r3, [r3, #4]
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d002      	beq.n	8001b46 <HAL_EXTI_IRQHandler+0x52>
    {
      hexti->PendingCallback();
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	685b      	ldr	r3, [r3, #4]
 8001b44:	4798      	blx	r3
    }
  }
}
 8001b46:	bf00      	nop
 8001b48:	3718      	adds	r7, #24
 8001b4a:	46bd      	mov	sp, r7
 8001b4c:	bd80      	pop	{r7, pc}
 8001b4e:	bf00      	nop
 8001b50:	40010414 	.word	0x40010414

08001b54 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001b54:	b480      	push	{r7}
 8001b56:	b087      	sub	sp, #28
 8001b58:	af00      	add	r7, sp, #0
 8001b5a:	6078      	str	r0, [r7, #4]
 8001b5c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001b5e:	2300      	movs	r3, #0
 8001b60:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001b62:	e15a      	b.n	8001e1a <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001b64:	683b      	ldr	r3, [r7, #0]
 8001b66:	681a      	ldr	r2, [r3, #0]
 8001b68:	2101      	movs	r1, #1
 8001b6a:	697b      	ldr	r3, [r7, #20]
 8001b6c:	fa01 f303 	lsl.w	r3, r1, r3
 8001b70:	4013      	ands	r3, r2
 8001b72:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001b74:	68fb      	ldr	r3, [r7, #12]
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	f000 814c 	beq.w	8001e14 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001b7c:	683b      	ldr	r3, [r7, #0]
 8001b7e:	685b      	ldr	r3, [r3, #4]
 8001b80:	f003 0303 	and.w	r3, r3, #3
 8001b84:	2b01      	cmp	r3, #1
 8001b86:	d005      	beq.n	8001b94 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001b88:	683b      	ldr	r3, [r7, #0]
 8001b8a:	685b      	ldr	r3, [r3, #4]
 8001b8c:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001b90:	2b02      	cmp	r3, #2
 8001b92:	d130      	bne.n	8001bf6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	689b      	ldr	r3, [r3, #8]
 8001b98:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001b9a:	697b      	ldr	r3, [r7, #20]
 8001b9c:	005b      	lsls	r3, r3, #1
 8001b9e:	2203      	movs	r2, #3
 8001ba0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ba4:	43db      	mvns	r3, r3
 8001ba6:	693a      	ldr	r2, [r7, #16]
 8001ba8:	4013      	ands	r3, r2
 8001baa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001bac:	683b      	ldr	r3, [r7, #0]
 8001bae:	68da      	ldr	r2, [r3, #12]
 8001bb0:	697b      	ldr	r3, [r7, #20]
 8001bb2:	005b      	lsls	r3, r3, #1
 8001bb4:	fa02 f303 	lsl.w	r3, r2, r3
 8001bb8:	693a      	ldr	r2, [r7, #16]
 8001bba:	4313      	orrs	r3, r2
 8001bbc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	693a      	ldr	r2, [r7, #16]
 8001bc2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	685b      	ldr	r3, [r3, #4]
 8001bc8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001bca:	2201      	movs	r2, #1
 8001bcc:	697b      	ldr	r3, [r7, #20]
 8001bce:	fa02 f303 	lsl.w	r3, r2, r3
 8001bd2:	43db      	mvns	r3, r3
 8001bd4:	693a      	ldr	r2, [r7, #16]
 8001bd6:	4013      	ands	r3, r2
 8001bd8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001bda:	683b      	ldr	r3, [r7, #0]
 8001bdc:	685b      	ldr	r3, [r3, #4]
 8001bde:	091b      	lsrs	r3, r3, #4
 8001be0:	f003 0201 	and.w	r2, r3, #1
 8001be4:	697b      	ldr	r3, [r7, #20]
 8001be6:	fa02 f303 	lsl.w	r3, r2, r3
 8001bea:	693a      	ldr	r2, [r7, #16]
 8001bec:	4313      	orrs	r3, r2
 8001bee:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	693a      	ldr	r2, [r7, #16]
 8001bf4:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001bf6:	683b      	ldr	r3, [r7, #0]
 8001bf8:	685b      	ldr	r3, [r3, #4]
 8001bfa:	f003 0303 	and.w	r3, r3, #3
 8001bfe:	2b03      	cmp	r3, #3
 8001c00:	d017      	beq.n	8001c32 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	68db      	ldr	r3, [r3, #12]
 8001c06:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001c08:	697b      	ldr	r3, [r7, #20]
 8001c0a:	005b      	lsls	r3, r3, #1
 8001c0c:	2203      	movs	r2, #3
 8001c0e:	fa02 f303 	lsl.w	r3, r2, r3
 8001c12:	43db      	mvns	r3, r3
 8001c14:	693a      	ldr	r2, [r7, #16]
 8001c16:	4013      	ands	r3, r2
 8001c18:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001c1a:	683b      	ldr	r3, [r7, #0]
 8001c1c:	689a      	ldr	r2, [r3, #8]
 8001c1e:	697b      	ldr	r3, [r7, #20]
 8001c20:	005b      	lsls	r3, r3, #1
 8001c22:	fa02 f303 	lsl.w	r3, r2, r3
 8001c26:	693a      	ldr	r2, [r7, #16]
 8001c28:	4313      	orrs	r3, r2
 8001c2a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	693a      	ldr	r2, [r7, #16]
 8001c30:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001c32:	683b      	ldr	r3, [r7, #0]
 8001c34:	685b      	ldr	r3, [r3, #4]
 8001c36:	f003 0303 	and.w	r3, r3, #3
 8001c3a:	2b02      	cmp	r3, #2
 8001c3c:	d123      	bne.n	8001c86 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001c3e:	697b      	ldr	r3, [r7, #20]
 8001c40:	08da      	lsrs	r2, r3, #3
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	3208      	adds	r2, #8
 8001c46:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001c4a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001c4c:	697b      	ldr	r3, [r7, #20]
 8001c4e:	f003 0307 	and.w	r3, r3, #7
 8001c52:	009b      	lsls	r3, r3, #2
 8001c54:	220f      	movs	r2, #15
 8001c56:	fa02 f303 	lsl.w	r3, r2, r3
 8001c5a:	43db      	mvns	r3, r3
 8001c5c:	693a      	ldr	r2, [r7, #16]
 8001c5e:	4013      	ands	r3, r2
 8001c60:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001c62:	683b      	ldr	r3, [r7, #0]
 8001c64:	691a      	ldr	r2, [r3, #16]
 8001c66:	697b      	ldr	r3, [r7, #20]
 8001c68:	f003 0307 	and.w	r3, r3, #7
 8001c6c:	009b      	lsls	r3, r3, #2
 8001c6e:	fa02 f303 	lsl.w	r3, r2, r3
 8001c72:	693a      	ldr	r2, [r7, #16]
 8001c74:	4313      	orrs	r3, r2
 8001c76:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8001c78:	697b      	ldr	r3, [r7, #20]
 8001c7a:	08da      	lsrs	r2, r3, #3
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	3208      	adds	r2, #8
 8001c80:	6939      	ldr	r1, [r7, #16]
 8001c82:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001c8c:	697b      	ldr	r3, [r7, #20]
 8001c8e:	005b      	lsls	r3, r3, #1
 8001c90:	2203      	movs	r2, #3
 8001c92:	fa02 f303 	lsl.w	r3, r2, r3
 8001c96:	43db      	mvns	r3, r3
 8001c98:	693a      	ldr	r2, [r7, #16]
 8001c9a:	4013      	ands	r3, r2
 8001c9c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001c9e:	683b      	ldr	r3, [r7, #0]
 8001ca0:	685b      	ldr	r3, [r3, #4]
 8001ca2:	f003 0203 	and.w	r2, r3, #3
 8001ca6:	697b      	ldr	r3, [r7, #20]
 8001ca8:	005b      	lsls	r3, r3, #1
 8001caa:	fa02 f303 	lsl.w	r3, r2, r3
 8001cae:	693a      	ldr	r2, [r7, #16]
 8001cb0:	4313      	orrs	r3, r2
 8001cb2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	693a      	ldr	r2, [r7, #16]
 8001cb8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001cba:	683b      	ldr	r3, [r7, #0]
 8001cbc:	685b      	ldr	r3, [r3, #4]
 8001cbe:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	f000 80a6 	beq.w	8001e14 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001cc8:	4b5b      	ldr	r3, [pc, #364]	@ (8001e38 <HAL_GPIO_Init+0x2e4>)
 8001cca:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001ccc:	4a5a      	ldr	r2, [pc, #360]	@ (8001e38 <HAL_GPIO_Init+0x2e4>)
 8001cce:	f043 0301 	orr.w	r3, r3, #1
 8001cd2:	6613      	str	r3, [r2, #96]	@ 0x60
 8001cd4:	4b58      	ldr	r3, [pc, #352]	@ (8001e38 <HAL_GPIO_Init+0x2e4>)
 8001cd6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001cd8:	f003 0301 	and.w	r3, r3, #1
 8001cdc:	60bb      	str	r3, [r7, #8]
 8001cde:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001ce0:	4a56      	ldr	r2, [pc, #344]	@ (8001e3c <HAL_GPIO_Init+0x2e8>)
 8001ce2:	697b      	ldr	r3, [r7, #20]
 8001ce4:	089b      	lsrs	r3, r3, #2
 8001ce6:	3302      	adds	r3, #2
 8001ce8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001cec:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001cee:	697b      	ldr	r3, [r7, #20]
 8001cf0:	f003 0303 	and.w	r3, r3, #3
 8001cf4:	009b      	lsls	r3, r3, #2
 8001cf6:	220f      	movs	r2, #15
 8001cf8:	fa02 f303 	lsl.w	r3, r2, r3
 8001cfc:	43db      	mvns	r3, r3
 8001cfe:	693a      	ldr	r2, [r7, #16]
 8001d00:	4013      	ands	r3, r2
 8001d02:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8001d0a:	d01f      	beq.n	8001d4c <HAL_GPIO_Init+0x1f8>
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	4a4c      	ldr	r2, [pc, #304]	@ (8001e40 <HAL_GPIO_Init+0x2ec>)
 8001d10:	4293      	cmp	r3, r2
 8001d12:	d019      	beq.n	8001d48 <HAL_GPIO_Init+0x1f4>
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	4a4b      	ldr	r2, [pc, #300]	@ (8001e44 <HAL_GPIO_Init+0x2f0>)
 8001d18:	4293      	cmp	r3, r2
 8001d1a:	d013      	beq.n	8001d44 <HAL_GPIO_Init+0x1f0>
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	4a4a      	ldr	r2, [pc, #296]	@ (8001e48 <HAL_GPIO_Init+0x2f4>)
 8001d20:	4293      	cmp	r3, r2
 8001d22:	d00d      	beq.n	8001d40 <HAL_GPIO_Init+0x1ec>
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	4a49      	ldr	r2, [pc, #292]	@ (8001e4c <HAL_GPIO_Init+0x2f8>)
 8001d28:	4293      	cmp	r3, r2
 8001d2a:	d007      	beq.n	8001d3c <HAL_GPIO_Init+0x1e8>
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	4a48      	ldr	r2, [pc, #288]	@ (8001e50 <HAL_GPIO_Init+0x2fc>)
 8001d30:	4293      	cmp	r3, r2
 8001d32:	d101      	bne.n	8001d38 <HAL_GPIO_Init+0x1e4>
 8001d34:	2305      	movs	r3, #5
 8001d36:	e00a      	b.n	8001d4e <HAL_GPIO_Init+0x1fa>
 8001d38:	2306      	movs	r3, #6
 8001d3a:	e008      	b.n	8001d4e <HAL_GPIO_Init+0x1fa>
 8001d3c:	2304      	movs	r3, #4
 8001d3e:	e006      	b.n	8001d4e <HAL_GPIO_Init+0x1fa>
 8001d40:	2303      	movs	r3, #3
 8001d42:	e004      	b.n	8001d4e <HAL_GPIO_Init+0x1fa>
 8001d44:	2302      	movs	r3, #2
 8001d46:	e002      	b.n	8001d4e <HAL_GPIO_Init+0x1fa>
 8001d48:	2301      	movs	r3, #1
 8001d4a:	e000      	b.n	8001d4e <HAL_GPIO_Init+0x1fa>
 8001d4c:	2300      	movs	r3, #0
 8001d4e:	697a      	ldr	r2, [r7, #20]
 8001d50:	f002 0203 	and.w	r2, r2, #3
 8001d54:	0092      	lsls	r2, r2, #2
 8001d56:	4093      	lsls	r3, r2
 8001d58:	693a      	ldr	r2, [r7, #16]
 8001d5a:	4313      	orrs	r3, r2
 8001d5c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001d5e:	4937      	ldr	r1, [pc, #220]	@ (8001e3c <HAL_GPIO_Init+0x2e8>)
 8001d60:	697b      	ldr	r3, [r7, #20]
 8001d62:	089b      	lsrs	r3, r3, #2
 8001d64:	3302      	adds	r3, #2
 8001d66:	693a      	ldr	r2, [r7, #16]
 8001d68:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001d6c:	4b39      	ldr	r3, [pc, #228]	@ (8001e54 <HAL_GPIO_Init+0x300>)
 8001d6e:	689b      	ldr	r3, [r3, #8]
 8001d70:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001d72:	68fb      	ldr	r3, [r7, #12]
 8001d74:	43db      	mvns	r3, r3
 8001d76:	693a      	ldr	r2, [r7, #16]
 8001d78:	4013      	ands	r3, r2
 8001d7a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001d7c:	683b      	ldr	r3, [r7, #0]
 8001d7e:	685b      	ldr	r3, [r3, #4]
 8001d80:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d003      	beq.n	8001d90 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8001d88:	693a      	ldr	r2, [r7, #16]
 8001d8a:	68fb      	ldr	r3, [r7, #12]
 8001d8c:	4313      	orrs	r3, r2
 8001d8e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001d90:	4a30      	ldr	r2, [pc, #192]	@ (8001e54 <HAL_GPIO_Init+0x300>)
 8001d92:	693b      	ldr	r3, [r7, #16]
 8001d94:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001d96:	4b2f      	ldr	r3, [pc, #188]	@ (8001e54 <HAL_GPIO_Init+0x300>)
 8001d98:	68db      	ldr	r3, [r3, #12]
 8001d9a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001d9c:	68fb      	ldr	r3, [r7, #12]
 8001d9e:	43db      	mvns	r3, r3
 8001da0:	693a      	ldr	r2, [r7, #16]
 8001da2:	4013      	ands	r3, r2
 8001da4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001da6:	683b      	ldr	r3, [r7, #0]
 8001da8:	685b      	ldr	r3, [r3, #4]
 8001daa:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d003      	beq.n	8001dba <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8001db2:	693a      	ldr	r2, [r7, #16]
 8001db4:	68fb      	ldr	r3, [r7, #12]
 8001db6:	4313      	orrs	r3, r2
 8001db8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001dba:	4a26      	ldr	r2, [pc, #152]	@ (8001e54 <HAL_GPIO_Init+0x300>)
 8001dbc:	693b      	ldr	r3, [r7, #16]
 8001dbe:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8001dc0:	4b24      	ldr	r3, [pc, #144]	@ (8001e54 <HAL_GPIO_Init+0x300>)
 8001dc2:	685b      	ldr	r3, [r3, #4]
 8001dc4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001dc6:	68fb      	ldr	r3, [r7, #12]
 8001dc8:	43db      	mvns	r3, r3
 8001dca:	693a      	ldr	r2, [r7, #16]
 8001dcc:	4013      	ands	r3, r2
 8001dce:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001dd0:	683b      	ldr	r3, [r7, #0]
 8001dd2:	685b      	ldr	r3, [r3, #4]
 8001dd4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d003      	beq.n	8001de4 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8001ddc:	693a      	ldr	r2, [r7, #16]
 8001dde:	68fb      	ldr	r3, [r7, #12]
 8001de0:	4313      	orrs	r3, r2
 8001de2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001de4:	4a1b      	ldr	r2, [pc, #108]	@ (8001e54 <HAL_GPIO_Init+0x300>)
 8001de6:	693b      	ldr	r3, [r7, #16]
 8001de8:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001dea:	4b1a      	ldr	r3, [pc, #104]	@ (8001e54 <HAL_GPIO_Init+0x300>)
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001df0:	68fb      	ldr	r3, [r7, #12]
 8001df2:	43db      	mvns	r3, r3
 8001df4:	693a      	ldr	r2, [r7, #16]
 8001df6:	4013      	ands	r3, r2
 8001df8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001dfa:	683b      	ldr	r3, [r7, #0]
 8001dfc:	685b      	ldr	r3, [r3, #4]
 8001dfe:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d003      	beq.n	8001e0e <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8001e06:	693a      	ldr	r2, [r7, #16]
 8001e08:	68fb      	ldr	r3, [r7, #12]
 8001e0a:	4313      	orrs	r3, r2
 8001e0c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001e0e:	4a11      	ldr	r2, [pc, #68]	@ (8001e54 <HAL_GPIO_Init+0x300>)
 8001e10:	693b      	ldr	r3, [r7, #16]
 8001e12:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001e14:	697b      	ldr	r3, [r7, #20]
 8001e16:	3301      	adds	r3, #1
 8001e18:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001e1a:	683b      	ldr	r3, [r7, #0]
 8001e1c:	681a      	ldr	r2, [r3, #0]
 8001e1e:	697b      	ldr	r3, [r7, #20]
 8001e20:	fa22 f303 	lsr.w	r3, r2, r3
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	f47f ae9d 	bne.w	8001b64 <HAL_GPIO_Init+0x10>
  }
}
 8001e2a:	bf00      	nop
 8001e2c:	bf00      	nop
 8001e2e:	371c      	adds	r7, #28
 8001e30:	46bd      	mov	sp, r7
 8001e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e36:	4770      	bx	lr
 8001e38:	40021000 	.word	0x40021000
 8001e3c:	40010000 	.word	0x40010000
 8001e40:	48000400 	.word	0x48000400
 8001e44:	48000800 	.word	0x48000800
 8001e48:	48000c00 	.word	0x48000c00
 8001e4c:	48001000 	.word	0x48001000
 8001e50:	48001400 	.word	0x48001400
 8001e54:	40010400 	.word	0x40010400

08001e58 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001e58:	b480      	push	{r7}
 8001e5a:	b083      	sub	sp, #12
 8001e5c:	af00      	add	r7, sp, #0
 8001e5e:	6078      	str	r0, [r7, #4]
 8001e60:	460b      	mov	r3, r1
 8001e62:	807b      	strh	r3, [r7, #2]
 8001e64:	4613      	mov	r3, r2
 8001e66:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001e68:	787b      	ldrb	r3, [r7, #1]
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d003      	beq.n	8001e76 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001e6e:	887a      	ldrh	r2, [r7, #2]
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001e74:	e002      	b.n	8001e7c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001e76:	887a      	ldrh	r2, [r7, #2]
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001e7c:	bf00      	nop
 8001e7e:	370c      	adds	r7, #12
 8001e80:	46bd      	mov	sp, r7
 8001e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e86:	4770      	bx	lr

08001e88 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001e88:	b580      	push	{r7, lr}
 8001e8a:	b082      	sub	sp, #8
 8001e8c:	af00      	add	r7, sp, #0
 8001e8e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d101      	bne.n	8001e9a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001e96:	2301      	movs	r3, #1
 8001e98:	e08d      	b.n	8001fb6 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001ea0:	b2db      	uxtb	r3, r3
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d106      	bne.n	8001eb4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	2200      	movs	r2, #0
 8001eaa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001eae:	6878      	ldr	r0, [r7, #4]
 8001eb0:	f7fe ff46 	bl	8000d40 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	2224      	movs	r2, #36	@ 0x24
 8001eb8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	681a      	ldr	r2, [r3, #0]
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	f022 0201 	bic.w	r2, r2, #1
 8001eca:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	685a      	ldr	r2, [r3, #4]
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001ed8:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	689a      	ldr	r2, [r3, #8]
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001ee8:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	68db      	ldr	r3, [r3, #12]
 8001eee:	2b01      	cmp	r3, #1
 8001ef0:	d107      	bne.n	8001f02 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	689a      	ldr	r2, [r3, #8]
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001efe:	609a      	str	r2, [r3, #8]
 8001f00:	e006      	b.n	8001f10 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	689a      	ldr	r2, [r3, #8]
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8001f0e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	68db      	ldr	r3, [r3, #12]
 8001f14:	2b02      	cmp	r3, #2
 8001f16:	d108      	bne.n	8001f2a <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	685a      	ldr	r2, [r3, #4]
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8001f26:	605a      	str	r2, [r3, #4]
 8001f28:	e007      	b.n	8001f3a <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	685a      	ldr	r2, [r3, #4]
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001f38:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	685b      	ldr	r3, [r3, #4]
 8001f40:	687a      	ldr	r2, [r7, #4]
 8001f42:	6812      	ldr	r2, [r2, #0]
 8001f44:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001f48:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001f4c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	68da      	ldr	r2, [r3, #12]
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001f5c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	691a      	ldr	r2, [r3, #16]
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	695b      	ldr	r3, [r3, #20]
 8001f66:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	699b      	ldr	r3, [r3, #24]
 8001f6e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	430a      	orrs	r2, r1
 8001f76:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	69d9      	ldr	r1, [r3, #28]
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	6a1a      	ldr	r2, [r3, #32]
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	430a      	orrs	r2, r1
 8001f86:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	681a      	ldr	r2, [r3, #0]
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	f042 0201 	orr.w	r2, r2, #1
 8001f96:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	2200      	movs	r2, #0
 8001f9c:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	2220      	movs	r2, #32
 8001fa2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	2200      	movs	r2, #0
 8001faa:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	2200      	movs	r2, #0
 8001fb0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8001fb4:	2300      	movs	r3, #0
}
 8001fb6:	4618      	mov	r0, r3
 8001fb8:	3708      	adds	r7, #8
 8001fba:	46bd      	mov	sp, r7
 8001fbc:	bd80      	pop	{r7, pc}

08001fbe <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8001fbe:	b480      	push	{r7}
 8001fc0:	b083      	sub	sp, #12
 8001fc2:	af00      	add	r7, sp, #0
 8001fc4:	6078      	str	r0, [r7, #4]
 8001fc6:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001fce:	b2db      	uxtb	r3, r3
 8001fd0:	2b20      	cmp	r3, #32
 8001fd2:	d138      	bne.n	8002046 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001fda:	2b01      	cmp	r3, #1
 8001fdc:	d101      	bne.n	8001fe2 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8001fde:	2302      	movs	r3, #2
 8001fe0:	e032      	b.n	8002048 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	2201      	movs	r2, #1
 8001fe6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	2224      	movs	r2, #36	@ 0x24
 8001fee:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	681a      	ldr	r2, [r3, #0]
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	f022 0201 	bic.w	r2, r2, #1
 8002000:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	681a      	ldr	r2, [r3, #0]
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8002010:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	6819      	ldr	r1, [r3, #0]
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	683a      	ldr	r2, [r7, #0]
 800201e:	430a      	orrs	r2, r1
 8002020:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	681a      	ldr	r2, [r3, #0]
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	f042 0201 	orr.w	r2, r2, #1
 8002030:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	2220      	movs	r2, #32
 8002036:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	2200      	movs	r2, #0
 800203e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002042:	2300      	movs	r3, #0
 8002044:	e000      	b.n	8002048 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002046:	2302      	movs	r3, #2
  }
}
 8002048:	4618      	mov	r0, r3
 800204a:	370c      	adds	r7, #12
 800204c:	46bd      	mov	sp, r7
 800204e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002052:	4770      	bx	lr

08002054 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002054:	b480      	push	{r7}
 8002056:	b085      	sub	sp, #20
 8002058:	af00      	add	r7, sp, #0
 800205a:	6078      	str	r0, [r7, #4]
 800205c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002064:	b2db      	uxtb	r3, r3
 8002066:	2b20      	cmp	r3, #32
 8002068:	d139      	bne.n	80020de <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002070:	2b01      	cmp	r3, #1
 8002072:	d101      	bne.n	8002078 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002074:	2302      	movs	r3, #2
 8002076:	e033      	b.n	80020e0 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	2201      	movs	r2, #1
 800207c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	2224      	movs	r2, #36	@ 0x24
 8002084:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	681a      	ldr	r2, [r3, #0]
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	f022 0201 	bic.w	r2, r2, #1
 8002096:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80020a6:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80020a8:	683b      	ldr	r3, [r7, #0]
 80020aa:	021b      	lsls	r3, r3, #8
 80020ac:	68fa      	ldr	r2, [r7, #12]
 80020ae:	4313      	orrs	r3, r2
 80020b0:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	68fa      	ldr	r2, [r7, #12]
 80020b8:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	681a      	ldr	r2, [r3, #0]
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	f042 0201 	orr.w	r2, r2, #1
 80020c8:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	2220      	movs	r2, #32
 80020ce:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	2200      	movs	r2, #0
 80020d6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80020da:	2300      	movs	r3, #0
 80020dc:	e000      	b.n	80020e0 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80020de:	2302      	movs	r3, #2
  }
}
 80020e0:	4618      	mov	r0, r3
 80020e2:	3714      	adds	r7, #20
 80020e4:	46bd      	mov	sp, r7
 80020e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ea:	4770      	bx	lr

080020ec <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80020ec:	b480      	push	{r7}
 80020ee:	b085      	sub	sp, #20
 80020f0:	af00      	add	r7, sp, #0
 80020f2:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d141      	bne.n	800217e <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80020fa:	4b4b      	ldr	r3, [pc, #300]	@ (8002228 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002102:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002106:	d131      	bne.n	800216c <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002108:	4b47      	ldr	r3, [pc, #284]	@ (8002228 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800210a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800210e:	4a46      	ldr	r2, [pc, #280]	@ (8002228 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002110:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002114:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002118:	4b43      	ldr	r3, [pc, #268]	@ (8002228 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002120:	4a41      	ldr	r2, [pc, #260]	@ (8002228 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002122:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002126:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002128:	4b40      	ldr	r3, [pc, #256]	@ (800222c <HAL_PWREx_ControlVoltageScaling+0x140>)
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	2232      	movs	r2, #50	@ 0x32
 800212e:	fb02 f303 	mul.w	r3, r2, r3
 8002132:	4a3f      	ldr	r2, [pc, #252]	@ (8002230 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002134:	fba2 2303 	umull	r2, r3, r2, r3
 8002138:	0c9b      	lsrs	r3, r3, #18
 800213a:	3301      	adds	r3, #1
 800213c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800213e:	e002      	b.n	8002146 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	3b01      	subs	r3, #1
 8002144:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002146:	4b38      	ldr	r3, [pc, #224]	@ (8002228 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002148:	695b      	ldr	r3, [r3, #20]
 800214a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800214e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002152:	d102      	bne.n	800215a <HAL_PWREx_ControlVoltageScaling+0x6e>
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	2b00      	cmp	r3, #0
 8002158:	d1f2      	bne.n	8002140 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800215a:	4b33      	ldr	r3, [pc, #204]	@ (8002228 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800215c:	695b      	ldr	r3, [r3, #20]
 800215e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002162:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002166:	d158      	bne.n	800221a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002168:	2303      	movs	r3, #3
 800216a:	e057      	b.n	800221c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800216c:	4b2e      	ldr	r3, [pc, #184]	@ (8002228 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800216e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002172:	4a2d      	ldr	r2, [pc, #180]	@ (8002228 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002174:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002178:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 800217c:	e04d      	b.n	800221a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002184:	d141      	bne.n	800220a <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002186:	4b28      	ldr	r3, [pc, #160]	@ (8002228 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800218e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002192:	d131      	bne.n	80021f8 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002194:	4b24      	ldr	r3, [pc, #144]	@ (8002228 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002196:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800219a:	4a23      	ldr	r2, [pc, #140]	@ (8002228 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800219c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80021a0:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80021a4:	4b20      	ldr	r3, [pc, #128]	@ (8002228 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80021ac:	4a1e      	ldr	r2, [pc, #120]	@ (8002228 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80021ae:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80021b2:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80021b4:	4b1d      	ldr	r3, [pc, #116]	@ (800222c <HAL_PWREx_ControlVoltageScaling+0x140>)
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	2232      	movs	r2, #50	@ 0x32
 80021ba:	fb02 f303 	mul.w	r3, r2, r3
 80021be:	4a1c      	ldr	r2, [pc, #112]	@ (8002230 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80021c0:	fba2 2303 	umull	r2, r3, r2, r3
 80021c4:	0c9b      	lsrs	r3, r3, #18
 80021c6:	3301      	adds	r3, #1
 80021c8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80021ca:	e002      	b.n	80021d2 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	3b01      	subs	r3, #1
 80021d0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80021d2:	4b15      	ldr	r3, [pc, #84]	@ (8002228 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80021d4:	695b      	ldr	r3, [r3, #20]
 80021d6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80021da:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80021de:	d102      	bne.n	80021e6 <HAL_PWREx_ControlVoltageScaling+0xfa>
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d1f2      	bne.n	80021cc <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80021e6:	4b10      	ldr	r3, [pc, #64]	@ (8002228 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80021e8:	695b      	ldr	r3, [r3, #20]
 80021ea:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80021ee:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80021f2:	d112      	bne.n	800221a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80021f4:	2303      	movs	r3, #3
 80021f6:	e011      	b.n	800221c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80021f8:	4b0b      	ldr	r3, [pc, #44]	@ (8002228 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80021fa:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80021fe:	4a0a      	ldr	r2, [pc, #40]	@ (8002228 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002200:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002204:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8002208:	e007      	b.n	800221a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800220a:	4b07      	ldr	r3, [pc, #28]	@ (8002228 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002212:	4a05      	ldr	r2, [pc, #20]	@ (8002228 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002214:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002218:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 800221a:	2300      	movs	r3, #0
}
 800221c:	4618      	mov	r0, r3
 800221e:	3714      	adds	r7, #20
 8002220:	46bd      	mov	sp, r7
 8002222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002226:	4770      	bx	lr
 8002228:	40007000 	.word	0x40007000
 800222c:	20000000 	.word	0x20000000
 8002230:	431bde83 	.word	0x431bde83

08002234 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8002234:	b480      	push	{r7}
 8002236:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8002238:	4b05      	ldr	r3, [pc, #20]	@ (8002250 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800223a:	689b      	ldr	r3, [r3, #8]
 800223c:	4a04      	ldr	r2, [pc, #16]	@ (8002250 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800223e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002242:	6093      	str	r3, [r2, #8]
}
 8002244:	bf00      	nop
 8002246:	46bd      	mov	sp, r7
 8002248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800224c:	4770      	bx	lr
 800224e:	bf00      	nop
 8002250:	40007000 	.word	0x40007000

08002254 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002254:	b580      	push	{r7, lr}
 8002256:	b088      	sub	sp, #32
 8002258:	af00      	add	r7, sp, #0
 800225a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	2b00      	cmp	r3, #0
 8002260:	d101      	bne.n	8002266 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002262:	2301      	movs	r3, #1
 8002264:	e2fe      	b.n	8002864 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	f003 0301 	and.w	r3, r3, #1
 800226e:	2b00      	cmp	r3, #0
 8002270:	d075      	beq.n	800235e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002272:	4b97      	ldr	r3, [pc, #604]	@ (80024d0 <HAL_RCC_OscConfig+0x27c>)
 8002274:	689b      	ldr	r3, [r3, #8]
 8002276:	f003 030c 	and.w	r3, r3, #12
 800227a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800227c:	4b94      	ldr	r3, [pc, #592]	@ (80024d0 <HAL_RCC_OscConfig+0x27c>)
 800227e:	68db      	ldr	r3, [r3, #12]
 8002280:	f003 0303 	and.w	r3, r3, #3
 8002284:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8002286:	69bb      	ldr	r3, [r7, #24]
 8002288:	2b0c      	cmp	r3, #12
 800228a:	d102      	bne.n	8002292 <HAL_RCC_OscConfig+0x3e>
 800228c:	697b      	ldr	r3, [r7, #20]
 800228e:	2b03      	cmp	r3, #3
 8002290:	d002      	beq.n	8002298 <HAL_RCC_OscConfig+0x44>
 8002292:	69bb      	ldr	r3, [r7, #24]
 8002294:	2b08      	cmp	r3, #8
 8002296:	d10b      	bne.n	80022b0 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002298:	4b8d      	ldr	r3, [pc, #564]	@ (80024d0 <HAL_RCC_OscConfig+0x27c>)
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d05b      	beq.n	800235c <HAL_RCC_OscConfig+0x108>
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	685b      	ldr	r3, [r3, #4]
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d157      	bne.n	800235c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80022ac:	2301      	movs	r3, #1
 80022ae:	e2d9      	b.n	8002864 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	685b      	ldr	r3, [r3, #4]
 80022b4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80022b8:	d106      	bne.n	80022c8 <HAL_RCC_OscConfig+0x74>
 80022ba:	4b85      	ldr	r3, [pc, #532]	@ (80024d0 <HAL_RCC_OscConfig+0x27c>)
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	4a84      	ldr	r2, [pc, #528]	@ (80024d0 <HAL_RCC_OscConfig+0x27c>)
 80022c0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80022c4:	6013      	str	r3, [r2, #0]
 80022c6:	e01d      	b.n	8002304 <HAL_RCC_OscConfig+0xb0>
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	685b      	ldr	r3, [r3, #4]
 80022cc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80022d0:	d10c      	bne.n	80022ec <HAL_RCC_OscConfig+0x98>
 80022d2:	4b7f      	ldr	r3, [pc, #508]	@ (80024d0 <HAL_RCC_OscConfig+0x27c>)
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	4a7e      	ldr	r2, [pc, #504]	@ (80024d0 <HAL_RCC_OscConfig+0x27c>)
 80022d8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80022dc:	6013      	str	r3, [r2, #0]
 80022de:	4b7c      	ldr	r3, [pc, #496]	@ (80024d0 <HAL_RCC_OscConfig+0x27c>)
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	4a7b      	ldr	r2, [pc, #492]	@ (80024d0 <HAL_RCC_OscConfig+0x27c>)
 80022e4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80022e8:	6013      	str	r3, [r2, #0]
 80022ea:	e00b      	b.n	8002304 <HAL_RCC_OscConfig+0xb0>
 80022ec:	4b78      	ldr	r3, [pc, #480]	@ (80024d0 <HAL_RCC_OscConfig+0x27c>)
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	4a77      	ldr	r2, [pc, #476]	@ (80024d0 <HAL_RCC_OscConfig+0x27c>)
 80022f2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80022f6:	6013      	str	r3, [r2, #0]
 80022f8:	4b75      	ldr	r3, [pc, #468]	@ (80024d0 <HAL_RCC_OscConfig+0x27c>)
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	4a74      	ldr	r2, [pc, #464]	@ (80024d0 <HAL_RCC_OscConfig+0x27c>)
 80022fe:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002302:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	685b      	ldr	r3, [r3, #4]
 8002308:	2b00      	cmp	r3, #0
 800230a:	d013      	beq.n	8002334 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800230c:	f7ff f9c4 	bl	8001698 <HAL_GetTick>
 8002310:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002312:	e008      	b.n	8002326 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002314:	f7ff f9c0 	bl	8001698 <HAL_GetTick>
 8002318:	4602      	mov	r2, r0
 800231a:	693b      	ldr	r3, [r7, #16]
 800231c:	1ad3      	subs	r3, r2, r3
 800231e:	2b64      	cmp	r3, #100	@ 0x64
 8002320:	d901      	bls.n	8002326 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002322:	2303      	movs	r3, #3
 8002324:	e29e      	b.n	8002864 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002326:	4b6a      	ldr	r3, [pc, #424]	@ (80024d0 <HAL_RCC_OscConfig+0x27c>)
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800232e:	2b00      	cmp	r3, #0
 8002330:	d0f0      	beq.n	8002314 <HAL_RCC_OscConfig+0xc0>
 8002332:	e014      	b.n	800235e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002334:	f7ff f9b0 	bl	8001698 <HAL_GetTick>
 8002338:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800233a:	e008      	b.n	800234e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800233c:	f7ff f9ac 	bl	8001698 <HAL_GetTick>
 8002340:	4602      	mov	r2, r0
 8002342:	693b      	ldr	r3, [r7, #16]
 8002344:	1ad3      	subs	r3, r2, r3
 8002346:	2b64      	cmp	r3, #100	@ 0x64
 8002348:	d901      	bls.n	800234e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800234a:	2303      	movs	r3, #3
 800234c:	e28a      	b.n	8002864 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800234e:	4b60      	ldr	r3, [pc, #384]	@ (80024d0 <HAL_RCC_OscConfig+0x27c>)
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002356:	2b00      	cmp	r3, #0
 8002358:	d1f0      	bne.n	800233c <HAL_RCC_OscConfig+0xe8>
 800235a:	e000      	b.n	800235e <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800235c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	f003 0302 	and.w	r3, r3, #2
 8002366:	2b00      	cmp	r3, #0
 8002368:	d075      	beq.n	8002456 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800236a:	4b59      	ldr	r3, [pc, #356]	@ (80024d0 <HAL_RCC_OscConfig+0x27c>)
 800236c:	689b      	ldr	r3, [r3, #8]
 800236e:	f003 030c 	and.w	r3, r3, #12
 8002372:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002374:	4b56      	ldr	r3, [pc, #344]	@ (80024d0 <HAL_RCC_OscConfig+0x27c>)
 8002376:	68db      	ldr	r3, [r3, #12]
 8002378:	f003 0303 	and.w	r3, r3, #3
 800237c:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 800237e:	69bb      	ldr	r3, [r7, #24]
 8002380:	2b0c      	cmp	r3, #12
 8002382:	d102      	bne.n	800238a <HAL_RCC_OscConfig+0x136>
 8002384:	697b      	ldr	r3, [r7, #20]
 8002386:	2b02      	cmp	r3, #2
 8002388:	d002      	beq.n	8002390 <HAL_RCC_OscConfig+0x13c>
 800238a:	69bb      	ldr	r3, [r7, #24]
 800238c:	2b04      	cmp	r3, #4
 800238e:	d11f      	bne.n	80023d0 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002390:	4b4f      	ldr	r3, [pc, #316]	@ (80024d0 <HAL_RCC_OscConfig+0x27c>)
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002398:	2b00      	cmp	r3, #0
 800239a:	d005      	beq.n	80023a8 <HAL_RCC_OscConfig+0x154>
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	68db      	ldr	r3, [r3, #12]
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d101      	bne.n	80023a8 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 80023a4:	2301      	movs	r3, #1
 80023a6:	e25d      	b.n	8002864 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80023a8:	4b49      	ldr	r3, [pc, #292]	@ (80024d0 <HAL_RCC_OscConfig+0x27c>)
 80023aa:	685b      	ldr	r3, [r3, #4]
 80023ac:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	691b      	ldr	r3, [r3, #16]
 80023b4:	061b      	lsls	r3, r3, #24
 80023b6:	4946      	ldr	r1, [pc, #280]	@ (80024d0 <HAL_RCC_OscConfig+0x27c>)
 80023b8:	4313      	orrs	r3, r2
 80023ba:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80023bc:	4b45      	ldr	r3, [pc, #276]	@ (80024d4 <HAL_RCC_OscConfig+0x280>)
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	4618      	mov	r0, r3
 80023c2:	f7ff f91d 	bl	8001600 <HAL_InitTick>
 80023c6:	4603      	mov	r3, r0
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d043      	beq.n	8002454 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 80023cc:	2301      	movs	r3, #1
 80023ce:	e249      	b.n	8002864 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	68db      	ldr	r3, [r3, #12]
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d023      	beq.n	8002420 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80023d8:	4b3d      	ldr	r3, [pc, #244]	@ (80024d0 <HAL_RCC_OscConfig+0x27c>)
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	4a3c      	ldr	r2, [pc, #240]	@ (80024d0 <HAL_RCC_OscConfig+0x27c>)
 80023de:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80023e2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023e4:	f7ff f958 	bl	8001698 <HAL_GetTick>
 80023e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80023ea:	e008      	b.n	80023fe <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80023ec:	f7ff f954 	bl	8001698 <HAL_GetTick>
 80023f0:	4602      	mov	r2, r0
 80023f2:	693b      	ldr	r3, [r7, #16]
 80023f4:	1ad3      	subs	r3, r2, r3
 80023f6:	2b02      	cmp	r3, #2
 80023f8:	d901      	bls.n	80023fe <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80023fa:	2303      	movs	r3, #3
 80023fc:	e232      	b.n	8002864 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80023fe:	4b34      	ldr	r3, [pc, #208]	@ (80024d0 <HAL_RCC_OscConfig+0x27c>)
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002406:	2b00      	cmp	r3, #0
 8002408:	d0f0      	beq.n	80023ec <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800240a:	4b31      	ldr	r3, [pc, #196]	@ (80024d0 <HAL_RCC_OscConfig+0x27c>)
 800240c:	685b      	ldr	r3, [r3, #4]
 800240e:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	691b      	ldr	r3, [r3, #16]
 8002416:	061b      	lsls	r3, r3, #24
 8002418:	492d      	ldr	r1, [pc, #180]	@ (80024d0 <HAL_RCC_OscConfig+0x27c>)
 800241a:	4313      	orrs	r3, r2
 800241c:	604b      	str	r3, [r1, #4]
 800241e:	e01a      	b.n	8002456 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002420:	4b2b      	ldr	r3, [pc, #172]	@ (80024d0 <HAL_RCC_OscConfig+0x27c>)
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	4a2a      	ldr	r2, [pc, #168]	@ (80024d0 <HAL_RCC_OscConfig+0x27c>)
 8002426:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800242a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800242c:	f7ff f934 	bl	8001698 <HAL_GetTick>
 8002430:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002432:	e008      	b.n	8002446 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002434:	f7ff f930 	bl	8001698 <HAL_GetTick>
 8002438:	4602      	mov	r2, r0
 800243a:	693b      	ldr	r3, [r7, #16]
 800243c:	1ad3      	subs	r3, r2, r3
 800243e:	2b02      	cmp	r3, #2
 8002440:	d901      	bls.n	8002446 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8002442:	2303      	movs	r3, #3
 8002444:	e20e      	b.n	8002864 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002446:	4b22      	ldr	r3, [pc, #136]	@ (80024d0 <HAL_RCC_OscConfig+0x27c>)
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800244e:	2b00      	cmp	r3, #0
 8002450:	d1f0      	bne.n	8002434 <HAL_RCC_OscConfig+0x1e0>
 8002452:	e000      	b.n	8002456 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002454:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	f003 0308 	and.w	r3, r3, #8
 800245e:	2b00      	cmp	r3, #0
 8002460:	d041      	beq.n	80024e6 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	695b      	ldr	r3, [r3, #20]
 8002466:	2b00      	cmp	r3, #0
 8002468:	d01c      	beq.n	80024a4 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800246a:	4b19      	ldr	r3, [pc, #100]	@ (80024d0 <HAL_RCC_OscConfig+0x27c>)
 800246c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002470:	4a17      	ldr	r2, [pc, #92]	@ (80024d0 <HAL_RCC_OscConfig+0x27c>)
 8002472:	f043 0301 	orr.w	r3, r3, #1
 8002476:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800247a:	f7ff f90d 	bl	8001698 <HAL_GetTick>
 800247e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002480:	e008      	b.n	8002494 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002482:	f7ff f909 	bl	8001698 <HAL_GetTick>
 8002486:	4602      	mov	r2, r0
 8002488:	693b      	ldr	r3, [r7, #16]
 800248a:	1ad3      	subs	r3, r2, r3
 800248c:	2b02      	cmp	r3, #2
 800248e:	d901      	bls.n	8002494 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002490:	2303      	movs	r3, #3
 8002492:	e1e7      	b.n	8002864 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002494:	4b0e      	ldr	r3, [pc, #56]	@ (80024d0 <HAL_RCC_OscConfig+0x27c>)
 8002496:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800249a:	f003 0302 	and.w	r3, r3, #2
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d0ef      	beq.n	8002482 <HAL_RCC_OscConfig+0x22e>
 80024a2:	e020      	b.n	80024e6 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80024a4:	4b0a      	ldr	r3, [pc, #40]	@ (80024d0 <HAL_RCC_OscConfig+0x27c>)
 80024a6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80024aa:	4a09      	ldr	r2, [pc, #36]	@ (80024d0 <HAL_RCC_OscConfig+0x27c>)
 80024ac:	f023 0301 	bic.w	r3, r3, #1
 80024b0:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80024b4:	f7ff f8f0 	bl	8001698 <HAL_GetTick>
 80024b8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80024ba:	e00d      	b.n	80024d8 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80024bc:	f7ff f8ec 	bl	8001698 <HAL_GetTick>
 80024c0:	4602      	mov	r2, r0
 80024c2:	693b      	ldr	r3, [r7, #16]
 80024c4:	1ad3      	subs	r3, r2, r3
 80024c6:	2b02      	cmp	r3, #2
 80024c8:	d906      	bls.n	80024d8 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80024ca:	2303      	movs	r3, #3
 80024cc:	e1ca      	b.n	8002864 <HAL_RCC_OscConfig+0x610>
 80024ce:	bf00      	nop
 80024d0:	40021000 	.word	0x40021000
 80024d4:	20000018 	.word	0x20000018
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80024d8:	4b8c      	ldr	r3, [pc, #560]	@ (800270c <HAL_RCC_OscConfig+0x4b8>)
 80024da:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80024de:	f003 0302 	and.w	r3, r3, #2
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d1ea      	bne.n	80024bc <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	f003 0304 	and.w	r3, r3, #4
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	f000 80a6 	beq.w	8002640 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 80024f4:	2300      	movs	r3, #0
 80024f6:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80024f8:	4b84      	ldr	r3, [pc, #528]	@ (800270c <HAL_RCC_OscConfig+0x4b8>)
 80024fa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80024fc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002500:	2b00      	cmp	r3, #0
 8002502:	d101      	bne.n	8002508 <HAL_RCC_OscConfig+0x2b4>
 8002504:	2301      	movs	r3, #1
 8002506:	e000      	b.n	800250a <HAL_RCC_OscConfig+0x2b6>
 8002508:	2300      	movs	r3, #0
 800250a:	2b00      	cmp	r3, #0
 800250c:	d00d      	beq.n	800252a <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800250e:	4b7f      	ldr	r3, [pc, #508]	@ (800270c <HAL_RCC_OscConfig+0x4b8>)
 8002510:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002512:	4a7e      	ldr	r2, [pc, #504]	@ (800270c <HAL_RCC_OscConfig+0x4b8>)
 8002514:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002518:	6593      	str	r3, [r2, #88]	@ 0x58
 800251a:	4b7c      	ldr	r3, [pc, #496]	@ (800270c <HAL_RCC_OscConfig+0x4b8>)
 800251c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800251e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002522:	60fb      	str	r3, [r7, #12]
 8002524:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8002526:	2301      	movs	r3, #1
 8002528:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800252a:	4b79      	ldr	r3, [pc, #484]	@ (8002710 <HAL_RCC_OscConfig+0x4bc>)
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002532:	2b00      	cmp	r3, #0
 8002534:	d118      	bne.n	8002568 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002536:	4b76      	ldr	r3, [pc, #472]	@ (8002710 <HAL_RCC_OscConfig+0x4bc>)
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	4a75      	ldr	r2, [pc, #468]	@ (8002710 <HAL_RCC_OscConfig+0x4bc>)
 800253c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002540:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002542:	f7ff f8a9 	bl	8001698 <HAL_GetTick>
 8002546:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002548:	e008      	b.n	800255c <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800254a:	f7ff f8a5 	bl	8001698 <HAL_GetTick>
 800254e:	4602      	mov	r2, r0
 8002550:	693b      	ldr	r3, [r7, #16]
 8002552:	1ad3      	subs	r3, r2, r3
 8002554:	2b02      	cmp	r3, #2
 8002556:	d901      	bls.n	800255c <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8002558:	2303      	movs	r3, #3
 800255a:	e183      	b.n	8002864 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800255c:	4b6c      	ldr	r3, [pc, #432]	@ (8002710 <HAL_RCC_OscConfig+0x4bc>)
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002564:	2b00      	cmp	r3, #0
 8002566:	d0f0      	beq.n	800254a <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	689b      	ldr	r3, [r3, #8]
 800256c:	2b01      	cmp	r3, #1
 800256e:	d108      	bne.n	8002582 <HAL_RCC_OscConfig+0x32e>
 8002570:	4b66      	ldr	r3, [pc, #408]	@ (800270c <HAL_RCC_OscConfig+0x4b8>)
 8002572:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002576:	4a65      	ldr	r2, [pc, #404]	@ (800270c <HAL_RCC_OscConfig+0x4b8>)
 8002578:	f043 0301 	orr.w	r3, r3, #1
 800257c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002580:	e024      	b.n	80025cc <HAL_RCC_OscConfig+0x378>
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	689b      	ldr	r3, [r3, #8]
 8002586:	2b05      	cmp	r3, #5
 8002588:	d110      	bne.n	80025ac <HAL_RCC_OscConfig+0x358>
 800258a:	4b60      	ldr	r3, [pc, #384]	@ (800270c <HAL_RCC_OscConfig+0x4b8>)
 800258c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002590:	4a5e      	ldr	r2, [pc, #376]	@ (800270c <HAL_RCC_OscConfig+0x4b8>)
 8002592:	f043 0304 	orr.w	r3, r3, #4
 8002596:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800259a:	4b5c      	ldr	r3, [pc, #368]	@ (800270c <HAL_RCC_OscConfig+0x4b8>)
 800259c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80025a0:	4a5a      	ldr	r2, [pc, #360]	@ (800270c <HAL_RCC_OscConfig+0x4b8>)
 80025a2:	f043 0301 	orr.w	r3, r3, #1
 80025a6:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80025aa:	e00f      	b.n	80025cc <HAL_RCC_OscConfig+0x378>
 80025ac:	4b57      	ldr	r3, [pc, #348]	@ (800270c <HAL_RCC_OscConfig+0x4b8>)
 80025ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80025b2:	4a56      	ldr	r2, [pc, #344]	@ (800270c <HAL_RCC_OscConfig+0x4b8>)
 80025b4:	f023 0301 	bic.w	r3, r3, #1
 80025b8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80025bc:	4b53      	ldr	r3, [pc, #332]	@ (800270c <HAL_RCC_OscConfig+0x4b8>)
 80025be:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80025c2:	4a52      	ldr	r2, [pc, #328]	@ (800270c <HAL_RCC_OscConfig+0x4b8>)
 80025c4:	f023 0304 	bic.w	r3, r3, #4
 80025c8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	689b      	ldr	r3, [r3, #8]
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d016      	beq.n	8002602 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80025d4:	f7ff f860 	bl	8001698 <HAL_GetTick>
 80025d8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80025da:	e00a      	b.n	80025f2 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80025dc:	f7ff f85c 	bl	8001698 <HAL_GetTick>
 80025e0:	4602      	mov	r2, r0
 80025e2:	693b      	ldr	r3, [r7, #16]
 80025e4:	1ad3      	subs	r3, r2, r3
 80025e6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80025ea:	4293      	cmp	r3, r2
 80025ec:	d901      	bls.n	80025f2 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 80025ee:	2303      	movs	r3, #3
 80025f0:	e138      	b.n	8002864 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80025f2:	4b46      	ldr	r3, [pc, #280]	@ (800270c <HAL_RCC_OscConfig+0x4b8>)
 80025f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80025f8:	f003 0302 	and.w	r3, r3, #2
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d0ed      	beq.n	80025dc <HAL_RCC_OscConfig+0x388>
 8002600:	e015      	b.n	800262e <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002602:	f7ff f849 	bl	8001698 <HAL_GetTick>
 8002606:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002608:	e00a      	b.n	8002620 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800260a:	f7ff f845 	bl	8001698 <HAL_GetTick>
 800260e:	4602      	mov	r2, r0
 8002610:	693b      	ldr	r3, [r7, #16]
 8002612:	1ad3      	subs	r3, r2, r3
 8002614:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002618:	4293      	cmp	r3, r2
 800261a:	d901      	bls.n	8002620 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 800261c:	2303      	movs	r3, #3
 800261e:	e121      	b.n	8002864 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002620:	4b3a      	ldr	r3, [pc, #232]	@ (800270c <HAL_RCC_OscConfig+0x4b8>)
 8002622:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002626:	f003 0302 	and.w	r3, r3, #2
 800262a:	2b00      	cmp	r3, #0
 800262c:	d1ed      	bne.n	800260a <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800262e:	7ffb      	ldrb	r3, [r7, #31]
 8002630:	2b01      	cmp	r3, #1
 8002632:	d105      	bne.n	8002640 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002634:	4b35      	ldr	r3, [pc, #212]	@ (800270c <HAL_RCC_OscConfig+0x4b8>)
 8002636:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002638:	4a34      	ldr	r2, [pc, #208]	@ (800270c <HAL_RCC_OscConfig+0x4b8>)
 800263a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800263e:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	f003 0320 	and.w	r3, r3, #32
 8002648:	2b00      	cmp	r3, #0
 800264a:	d03c      	beq.n	80026c6 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	699b      	ldr	r3, [r3, #24]
 8002650:	2b00      	cmp	r3, #0
 8002652:	d01c      	beq.n	800268e <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002654:	4b2d      	ldr	r3, [pc, #180]	@ (800270c <HAL_RCC_OscConfig+0x4b8>)
 8002656:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800265a:	4a2c      	ldr	r2, [pc, #176]	@ (800270c <HAL_RCC_OscConfig+0x4b8>)
 800265c:	f043 0301 	orr.w	r3, r3, #1
 8002660:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002664:	f7ff f818 	bl	8001698 <HAL_GetTick>
 8002668:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800266a:	e008      	b.n	800267e <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800266c:	f7ff f814 	bl	8001698 <HAL_GetTick>
 8002670:	4602      	mov	r2, r0
 8002672:	693b      	ldr	r3, [r7, #16]
 8002674:	1ad3      	subs	r3, r2, r3
 8002676:	2b02      	cmp	r3, #2
 8002678:	d901      	bls.n	800267e <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 800267a:	2303      	movs	r3, #3
 800267c:	e0f2      	b.n	8002864 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800267e:	4b23      	ldr	r3, [pc, #140]	@ (800270c <HAL_RCC_OscConfig+0x4b8>)
 8002680:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002684:	f003 0302 	and.w	r3, r3, #2
 8002688:	2b00      	cmp	r3, #0
 800268a:	d0ef      	beq.n	800266c <HAL_RCC_OscConfig+0x418>
 800268c:	e01b      	b.n	80026c6 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800268e:	4b1f      	ldr	r3, [pc, #124]	@ (800270c <HAL_RCC_OscConfig+0x4b8>)
 8002690:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002694:	4a1d      	ldr	r2, [pc, #116]	@ (800270c <HAL_RCC_OscConfig+0x4b8>)
 8002696:	f023 0301 	bic.w	r3, r3, #1
 800269a:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800269e:	f7fe fffb 	bl	8001698 <HAL_GetTick>
 80026a2:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80026a4:	e008      	b.n	80026b8 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80026a6:	f7fe fff7 	bl	8001698 <HAL_GetTick>
 80026aa:	4602      	mov	r2, r0
 80026ac:	693b      	ldr	r3, [r7, #16]
 80026ae:	1ad3      	subs	r3, r2, r3
 80026b0:	2b02      	cmp	r3, #2
 80026b2:	d901      	bls.n	80026b8 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 80026b4:	2303      	movs	r3, #3
 80026b6:	e0d5      	b.n	8002864 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80026b8:	4b14      	ldr	r3, [pc, #80]	@ (800270c <HAL_RCC_OscConfig+0x4b8>)
 80026ba:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80026be:	f003 0302 	and.w	r3, r3, #2
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d1ef      	bne.n	80026a6 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	69db      	ldr	r3, [r3, #28]
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	f000 80c9 	beq.w	8002862 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80026d0:	4b0e      	ldr	r3, [pc, #56]	@ (800270c <HAL_RCC_OscConfig+0x4b8>)
 80026d2:	689b      	ldr	r3, [r3, #8]
 80026d4:	f003 030c 	and.w	r3, r3, #12
 80026d8:	2b0c      	cmp	r3, #12
 80026da:	f000 8083 	beq.w	80027e4 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	69db      	ldr	r3, [r3, #28]
 80026e2:	2b02      	cmp	r3, #2
 80026e4:	d15e      	bne.n	80027a4 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80026e6:	4b09      	ldr	r3, [pc, #36]	@ (800270c <HAL_RCC_OscConfig+0x4b8>)
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	4a08      	ldr	r2, [pc, #32]	@ (800270c <HAL_RCC_OscConfig+0x4b8>)
 80026ec:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80026f0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026f2:	f7fe ffd1 	bl	8001698 <HAL_GetTick>
 80026f6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80026f8:	e00c      	b.n	8002714 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80026fa:	f7fe ffcd 	bl	8001698 <HAL_GetTick>
 80026fe:	4602      	mov	r2, r0
 8002700:	693b      	ldr	r3, [r7, #16]
 8002702:	1ad3      	subs	r3, r2, r3
 8002704:	2b02      	cmp	r3, #2
 8002706:	d905      	bls.n	8002714 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8002708:	2303      	movs	r3, #3
 800270a:	e0ab      	b.n	8002864 <HAL_RCC_OscConfig+0x610>
 800270c:	40021000 	.word	0x40021000
 8002710:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002714:	4b55      	ldr	r3, [pc, #340]	@ (800286c <HAL_RCC_OscConfig+0x618>)
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800271c:	2b00      	cmp	r3, #0
 800271e:	d1ec      	bne.n	80026fa <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002720:	4b52      	ldr	r3, [pc, #328]	@ (800286c <HAL_RCC_OscConfig+0x618>)
 8002722:	68da      	ldr	r2, [r3, #12]
 8002724:	4b52      	ldr	r3, [pc, #328]	@ (8002870 <HAL_RCC_OscConfig+0x61c>)
 8002726:	4013      	ands	r3, r2
 8002728:	687a      	ldr	r2, [r7, #4]
 800272a:	6a11      	ldr	r1, [r2, #32]
 800272c:	687a      	ldr	r2, [r7, #4]
 800272e:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002730:	3a01      	subs	r2, #1
 8002732:	0112      	lsls	r2, r2, #4
 8002734:	4311      	orrs	r1, r2
 8002736:	687a      	ldr	r2, [r7, #4]
 8002738:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 800273a:	0212      	lsls	r2, r2, #8
 800273c:	4311      	orrs	r1, r2
 800273e:	687a      	ldr	r2, [r7, #4]
 8002740:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8002742:	0852      	lsrs	r2, r2, #1
 8002744:	3a01      	subs	r2, #1
 8002746:	0552      	lsls	r2, r2, #21
 8002748:	4311      	orrs	r1, r2
 800274a:	687a      	ldr	r2, [r7, #4]
 800274c:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800274e:	0852      	lsrs	r2, r2, #1
 8002750:	3a01      	subs	r2, #1
 8002752:	0652      	lsls	r2, r2, #25
 8002754:	4311      	orrs	r1, r2
 8002756:	687a      	ldr	r2, [r7, #4]
 8002758:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800275a:	06d2      	lsls	r2, r2, #27
 800275c:	430a      	orrs	r2, r1
 800275e:	4943      	ldr	r1, [pc, #268]	@ (800286c <HAL_RCC_OscConfig+0x618>)
 8002760:	4313      	orrs	r3, r2
 8002762:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002764:	4b41      	ldr	r3, [pc, #260]	@ (800286c <HAL_RCC_OscConfig+0x618>)
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	4a40      	ldr	r2, [pc, #256]	@ (800286c <HAL_RCC_OscConfig+0x618>)
 800276a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800276e:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002770:	4b3e      	ldr	r3, [pc, #248]	@ (800286c <HAL_RCC_OscConfig+0x618>)
 8002772:	68db      	ldr	r3, [r3, #12]
 8002774:	4a3d      	ldr	r2, [pc, #244]	@ (800286c <HAL_RCC_OscConfig+0x618>)
 8002776:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800277a:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800277c:	f7fe ff8c 	bl	8001698 <HAL_GetTick>
 8002780:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002782:	e008      	b.n	8002796 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002784:	f7fe ff88 	bl	8001698 <HAL_GetTick>
 8002788:	4602      	mov	r2, r0
 800278a:	693b      	ldr	r3, [r7, #16]
 800278c:	1ad3      	subs	r3, r2, r3
 800278e:	2b02      	cmp	r3, #2
 8002790:	d901      	bls.n	8002796 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8002792:	2303      	movs	r3, #3
 8002794:	e066      	b.n	8002864 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002796:	4b35      	ldr	r3, [pc, #212]	@ (800286c <HAL_RCC_OscConfig+0x618>)
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d0f0      	beq.n	8002784 <HAL_RCC_OscConfig+0x530>
 80027a2:	e05e      	b.n	8002862 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80027a4:	4b31      	ldr	r3, [pc, #196]	@ (800286c <HAL_RCC_OscConfig+0x618>)
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	4a30      	ldr	r2, [pc, #192]	@ (800286c <HAL_RCC_OscConfig+0x618>)
 80027aa:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80027ae:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027b0:	f7fe ff72 	bl	8001698 <HAL_GetTick>
 80027b4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80027b6:	e008      	b.n	80027ca <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80027b8:	f7fe ff6e 	bl	8001698 <HAL_GetTick>
 80027bc:	4602      	mov	r2, r0
 80027be:	693b      	ldr	r3, [r7, #16]
 80027c0:	1ad3      	subs	r3, r2, r3
 80027c2:	2b02      	cmp	r3, #2
 80027c4:	d901      	bls.n	80027ca <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 80027c6:	2303      	movs	r3, #3
 80027c8:	e04c      	b.n	8002864 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80027ca:	4b28      	ldr	r3, [pc, #160]	@ (800286c <HAL_RCC_OscConfig+0x618>)
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d1f0      	bne.n	80027b8 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 80027d6:	4b25      	ldr	r3, [pc, #148]	@ (800286c <HAL_RCC_OscConfig+0x618>)
 80027d8:	68da      	ldr	r2, [r3, #12]
 80027da:	4924      	ldr	r1, [pc, #144]	@ (800286c <HAL_RCC_OscConfig+0x618>)
 80027dc:	4b25      	ldr	r3, [pc, #148]	@ (8002874 <HAL_RCC_OscConfig+0x620>)
 80027de:	4013      	ands	r3, r2
 80027e0:	60cb      	str	r3, [r1, #12]
 80027e2:	e03e      	b.n	8002862 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	69db      	ldr	r3, [r3, #28]
 80027e8:	2b01      	cmp	r3, #1
 80027ea:	d101      	bne.n	80027f0 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 80027ec:	2301      	movs	r3, #1
 80027ee:	e039      	b.n	8002864 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 80027f0:	4b1e      	ldr	r3, [pc, #120]	@ (800286c <HAL_RCC_OscConfig+0x618>)
 80027f2:	68db      	ldr	r3, [r3, #12]
 80027f4:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80027f6:	697b      	ldr	r3, [r7, #20]
 80027f8:	f003 0203 	and.w	r2, r3, #3
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	6a1b      	ldr	r3, [r3, #32]
 8002800:	429a      	cmp	r2, r3
 8002802:	d12c      	bne.n	800285e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002804:	697b      	ldr	r3, [r7, #20]
 8002806:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800280e:	3b01      	subs	r3, #1
 8002810:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002812:	429a      	cmp	r2, r3
 8002814:	d123      	bne.n	800285e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8002816:	697b      	ldr	r3, [r7, #20]
 8002818:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002820:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002822:	429a      	cmp	r2, r3
 8002824:	d11b      	bne.n	800285e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002826:	697b      	ldr	r3, [r7, #20]
 8002828:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002830:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8002832:	429a      	cmp	r2, r3
 8002834:	d113      	bne.n	800285e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002836:	697b      	ldr	r3, [r7, #20]
 8002838:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002840:	085b      	lsrs	r3, r3, #1
 8002842:	3b01      	subs	r3, #1
 8002844:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002846:	429a      	cmp	r2, r3
 8002848:	d109      	bne.n	800285e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800284a:	697b      	ldr	r3, [r7, #20]
 800284c:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002854:	085b      	lsrs	r3, r3, #1
 8002856:	3b01      	subs	r3, #1
 8002858:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800285a:	429a      	cmp	r2, r3
 800285c:	d001      	beq.n	8002862 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 800285e:	2301      	movs	r3, #1
 8002860:	e000      	b.n	8002864 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8002862:	2300      	movs	r3, #0
}
 8002864:	4618      	mov	r0, r3
 8002866:	3720      	adds	r7, #32
 8002868:	46bd      	mov	sp, r7
 800286a:	bd80      	pop	{r7, pc}
 800286c:	40021000 	.word	0x40021000
 8002870:	019f800c 	.word	0x019f800c
 8002874:	feeefffc 	.word	0xfeeefffc

08002878 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002878:	b580      	push	{r7, lr}
 800287a:	b086      	sub	sp, #24
 800287c:	af00      	add	r7, sp, #0
 800287e:	6078      	str	r0, [r7, #4]
 8002880:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8002882:	2300      	movs	r3, #0
 8002884:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	2b00      	cmp	r3, #0
 800288a:	d101      	bne.n	8002890 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800288c:	2301      	movs	r3, #1
 800288e:	e11e      	b.n	8002ace <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002890:	4b91      	ldr	r3, [pc, #580]	@ (8002ad8 <HAL_RCC_ClockConfig+0x260>)
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	f003 030f 	and.w	r3, r3, #15
 8002898:	683a      	ldr	r2, [r7, #0]
 800289a:	429a      	cmp	r2, r3
 800289c:	d910      	bls.n	80028c0 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800289e:	4b8e      	ldr	r3, [pc, #568]	@ (8002ad8 <HAL_RCC_ClockConfig+0x260>)
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	f023 020f 	bic.w	r2, r3, #15
 80028a6:	498c      	ldr	r1, [pc, #560]	@ (8002ad8 <HAL_RCC_ClockConfig+0x260>)
 80028a8:	683b      	ldr	r3, [r7, #0]
 80028aa:	4313      	orrs	r3, r2
 80028ac:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80028ae:	4b8a      	ldr	r3, [pc, #552]	@ (8002ad8 <HAL_RCC_ClockConfig+0x260>)
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	f003 030f 	and.w	r3, r3, #15
 80028b6:	683a      	ldr	r2, [r7, #0]
 80028b8:	429a      	cmp	r2, r3
 80028ba:	d001      	beq.n	80028c0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80028bc:	2301      	movs	r3, #1
 80028be:	e106      	b.n	8002ace <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	f003 0301 	and.w	r3, r3, #1
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d073      	beq.n	80029b4 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	685b      	ldr	r3, [r3, #4]
 80028d0:	2b03      	cmp	r3, #3
 80028d2:	d129      	bne.n	8002928 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80028d4:	4b81      	ldr	r3, [pc, #516]	@ (8002adc <HAL_RCC_ClockConfig+0x264>)
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d101      	bne.n	80028e4 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 80028e0:	2301      	movs	r3, #1
 80028e2:	e0f4      	b.n	8002ace <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 80028e4:	f000 f99e 	bl	8002c24 <RCC_GetSysClockFreqFromPLLSource>
 80028e8:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 80028ea:	693b      	ldr	r3, [r7, #16]
 80028ec:	4a7c      	ldr	r2, [pc, #496]	@ (8002ae0 <HAL_RCC_ClockConfig+0x268>)
 80028ee:	4293      	cmp	r3, r2
 80028f0:	d93f      	bls.n	8002972 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80028f2:	4b7a      	ldr	r3, [pc, #488]	@ (8002adc <HAL_RCC_ClockConfig+0x264>)
 80028f4:	689b      	ldr	r3, [r3, #8]
 80028f6:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d009      	beq.n	8002912 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8002906:	2b00      	cmp	r3, #0
 8002908:	d033      	beq.n	8002972 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800290e:	2b00      	cmp	r3, #0
 8002910:	d12f      	bne.n	8002972 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002912:	4b72      	ldr	r3, [pc, #456]	@ (8002adc <HAL_RCC_ClockConfig+0x264>)
 8002914:	689b      	ldr	r3, [r3, #8]
 8002916:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800291a:	4a70      	ldr	r2, [pc, #448]	@ (8002adc <HAL_RCC_ClockConfig+0x264>)
 800291c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002920:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8002922:	2380      	movs	r3, #128	@ 0x80
 8002924:	617b      	str	r3, [r7, #20]
 8002926:	e024      	b.n	8002972 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	685b      	ldr	r3, [r3, #4]
 800292c:	2b02      	cmp	r3, #2
 800292e:	d107      	bne.n	8002940 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002930:	4b6a      	ldr	r3, [pc, #424]	@ (8002adc <HAL_RCC_ClockConfig+0x264>)
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002938:	2b00      	cmp	r3, #0
 800293a:	d109      	bne.n	8002950 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 800293c:	2301      	movs	r3, #1
 800293e:	e0c6      	b.n	8002ace <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002940:	4b66      	ldr	r3, [pc, #408]	@ (8002adc <HAL_RCC_ClockConfig+0x264>)
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002948:	2b00      	cmp	r3, #0
 800294a:	d101      	bne.n	8002950 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 800294c:	2301      	movs	r3, #1
 800294e:	e0be      	b.n	8002ace <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8002950:	f000 f8ce 	bl	8002af0 <HAL_RCC_GetSysClockFreq>
 8002954:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8002956:	693b      	ldr	r3, [r7, #16]
 8002958:	4a61      	ldr	r2, [pc, #388]	@ (8002ae0 <HAL_RCC_ClockConfig+0x268>)
 800295a:	4293      	cmp	r3, r2
 800295c:	d909      	bls.n	8002972 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800295e:	4b5f      	ldr	r3, [pc, #380]	@ (8002adc <HAL_RCC_ClockConfig+0x264>)
 8002960:	689b      	ldr	r3, [r3, #8]
 8002962:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002966:	4a5d      	ldr	r2, [pc, #372]	@ (8002adc <HAL_RCC_ClockConfig+0x264>)
 8002968:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800296c:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 800296e:	2380      	movs	r3, #128	@ 0x80
 8002970:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002972:	4b5a      	ldr	r3, [pc, #360]	@ (8002adc <HAL_RCC_ClockConfig+0x264>)
 8002974:	689b      	ldr	r3, [r3, #8]
 8002976:	f023 0203 	bic.w	r2, r3, #3
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	685b      	ldr	r3, [r3, #4]
 800297e:	4957      	ldr	r1, [pc, #348]	@ (8002adc <HAL_RCC_ClockConfig+0x264>)
 8002980:	4313      	orrs	r3, r2
 8002982:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002984:	f7fe fe88 	bl	8001698 <HAL_GetTick>
 8002988:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800298a:	e00a      	b.n	80029a2 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800298c:	f7fe fe84 	bl	8001698 <HAL_GetTick>
 8002990:	4602      	mov	r2, r0
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	1ad3      	subs	r3, r2, r3
 8002996:	f241 3288 	movw	r2, #5000	@ 0x1388
 800299a:	4293      	cmp	r3, r2
 800299c:	d901      	bls.n	80029a2 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 800299e:	2303      	movs	r3, #3
 80029a0:	e095      	b.n	8002ace <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80029a2:	4b4e      	ldr	r3, [pc, #312]	@ (8002adc <HAL_RCC_ClockConfig+0x264>)
 80029a4:	689b      	ldr	r3, [r3, #8]
 80029a6:	f003 020c 	and.w	r2, r3, #12
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	685b      	ldr	r3, [r3, #4]
 80029ae:	009b      	lsls	r3, r3, #2
 80029b0:	429a      	cmp	r2, r3
 80029b2:	d1eb      	bne.n	800298c <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	f003 0302 	and.w	r3, r3, #2
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d023      	beq.n	8002a08 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	f003 0304 	and.w	r3, r3, #4
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d005      	beq.n	80029d8 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80029cc:	4b43      	ldr	r3, [pc, #268]	@ (8002adc <HAL_RCC_ClockConfig+0x264>)
 80029ce:	689b      	ldr	r3, [r3, #8]
 80029d0:	4a42      	ldr	r2, [pc, #264]	@ (8002adc <HAL_RCC_ClockConfig+0x264>)
 80029d2:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80029d6:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	f003 0308 	and.w	r3, r3, #8
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d007      	beq.n	80029f4 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 80029e4:	4b3d      	ldr	r3, [pc, #244]	@ (8002adc <HAL_RCC_ClockConfig+0x264>)
 80029e6:	689b      	ldr	r3, [r3, #8]
 80029e8:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80029ec:	4a3b      	ldr	r2, [pc, #236]	@ (8002adc <HAL_RCC_ClockConfig+0x264>)
 80029ee:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80029f2:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80029f4:	4b39      	ldr	r3, [pc, #228]	@ (8002adc <HAL_RCC_ClockConfig+0x264>)
 80029f6:	689b      	ldr	r3, [r3, #8]
 80029f8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	689b      	ldr	r3, [r3, #8]
 8002a00:	4936      	ldr	r1, [pc, #216]	@ (8002adc <HAL_RCC_ClockConfig+0x264>)
 8002a02:	4313      	orrs	r3, r2
 8002a04:	608b      	str	r3, [r1, #8]
 8002a06:	e008      	b.n	8002a1a <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8002a08:	697b      	ldr	r3, [r7, #20]
 8002a0a:	2b80      	cmp	r3, #128	@ 0x80
 8002a0c:	d105      	bne.n	8002a1a <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8002a0e:	4b33      	ldr	r3, [pc, #204]	@ (8002adc <HAL_RCC_ClockConfig+0x264>)
 8002a10:	689b      	ldr	r3, [r3, #8]
 8002a12:	4a32      	ldr	r2, [pc, #200]	@ (8002adc <HAL_RCC_ClockConfig+0x264>)
 8002a14:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002a18:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002a1a:	4b2f      	ldr	r3, [pc, #188]	@ (8002ad8 <HAL_RCC_ClockConfig+0x260>)
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	f003 030f 	and.w	r3, r3, #15
 8002a22:	683a      	ldr	r2, [r7, #0]
 8002a24:	429a      	cmp	r2, r3
 8002a26:	d21d      	bcs.n	8002a64 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a28:	4b2b      	ldr	r3, [pc, #172]	@ (8002ad8 <HAL_RCC_ClockConfig+0x260>)
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	f023 020f 	bic.w	r2, r3, #15
 8002a30:	4929      	ldr	r1, [pc, #164]	@ (8002ad8 <HAL_RCC_ClockConfig+0x260>)
 8002a32:	683b      	ldr	r3, [r7, #0]
 8002a34:	4313      	orrs	r3, r2
 8002a36:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002a38:	f7fe fe2e 	bl	8001698 <HAL_GetTick>
 8002a3c:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a3e:	e00a      	b.n	8002a56 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002a40:	f7fe fe2a 	bl	8001698 <HAL_GetTick>
 8002a44:	4602      	mov	r2, r0
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	1ad3      	subs	r3, r2, r3
 8002a4a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002a4e:	4293      	cmp	r3, r2
 8002a50:	d901      	bls.n	8002a56 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8002a52:	2303      	movs	r3, #3
 8002a54:	e03b      	b.n	8002ace <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a56:	4b20      	ldr	r3, [pc, #128]	@ (8002ad8 <HAL_RCC_ClockConfig+0x260>)
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	f003 030f 	and.w	r3, r3, #15
 8002a5e:	683a      	ldr	r2, [r7, #0]
 8002a60:	429a      	cmp	r2, r3
 8002a62:	d1ed      	bne.n	8002a40 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	f003 0304 	and.w	r3, r3, #4
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d008      	beq.n	8002a82 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002a70:	4b1a      	ldr	r3, [pc, #104]	@ (8002adc <HAL_RCC_ClockConfig+0x264>)
 8002a72:	689b      	ldr	r3, [r3, #8]
 8002a74:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	68db      	ldr	r3, [r3, #12]
 8002a7c:	4917      	ldr	r1, [pc, #92]	@ (8002adc <HAL_RCC_ClockConfig+0x264>)
 8002a7e:	4313      	orrs	r3, r2
 8002a80:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	f003 0308 	and.w	r3, r3, #8
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d009      	beq.n	8002aa2 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002a8e:	4b13      	ldr	r3, [pc, #76]	@ (8002adc <HAL_RCC_ClockConfig+0x264>)
 8002a90:	689b      	ldr	r3, [r3, #8]
 8002a92:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	691b      	ldr	r3, [r3, #16]
 8002a9a:	00db      	lsls	r3, r3, #3
 8002a9c:	490f      	ldr	r1, [pc, #60]	@ (8002adc <HAL_RCC_ClockConfig+0x264>)
 8002a9e:	4313      	orrs	r3, r2
 8002aa0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002aa2:	f000 f825 	bl	8002af0 <HAL_RCC_GetSysClockFreq>
 8002aa6:	4602      	mov	r2, r0
 8002aa8:	4b0c      	ldr	r3, [pc, #48]	@ (8002adc <HAL_RCC_ClockConfig+0x264>)
 8002aaa:	689b      	ldr	r3, [r3, #8]
 8002aac:	091b      	lsrs	r3, r3, #4
 8002aae:	f003 030f 	and.w	r3, r3, #15
 8002ab2:	490c      	ldr	r1, [pc, #48]	@ (8002ae4 <HAL_RCC_ClockConfig+0x26c>)
 8002ab4:	5ccb      	ldrb	r3, [r1, r3]
 8002ab6:	f003 031f 	and.w	r3, r3, #31
 8002aba:	fa22 f303 	lsr.w	r3, r2, r3
 8002abe:	4a0a      	ldr	r2, [pc, #40]	@ (8002ae8 <HAL_RCC_ClockConfig+0x270>)
 8002ac0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8002ac2:	4b0a      	ldr	r3, [pc, #40]	@ (8002aec <HAL_RCC_ClockConfig+0x274>)
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	4618      	mov	r0, r3
 8002ac8:	f7fe fd9a 	bl	8001600 <HAL_InitTick>
 8002acc:	4603      	mov	r3, r0
}
 8002ace:	4618      	mov	r0, r3
 8002ad0:	3718      	adds	r7, #24
 8002ad2:	46bd      	mov	sp, r7
 8002ad4:	bd80      	pop	{r7, pc}
 8002ad6:	bf00      	nop
 8002ad8:	40022000 	.word	0x40022000
 8002adc:	40021000 	.word	0x40021000
 8002ae0:	04c4b400 	.word	0x04c4b400
 8002ae4:	0800783c 	.word	0x0800783c
 8002ae8:	20000000 	.word	0x20000000
 8002aec:	20000018 	.word	0x20000018

08002af0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002af0:	b480      	push	{r7}
 8002af2:	b087      	sub	sp, #28
 8002af4:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8002af6:	4b2c      	ldr	r3, [pc, #176]	@ (8002ba8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002af8:	689b      	ldr	r3, [r3, #8]
 8002afa:	f003 030c 	and.w	r3, r3, #12
 8002afe:	2b04      	cmp	r3, #4
 8002b00:	d102      	bne.n	8002b08 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002b02:	4b2a      	ldr	r3, [pc, #168]	@ (8002bac <HAL_RCC_GetSysClockFreq+0xbc>)
 8002b04:	613b      	str	r3, [r7, #16]
 8002b06:	e047      	b.n	8002b98 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8002b08:	4b27      	ldr	r3, [pc, #156]	@ (8002ba8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002b0a:	689b      	ldr	r3, [r3, #8]
 8002b0c:	f003 030c 	and.w	r3, r3, #12
 8002b10:	2b08      	cmp	r3, #8
 8002b12:	d102      	bne.n	8002b1a <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002b14:	4b26      	ldr	r3, [pc, #152]	@ (8002bb0 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002b16:	613b      	str	r3, [r7, #16]
 8002b18:	e03e      	b.n	8002b98 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8002b1a:	4b23      	ldr	r3, [pc, #140]	@ (8002ba8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002b1c:	689b      	ldr	r3, [r3, #8]
 8002b1e:	f003 030c 	and.w	r3, r3, #12
 8002b22:	2b0c      	cmp	r3, #12
 8002b24:	d136      	bne.n	8002b94 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002b26:	4b20      	ldr	r3, [pc, #128]	@ (8002ba8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002b28:	68db      	ldr	r3, [r3, #12]
 8002b2a:	f003 0303 	and.w	r3, r3, #3
 8002b2e:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002b30:	4b1d      	ldr	r3, [pc, #116]	@ (8002ba8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002b32:	68db      	ldr	r3, [r3, #12]
 8002b34:	091b      	lsrs	r3, r3, #4
 8002b36:	f003 030f 	and.w	r3, r3, #15
 8002b3a:	3301      	adds	r3, #1
 8002b3c:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	2b03      	cmp	r3, #3
 8002b42:	d10c      	bne.n	8002b5e <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002b44:	4a1a      	ldr	r2, [pc, #104]	@ (8002bb0 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002b46:	68bb      	ldr	r3, [r7, #8]
 8002b48:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b4c:	4a16      	ldr	r2, [pc, #88]	@ (8002ba8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002b4e:	68d2      	ldr	r2, [r2, #12]
 8002b50:	0a12      	lsrs	r2, r2, #8
 8002b52:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8002b56:	fb02 f303 	mul.w	r3, r2, r3
 8002b5a:	617b      	str	r3, [r7, #20]
      break;
 8002b5c:	e00c      	b.n	8002b78 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002b5e:	4a13      	ldr	r2, [pc, #76]	@ (8002bac <HAL_RCC_GetSysClockFreq+0xbc>)
 8002b60:	68bb      	ldr	r3, [r7, #8]
 8002b62:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b66:	4a10      	ldr	r2, [pc, #64]	@ (8002ba8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002b68:	68d2      	ldr	r2, [r2, #12]
 8002b6a:	0a12      	lsrs	r2, r2, #8
 8002b6c:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8002b70:	fb02 f303 	mul.w	r3, r2, r3
 8002b74:	617b      	str	r3, [r7, #20]
      break;
 8002b76:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002b78:	4b0b      	ldr	r3, [pc, #44]	@ (8002ba8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002b7a:	68db      	ldr	r3, [r3, #12]
 8002b7c:	0e5b      	lsrs	r3, r3, #25
 8002b7e:	f003 0303 	and.w	r3, r3, #3
 8002b82:	3301      	adds	r3, #1
 8002b84:	005b      	lsls	r3, r3, #1
 8002b86:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8002b88:	697a      	ldr	r2, [r7, #20]
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b90:	613b      	str	r3, [r7, #16]
 8002b92:	e001      	b.n	8002b98 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8002b94:	2300      	movs	r3, #0
 8002b96:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8002b98:	693b      	ldr	r3, [r7, #16]
}
 8002b9a:	4618      	mov	r0, r3
 8002b9c:	371c      	adds	r7, #28
 8002b9e:	46bd      	mov	sp, r7
 8002ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ba4:	4770      	bx	lr
 8002ba6:	bf00      	nop
 8002ba8:	40021000 	.word	0x40021000
 8002bac:	00f42400 	.word	0x00f42400
 8002bb0:	016e3600 	.word	0x016e3600

08002bb4 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002bb4:	b480      	push	{r7}
 8002bb6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002bb8:	4b03      	ldr	r3, [pc, #12]	@ (8002bc8 <HAL_RCC_GetHCLKFreq+0x14>)
 8002bba:	681b      	ldr	r3, [r3, #0]
}
 8002bbc:	4618      	mov	r0, r3
 8002bbe:	46bd      	mov	sp, r7
 8002bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bc4:	4770      	bx	lr
 8002bc6:	bf00      	nop
 8002bc8:	20000000 	.word	0x20000000

08002bcc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002bcc:	b580      	push	{r7, lr}
 8002bce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002bd0:	f7ff fff0 	bl	8002bb4 <HAL_RCC_GetHCLKFreq>
 8002bd4:	4602      	mov	r2, r0
 8002bd6:	4b06      	ldr	r3, [pc, #24]	@ (8002bf0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002bd8:	689b      	ldr	r3, [r3, #8]
 8002bda:	0a1b      	lsrs	r3, r3, #8
 8002bdc:	f003 0307 	and.w	r3, r3, #7
 8002be0:	4904      	ldr	r1, [pc, #16]	@ (8002bf4 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002be2:	5ccb      	ldrb	r3, [r1, r3]
 8002be4:	f003 031f 	and.w	r3, r3, #31
 8002be8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002bec:	4618      	mov	r0, r3
 8002bee:	bd80      	pop	{r7, pc}
 8002bf0:	40021000 	.word	0x40021000
 8002bf4:	0800784c 	.word	0x0800784c

08002bf8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002bf8:	b580      	push	{r7, lr}
 8002bfa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002bfc:	f7ff ffda 	bl	8002bb4 <HAL_RCC_GetHCLKFreq>
 8002c00:	4602      	mov	r2, r0
 8002c02:	4b06      	ldr	r3, [pc, #24]	@ (8002c1c <HAL_RCC_GetPCLK2Freq+0x24>)
 8002c04:	689b      	ldr	r3, [r3, #8]
 8002c06:	0adb      	lsrs	r3, r3, #11
 8002c08:	f003 0307 	and.w	r3, r3, #7
 8002c0c:	4904      	ldr	r1, [pc, #16]	@ (8002c20 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002c0e:	5ccb      	ldrb	r3, [r1, r3]
 8002c10:	f003 031f 	and.w	r3, r3, #31
 8002c14:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002c18:	4618      	mov	r0, r3
 8002c1a:	bd80      	pop	{r7, pc}
 8002c1c:	40021000 	.word	0x40021000
 8002c20:	0800784c 	.word	0x0800784c

08002c24 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8002c24:	b480      	push	{r7}
 8002c26:	b087      	sub	sp, #28
 8002c28:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002c2a:	4b1e      	ldr	r3, [pc, #120]	@ (8002ca4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002c2c:	68db      	ldr	r3, [r3, #12]
 8002c2e:	f003 0303 	and.w	r3, r3, #3
 8002c32:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002c34:	4b1b      	ldr	r3, [pc, #108]	@ (8002ca4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002c36:	68db      	ldr	r3, [r3, #12]
 8002c38:	091b      	lsrs	r3, r3, #4
 8002c3a:	f003 030f 	and.w	r3, r3, #15
 8002c3e:	3301      	adds	r3, #1
 8002c40:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8002c42:	693b      	ldr	r3, [r7, #16]
 8002c44:	2b03      	cmp	r3, #3
 8002c46:	d10c      	bne.n	8002c62 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002c48:	4a17      	ldr	r2, [pc, #92]	@ (8002ca8 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c50:	4a14      	ldr	r2, [pc, #80]	@ (8002ca4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002c52:	68d2      	ldr	r2, [r2, #12]
 8002c54:	0a12      	lsrs	r2, r2, #8
 8002c56:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8002c5a:	fb02 f303 	mul.w	r3, r2, r3
 8002c5e:	617b      	str	r3, [r7, #20]
    break;
 8002c60:	e00c      	b.n	8002c7c <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002c62:	4a12      	ldr	r2, [pc, #72]	@ (8002cac <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c6a:	4a0e      	ldr	r2, [pc, #56]	@ (8002ca4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002c6c:	68d2      	ldr	r2, [r2, #12]
 8002c6e:	0a12      	lsrs	r2, r2, #8
 8002c70:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8002c74:	fb02 f303 	mul.w	r3, r2, r3
 8002c78:	617b      	str	r3, [r7, #20]
    break;
 8002c7a:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002c7c:	4b09      	ldr	r3, [pc, #36]	@ (8002ca4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002c7e:	68db      	ldr	r3, [r3, #12]
 8002c80:	0e5b      	lsrs	r3, r3, #25
 8002c82:	f003 0303 	and.w	r3, r3, #3
 8002c86:	3301      	adds	r3, #1
 8002c88:	005b      	lsls	r3, r3, #1
 8002c8a:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8002c8c:	697a      	ldr	r2, [r7, #20]
 8002c8e:	68bb      	ldr	r3, [r7, #8]
 8002c90:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c94:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8002c96:	687b      	ldr	r3, [r7, #4]
}
 8002c98:	4618      	mov	r0, r3
 8002c9a:	371c      	adds	r7, #28
 8002c9c:	46bd      	mov	sp, r7
 8002c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ca2:	4770      	bx	lr
 8002ca4:	40021000 	.word	0x40021000
 8002ca8:	016e3600 	.word	0x016e3600
 8002cac:	00f42400 	.word	0x00f42400

08002cb0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002cb0:	b580      	push	{r7, lr}
 8002cb2:	b086      	sub	sp, #24
 8002cb4:	af00      	add	r7, sp, #0
 8002cb6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002cb8:	2300      	movs	r3, #0
 8002cba:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002cbc:	2300      	movs	r3, #0
 8002cbe:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	f000 8098 	beq.w	8002dfe <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002cce:	2300      	movs	r3, #0
 8002cd0:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002cd2:	4b43      	ldr	r3, [pc, #268]	@ (8002de0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002cd4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002cd6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d10d      	bne.n	8002cfa <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002cde:	4b40      	ldr	r3, [pc, #256]	@ (8002de0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002ce0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002ce2:	4a3f      	ldr	r2, [pc, #252]	@ (8002de0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002ce4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002ce8:	6593      	str	r3, [r2, #88]	@ 0x58
 8002cea:	4b3d      	ldr	r3, [pc, #244]	@ (8002de0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002cec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002cee:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002cf2:	60bb      	str	r3, [r7, #8]
 8002cf4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002cf6:	2301      	movs	r3, #1
 8002cf8:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002cfa:	4b3a      	ldr	r3, [pc, #232]	@ (8002de4 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	4a39      	ldr	r2, [pc, #228]	@ (8002de4 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002d00:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002d04:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002d06:	f7fe fcc7 	bl	8001698 <HAL_GetTick>
 8002d0a:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002d0c:	e009      	b.n	8002d22 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002d0e:	f7fe fcc3 	bl	8001698 <HAL_GetTick>
 8002d12:	4602      	mov	r2, r0
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	1ad3      	subs	r3, r2, r3
 8002d18:	2b02      	cmp	r3, #2
 8002d1a:	d902      	bls.n	8002d22 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8002d1c:	2303      	movs	r3, #3
 8002d1e:	74fb      	strb	r3, [r7, #19]
        break;
 8002d20:	e005      	b.n	8002d2e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002d22:	4b30      	ldr	r3, [pc, #192]	@ (8002de4 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d0ef      	beq.n	8002d0e <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8002d2e:	7cfb      	ldrb	r3, [r7, #19]
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d159      	bne.n	8002de8 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002d34:	4b2a      	ldr	r3, [pc, #168]	@ (8002de0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002d36:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002d3a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002d3e:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002d40:	697b      	ldr	r3, [r7, #20]
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d01e      	beq.n	8002d84 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002d4a:	697a      	ldr	r2, [r7, #20]
 8002d4c:	429a      	cmp	r2, r3
 8002d4e:	d019      	beq.n	8002d84 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002d50:	4b23      	ldr	r3, [pc, #140]	@ (8002de0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002d52:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002d56:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002d5a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002d5c:	4b20      	ldr	r3, [pc, #128]	@ (8002de0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002d5e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002d62:	4a1f      	ldr	r2, [pc, #124]	@ (8002de0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002d64:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002d68:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002d6c:	4b1c      	ldr	r3, [pc, #112]	@ (8002de0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002d6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002d72:	4a1b      	ldr	r2, [pc, #108]	@ (8002de0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002d74:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002d78:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002d7c:	4a18      	ldr	r2, [pc, #96]	@ (8002de0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002d7e:	697b      	ldr	r3, [r7, #20]
 8002d80:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002d84:	697b      	ldr	r3, [r7, #20]
 8002d86:	f003 0301 	and.w	r3, r3, #1
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d016      	beq.n	8002dbc <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d8e:	f7fe fc83 	bl	8001698 <HAL_GetTick>
 8002d92:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002d94:	e00b      	b.n	8002dae <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002d96:	f7fe fc7f 	bl	8001698 <HAL_GetTick>
 8002d9a:	4602      	mov	r2, r0
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	1ad3      	subs	r3, r2, r3
 8002da0:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002da4:	4293      	cmp	r3, r2
 8002da6:	d902      	bls.n	8002dae <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8002da8:	2303      	movs	r3, #3
 8002daa:	74fb      	strb	r3, [r7, #19]
            break;
 8002dac:	e006      	b.n	8002dbc <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002dae:	4b0c      	ldr	r3, [pc, #48]	@ (8002de0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002db0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002db4:	f003 0302 	and.w	r3, r3, #2
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d0ec      	beq.n	8002d96 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8002dbc:	7cfb      	ldrb	r3, [r7, #19]
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d10b      	bne.n	8002dda <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002dc2:	4b07      	ldr	r3, [pc, #28]	@ (8002de0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002dc4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002dc8:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002dd0:	4903      	ldr	r1, [pc, #12]	@ (8002de0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002dd2:	4313      	orrs	r3, r2
 8002dd4:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8002dd8:	e008      	b.n	8002dec <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002dda:	7cfb      	ldrb	r3, [r7, #19]
 8002ddc:	74bb      	strb	r3, [r7, #18]
 8002dde:	e005      	b.n	8002dec <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8002de0:	40021000 	.word	0x40021000
 8002de4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002de8:	7cfb      	ldrb	r3, [r7, #19]
 8002dea:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002dec:	7c7b      	ldrb	r3, [r7, #17]
 8002dee:	2b01      	cmp	r3, #1
 8002df0:	d105      	bne.n	8002dfe <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002df2:	4ba7      	ldr	r3, [pc, #668]	@ (8003090 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002df4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002df6:	4aa6      	ldr	r2, [pc, #664]	@ (8003090 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002df8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002dfc:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	f003 0301 	and.w	r3, r3, #1
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d00a      	beq.n	8002e20 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002e0a:	4ba1      	ldr	r3, [pc, #644]	@ (8003090 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002e0c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002e10:	f023 0203 	bic.w	r2, r3, #3
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	685b      	ldr	r3, [r3, #4]
 8002e18:	499d      	ldr	r1, [pc, #628]	@ (8003090 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002e1a:	4313      	orrs	r3, r2
 8002e1c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	f003 0302 	and.w	r3, r3, #2
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d00a      	beq.n	8002e42 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002e2c:	4b98      	ldr	r3, [pc, #608]	@ (8003090 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002e2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002e32:	f023 020c 	bic.w	r2, r3, #12
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	689b      	ldr	r3, [r3, #8]
 8002e3a:	4995      	ldr	r1, [pc, #596]	@ (8003090 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002e3c:	4313      	orrs	r3, r2
 8002e3e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	f003 0304 	and.w	r3, r3, #4
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d00a      	beq.n	8002e64 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002e4e:	4b90      	ldr	r3, [pc, #576]	@ (8003090 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002e50:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002e54:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	68db      	ldr	r3, [r3, #12]
 8002e5c:	498c      	ldr	r1, [pc, #560]	@ (8003090 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002e5e:	4313      	orrs	r3, r2
 8002e60:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	f003 0308 	and.w	r3, r3, #8
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d00a      	beq.n	8002e86 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002e70:	4b87      	ldr	r3, [pc, #540]	@ (8003090 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002e72:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002e76:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	691b      	ldr	r3, [r3, #16]
 8002e7e:	4984      	ldr	r1, [pc, #528]	@ (8003090 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002e80:	4313      	orrs	r3, r2
 8002e82:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	f003 0310 	and.w	r3, r3, #16
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d00a      	beq.n	8002ea8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002e92:	4b7f      	ldr	r3, [pc, #508]	@ (8003090 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002e94:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002e98:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	695b      	ldr	r3, [r3, #20]
 8002ea0:	497b      	ldr	r1, [pc, #492]	@ (8003090 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002ea2:	4313      	orrs	r3, r2
 8002ea4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	f003 0320 	and.w	r3, r3, #32
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d00a      	beq.n	8002eca <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002eb4:	4b76      	ldr	r3, [pc, #472]	@ (8003090 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002eb6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002eba:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	699b      	ldr	r3, [r3, #24]
 8002ec2:	4973      	ldr	r1, [pc, #460]	@ (8003090 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002ec4:	4313      	orrs	r3, r2
 8002ec6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d00a      	beq.n	8002eec <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002ed6:	4b6e      	ldr	r3, [pc, #440]	@ (8003090 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002ed8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002edc:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	69db      	ldr	r3, [r3, #28]
 8002ee4:	496a      	ldr	r1, [pc, #424]	@ (8003090 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002ee6:	4313      	orrs	r3, r2
 8002ee8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d00a      	beq.n	8002f0e <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002ef8:	4b65      	ldr	r3, [pc, #404]	@ (8003090 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002efa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002efe:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	6a1b      	ldr	r3, [r3, #32]
 8002f06:	4962      	ldr	r1, [pc, #392]	@ (8003090 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002f08:	4313      	orrs	r3, r2
 8002f0a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d00a      	beq.n	8002f30 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002f1a:	4b5d      	ldr	r3, [pc, #372]	@ (8003090 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002f1c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002f20:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f28:	4959      	ldr	r1, [pc, #356]	@ (8003090 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002f2a:	4313      	orrs	r3, r2
 8002f2c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* I2C3 */
#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	d00a      	beq.n	8002f52 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8002f3c:	4b54      	ldr	r3, [pc, #336]	@ (8003090 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002f3e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8002f42:	f023 0203 	bic.w	r2, r3, #3
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f4a:	4951      	ldr	r1, [pc, #324]	@ (8003090 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002f4c:	4313      	orrs	r3, r2
 8002f4e:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d00a      	beq.n	8002f74 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002f5e:	4b4c      	ldr	r3, [pc, #304]	@ (8003090 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002f60:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002f64:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f6c:	4948      	ldr	r1, [pc, #288]	@ (8003090 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002f6e:	4313      	orrs	r3, r2
 8002f70:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d015      	beq.n	8002fac <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002f80:	4b43      	ldr	r3, [pc, #268]	@ (8003090 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002f82:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002f86:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f8e:	4940      	ldr	r1, [pc, #256]	@ (8003090 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002f90:	4313      	orrs	r3, r2
 8002f92:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f9a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002f9e:	d105      	bne.n	8002fac <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002fa0:	4b3b      	ldr	r3, [pc, #236]	@ (8003090 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002fa2:	68db      	ldr	r3, [r3, #12]
 8002fa4:	4a3a      	ldr	r2, [pc, #232]	@ (8003090 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002fa6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002faa:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d015      	beq.n	8002fe4 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002fb8:	4b35      	ldr	r3, [pc, #212]	@ (8003090 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002fba:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002fbe:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002fc6:	4932      	ldr	r1, [pc, #200]	@ (8003090 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002fc8:	4313      	orrs	r3, r2
 8002fca:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002fd2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002fd6:	d105      	bne.n	8002fe4 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002fd8:	4b2d      	ldr	r3, [pc, #180]	@ (8003090 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002fda:	68db      	ldr	r3, [r3, #12]
 8002fdc:	4a2c      	ldr	r2, [pc, #176]	@ (8003090 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002fde:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002fe2:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d015      	beq.n	800301c <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8002ff0:	4b27      	ldr	r3, [pc, #156]	@ (8003090 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002ff2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002ff6:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002ffe:	4924      	ldr	r1, [pc, #144]	@ (8003090 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003000:	4313      	orrs	r3, r2
 8003002:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800300a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800300e:	d105      	bne.n	800301c <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003010:	4b1f      	ldr	r3, [pc, #124]	@ (8003090 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003012:	68db      	ldr	r3, [r3, #12]
 8003014:	4a1e      	ldr	r2, [pc, #120]	@ (8003090 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003016:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800301a:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003024:	2b00      	cmp	r3, #0
 8003026:	d015      	beq.n	8003054 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003028:	4b19      	ldr	r3, [pc, #100]	@ (8003090 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800302a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800302e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003036:	4916      	ldr	r1, [pc, #88]	@ (8003090 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003038:	4313      	orrs	r3, r2
 800303a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003042:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003046:	d105      	bne.n	8003054 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003048:	4b11      	ldr	r3, [pc, #68]	@ (8003090 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800304a:	68db      	ldr	r3, [r3, #12]
 800304c:	4a10      	ldr	r2, [pc, #64]	@ (8003090 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800304e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003052:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800305c:	2b00      	cmp	r3, #0
 800305e:	d019      	beq.n	8003094 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003060:	4b0b      	ldr	r3, [pc, #44]	@ (8003090 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003062:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003066:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800306e:	4908      	ldr	r1, [pc, #32]	@ (8003090 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003070:	4313      	orrs	r3, r2
 8003072:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800307a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800307e:	d109      	bne.n	8003094 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003080:	4b03      	ldr	r3, [pc, #12]	@ (8003090 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003082:	68db      	ldr	r3, [r3, #12]
 8003084:	4a02      	ldr	r2, [pc, #8]	@ (8003090 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003086:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800308a:	60d3      	str	r3, [r2, #12]
 800308c:	e002      	b.n	8003094 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 800308e:	bf00      	nop
 8003090:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800309c:	2b00      	cmp	r3, #0
 800309e:	d015      	beq.n	80030cc <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80030a0:	4b29      	ldr	r3, [pc, #164]	@ (8003148 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80030a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80030a6:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80030ae:	4926      	ldr	r1, [pc, #152]	@ (8003148 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80030b0:	4313      	orrs	r3, r2
 80030b2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80030ba:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80030be:	d105      	bne.n	80030cc <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80030c0:	4b21      	ldr	r3, [pc, #132]	@ (8003148 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80030c2:	68db      	ldr	r3, [r3, #12]
 80030c4:	4a20      	ldr	r2, [pc, #128]	@ (8003148 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80030c6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80030ca:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d015      	beq.n	8003104 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 80030d8:	4b1b      	ldr	r3, [pc, #108]	@ (8003148 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80030da:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80030de:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80030e6:	4918      	ldr	r1, [pc, #96]	@ (8003148 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80030e8:	4313      	orrs	r3, r2
 80030ea:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80030f2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80030f6:	d105      	bne.n	8003104 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80030f8:	4b13      	ldr	r3, [pc, #76]	@ (8003148 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80030fa:	68db      	ldr	r3, [r3, #12]
 80030fc:	4a12      	ldr	r2, [pc, #72]	@ (8003148 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80030fe:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003102:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800310c:	2b00      	cmp	r3, #0
 800310e:	d015      	beq.n	800313c <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8003110:	4b0d      	ldr	r3, [pc, #52]	@ (8003148 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003112:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003116:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800311e:	490a      	ldr	r1, [pc, #40]	@ (8003148 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003120:	4313      	orrs	r3, r2
 8003122:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800312a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800312e:	d105      	bne.n	800313c <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003130:	4b05      	ldr	r3, [pc, #20]	@ (8003148 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003132:	68db      	ldr	r3, [r3, #12]
 8003134:	4a04      	ldr	r2, [pc, #16]	@ (8003148 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003136:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800313a:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 800313c:	7cbb      	ldrb	r3, [r7, #18]
}
 800313e:	4618      	mov	r0, r3
 8003140:	3718      	adds	r7, #24
 8003142:	46bd      	mov	sp, r7
 8003144:	bd80      	pop	{r7, pc}
 8003146:	bf00      	nop
 8003148:	40021000 	.word	0x40021000

0800314c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800314c:	b580      	push	{r7, lr}
 800314e:	b082      	sub	sp, #8
 8003150:	af00      	add	r7, sp, #0
 8003152:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	2b00      	cmp	r3, #0
 8003158:	d101      	bne.n	800315e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800315a:	2301      	movs	r3, #1
 800315c:	e042      	b.n	80031e4 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003164:	2b00      	cmp	r3, #0
 8003166:	d106      	bne.n	8003176 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	2200      	movs	r2, #0
 800316c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003170:	6878      	ldr	r0, [r7, #4]
 8003172:	f7fd fea1 	bl	8000eb8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	2224      	movs	r2, #36	@ 0x24
 800317a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	681a      	ldr	r2, [r3, #0]
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	f022 0201 	bic.w	r2, r2, #1
 800318c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003192:	2b00      	cmp	r3, #0
 8003194:	d002      	beq.n	800319c <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8003196:	6878      	ldr	r0, [r7, #4]
 8003198:	f001 f8bc 	bl	8004314 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800319c:	6878      	ldr	r0, [r7, #4]
 800319e:	f000 fdbd 	bl	8003d1c <UART_SetConfig>
 80031a2:	4603      	mov	r3, r0
 80031a4:	2b01      	cmp	r3, #1
 80031a6:	d101      	bne.n	80031ac <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 80031a8:	2301      	movs	r3, #1
 80031aa:	e01b      	b.n	80031e4 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	685a      	ldr	r2, [r3, #4]
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80031ba:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	689a      	ldr	r2, [r3, #8]
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80031ca:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	681a      	ldr	r2, [r3, #0]
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	f042 0201 	orr.w	r2, r2, #1
 80031da:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80031dc:	6878      	ldr	r0, [r7, #4]
 80031de:	f001 f93b 	bl	8004458 <UART_CheckIdleState>
 80031e2:	4603      	mov	r3, r0
}
 80031e4:	4618      	mov	r0, r3
 80031e6:	3708      	adds	r7, #8
 80031e8:	46bd      	mov	sp, r7
 80031ea:	bd80      	pop	{r7, pc}

080031ec <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80031ec:	b580      	push	{r7, lr}
 80031ee:	b08a      	sub	sp, #40	@ 0x28
 80031f0:	af02      	add	r7, sp, #8
 80031f2:	60f8      	str	r0, [r7, #12]
 80031f4:	60b9      	str	r1, [r7, #8]
 80031f6:	603b      	str	r3, [r7, #0]
 80031f8:	4613      	mov	r3, r2
 80031fa:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003202:	2b20      	cmp	r3, #32
 8003204:	d17b      	bne.n	80032fe <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8003206:	68bb      	ldr	r3, [r7, #8]
 8003208:	2b00      	cmp	r3, #0
 800320a:	d002      	beq.n	8003212 <HAL_UART_Transmit+0x26>
 800320c:	88fb      	ldrh	r3, [r7, #6]
 800320e:	2b00      	cmp	r3, #0
 8003210:	d101      	bne.n	8003216 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8003212:	2301      	movs	r3, #1
 8003214:	e074      	b.n	8003300 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	2200      	movs	r2, #0
 800321a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	2221      	movs	r2, #33	@ 0x21
 8003222:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003226:	f7fe fa37 	bl	8001698 <HAL_GetTick>
 800322a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	88fa      	ldrh	r2, [r7, #6]
 8003230:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	88fa      	ldrh	r2, [r7, #6]
 8003238:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	689b      	ldr	r3, [r3, #8]
 8003240:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003244:	d108      	bne.n	8003258 <HAL_UART_Transmit+0x6c>
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	691b      	ldr	r3, [r3, #16]
 800324a:	2b00      	cmp	r3, #0
 800324c:	d104      	bne.n	8003258 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800324e:	2300      	movs	r3, #0
 8003250:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003252:	68bb      	ldr	r3, [r7, #8]
 8003254:	61bb      	str	r3, [r7, #24]
 8003256:	e003      	b.n	8003260 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8003258:	68bb      	ldr	r3, [r7, #8]
 800325a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800325c:	2300      	movs	r3, #0
 800325e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003260:	e030      	b.n	80032c4 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003262:	683b      	ldr	r3, [r7, #0]
 8003264:	9300      	str	r3, [sp, #0]
 8003266:	697b      	ldr	r3, [r7, #20]
 8003268:	2200      	movs	r2, #0
 800326a:	2180      	movs	r1, #128	@ 0x80
 800326c:	68f8      	ldr	r0, [r7, #12]
 800326e:	f001 f99d 	bl	80045ac <UART_WaitOnFlagUntilTimeout>
 8003272:	4603      	mov	r3, r0
 8003274:	2b00      	cmp	r3, #0
 8003276:	d005      	beq.n	8003284 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	2220      	movs	r2, #32
 800327c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8003280:	2303      	movs	r3, #3
 8003282:	e03d      	b.n	8003300 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8003284:	69fb      	ldr	r3, [r7, #28]
 8003286:	2b00      	cmp	r3, #0
 8003288:	d10b      	bne.n	80032a2 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800328a:	69bb      	ldr	r3, [r7, #24]
 800328c:	881b      	ldrh	r3, [r3, #0]
 800328e:	461a      	mov	r2, r3
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003298:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800329a:	69bb      	ldr	r3, [r7, #24]
 800329c:	3302      	adds	r3, #2
 800329e:	61bb      	str	r3, [r7, #24]
 80032a0:	e007      	b.n	80032b2 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80032a2:	69fb      	ldr	r3, [r7, #28]
 80032a4:	781a      	ldrb	r2, [r3, #0]
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 80032ac:	69fb      	ldr	r3, [r7, #28]
 80032ae:	3301      	adds	r3, #1
 80032b0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80032b8:	b29b      	uxth	r3, r3
 80032ba:	3b01      	subs	r3, #1
 80032bc:	b29a      	uxth	r2, r3
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80032ca:	b29b      	uxth	r3, r3
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d1c8      	bne.n	8003262 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80032d0:	683b      	ldr	r3, [r7, #0]
 80032d2:	9300      	str	r3, [sp, #0]
 80032d4:	697b      	ldr	r3, [r7, #20]
 80032d6:	2200      	movs	r2, #0
 80032d8:	2140      	movs	r1, #64	@ 0x40
 80032da:	68f8      	ldr	r0, [r7, #12]
 80032dc:	f001 f966 	bl	80045ac <UART_WaitOnFlagUntilTimeout>
 80032e0:	4603      	mov	r3, r0
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d005      	beq.n	80032f2 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	2220      	movs	r2, #32
 80032ea:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 80032ee:	2303      	movs	r3, #3
 80032f0:	e006      	b.n	8003300 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	2220      	movs	r2, #32
 80032f6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 80032fa:	2300      	movs	r3, #0
 80032fc:	e000      	b.n	8003300 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 80032fe:	2302      	movs	r3, #2
  }
}
 8003300:	4618      	mov	r0, r3
 8003302:	3720      	adds	r7, #32
 8003304:	46bd      	mov	sp, r7
 8003306:	bd80      	pop	{r7, pc}

08003308 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003308:	b580      	push	{r7, lr}
 800330a:	b08a      	sub	sp, #40	@ 0x28
 800330c:	af02      	add	r7, sp, #8
 800330e:	60f8      	str	r0, [r7, #12]
 8003310:	60b9      	str	r1, [r7, #8]
 8003312:	603b      	str	r3, [r7, #0]
 8003314:	4613      	mov	r3, r2
 8003316:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800331e:	2b20      	cmp	r3, #32
 8003320:	f040 80b5 	bne.w	800348e <HAL_UART_Receive+0x186>
  {
    if ((pData == NULL) || (Size == 0U))
 8003324:	68bb      	ldr	r3, [r7, #8]
 8003326:	2b00      	cmp	r3, #0
 8003328:	d002      	beq.n	8003330 <HAL_UART_Receive+0x28>
 800332a:	88fb      	ldrh	r3, [r7, #6]
 800332c:	2b00      	cmp	r3, #0
 800332e:	d101      	bne.n	8003334 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 8003330:	2301      	movs	r3, #1
 8003332:	e0ad      	b.n	8003490 <HAL_UART_Receive+0x188>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	2200      	movs	r2, #0
 8003338:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	2222      	movs	r2, #34	@ 0x22
 8003340:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	2200      	movs	r2, #0
 8003348:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800334a:	f7fe f9a5 	bl	8001698 <HAL_GetTick>
 800334e:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	88fa      	ldrh	r2, [r7, #6]
 8003354:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
    huart->RxXferCount = Size;
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	88fa      	ldrh	r2, [r7, #6]
 800335c:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	689b      	ldr	r3, [r3, #8]
 8003364:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003368:	d10e      	bne.n	8003388 <HAL_UART_Receive+0x80>
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	691b      	ldr	r3, [r3, #16]
 800336e:	2b00      	cmp	r3, #0
 8003370:	d105      	bne.n	800337e <HAL_UART_Receive+0x76>
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	f240 12ff 	movw	r2, #511	@ 0x1ff
 8003378:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800337c:	e02d      	b.n	80033da <HAL_UART_Receive+0xd2>
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	22ff      	movs	r2, #255	@ 0xff
 8003382:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8003386:	e028      	b.n	80033da <HAL_UART_Receive+0xd2>
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	689b      	ldr	r3, [r3, #8]
 800338c:	2b00      	cmp	r3, #0
 800338e:	d10d      	bne.n	80033ac <HAL_UART_Receive+0xa4>
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	691b      	ldr	r3, [r3, #16]
 8003394:	2b00      	cmp	r3, #0
 8003396:	d104      	bne.n	80033a2 <HAL_UART_Receive+0x9a>
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	22ff      	movs	r2, #255	@ 0xff
 800339c:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80033a0:	e01b      	b.n	80033da <HAL_UART_Receive+0xd2>
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	227f      	movs	r2, #127	@ 0x7f
 80033a6:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80033aa:	e016      	b.n	80033da <HAL_UART_Receive+0xd2>
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	689b      	ldr	r3, [r3, #8]
 80033b0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80033b4:	d10d      	bne.n	80033d2 <HAL_UART_Receive+0xca>
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	691b      	ldr	r3, [r3, #16]
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d104      	bne.n	80033c8 <HAL_UART_Receive+0xc0>
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	227f      	movs	r2, #127	@ 0x7f
 80033c2:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80033c6:	e008      	b.n	80033da <HAL_UART_Receive+0xd2>
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	223f      	movs	r2, #63	@ 0x3f
 80033cc:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80033d0:	e003      	b.n	80033da <HAL_UART_Receive+0xd2>
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	2200      	movs	r2, #0
 80033d6:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
    uhMask = huart->Mask;
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 80033e0:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	689b      	ldr	r3, [r3, #8]
 80033e6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80033ea:	d108      	bne.n	80033fe <HAL_UART_Receive+0xf6>
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	691b      	ldr	r3, [r3, #16]
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d104      	bne.n	80033fe <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 80033f4:	2300      	movs	r3, #0
 80033f6:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80033f8:	68bb      	ldr	r3, [r7, #8]
 80033fa:	61bb      	str	r3, [r7, #24]
 80033fc:	e003      	b.n	8003406 <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 80033fe:	68bb      	ldr	r3, [r7, #8]
 8003400:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003402:	2300      	movs	r3, #0
 8003404:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8003406:	e036      	b.n	8003476 <HAL_UART_Receive+0x16e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8003408:	683b      	ldr	r3, [r7, #0]
 800340a:	9300      	str	r3, [sp, #0]
 800340c:	697b      	ldr	r3, [r7, #20]
 800340e:	2200      	movs	r2, #0
 8003410:	2120      	movs	r1, #32
 8003412:	68f8      	ldr	r0, [r7, #12]
 8003414:	f001 f8ca 	bl	80045ac <UART_WaitOnFlagUntilTimeout>
 8003418:	4603      	mov	r3, r0
 800341a:	2b00      	cmp	r3, #0
 800341c:	d005      	beq.n	800342a <HAL_UART_Receive+0x122>
      {
        huart->RxState = HAL_UART_STATE_READY;
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	2220      	movs	r2, #32
 8003422:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        return HAL_TIMEOUT;
 8003426:	2303      	movs	r3, #3
 8003428:	e032      	b.n	8003490 <HAL_UART_Receive+0x188>
      }
      if (pdata8bits == NULL)
 800342a:	69fb      	ldr	r3, [r7, #28]
 800342c:	2b00      	cmp	r3, #0
 800342e:	d10c      	bne.n	800344a <HAL_UART_Receive+0x142>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003436:	b29a      	uxth	r2, r3
 8003438:	8a7b      	ldrh	r3, [r7, #18]
 800343a:	4013      	ands	r3, r2
 800343c:	b29a      	uxth	r2, r3
 800343e:	69bb      	ldr	r3, [r7, #24]
 8003440:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8003442:	69bb      	ldr	r3, [r7, #24]
 8003444:	3302      	adds	r3, #2
 8003446:	61bb      	str	r3, [r7, #24]
 8003448:	e00c      	b.n	8003464 <HAL_UART_Receive+0x15c>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003450:	b2da      	uxtb	r2, r3
 8003452:	8a7b      	ldrh	r3, [r7, #18]
 8003454:	b2db      	uxtb	r3, r3
 8003456:	4013      	ands	r3, r2
 8003458:	b2da      	uxtb	r2, r3
 800345a:	69fb      	ldr	r3, [r7, #28]
 800345c:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 800345e:	69fb      	ldr	r3, [r7, #28]
 8003460:	3301      	adds	r3, #1
 8003462:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800346a:	b29b      	uxth	r3, r3
 800346c:	3b01      	subs	r3, #1
 800346e:	b29a      	uxth	r2, r3
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    while (huart->RxXferCount > 0U)
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800347c:	b29b      	uxth	r3, r3
 800347e:	2b00      	cmp	r3, #0
 8003480:	d1c2      	bne.n	8003408 <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	2220      	movs	r2, #32
 8003486:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    return HAL_OK;
 800348a:	2300      	movs	r3, #0
 800348c:	e000      	b.n	8003490 <HAL_UART_Receive+0x188>
  }
  else
  {
    return HAL_BUSY;
 800348e:	2302      	movs	r3, #2
  }
}
 8003490:	4618      	mov	r0, r3
 8003492:	3720      	adds	r7, #32
 8003494:	46bd      	mov	sp, r7
 8003496:	bd80      	pop	{r7, pc}

08003498 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8003498:	b480      	push	{r7}
 800349a:	b091      	sub	sp, #68	@ 0x44
 800349c:	af00      	add	r7, sp, #0
 800349e:	60f8      	str	r0, [r7, #12]
 80034a0:	60b9      	str	r1, [r7, #8]
 80034a2:	4613      	mov	r3, r2
 80034a4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80034ac:	2b20      	cmp	r3, #32
 80034ae:	d178      	bne.n	80035a2 <HAL_UART_Transmit_IT+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 80034b0:	68bb      	ldr	r3, [r7, #8]
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d002      	beq.n	80034bc <HAL_UART_Transmit_IT+0x24>
 80034b6:	88fb      	ldrh	r3, [r7, #6]
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d101      	bne.n	80034c0 <HAL_UART_Transmit_IT+0x28>
    {
      return HAL_ERROR;
 80034bc:	2301      	movs	r3, #1
 80034be:	e071      	b.n	80035a4 <HAL_UART_Transmit_IT+0x10c>
    }

    huart->pTxBuffPtr  = pData;
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	68ba      	ldr	r2, [r7, #8]
 80034c4:	651a      	str	r2, [r3, #80]	@ 0x50
    huart->TxXferSize  = Size;
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	88fa      	ldrh	r2, [r7, #6]
 80034ca:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	88fa      	ldrh	r2, [r7, #6]
 80034d2:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    huart->TxISR       = NULL;
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	2200      	movs	r2, #0
 80034da:	679a      	str	r2, [r3, #120]	@ 0x78

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	2200      	movs	r2, #0
 80034e0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	2221      	movs	r2, #33	@ 0x21
 80034e8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Configure Tx interrupt processing */
    if (huart->FifoMode == UART_FIFOMODE_ENABLE)
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80034f0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80034f4:	d12a      	bne.n	800354c <HAL_UART_Transmit_IT+0xb4>
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	689b      	ldr	r3, [r3, #8]
 80034fa:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80034fe:	d107      	bne.n	8003510 <HAL_UART_Transmit_IT+0x78>
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	691b      	ldr	r3, [r3, #16]
 8003504:	2b00      	cmp	r3, #0
 8003506:	d103      	bne.n	8003510 <HAL_UART_Transmit_IT+0x78>
      {
        huart->TxISR = UART_TxISR_16BIT_FIFOEN;
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	4a29      	ldr	r2, [pc, #164]	@ (80035b0 <HAL_UART_Transmit_IT+0x118>)
 800350c:	679a      	str	r2, [r3, #120]	@ 0x78
 800350e:	e002      	b.n	8003516 <HAL_UART_Transmit_IT+0x7e>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT_FIFOEN;
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	4a28      	ldr	r2, [pc, #160]	@ (80035b4 <HAL_UART_Transmit_IT+0x11c>)
 8003514:	679a      	str	r2, [r3, #120]	@ 0x78
      }

      /* Enable the TX FIFO threshold interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	3308      	adds	r3, #8
 800351c:	62bb      	str	r3, [r7, #40]	@ 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800351e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003520:	e853 3f00 	ldrex	r3, [r3]
 8003524:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003526:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003528:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800352c:	63bb      	str	r3, [r7, #56]	@ 0x38
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	3308      	adds	r3, #8
 8003534:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8003536:	637a      	str	r2, [r7, #52]	@ 0x34
 8003538:	633b      	str	r3, [r7, #48]	@ 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800353a:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800353c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800353e:	e841 2300 	strex	r3, r2, [r1]
 8003542:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8003544:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003546:	2b00      	cmp	r3, #0
 8003548:	d1e5      	bne.n	8003516 <HAL_UART_Transmit_IT+0x7e>
 800354a:	e028      	b.n	800359e <HAL_UART_Transmit_IT+0x106>
    }
    else
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	689b      	ldr	r3, [r3, #8]
 8003550:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003554:	d107      	bne.n	8003566 <HAL_UART_Transmit_IT+0xce>
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	691b      	ldr	r3, [r3, #16]
 800355a:	2b00      	cmp	r3, #0
 800355c:	d103      	bne.n	8003566 <HAL_UART_Transmit_IT+0xce>
      {
        huart->TxISR = UART_TxISR_16BIT;
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	4a15      	ldr	r2, [pc, #84]	@ (80035b8 <HAL_UART_Transmit_IT+0x120>)
 8003562:	679a      	str	r2, [r3, #120]	@ 0x78
 8003564:	e002      	b.n	800356c <HAL_UART_Transmit_IT+0xd4>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT;
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	4a14      	ldr	r2, [pc, #80]	@ (80035bc <HAL_UART_Transmit_IT+0x124>)
 800356a:	679a      	str	r2, [r3, #120]	@ 0x78
      }

      /* Enable the Transmit Data Register Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003572:	697b      	ldr	r3, [r7, #20]
 8003574:	e853 3f00 	ldrex	r3, [r3]
 8003578:	613b      	str	r3, [r7, #16]
   return(result);
 800357a:	693b      	ldr	r3, [r7, #16]
 800357c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003580:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	461a      	mov	r2, r3
 8003588:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800358a:	623b      	str	r3, [r7, #32]
 800358c:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800358e:	69f9      	ldr	r1, [r7, #28]
 8003590:	6a3a      	ldr	r2, [r7, #32]
 8003592:	e841 2300 	strex	r3, r2, [r1]
 8003596:	61bb      	str	r3, [r7, #24]
   return(result);
 8003598:	69bb      	ldr	r3, [r7, #24]
 800359a:	2b00      	cmp	r3, #0
 800359c:	d1e6      	bne.n	800356c <HAL_UART_Transmit_IT+0xd4>
    }

    return HAL_OK;
 800359e:	2300      	movs	r3, #0
 80035a0:	e000      	b.n	80035a4 <HAL_UART_Transmit_IT+0x10c>
  }
  else
  {
    return HAL_BUSY;
 80035a2:	2302      	movs	r3, #2
  }
}
 80035a4:	4618      	mov	r0, r3
 80035a6:	3744      	adds	r7, #68	@ 0x44
 80035a8:	46bd      	mov	sp, r7
 80035aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ae:	4770      	bx	lr
 80035b0:	08004c17 	.word	0x08004c17
 80035b4:	08004b37 	.word	0x08004b37
 80035b8:	08004a75 	.word	0x08004a75
 80035bc:	080049bd 	.word	0x080049bd

080035c0 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80035c0:	b580      	push	{r7, lr}
 80035c2:	b08a      	sub	sp, #40	@ 0x28
 80035c4:	af00      	add	r7, sp, #0
 80035c6:	60f8      	str	r0, [r7, #12]
 80035c8:	60b9      	str	r1, [r7, #8]
 80035ca:	4613      	mov	r3, r2
 80035cc:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80035d4:	2b20      	cmp	r3, #32
 80035d6:	d137      	bne.n	8003648 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 80035d8:	68bb      	ldr	r3, [r7, #8]
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d002      	beq.n	80035e4 <HAL_UART_Receive_IT+0x24>
 80035de:	88fb      	ldrh	r3, [r7, #6]
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	d101      	bne.n	80035e8 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 80035e4:	2301      	movs	r3, #1
 80035e6:	e030      	b.n	800364a <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	2200      	movs	r2, #0
 80035ec:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	4a18      	ldr	r2, [pc, #96]	@ (8003654 <HAL_UART_Receive_IT+0x94>)
 80035f4:	4293      	cmp	r3, r2
 80035f6:	d01f      	beq.n	8003638 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	685b      	ldr	r3, [r3, #4]
 80035fe:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003602:	2b00      	cmp	r3, #0
 8003604:	d018      	beq.n	8003638 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800360c:	697b      	ldr	r3, [r7, #20]
 800360e:	e853 3f00 	ldrex	r3, [r3]
 8003612:	613b      	str	r3, [r7, #16]
   return(result);
 8003614:	693b      	ldr	r3, [r7, #16]
 8003616:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800361a:	627b      	str	r3, [r7, #36]	@ 0x24
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	461a      	mov	r2, r3
 8003622:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003624:	623b      	str	r3, [r7, #32]
 8003626:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003628:	69f9      	ldr	r1, [r7, #28]
 800362a:	6a3a      	ldr	r2, [r7, #32]
 800362c:	e841 2300 	strex	r3, r2, [r1]
 8003630:	61bb      	str	r3, [r7, #24]
   return(result);
 8003632:	69bb      	ldr	r3, [r7, #24]
 8003634:	2b00      	cmp	r3, #0
 8003636:	d1e6      	bne.n	8003606 <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8003638:	88fb      	ldrh	r3, [r7, #6]
 800363a:	461a      	mov	r2, r3
 800363c:	68b9      	ldr	r1, [r7, #8]
 800363e:	68f8      	ldr	r0, [r7, #12]
 8003640:	f001 f822 	bl	8004688 <UART_Start_Receive_IT>
 8003644:	4603      	mov	r3, r0
 8003646:	e000      	b.n	800364a <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003648:	2302      	movs	r3, #2
  }
}
 800364a:	4618      	mov	r0, r3
 800364c:	3728      	adds	r7, #40	@ 0x28
 800364e:	46bd      	mov	sp, r7
 8003650:	bd80      	pop	{r7, pc}
 8003652:	bf00      	nop
 8003654:	40008000 	.word	0x40008000

08003658 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003658:	b580      	push	{r7, lr}
 800365a:	b0ba      	sub	sp, #232	@ 0xe8
 800365c:	af00      	add	r7, sp, #0
 800365e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	69db      	ldr	r3, [r3, #28]
 8003666:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	689b      	ldr	r3, [r3, #8]
 800367a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800367e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8003682:	f640 030f 	movw	r3, #2063	@ 0x80f
 8003686:	4013      	ands	r3, r2
 8003688:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 800368c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003690:	2b00      	cmp	r3, #0
 8003692:	d11b      	bne.n	80036cc <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8003694:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003698:	f003 0320 	and.w	r3, r3, #32
 800369c:	2b00      	cmp	r3, #0
 800369e:	d015      	beq.n	80036cc <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80036a0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80036a4:	f003 0320 	and.w	r3, r3, #32
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d105      	bne.n	80036b8 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80036ac:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80036b0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	d009      	beq.n	80036cc <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80036bc:	2b00      	cmp	r3, #0
 80036be:	f000 8300 	beq.w	8003cc2 <HAL_UART_IRQHandler+0x66a>
      {
        huart->RxISR(huart);
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80036c6:	6878      	ldr	r0, [r7, #4]
 80036c8:	4798      	blx	r3
      }
      return;
 80036ca:	e2fa      	b.n	8003cc2 <HAL_UART_IRQHandler+0x66a>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80036cc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	f000 8123 	beq.w	800391c <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 80036d6:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 80036da:	4b8d      	ldr	r3, [pc, #564]	@ (8003910 <HAL_UART_IRQHandler+0x2b8>)
 80036dc:	4013      	ands	r3, r2
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d106      	bne.n	80036f0 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 80036e2:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 80036e6:	4b8b      	ldr	r3, [pc, #556]	@ (8003914 <HAL_UART_IRQHandler+0x2bc>)
 80036e8:	4013      	ands	r3, r2
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	f000 8116 	beq.w	800391c <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80036f0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80036f4:	f003 0301 	and.w	r3, r3, #1
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d011      	beq.n	8003720 <HAL_UART_IRQHandler+0xc8>
 80036fc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003700:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003704:	2b00      	cmp	r3, #0
 8003706:	d00b      	beq.n	8003720 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	2201      	movs	r2, #1
 800370e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003716:	f043 0201 	orr.w	r2, r3, #1
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003720:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003724:	f003 0302 	and.w	r3, r3, #2
 8003728:	2b00      	cmp	r3, #0
 800372a:	d011      	beq.n	8003750 <HAL_UART_IRQHandler+0xf8>
 800372c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003730:	f003 0301 	and.w	r3, r3, #1
 8003734:	2b00      	cmp	r3, #0
 8003736:	d00b      	beq.n	8003750 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	2202      	movs	r2, #2
 800373e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003746:	f043 0204 	orr.w	r2, r3, #4
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003750:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003754:	f003 0304 	and.w	r3, r3, #4
 8003758:	2b00      	cmp	r3, #0
 800375a:	d011      	beq.n	8003780 <HAL_UART_IRQHandler+0x128>
 800375c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003760:	f003 0301 	and.w	r3, r3, #1
 8003764:	2b00      	cmp	r3, #0
 8003766:	d00b      	beq.n	8003780 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	2204      	movs	r2, #4
 800376e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003776:	f043 0202 	orr.w	r2, r3, #2
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8003780:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003784:	f003 0308 	and.w	r3, r3, #8
 8003788:	2b00      	cmp	r3, #0
 800378a:	d017      	beq.n	80037bc <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800378c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003790:	f003 0320 	and.w	r3, r3, #32
 8003794:	2b00      	cmp	r3, #0
 8003796:	d105      	bne.n	80037a4 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8003798:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800379c:	4b5c      	ldr	r3, [pc, #368]	@ (8003910 <HAL_UART_IRQHandler+0x2b8>)
 800379e:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	d00b      	beq.n	80037bc <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	2208      	movs	r2, #8
 80037aa:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80037b2:	f043 0208 	orr.w	r2, r3, #8
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80037bc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80037c0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d012      	beq.n	80037ee <HAL_UART_IRQHandler+0x196>
 80037c8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80037cc:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	d00c      	beq.n	80037ee <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80037dc:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80037e4:	f043 0220 	orr.w	r2, r3, #32
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	f000 8266 	beq.w	8003cc6 <HAL_UART_IRQHandler+0x66e>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80037fa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80037fe:	f003 0320 	and.w	r3, r3, #32
 8003802:	2b00      	cmp	r3, #0
 8003804:	d013      	beq.n	800382e <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8003806:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800380a:	f003 0320 	and.w	r3, r3, #32
 800380e:	2b00      	cmp	r3, #0
 8003810:	d105      	bne.n	800381e <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8003812:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003816:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800381a:	2b00      	cmp	r3, #0
 800381c:	d007      	beq.n	800382e <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003822:	2b00      	cmp	r3, #0
 8003824:	d003      	beq.n	800382e <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800382a:	6878      	ldr	r0, [r7, #4]
 800382c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003834:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	689b      	ldr	r3, [r3, #8]
 800383e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003842:	2b40      	cmp	r3, #64	@ 0x40
 8003844:	d005      	beq.n	8003852 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8003846:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800384a:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800384e:	2b00      	cmp	r3, #0
 8003850:	d054      	beq.n	80038fc <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003852:	6878      	ldr	r0, [r7, #4]
 8003854:	f001 f83a 	bl	80048cc <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	689b      	ldr	r3, [r3, #8]
 800385e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003862:	2b40      	cmp	r3, #64	@ 0x40
 8003864:	d146      	bne.n	80038f4 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	3308      	adds	r3, #8
 800386c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003870:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003874:	e853 3f00 	ldrex	r3, [r3]
 8003878:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800387c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003880:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003884:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	3308      	adds	r3, #8
 800388e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8003892:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8003896:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800389a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800389e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80038a2:	e841 2300 	strex	r3, r2, [r1]
 80038a6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80038aa:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d1d9      	bne.n	8003866 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d017      	beq.n	80038ec <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80038c2:	4a15      	ldr	r2, [pc, #84]	@ (8003918 <HAL_UART_IRQHandler+0x2c0>)
 80038c4:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80038cc:	4618      	mov	r0, r3
 80038ce:	f7fe f879 	bl	80019c4 <HAL_DMA_Abort_IT>
 80038d2:	4603      	mov	r3, r0
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d019      	beq.n	800390c <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80038de:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80038e0:	687a      	ldr	r2, [r7, #4]
 80038e2:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 80038e6:	4610      	mov	r0, r2
 80038e8:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80038ea:	e00f      	b.n	800390c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80038ec:	6878      	ldr	r0, [r7, #4]
 80038ee:	f000 f9ff 	bl	8003cf0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80038f2:	e00b      	b.n	800390c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80038f4:	6878      	ldr	r0, [r7, #4]
 80038f6:	f000 f9fb 	bl	8003cf0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80038fa:	e007      	b.n	800390c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80038fc:	6878      	ldr	r0, [r7, #4]
 80038fe:	f000 f9f7 	bl	8003cf0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	2200      	movs	r2, #0
 8003906:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 800390a:	e1dc      	b.n	8003cc6 <HAL_UART_IRQHandler+0x66e>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800390c:	bf00      	nop
    return;
 800390e:	e1da      	b.n	8003cc6 <HAL_UART_IRQHandler+0x66e>
 8003910:	10000001 	.word	0x10000001
 8003914:	04000120 	.word	0x04000120
 8003918:	08004999 	.word	0x08004999

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003920:	2b01      	cmp	r3, #1
 8003922:	f040 8170 	bne.w	8003c06 <HAL_UART_IRQHandler+0x5ae>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8003926:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800392a:	f003 0310 	and.w	r3, r3, #16
 800392e:	2b00      	cmp	r3, #0
 8003930:	f000 8169 	beq.w	8003c06 <HAL_UART_IRQHandler+0x5ae>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8003934:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003938:	f003 0310 	and.w	r3, r3, #16
 800393c:	2b00      	cmp	r3, #0
 800393e:	f000 8162 	beq.w	8003c06 <HAL_UART_IRQHandler+0x5ae>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	2210      	movs	r2, #16
 8003948:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	689b      	ldr	r3, [r3, #8]
 8003950:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003954:	2b40      	cmp	r3, #64	@ 0x40
 8003956:	f040 80d8 	bne.w	8003b0a <HAL_UART_IRQHandler+0x4b2>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	685b      	ldr	r3, [r3, #4]
 8003964:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003968:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800396c:	2b00      	cmp	r3, #0
 800396e:	f000 80af 	beq.w	8003ad0 <HAL_UART_IRQHandler+0x478>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8003978:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800397c:	429a      	cmp	r2, r3
 800397e:	f080 80a7 	bcs.w	8003ad0 <HAL_UART_IRQHandler+0x478>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003988:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	f003 0320 	and.w	r3, r3, #32
 800399a:	2b00      	cmp	r3, #0
 800399c:	f040 8087 	bne.w	8003aae <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80039a8:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80039ac:	e853 3f00 	ldrex	r3, [r3]
 80039b0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80039b4:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80039b8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80039bc:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	461a      	mov	r2, r3
 80039c6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80039ca:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80039ce:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80039d2:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80039d6:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80039da:	e841 2300 	strex	r3, r2, [r1]
 80039de:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80039e2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d1da      	bne.n	80039a0 <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	3308      	adds	r3, #8
 80039f0:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80039f2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80039f4:	e853 3f00 	ldrex	r3, [r3]
 80039f8:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80039fa:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80039fc:	f023 0301 	bic.w	r3, r3, #1
 8003a00:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	3308      	adds	r3, #8
 8003a0a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8003a0e:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8003a12:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a14:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8003a16:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8003a1a:	e841 2300 	strex	r3, r2, [r1]
 8003a1e:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8003a20:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d1e1      	bne.n	80039ea <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	3308      	adds	r3, #8
 8003a2c:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a2e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003a30:	e853 3f00 	ldrex	r3, [r3]
 8003a34:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8003a36:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003a38:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003a3c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	3308      	adds	r3, #8
 8003a46:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8003a4a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8003a4c:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a4e:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8003a50:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8003a52:	e841 2300 	strex	r3, r2, [r1]
 8003a56:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8003a58:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d1e3      	bne.n	8003a26 <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	2220      	movs	r2, #32
 8003a62:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	2200      	movs	r2, #0
 8003a6a:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a72:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003a74:	e853 3f00 	ldrex	r3, [r3]
 8003a78:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8003a7a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003a7c:	f023 0310 	bic.w	r3, r3, #16
 8003a80:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	461a      	mov	r2, r3
 8003a8a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8003a8e:	65bb      	str	r3, [r7, #88]	@ 0x58
 8003a90:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a92:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8003a94:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8003a96:	e841 2300 	strex	r3, r2, [r1]
 8003a9a:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8003a9c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d1e4      	bne.n	8003a6c <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003aa8:	4618      	mov	r0, r3
 8003aaa:	f7fd ff32 	bl	8001912 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	2202      	movs	r2, #2
 8003ab2:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8003ac0:	b29b      	uxth	r3, r3
 8003ac2:	1ad3      	subs	r3, r2, r3
 8003ac4:	b29b      	uxth	r3, r3
 8003ac6:	4619      	mov	r1, r3
 8003ac8:	6878      	ldr	r0, [r7, #4]
 8003aca:	f000 f91b 	bl	8003d04 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8003ace:	e0fc      	b.n	8003cca <HAL_UART_IRQHandler+0x672>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8003ad6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003ada:	429a      	cmp	r2, r3
 8003adc:	f040 80f5 	bne.w	8003cca <HAL_UART_IRQHandler+0x672>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	f003 0320 	and.w	r3, r3, #32
 8003aee:	2b20      	cmp	r3, #32
 8003af0:	f040 80eb 	bne.w	8003cca <HAL_UART_IRQHandler+0x672>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	2202      	movs	r2, #2
 8003af8:	671a      	str	r2, [r3, #112]	@ 0x70
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8003b00:	4619      	mov	r1, r3
 8003b02:	6878      	ldr	r0, [r7, #4]
 8003b04:	f000 f8fe 	bl	8003d04 <HAL_UARTEx_RxEventCallback>
      return;
 8003b08:	e0df      	b.n	8003cca <HAL_UART_IRQHandler+0x672>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8003b16:	b29b      	uxth	r3, r3
 8003b18:	1ad3      	subs	r3, r2, r3
 8003b1a:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8003b24:	b29b      	uxth	r3, r3
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	f000 80d1 	beq.w	8003cce <HAL_UART_IRQHandler+0x676>
          && (nb_rx_data > 0U))
 8003b2c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	f000 80cc 	beq.w	8003cce <HAL_UART_IRQHandler+0x676>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b3c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003b3e:	e853 3f00 	ldrex	r3, [r3]
 8003b42:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8003b44:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003b46:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003b4a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	461a      	mov	r2, r3
 8003b54:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8003b58:	647b      	str	r3, [r7, #68]	@ 0x44
 8003b5a:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b5c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003b5e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003b60:	e841 2300 	strex	r3, r2, [r1]
 8003b64:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8003b66:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d1e4      	bne.n	8003b36 <HAL_UART_IRQHandler+0x4de>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	3308      	adds	r3, #8
 8003b72:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b76:	e853 3f00 	ldrex	r3, [r3]
 8003b7a:	623b      	str	r3, [r7, #32]
   return(result);
 8003b7c:	6a3b      	ldr	r3, [r7, #32]
 8003b7e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003b82:	f023 0301 	bic.w	r3, r3, #1
 8003b86:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	3308      	adds	r3, #8
 8003b90:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8003b94:	633a      	str	r2, [r7, #48]	@ 0x30
 8003b96:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b98:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003b9a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003b9c:	e841 2300 	strex	r3, r2, [r1]
 8003ba0:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003ba2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d1e1      	bne.n	8003b6c <HAL_UART_IRQHandler+0x514>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	2220      	movs	r2, #32
 8003bac:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	2200      	movs	r2, #0
 8003bb4:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	2200      	movs	r2, #0
 8003bba:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003bc2:	693b      	ldr	r3, [r7, #16]
 8003bc4:	e853 3f00 	ldrex	r3, [r3]
 8003bc8:	60fb      	str	r3, [r7, #12]
   return(result);
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	f023 0310 	bic.w	r3, r3, #16
 8003bd0:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	461a      	mov	r2, r3
 8003bda:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8003bde:	61fb      	str	r3, [r7, #28]
 8003be0:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003be2:	69b9      	ldr	r1, [r7, #24]
 8003be4:	69fa      	ldr	r2, [r7, #28]
 8003be6:	e841 2300 	strex	r3, r2, [r1]
 8003bea:	617b      	str	r3, [r7, #20]
   return(result);
 8003bec:	697b      	ldr	r3, [r7, #20]
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d1e4      	bne.n	8003bbc <HAL_UART_IRQHandler+0x564>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	2202      	movs	r2, #2
 8003bf6:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003bf8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8003bfc:	4619      	mov	r1, r3
 8003bfe:	6878      	ldr	r0, [r7, #4]
 8003c00:	f000 f880 	bl	8003d04 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003c04:	e063      	b.n	8003cce <HAL_UART_IRQHandler+0x676>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8003c06:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003c0a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d00e      	beq.n	8003c30 <HAL_UART_IRQHandler+0x5d8>
 8003c12:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003c16:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d008      	beq.n	8003c30 <HAL_UART_IRQHandler+0x5d8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8003c26:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8003c28:	6878      	ldr	r0, [r7, #4]
 8003c2a:	f001 fdb5 	bl	8005798 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8003c2e:	e051      	b.n	8003cd4 <HAL_UART_IRQHandler+0x67c>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8003c30:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003c34:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	d014      	beq.n	8003c66 <HAL_UART_IRQHandler+0x60e>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8003c3c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003c40:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d105      	bne.n	8003c54 <HAL_UART_IRQHandler+0x5fc>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8003c48:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003c4c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	d008      	beq.n	8003c66 <HAL_UART_IRQHandler+0x60e>
  {
    if (huart->TxISR != NULL)
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	d03a      	beq.n	8003cd2 <HAL_UART_IRQHandler+0x67a>
    {
      huart->TxISR(huart);
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003c60:	6878      	ldr	r0, [r7, #4]
 8003c62:	4798      	blx	r3
    }
    return;
 8003c64:	e035      	b.n	8003cd2 <HAL_UART_IRQHandler+0x67a>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8003c66:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003c6a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d009      	beq.n	8003c86 <HAL_UART_IRQHandler+0x62e>
 8003c72:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003c76:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d003      	beq.n	8003c86 <HAL_UART_IRQHandler+0x62e>
  {
    UART_EndTransmit_IT(huart);
 8003c7e:	6878      	ldr	r0, [r7, #4]
 8003c80:	f001 f83e 	bl	8004d00 <UART_EndTransmit_IT>
    return;
 8003c84:	e026      	b.n	8003cd4 <HAL_UART_IRQHandler+0x67c>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8003c86:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003c8a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d009      	beq.n	8003ca6 <HAL_UART_IRQHandler+0x64e>
 8003c92:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003c96:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d003      	beq.n	8003ca6 <HAL_UART_IRQHandler+0x64e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8003c9e:	6878      	ldr	r0, [r7, #4]
 8003ca0:	f001 fd8e 	bl	80057c0 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8003ca4:	e016      	b.n	8003cd4 <HAL_UART_IRQHandler+0x67c>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8003ca6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003caa:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d010      	beq.n	8003cd4 <HAL_UART_IRQHandler+0x67c>
 8003cb2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	da0c      	bge.n	8003cd4 <HAL_UART_IRQHandler+0x67c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8003cba:	6878      	ldr	r0, [r7, #4]
 8003cbc:	f001 fd76 	bl	80057ac <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8003cc0:	e008      	b.n	8003cd4 <HAL_UART_IRQHandler+0x67c>
      return;
 8003cc2:	bf00      	nop
 8003cc4:	e006      	b.n	8003cd4 <HAL_UART_IRQHandler+0x67c>
    return;
 8003cc6:	bf00      	nop
 8003cc8:	e004      	b.n	8003cd4 <HAL_UART_IRQHandler+0x67c>
      return;
 8003cca:	bf00      	nop
 8003ccc:	e002      	b.n	8003cd4 <HAL_UART_IRQHandler+0x67c>
      return;
 8003cce:	bf00      	nop
 8003cd0:	e000      	b.n	8003cd4 <HAL_UART_IRQHandler+0x67c>
    return;
 8003cd2:	bf00      	nop
  }
}
 8003cd4:	37e8      	adds	r7, #232	@ 0xe8
 8003cd6:	46bd      	mov	sp, r7
 8003cd8:	bd80      	pop	{r7, pc}
 8003cda:	bf00      	nop

08003cdc <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003cdc:	b480      	push	{r7}
 8003cde:	b083      	sub	sp, #12
 8003ce0:	af00      	add	r7, sp, #0
 8003ce2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8003ce4:	bf00      	nop
 8003ce6:	370c      	adds	r7, #12
 8003ce8:	46bd      	mov	sp, r7
 8003cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cee:	4770      	bx	lr

08003cf0 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003cf0:	b480      	push	{r7}
 8003cf2:	b083      	sub	sp, #12
 8003cf4:	af00      	add	r7, sp, #0
 8003cf6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8003cf8:	bf00      	nop
 8003cfa:	370c      	adds	r7, #12
 8003cfc:	46bd      	mov	sp, r7
 8003cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d02:	4770      	bx	lr

08003d04 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003d04:	b480      	push	{r7}
 8003d06:	b083      	sub	sp, #12
 8003d08:	af00      	add	r7, sp, #0
 8003d0a:	6078      	str	r0, [r7, #4]
 8003d0c:	460b      	mov	r3, r1
 8003d0e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003d10:	bf00      	nop
 8003d12:	370c      	adds	r7, #12
 8003d14:	46bd      	mov	sp, r7
 8003d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d1a:	4770      	bx	lr

08003d1c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003d1c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003d20:	b08c      	sub	sp, #48	@ 0x30
 8003d22:	af00      	add	r7, sp, #0
 8003d24:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003d26:	2300      	movs	r3, #0
 8003d28:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003d2c:	697b      	ldr	r3, [r7, #20]
 8003d2e:	689a      	ldr	r2, [r3, #8]
 8003d30:	697b      	ldr	r3, [r7, #20]
 8003d32:	691b      	ldr	r3, [r3, #16]
 8003d34:	431a      	orrs	r2, r3
 8003d36:	697b      	ldr	r3, [r7, #20]
 8003d38:	695b      	ldr	r3, [r3, #20]
 8003d3a:	431a      	orrs	r2, r3
 8003d3c:	697b      	ldr	r3, [r7, #20]
 8003d3e:	69db      	ldr	r3, [r3, #28]
 8003d40:	4313      	orrs	r3, r2
 8003d42:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003d44:	697b      	ldr	r3, [r7, #20]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	681a      	ldr	r2, [r3, #0]
 8003d4a:	4baa      	ldr	r3, [pc, #680]	@ (8003ff4 <UART_SetConfig+0x2d8>)
 8003d4c:	4013      	ands	r3, r2
 8003d4e:	697a      	ldr	r2, [r7, #20]
 8003d50:	6812      	ldr	r2, [r2, #0]
 8003d52:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003d54:	430b      	orrs	r3, r1
 8003d56:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003d58:	697b      	ldr	r3, [r7, #20]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	685b      	ldr	r3, [r3, #4]
 8003d5e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8003d62:	697b      	ldr	r3, [r7, #20]
 8003d64:	68da      	ldr	r2, [r3, #12]
 8003d66:	697b      	ldr	r3, [r7, #20]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	430a      	orrs	r2, r1
 8003d6c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003d6e:	697b      	ldr	r3, [r7, #20]
 8003d70:	699b      	ldr	r3, [r3, #24]
 8003d72:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003d74:	697b      	ldr	r3, [r7, #20]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	4a9f      	ldr	r2, [pc, #636]	@ (8003ff8 <UART_SetConfig+0x2dc>)
 8003d7a:	4293      	cmp	r3, r2
 8003d7c:	d004      	beq.n	8003d88 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003d7e:	697b      	ldr	r3, [r7, #20]
 8003d80:	6a1b      	ldr	r3, [r3, #32]
 8003d82:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003d84:	4313      	orrs	r3, r2
 8003d86:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003d88:	697b      	ldr	r3, [r7, #20]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	689b      	ldr	r3, [r3, #8]
 8003d8e:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 8003d92:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 8003d96:	697a      	ldr	r2, [r7, #20]
 8003d98:	6812      	ldr	r2, [r2, #0]
 8003d9a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003d9c:	430b      	orrs	r3, r1
 8003d9e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8003da0:	697b      	ldr	r3, [r7, #20]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003da6:	f023 010f 	bic.w	r1, r3, #15
 8003daa:	697b      	ldr	r3, [r7, #20]
 8003dac:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003dae:	697b      	ldr	r3, [r7, #20]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	430a      	orrs	r2, r1
 8003db4:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003db6:	697b      	ldr	r3, [r7, #20]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	4a90      	ldr	r2, [pc, #576]	@ (8003ffc <UART_SetConfig+0x2e0>)
 8003dbc:	4293      	cmp	r3, r2
 8003dbe:	d125      	bne.n	8003e0c <UART_SetConfig+0xf0>
 8003dc0:	4b8f      	ldr	r3, [pc, #572]	@ (8004000 <UART_SetConfig+0x2e4>)
 8003dc2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003dc6:	f003 0303 	and.w	r3, r3, #3
 8003dca:	2b03      	cmp	r3, #3
 8003dcc:	d81a      	bhi.n	8003e04 <UART_SetConfig+0xe8>
 8003dce:	a201      	add	r2, pc, #4	@ (adr r2, 8003dd4 <UART_SetConfig+0xb8>)
 8003dd0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003dd4:	08003de5 	.word	0x08003de5
 8003dd8:	08003df5 	.word	0x08003df5
 8003ddc:	08003ded 	.word	0x08003ded
 8003de0:	08003dfd 	.word	0x08003dfd
 8003de4:	2301      	movs	r3, #1
 8003de6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003dea:	e116      	b.n	800401a <UART_SetConfig+0x2fe>
 8003dec:	2302      	movs	r3, #2
 8003dee:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003df2:	e112      	b.n	800401a <UART_SetConfig+0x2fe>
 8003df4:	2304      	movs	r3, #4
 8003df6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003dfa:	e10e      	b.n	800401a <UART_SetConfig+0x2fe>
 8003dfc:	2308      	movs	r3, #8
 8003dfe:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003e02:	e10a      	b.n	800401a <UART_SetConfig+0x2fe>
 8003e04:	2310      	movs	r3, #16
 8003e06:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003e0a:	e106      	b.n	800401a <UART_SetConfig+0x2fe>
 8003e0c:	697b      	ldr	r3, [r7, #20]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	4a7c      	ldr	r2, [pc, #496]	@ (8004004 <UART_SetConfig+0x2e8>)
 8003e12:	4293      	cmp	r3, r2
 8003e14:	d138      	bne.n	8003e88 <UART_SetConfig+0x16c>
 8003e16:	4b7a      	ldr	r3, [pc, #488]	@ (8004000 <UART_SetConfig+0x2e4>)
 8003e18:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003e1c:	f003 030c 	and.w	r3, r3, #12
 8003e20:	2b0c      	cmp	r3, #12
 8003e22:	d82d      	bhi.n	8003e80 <UART_SetConfig+0x164>
 8003e24:	a201      	add	r2, pc, #4	@ (adr r2, 8003e2c <UART_SetConfig+0x110>)
 8003e26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e2a:	bf00      	nop
 8003e2c:	08003e61 	.word	0x08003e61
 8003e30:	08003e81 	.word	0x08003e81
 8003e34:	08003e81 	.word	0x08003e81
 8003e38:	08003e81 	.word	0x08003e81
 8003e3c:	08003e71 	.word	0x08003e71
 8003e40:	08003e81 	.word	0x08003e81
 8003e44:	08003e81 	.word	0x08003e81
 8003e48:	08003e81 	.word	0x08003e81
 8003e4c:	08003e69 	.word	0x08003e69
 8003e50:	08003e81 	.word	0x08003e81
 8003e54:	08003e81 	.word	0x08003e81
 8003e58:	08003e81 	.word	0x08003e81
 8003e5c:	08003e79 	.word	0x08003e79
 8003e60:	2300      	movs	r3, #0
 8003e62:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003e66:	e0d8      	b.n	800401a <UART_SetConfig+0x2fe>
 8003e68:	2302      	movs	r3, #2
 8003e6a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003e6e:	e0d4      	b.n	800401a <UART_SetConfig+0x2fe>
 8003e70:	2304      	movs	r3, #4
 8003e72:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003e76:	e0d0      	b.n	800401a <UART_SetConfig+0x2fe>
 8003e78:	2308      	movs	r3, #8
 8003e7a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003e7e:	e0cc      	b.n	800401a <UART_SetConfig+0x2fe>
 8003e80:	2310      	movs	r3, #16
 8003e82:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003e86:	e0c8      	b.n	800401a <UART_SetConfig+0x2fe>
 8003e88:	697b      	ldr	r3, [r7, #20]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	4a5e      	ldr	r2, [pc, #376]	@ (8004008 <UART_SetConfig+0x2ec>)
 8003e8e:	4293      	cmp	r3, r2
 8003e90:	d125      	bne.n	8003ede <UART_SetConfig+0x1c2>
 8003e92:	4b5b      	ldr	r3, [pc, #364]	@ (8004000 <UART_SetConfig+0x2e4>)
 8003e94:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003e98:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8003e9c:	2b30      	cmp	r3, #48	@ 0x30
 8003e9e:	d016      	beq.n	8003ece <UART_SetConfig+0x1b2>
 8003ea0:	2b30      	cmp	r3, #48	@ 0x30
 8003ea2:	d818      	bhi.n	8003ed6 <UART_SetConfig+0x1ba>
 8003ea4:	2b20      	cmp	r3, #32
 8003ea6:	d00a      	beq.n	8003ebe <UART_SetConfig+0x1a2>
 8003ea8:	2b20      	cmp	r3, #32
 8003eaa:	d814      	bhi.n	8003ed6 <UART_SetConfig+0x1ba>
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	d002      	beq.n	8003eb6 <UART_SetConfig+0x19a>
 8003eb0:	2b10      	cmp	r3, #16
 8003eb2:	d008      	beq.n	8003ec6 <UART_SetConfig+0x1aa>
 8003eb4:	e00f      	b.n	8003ed6 <UART_SetConfig+0x1ba>
 8003eb6:	2300      	movs	r3, #0
 8003eb8:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003ebc:	e0ad      	b.n	800401a <UART_SetConfig+0x2fe>
 8003ebe:	2302      	movs	r3, #2
 8003ec0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003ec4:	e0a9      	b.n	800401a <UART_SetConfig+0x2fe>
 8003ec6:	2304      	movs	r3, #4
 8003ec8:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003ecc:	e0a5      	b.n	800401a <UART_SetConfig+0x2fe>
 8003ece:	2308      	movs	r3, #8
 8003ed0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003ed4:	e0a1      	b.n	800401a <UART_SetConfig+0x2fe>
 8003ed6:	2310      	movs	r3, #16
 8003ed8:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003edc:	e09d      	b.n	800401a <UART_SetConfig+0x2fe>
 8003ede:	697b      	ldr	r3, [r7, #20]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	4a4a      	ldr	r2, [pc, #296]	@ (800400c <UART_SetConfig+0x2f0>)
 8003ee4:	4293      	cmp	r3, r2
 8003ee6:	d125      	bne.n	8003f34 <UART_SetConfig+0x218>
 8003ee8:	4b45      	ldr	r3, [pc, #276]	@ (8004000 <UART_SetConfig+0x2e4>)
 8003eea:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003eee:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8003ef2:	2bc0      	cmp	r3, #192	@ 0xc0
 8003ef4:	d016      	beq.n	8003f24 <UART_SetConfig+0x208>
 8003ef6:	2bc0      	cmp	r3, #192	@ 0xc0
 8003ef8:	d818      	bhi.n	8003f2c <UART_SetConfig+0x210>
 8003efa:	2b80      	cmp	r3, #128	@ 0x80
 8003efc:	d00a      	beq.n	8003f14 <UART_SetConfig+0x1f8>
 8003efe:	2b80      	cmp	r3, #128	@ 0x80
 8003f00:	d814      	bhi.n	8003f2c <UART_SetConfig+0x210>
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d002      	beq.n	8003f0c <UART_SetConfig+0x1f0>
 8003f06:	2b40      	cmp	r3, #64	@ 0x40
 8003f08:	d008      	beq.n	8003f1c <UART_SetConfig+0x200>
 8003f0a:	e00f      	b.n	8003f2c <UART_SetConfig+0x210>
 8003f0c:	2300      	movs	r3, #0
 8003f0e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003f12:	e082      	b.n	800401a <UART_SetConfig+0x2fe>
 8003f14:	2302      	movs	r3, #2
 8003f16:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003f1a:	e07e      	b.n	800401a <UART_SetConfig+0x2fe>
 8003f1c:	2304      	movs	r3, #4
 8003f1e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003f22:	e07a      	b.n	800401a <UART_SetConfig+0x2fe>
 8003f24:	2308      	movs	r3, #8
 8003f26:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003f2a:	e076      	b.n	800401a <UART_SetConfig+0x2fe>
 8003f2c:	2310      	movs	r3, #16
 8003f2e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003f32:	e072      	b.n	800401a <UART_SetConfig+0x2fe>
 8003f34:	697b      	ldr	r3, [r7, #20]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	4a35      	ldr	r2, [pc, #212]	@ (8004010 <UART_SetConfig+0x2f4>)
 8003f3a:	4293      	cmp	r3, r2
 8003f3c:	d12a      	bne.n	8003f94 <UART_SetConfig+0x278>
 8003f3e:	4b30      	ldr	r3, [pc, #192]	@ (8004000 <UART_SetConfig+0x2e4>)
 8003f40:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003f44:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003f48:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003f4c:	d01a      	beq.n	8003f84 <UART_SetConfig+0x268>
 8003f4e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003f52:	d81b      	bhi.n	8003f8c <UART_SetConfig+0x270>
 8003f54:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003f58:	d00c      	beq.n	8003f74 <UART_SetConfig+0x258>
 8003f5a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003f5e:	d815      	bhi.n	8003f8c <UART_SetConfig+0x270>
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d003      	beq.n	8003f6c <UART_SetConfig+0x250>
 8003f64:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003f68:	d008      	beq.n	8003f7c <UART_SetConfig+0x260>
 8003f6a:	e00f      	b.n	8003f8c <UART_SetConfig+0x270>
 8003f6c:	2300      	movs	r3, #0
 8003f6e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003f72:	e052      	b.n	800401a <UART_SetConfig+0x2fe>
 8003f74:	2302      	movs	r3, #2
 8003f76:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003f7a:	e04e      	b.n	800401a <UART_SetConfig+0x2fe>
 8003f7c:	2304      	movs	r3, #4
 8003f7e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003f82:	e04a      	b.n	800401a <UART_SetConfig+0x2fe>
 8003f84:	2308      	movs	r3, #8
 8003f86:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003f8a:	e046      	b.n	800401a <UART_SetConfig+0x2fe>
 8003f8c:	2310      	movs	r3, #16
 8003f8e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003f92:	e042      	b.n	800401a <UART_SetConfig+0x2fe>
 8003f94:	697b      	ldr	r3, [r7, #20]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	4a17      	ldr	r2, [pc, #92]	@ (8003ff8 <UART_SetConfig+0x2dc>)
 8003f9a:	4293      	cmp	r3, r2
 8003f9c:	d13a      	bne.n	8004014 <UART_SetConfig+0x2f8>
 8003f9e:	4b18      	ldr	r3, [pc, #96]	@ (8004000 <UART_SetConfig+0x2e4>)
 8003fa0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003fa4:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8003fa8:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003fac:	d01a      	beq.n	8003fe4 <UART_SetConfig+0x2c8>
 8003fae:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003fb2:	d81b      	bhi.n	8003fec <UART_SetConfig+0x2d0>
 8003fb4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003fb8:	d00c      	beq.n	8003fd4 <UART_SetConfig+0x2b8>
 8003fba:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003fbe:	d815      	bhi.n	8003fec <UART_SetConfig+0x2d0>
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	d003      	beq.n	8003fcc <UART_SetConfig+0x2b0>
 8003fc4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003fc8:	d008      	beq.n	8003fdc <UART_SetConfig+0x2c0>
 8003fca:	e00f      	b.n	8003fec <UART_SetConfig+0x2d0>
 8003fcc:	2300      	movs	r3, #0
 8003fce:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003fd2:	e022      	b.n	800401a <UART_SetConfig+0x2fe>
 8003fd4:	2302      	movs	r3, #2
 8003fd6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003fda:	e01e      	b.n	800401a <UART_SetConfig+0x2fe>
 8003fdc:	2304      	movs	r3, #4
 8003fde:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003fe2:	e01a      	b.n	800401a <UART_SetConfig+0x2fe>
 8003fe4:	2308      	movs	r3, #8
 8003fe6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003fea:	e016      	b.n	800401a <UART_SetConfig+0x2fe>
 8003fec:	2310      	movs	r3, #16
 8003fee:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003ff2:	e012      	b.n	800401a <UART_SetConfig+0x2fe>
 8003ff4:	cfff69f3 	.word	0xcfff69f3
 8003ff8:	40008000 	.word	0x40008000
 8003ffc:	40013800 	.word	0x40013800
 8004000:	40021000 	.word	0x40021000
 8004004:	40004400 	.word	0x40004400
 8004008:	40004800 	.word	0x40004800
 800400c:	40004c00 	.word	0x40004c00
 8004010:	40005000 	.word	0x40005000
 8004014:	2310      	movs	r3, #16
 8004016:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800401a:	697b      	ldr	r3, [r7, #20]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	4aae      	ldr	r2, [pc, #696]	@ (80042d8 <UART_SetConfig+0x5bc>)
 8004020:	4293      	cmp	r3, r2
 8004022:	f040 8097 	bne.w	8004154 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004026:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800402a:	2b08      	cmp	r3, #8
 800402c:	d823      	bhi.n	8004076 <UART_SetConfig+0x35a>
 800402e:	a201      	add	r2, pc, #4	@ (adr r2, 8004034 <UART_SetConfig+0x318>)
 8004030:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004034:	08004059 	.word	0x08004059
 8004038:	08004077 	.word	0x08004077
 800403c:	08004061 	.word	0x08004061
 8004040:	08004077 	.word	0x08004077
 8004044:	08004067 	.word	0x08004067
 8004048:	08004077 	.word	0x08004077
 800404c:	08004077 	.word	0x08004077
 8004050:	08004077 	.word	0x08004077
 8004054:	0800406f 	.word	0x0800406f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004058:	f7fe fdb8 	bl	8002bcc <HAL_RCC_GetPCLK1Freq>
 800405c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800405e:	e010      	b.n	8004082 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004060:	4b9e      	ldr	r3, [pc, #632]	@ (80042dc <UART_SetConfig+0x5c0>)
 8004062:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8004064:	e00d      	b.n	8004082 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004066:	f7fe fd43 	bl	8002af0 <HAL_RCC_GetSysClockFreq>
 800406a:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800406c:	e009      	b.n	8004082 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800406e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004072:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8004074:	e005      	b.n	8004082 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 8004076:	2300      	movs	r3, #0
 8004078:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800407a:	2301      	movs	r3, #1
 800407c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8004080:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004082:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004084:	2b00      	cmp	r3, #0
 8004086:	f000 8130 	beq.w	80042ea <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800408a:	697b      	ldr	r3, [r7, #20]
 800408c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800408e:	4a94      	ldr	r2, [pc, #592]	@ (80042e0 <UART_SetConfig+0x5c4>)
 8004090:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004094:	461a      	mov	r2, r3
 8004096:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004098:	fbb3 f3f2 	udiv	r3, r3, r2
 800409c:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800409e:	697b      	ldr	r3, [r7, #20]
 80040a0:	685a      	ldr	r2, [r3, #4]
 80040a2:	4613      	mov	r3, r2
 80040a4:	005b      	lsls	r3, r3, #1
 80040a6:	4413      	add	r3, r2
 80040a8:	69ba      	ldr	r2, [r7, #24]
 80040aa:	429a      	cmp	r2, r3
 80040ac:	d305      	bcc.n	80040ba <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80040ae:	697b      	ldr	r3, [r7, #20]
 80040b0:	685b      	ldr	r3, [r3, #4]
 80040b2:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80040b4:	69ba      	ldr	r2, [r7, #24]
 80040b6:	429a      	cmp	r2, r3
 80040b8:	d903      	bls.n	80040c2 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 80040ba:	2301      	movs	r3, #1
 80040bc:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80040c0:	e113      	b.n	80042ea <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80040c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040c4:	2200      	movs	r2, #0
 80040c6:	60bb      	str	r3, [r7, #8]
 80040c8:	60fa      	str	r2, [r7, #12]
 80040ca:	697b      	ldr	r3, [r7, #20]
 80040cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040ce:	4a84      	ldr	r2, [pc, #528]	@ (80042e0 <UART_SetConfig+0x5c4>)
 80040d0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80040d4:	b29b      	uxth	r3, r3
 80040d6:	2200      	movs	r2, #0
 80040d8:	603b      	str	r3, [r7, #0]
 80040da:	607a      	str	r2, [r7, #4]
 80040dc:	e9d7 2300 	ldrd	r2, r3, [r7]
 80040e0:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80040e4:	f7fc f8f4 	bl	80002d0 <__aeabi_uldivmod>
 80040e8:	4602      	mov	r2, r0
 80040ea:	460b      	mov	r3, r1
 80040ec:	4610      	mov	r0, r2
 80040ee:	4619      	mov	r1, r3
 80040f0:	f04f 0200 	mov.w	r2, #0
 80040f4:	f04f 0300 	mov.w	r3, #0
 80040f8:	020b      	lsls	r3, r1, #8
 80040fa:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80040fe:	0202      	lsls	r2, r0, #8
 8004100:	6979      	ldr	r1, [r7, #20]
 8004102:	6849      	ldr	r1, [r1, #4]
 8004104:	0849      	lsrs	r1, r1, #1
 8004106:	2000      	movs	r0, #0
 8004108:	460c      	mov	r4, r1
 800410a:	4605      	mov	r5, r0
 800410c:	eb12 0804 	adds.w	r8, r2, r4
 8004110:	eb43 0905 	adc.w	r9, r3, r5
 8004114:	697b      	ldr	r3, [r7, #20]
 8004116:	685b      	ldr	r3, [r3, #4]
 8004118:	2200      	movs	r2, #0
 800411a:	469a      	mov	sl, r3
 800411c:	4693      	mov	fp, r2
 800411e:	4652      	mov	r2, sl
 8004120:	465b      	mov	r3, fp
 8004122:	4640      	mov	r0, r8
 8004124:	4649      	mov	r1, r9
 8004126:	f7fc f8d3 	bl	80002d0 <__aeabi_uldivmod>
 800412a:	4602      	mov	r2, r0
 800412c:	460b      	mov	r3, r1
 800412e:	4613      	mov	r3, r2
 8004130:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004132:	6a3b      	ldr	r3, [r7, #32]
 8004134:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004138:	d308      	bcc.n	800414c <UART_SetConfig+0x430>
 800413a:	6a3b      	ldr	r3, [r7, #32]
 800413c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004140:	d204      	bcs.n	800414c <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 8004142:	697b      	ldr	r3, [r7, #20]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	6a3a      	ldr	r2, [r7, #32]
 8004148:	60da      	str	r2, [r3, #12]
 800414a:	e0ce      	b.n	80042ea <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 800414c:	2301      	movs	r3, #1
 800414e:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8004152:	e0ca      	b.n	80042ea <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004154:	697b      	ldr	r3, [r7, #20]
 8004156:	69db      	ldr	r3, [r3, #28]
 8004158:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800415c:	d166      	bne.n	800422c <UART_SetConfig+0x510>
  {
    switch (clocksource)
 800415e:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8004162:	2b08      	cmp	r3, #8
 8004164:	d827      	bhi.n	80041b6 <UART_SetConfig+0x49a>
 8004166:	a201      	add	r2, pc, #4	@ (adr r2, 800416c <UART_SetConfig+0x450>)
 8004168:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800416c:	08004191 	.word	0x08004191
 8004170:	08004199 	.word	0x08004199
 8004174:	080041a1 	.word	0x080041a1
 8004178:	080041b7 	.word	0x080041b7
 800417c:	080041a7 	.word	0x080041a7
 8004180:	080041b7 	.word	0x080041b7
 8004184:	080041b7 	.word	0x080041b7
 8004188:	080041b7 	.word	0x080041b7
 800418c:	080041af 	.word	0x080041af
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004190:	f7fe fd1c 	bl	8002bcc <HAL_RCC_GetPCLK1Freq>
 8004194:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004196:	e014      	b.n	80041c2 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004198:	f7fe fd2e 	bl	8002bf8 <HAL_RCC_GetPCLK2Freq>
 800419c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800419e:	e010      	b.n	80041c2 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80041a0:	4b4e      	ldr	r3, [pc, #312]	@ (80042dc <UART_SetConfig+0x5c0>)
 80041a2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80041a4:	e00d      	b.n	80041c2 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80041a6:	f7fe fca3 	bl	8002af0 <HAL_RCC_GetSysClockFreq>
 80041aa:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80041ac:	e009      	b.n	80041c2 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80041ae:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80041b2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80041b4:	e005      	b.n	80041c2 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 80041b6:	2300      	movs	r3, #0
 80041b8:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80041ba:	2301      	movs	r3, #1
 80041bc:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80041c0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80041c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	f000 8090 	beq.w	80042ea <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80041ca:	697b      	ldr	r3, [r7, #20]
 80041cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041ce:	4a44      	ldr	r2, [pc, #272]	@ (80042e0 <UART_SetConfig+0x5c4>)
 80041d0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80041d4:	461a      	mov	r2, r3
 80041d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041d8:	fbb3 f3f2 	udiv	r3, r3, r2
 80041dc:	005a      	lsls	r2, r3, #1
 80041de:	697b      	ldr	r3, [r7, #20]
 80041e0:	685b      	ldr	r3, [r3, #4]
 80041e2:	085b      	lsrs	r3, r3, #1
 80041e4:	441a      	add	r2, r3
 80041e6:	697b      	ldr	r3, [r7, #20]
 80041e8:	685b      	ldr	r3, [r3, #4]
 80041ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80041ee:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80041f0:	6a3b      	ldr	r3, [r7, #32]
 80041f2:	2b0f      	cmp	r3, #15
 80041f4:	d916      	bls.n	8004224 <UART_SetConfig+0x508>
 80041f6:	6a3b      	ldr	r3, [r7, #32]
 80041f8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80041fc:	d212      	bcs.n	8004224 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80041fe:	6a3b      	ldr	r3, [r7, #32]
 8004200:	b29b      	uxth	r3, r3
 8004202:	f023 030f 	bic.w	r3, r3, #15
 8004206:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004208:	6a3b      	ldr	r3, [r7, #32]
 800420a:	085b      	lsrs	r3, r3, #1
 800420c:	b29b      	uxth	r3, r3
 800420e:	f003 0307 	and.w	r3, r3, #7
 8004212:	b29a      	uxth	r2, r3
 8004214:	8bfb      	ldrh	r3, [r7, #30]
 8004216:	4313      	orrs	r3, r2
 8004218:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800421a:	697b      	ldr	r3, [r7, #20]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	8bfa      	ldrh	r2, [r7, #30]
 8004220:	60da      	str	r2, [r3, #12]
 8004222:	e062      	b.n	80042ea <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8004224:	2301      	movs	r3, #1
 8004226:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800422a:	e05e      	b.n	80042ea <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 800422c:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8004230:	2b08      	cmp	r3, #8
 8004232:	d828      	bhi.n	8004286 <UART_SetConfig+0x56a>
 8004234:	a201      	add	r2, pc, #4	@ (adr r2, 800423c <UART_SetConfig+0x520>)
 8004236:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800423a:	bf00      	nop
 800423c:	08004261 	.word	0x08004261
 8004240:	08004269 	.word	0x08004269
 8004244:	08004271 	.word	0x08004271
 8004248:	08004287 	.word	0x08004287
 800424c:	08004277 	.word	0x08004277
 8004250:	08004287 	.word	0x08004287
 8004254:	08004287 	.word	0x08004287
 8004258:	08004287 	.word	0x08004287
 800425c:	0800427f 	.word	0x0800427f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004260:	f7fe fcb4 	bl	8002bcc <HAL_RCC_GetPCLK1Freq>
 8004264:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004266:	e014      	b.n	8004292 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004268:	f7fe fcc6 	bl	8002bf8 <HAL_RCC_GetPCLK2Freq>
 800426c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800426e:	e010      	b.n	8004292 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004270:	4b1a      	ldr	r3, [pc, #104]	@ (80042dc <UART_SetConfig+0x5c0>)
 8004272:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8004274:	e00d      	b.n	8004292 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004276:	f7fe fc3b 	bl	8002af0 <HAL_RCC_GetSysClockFreq>
 800427a:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800427c:	e009      	b.n	8004292 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800427e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004282:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8004284:	e005      	b.n	8004292 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 8004286:	2300      	movs	r3, #0
 8004288:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800428a:	2301      	movs	r3, #1
 800428c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8004290:	bf00      	nop
    }

    if (pclk != 0U)
 8004292:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004294:	2b00      	cmp	r3, #0
 8004296:	d028      	beq.n	80042ea <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004298:	697b      	ldr	r3, [r7, #20]
 800429a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800429c:	4a10      	ldr	r2, [pc, #64]	@ (80042e0 <UART_SetConfig+0x5c4>)
 800429e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80042a2:	461a      	mov	r2, r3
 80042a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80042a6:	fbb3 f2f2 	udiv	r2, r3, r2
 80042aa:	697b      	ldr	r3, [r7, #20]
 80042ac:	685b      	ldr	r3, [r3, #4]
 80042ae:	085b      	lsrs	r3, r3, #1
 80042b0:	441a      	add	r2, r3
 80042b2:	697b      	ldr	r3, [r7, #20]
 80042b4:	685b      	ldr	r3, [r3, #4]
 80042b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80042ba:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80042bc:	6a3b      	ldr	r3, [r7, #32]
 80042be:	2b0f      	cmp	r3, #15
 80042c0:	d910      	bls.n	80042e4 <UART_SetConfig+0x5c8>
 80042c2:	6a3b      	ldr	r3, [r7, #32]
 80042c4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80042c8:	d20c      	bcs.n	80042e4 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80042ca:	6a3b      	ldr	r3, [r7, #32]
 80042cc:	b29a      	uxth	r2, r3
 80042ce:	697b      	ldr	r3, [r7, #20]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	60da      	str	r2, [r3, #12]
 80042d4:	e009      	b.n	80042ea <UART_SetConfig+0x5ce>
 80042d6:	bf00      	nop
 80042d8:	40008000 	.word	0x40008000
 80042dc:	00f42400 	.word	0x00f42400
 80042e0:	08007858 	.word	0x08007858
      }
      else
      {
        ret = HAL_ERROR;
 80042e4:	2301      	movs	r3, #1
 80042e6:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80042ea:	697b      	ldr	r3, [r7, #20]
 80042ec:	2201      	movs	r2, #1
 80042ee:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 80042f2:	697b      	ldr	r3, [r7, #20]
 80042f4:	2201      	movs	r2, #1
 80042f6:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80042fa:	697b      	ldr	r3, [r7, #20]
 80042fc:	2200      	movs	r2, #0
 80042fe:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8004300:	697b      	ldr	r3, [r7, #20]
 8004302:	2200      	movs	r2, #0
 8004304:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8004306:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 800430a:	4618      	mov	r0, r3
 800430c:	3730      	adds	r7, #48	@ 0x30
 800430e:	46bd      	mov	sp, r7
 8004310:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08004314 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004314:	b480      	push	{r7}
 8004316:	b083      	sub	sp, #12
 8004318:	af00      	add	r7, sp, #0
 800431a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004320:	f003 0308 	and.w	r3, r3, #8
 8004324:	2b00      	cmp	r3, #0
 8004326:	d00a      	beq.n	800433e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	685b      	ldr	r3, [r3, #4]
 800432e:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	430a      	orrs	r2, r1
 800433c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004342:	f003 0301 	and.w	r3, r3, #1
 8004346:	2b00      	cmp	r3, #0
 8004348:	d00a      	beq.n	8004360 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	685b      	ldr	r3, [r3, #4]
 8004350:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	430a      	orrs	r2, r1
 800435e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004364:	f003 0302 	and.w	r3, r3, #2
 8004368:	2b00      	cmp	r3, #0
 800436a:	d00a      	beq.n	8004382 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	685b      	ldr	r3, [r3, #4]
 8004372:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	430a      	orrs	r2, r1
 8004380:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004386:	f003 0304 	and.w	r3, r3, #4
 800438a:	2b00      	cmp	r3, #0
 800438c:	d00a      	beq.n	80043a4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	685b      	ldr	r3, [r3, #4]
 8004394:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	430a      	orrs	r2, r1
 80043a2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80043a8:	f003 0310 	and.w	r3, r3, #16
 80043ac:	2b00      	cmp	r3, #0
 80043ae:	d00a      	beq.n	80043c6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	689b      	ldr	r3, [r3, #8]
 80043b6:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	430a      	orrs	r2, r1
 80043c4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80043ca:	f003 0320 	and.w	r3, r3, #32
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d00a      	beq.n	80043e8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	689b      	ldr	r3, [r3, #8]
 80043d8:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	430a      	orrs	r2, r1
 80043e6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80043ec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	d01a      	beq.n	800442a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	685b      	ldr	r3, [r3, #4]
 80043fa:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	430a      	orrs	r2, r1
 8004408:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800440e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004412:	d10a      	bne.n	800442a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	685b      	ldr	r3, [r3, #4]
 800441a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	430a      	orrs	r2, r1
 8004428:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800442e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004432:	2b00      	cmp	r3, #0
 8004434:	d00a      	beq.n	800444c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	685b      	ldr	r3, [r3, #4]
 800443c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	430a      	orrs	r2, r1
 800444a:	605a      	str	r2, [r3, #4]
  }
}
 800444c:	bf00      	nop
 800444e:	370c      	adds	r7, #12
 8004450:	46bd      	mov	sp, r7
 8004452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004456:	4770      	bx	lr

08004458 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004458:	b580      	push	{r7, lr}
 800445a:	b098      	sub	sp, #96	@ 0x60
 800445c:	af02      	add	r7, sp, #8
 800445e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	2200      	movs	r2, #0
 8004464:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004468:	f7fd f916 	bl	8001698 <HAL_GetTick>
 800446c:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	f003 0308 	and.w	r3, r3, #8
 8004478:	2b08      	cmp	r3, #8
 800447a:	d12f      	bne.n	80044dc <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800447c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004480:	9300      	str	r3, [sp, #0]
 8004482:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004484:	2200      	movs	r2, #0
 8004486:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800448a:	6878      	ldr	r0, [r7, #4]
 800448c:	f000 f88e 	bl	80045ac <UART_WaitOnFlagUntilTimeout>
 8004490:	4603      	mov	r3, r0
 8004492:	2b00      	cmp	r3, #0
 8004494:	d022      	beq.n	80044dc <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800449c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800449e:	e853 3f00 	ldrex	r3, [r3]
 80044a2:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80044a4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80044a6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80044aa:	653b      	str	r3, [r7, #80]	@ 0x50
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	461a      	mov	r2, r3
 80044b2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80044b4:	647b      	str	r3, [r7, #68]	@ 0x44
 80044b6:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044b8:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80044ba:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80044bc:	e841 2300 	strex	r3, r2, [r1]
 80044c0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80044c2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	d1e6      	bne.n	8004496 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	2220      	movs	r2, #32
 80044cc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	2200      	movs	r2, #0
 80044d4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80044d8:	2303      	movs	r3, #3
 80044da:	e063      	b.n	80045a4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	f003 0304 	and.w	r3, r3, #4
 80044e6:	2b04      	cmp	r3, #4
 80044e8:	d149      	bne.n	800457e <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80044ea:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80044ee:	9300      	str	r3, [sp, #0]
 80044f0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80044f2:	2200      	movs	r2, #0
 80044f4:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80044f8:	6878      	ldr	r0, [r7, #4]
 80044fa:	f000 f857 	bl	80045ac <UART_WaitOnFlagUntilTimeout>
 80044fe:	4603      	mov	r3, r0
 8004500:	2b00      	cmp	r3, #0
 8004502:	d03c      	beq.n	800457e <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800450a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800450c:	e853 3f00 	ldrex	r3, [r3]
 8004510:	623b      	str	r3, [r7, #32]
   return(result);
 8004512:	6a3b      	ldr	r3, [r7, #32]
 8004514:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004518:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	461a      	mov	r2, r3
 8004520:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004522:	633b      	str	r3, [r7, #48]	@ 0x30
 8004524:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004526:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004528:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800452a:	e841 2300 	strex	r3, r2, [r1]
 800452e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004530:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004532:	2b00      	cmp	r3, #0
 8004534:	d1e6      	bne.n	8004504 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	3308      	adds	r3, #8
 800453c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800453e:	693b      	ldr	r3, [r7, #16]
 8004540:	e853 3f00 	ldrex	r3, [r3]
 8004544:	60fb      	str	r3, [r7, #12]
   return(result);
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	f023 0301 	bic.w	r3, r3, #1
 800454c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	3308      	adds	r3, #8
 8004554:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004556:	61fa      	str	r2, [r7, #28]
 8004558:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800455a:	69b9      	ldr	r1, [r7, #24]
 800455c:	69fa      	ldr	r2, [r7, #28]
 800455e:	e841 2300 	strex	r3, r2, [r1]
 8004562:	617b      	str	r3, [r7, #20]
   return(result);
 8004564:	697b      	ldr	r3, [r7, #20]
 8004566:	2b00      	cmp	r3, #0
 8004568:	d1e5      	bne.n	8004536 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	2220      	movs	r2, #32
 800456e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	2200      	movs	r2, #0
 8004576:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800457a:	2303      	movs	r3, #3
 800457c:	e012      	b.n	80045a4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	2220      	movs	r2, #32
 8004582:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	2220      	movs	r2, #32
 800458a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	2200      	movs	r2, #0
 8004592:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	2200      	movs	r2, #0
 8004598:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	2200      	movs	r2, #0
 800459e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80045a2:	2300      	movs	r3, #0
}
 80045a4:	4618      	mov	r0, r3
 80045a6:	3758      	adds	r7, #88	@ 0x58
 80045a8:	46bd      	mov	sp, r7
 80045aa:	bd80      	pop	{r7, pc}

080045ac <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80045ac:	b580      	push	{r7, lr}
 80045ae:	b084      	sub	sp, #16
 80045b0:	af00      	add	r7, sp, #0
 80045b2:	60f8      	str	r0, [r7, #12]
 80045b4:	60b9      	str	r1, [r7, #8]
 80045b6:	603b      	str	r3, [r7, #0]
 80045b8:	4613      	mov	r3, r2
 80045ba:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80045bc:	e04f      	b.n	800465e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80045be:	69bb      	ldr	r3, [r7, #24]
 80045c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80045c4:	d04b      	beq.n	800465e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80045c6:	f7fd f867 	bl	8001698 <HAL_GetTick>
 80045ca:	4602      	mov	r2, r0
 80045cc:	683b      	ldr	r3, [r7, #0]
 80045ce:	1ad3      	subs	r3, r2, r3
 80045d0:	69ba      	ldr	r2, [r7, #24]
 80045d2:	429a      	cmp	r2, r3
 80045d4:	d302      	bcc.n	80045dc <UART_WaitOnFlagUntilTimeout+0x30>
 80045d6:	69bb      	ldr	r3, [r7, #24]
 80045d8:	2b00      	cmp	r3, #0
 80045da:	d101      	bne.n	80045e0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80045dc:	2303      	movs	r3, #3
 80045de:	e04e      	b.n	800467e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	f003 0304 	and.w	r3, r3, #4
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d037      	beq.n	800465e <UART_WaitOnFlagUntilTimeout+0xb2>
 80045ee:	68bb      	ldr	r3, [r7, #8]
 80045f0:	2b80      	cmp	r3, #128	@ 0x80
 80045f2:	d034      	beq.n	800465e <UART_WaitOnFlagUntilTimeout+0xb2>
 80045f4:	68bb      	ldr	r3, [r7, #8]
 80045f6:	2b40      	cmp	r3, #64	@ 0x40
 80045f8:	d031      	beq.n	800465e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	69db      	ldr	r3, [r3, #28]
 8004600:	f003 0308 	and.w	r3, r3, #8
 8004604:	2b08      	cmp	r3, #8
 8004606:	d110      	bne.n	800462a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	2208      	movs	r2, #8
 800460e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004610:	68f8      	ldr	r0, [r7, #12]
 8004612:	f000 f95b 	bl	80048cc <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	2208      	movs	r2, #8
 800461a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	2200      	movs	r2, #0
 8004622:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8004626:	2301      	movs	r3, #1
 8004628:	e029      	b.n	800467e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	69db      	ldr	r3, [r3, #28]
 8004630:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004634:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004638:	d111      	bne.n	800465e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8004642:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004644:	68f8      	ldr	r0, [r7, #12]
 8004646:	f000 f941 	bl	80048cc <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	2220      	movs	r2, #32
 800464e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	2200      	movs	r2, #0
 8004656:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800465a:	2303      	movs	r3, #3
 800465c:	e00f      	b.n	800467e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	69da      	ldr	r2, [r3, #28]
 8004664:	68bb      	ldr	r3, [r7, #8]
 8004666:	4013      	ands	r3, r2
 8004668:	68ba      	ldr	r2, [r7, #8]
 800466a:	429a      	cmp	r2, r3
 800466c:	bf0c      	ite	eq
 800466e:	2301      	moveq	r3, #1
 8004670:	2300      	movne	r3, #0
 8004672:	b2db      	uxtb	r3, r3
 8004674:	461a      	mov	r2, r3
 8004676:	79fb      	ldrb	r3, [r7, #7]
 8004678:	429a      	cmp	r2, r3
 800467a:	d0a0      	beq.n	80045be <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800467c:	2300      	movs	r3, #0
}
 800467e:	4618      	mov	r0, r3
 8004680:	3710      	adds	r7, #16
 8004682:	46bd      	mov	sp, r7
 8004684:	bd80      	pop	{r7, pc}
	...

08004688 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004688:	b480      	push	{r7}
 800468a:	b0a3      	sub	sp, #140	@ 0x8c
 800468c:	af00      	add	r7, sp, #0
 800468e:	60f8      	str	r0, [r7, #12]
 8004690:	60b9      	str	r1, [r7, #8]
 8004692:	4613      	mov	r3, r2
 8004694:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	68ba      	ldr	r2, [r7, #8]
 800469a:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize  = Size;
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	88fa      	ldrh	r2, [r7, #6]
 80046a0:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
  huart->RxXferCount = Size;
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	88fa      	ldrh	r2, [r7, #6]
 80046a8:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->RxISR       = NULL;
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	2200      	movs	r2, #0
 80046b0:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	689b      	ldr	r3, [r3, #8]
 80046b6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80046ba:	d10e      	bne.n	80046da <UART_Start_Receive_IT+0x52>
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	691b      	ldr	r3, [r3, #16]
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	d105      	bne.n	80046d0 <UART_Start_Receive_IT+0x48>
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	f240 12ff 	movw	r2, #511	@ 0x1ff
 80046ca:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80046ce:	e02d      	b.n	800472c <UART_Start_Receive_IT+0xa4>
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	22ff      	movs	r2, #255	@ 0xff
 80046d4:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80046d8:	e028      	b.n	800472c <UART_Start_Receive_IT+0xa4>
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	689b      	ldr	r3, [r3, #8]
 80046de:	2b00      	cmp	r3, #0
 80046e0:	d10d      	bne.n	80046fe <UART_Start_Receive_IT+0x76>
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	691b      	ldr	r3, [r3, #16]
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d104      	bne.n	80046f4 <UART_Start_Receive_IT+0x6c>
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	22ff      	movs	r2, #255	@ 0xff
 80046ee:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80046f2:	e01b      	b.n	800472c <UART_Start_Receive_IT+0xa4>
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	227f      	movs	r2, #127	@ 0x7f
 80046f8:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80046fc:	e016      	b.n	800472c <UART_Start_Receive_IT+0xa4>
 80046fe:	68fb      	ldr	r3, [r7, #12]
 8004700:	689b      	ldr	r3, [r3, #8]
 8004702:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004706:	d10d      	bne.n	8004724 <UART_Start_Receive_IT+0x9c>
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	691b      	ldr	r3, [r3, #16]
 800470c:	2b00      	cmp	r3, #0
 800470e:	d104      	bne.n	800471a <UART_Start_Receive_IT+0x92>
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	227f      	movs	r2, #127	@ 0x7f
 8004714:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8004718:	e008      	b.n	800472c <UART_Start_Receive_IT+0xa4>
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	223f      	movs	r2, #63	@ 0x3f
 800471e:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8004722:	e003      	b.n	800472c <UART_Start_Receive_IT+0xa4>
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	2200      	movs	r2, #0
 8004728:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	2200      	movs	r2, #0
 8004730:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	2222      	movs	r2, #34	@ 0x22
 8004738:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	3308      	adds	r3, #8
 8004742:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004744:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004746:	e853 3f00 	ldrex	r3, [r3]
 800474a:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 800474c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800474e:	f043 0301 	orr.w	r3, r3, #1
 8004752:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	3308      	adds	r3, #8
 800475c:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8004760:	673a      	str	r2, [r7, #112]	@ 0x70
 8004762:	66fb      	str	r3, [r7, #108]	@ 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004764:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 8004766:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 8004768:	e841 2300 	strex	r3, r2, [r1]
 800476c:	66bb      	str	r3, [r7, #104]	@ 0x68
   return(result);
 800476e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004770:	2b00      	cmp	r3, #0
 8004772:	d1e3      	bne.n	800473c <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004778:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800477c:	d14f      	bne.n	800481e <UART_Start_Receive_IT+0x196>
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8004784:	88fa      	ldrh	r2, [r7, #6]
 8004786:	429a      	cmp	r2, r3
 8004788:	d349      	bcc.n	800481e <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	689b      	ldr	r3, [r3, #8]
 800478e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004792:	d107      	bne.n	80047a4 <UART_Start_Receive_IT+0x11c>
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	691b      	ldr	r3, [r3, #16]
 8004798:	2b00      	cmp	r3, #0
 800479a:	d103      	bne.n	80047a4 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	4a47      	ldr	r2, [pc, #284]	@ (80048bc <UART_Start_Receive_IT+0x234>)
 80047a0:	675a      	str	r2, [r3, #116]	@ 0x74
 80047a2:	e002      	b.n	80047aa <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	4a46      	ldr	r2, [pc, #280]	@ (80048c0 <UART_Start_Receive_IT+0x238>)
 80047a8:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	691b      	ldr	r3, [r3, #16]
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d01a      	beq.n	80047e8 <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047b8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80047ba:	e853 3f00 	ldrex	r3, [r3]
 80047be:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 80047c0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80047c2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80047c6:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	461a      	mov	r2, r3
 80047d0:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80047d4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80047d6:	65ba      	str	r2, [r7, #88]	@ 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047d8:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 80047da:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 80047dc:	e841 2300 	strex	r3, r2, [r1]
 80047e0:	657b      	str	r3, [r7, #84]	@ 0x54
   return(result);
 80047e2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	d1e4      	bne.n	80047b2 <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	3308      	adds	r3, #8
 80047ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047f0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80047f2:	e853 3f00 	ldrex	r3, [r3]
 80047f6:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80047f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80047fa:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80047fe:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	3308      	adds	r3, #8
 8004806:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8004808:	64ba      	str	r2, [r7, #72]	@ 0x48
 800480a:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800480c:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800480e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004810:	e841 2300 	strex	r3, r2, [r1]
 8004814:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8004816:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004818:	2b00      	cmp	r3, #0
 800481a:	d1e5      	bne.n	80047e8 <UART_Start_Receive_IT+0x160>
 800481c:	e046      	b.n	80048ac <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	689b      	ldr	r3, [r3, #8]
 8004822:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004826:	d107      	bne.n	8004838 <UART_Start_Receive_IT+0x1b0>
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	691b      	ldr	r3, [r3, #16]
 800482c:	2b00      	cmp	r3, #0
 800482e:	d103      	bne.n	8004838 <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	4a24      	ldr	r2, [pc, #144]	@ (80048c4 <UART_Start_Receive_IT+0x23c>)
 8004834:	675a      	str	r2, [r3, #116]	@ 0x74
 8004836:	e002      	b.n	800483e <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	4a23      	ldr	r2, [pc, #140]	@ (80048c8 <UART_Start_Receive_IT+0x240>)
 800483c:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	691b      	ldr	r3, [r3, #16]
 8004842:	2b00      	cmp	r3, #0
 8004844:	d019      	beq.n	800487a <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800484c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800484e:	e853 3f00 	ldrex	r3, [r3]
 8004852:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004854:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004856:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 800485a:	677b      	str	r3, [r7, #116]	@ 0x74
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	461a      	mov	r2, r3
 8004862:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004864:	637b      	str	r3, [r7, #52]	@ 0x34
 8004866:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004868:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800486a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800486c:	e841 2300 	strex	r3, r2, [r1]
 8004870:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8004872:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004874:	2b00      	cmp	r3, #0
 8004876:	d1e6      	bne.n	8004846 <UART_Start_Receive_IT+0x1be>
 8004878:	e018      	b.n	80048ac <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004880:	697b      	ldr	r3, [r7, #20]
 8004882:	e853 3f00 	ldrex	r3, [r3]
 8004886:	613b      	str	r3, [r7, #16]
   return(result);
 8004888:	693b      	ldr	r3, [r7, #16]
 800488a:	f043 0320 	orr.w	r3, r3, #32
 800488e:	67bb      	str	r3, [r7, #120]	@ 0x78
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	461a      	mov	r2, r3
 8004896:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004898:	623b      	str	r3, [r7, #32]
 800489a:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800489c:	69f9      	ldr	r1, [r7, #28]
 800489e:	6a3a      	ldr	r2, [r7, #32]
 80048a0:	e841 2300 	strex	r3, r2, [r1]
 80048a4:	61bb      	str	r3, [r7, #24]
   return(result);
 80048a6:	69bb      	ldr	r3, [r7, #24]
 80048a8:	2b00      	cmp	r3, #0
 80048aa:	d1e6      	bne.n	800487a <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 80048ac:	2300      	movs	r3, #0
}
 80048ae:	4618      	mov	r0, r3
 80048b0:	378c      	adds	r7, #140	@ 0x8c
 80048b2:	46bd      	mov	sp, r7
 80048b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048b8:	4770      	bx	lr
 80048ba:	bf00      	nop
 80048bc:	0800542d 	.word	0x0800542d
 80048c0:	080050c9 	.word	0x080050c9
 80048c4:	08004f11 	.word	0x08004f11
 80048c8:	08004d59 	.word	0x08004d59

080048cc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80048cc:	b480      	push	{r7}
 80048ce:	b095      	sub	sp, #84	@ 0x54
 80048d0:	af00      	add	r7, sp, #0
 80048d2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048da:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80048dc:	e853 3f00 	ldrex	r3, [r3]
 80048e0:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80048e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80048e4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80048e8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	461a      	mov	r2, r3
 80048f0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80048f2:	643b      	str	r3, [r7, #64]	@ 0x40
 80048f4:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048f6:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80048f8:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80048fa:	e841 2300 	strex	r3, r2, [r1]
 80048fe:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004900:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004902:	2b00      	cmp	r3, #0
 8004904:	d1e6      	bne.n	80048d4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	3308      	adds	r3, #8
 800490c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800490e:	6a3b      	ldr	r3, [r7, #32]
 8004910:	e853 3f00 	ldrex	r3, [r3]
 8004914:	61fb      	str	r3, [r7, #28]
   return(result);
 8004916:	69fb      	ldr	r3, [r7, #28]
 8004918:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800491c:	f023 0301 	bic.w	r3, r3, #1
 8004920:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	3308      	adds	r3, #8
 8004928:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800492a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800492c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800492e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004930:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004932:	e841 2300 	strex	r3, r2, [r1]
 8004936:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004938:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800493a:	2b00      	cmp	r3, #0
 800493c:	d1e3      	bne.n	8004906 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004942:	2b01      	cmp	r3, #1
 8004944:	d118      	bne.n	8004978 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	e853 3f00 	ldrex	r3, [r3]
 8004952:	60bb      	str	r3, [r7, #8]
   return(result);
 8004954:	68bb      	ldr	r3, [r7, #8]
 8004956:	f023 0310 	bic.w	r3, r3, #16
 800495a:	647b      	str	r3, [r7, #68]	@ 0x44
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	461a      	mov	r2, r3
 8004962:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004964:	61bb      	str	r3, [r7, #24]
 8004966:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004968:	6979      	ldr	r1, [r7, #20]
 800496a:	69ba      	ldr	r2, [r7, #24]
 800496c:	e841 2300 	strex	r3, r2, [r1]
 8004970:	613b      	str	r3, [r7, #16]
   return(result);
 8004972:	693b      	ldr	r3, [r7, #16]
 8004974:	2b00      	cmp	r3, #0
 8004976:	d1e6      	bne.n	8004946 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	2220      	movs	r2, #32
 800497c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	2200      	movs	r2, #0
 8004984:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	2200      	movs	r2, #0
 800498a:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800498c:	bf00      	nop
 800498e:	3754      	adds	r7, #84	@ 0x54
 8004990:	46bd      	mov	sp, r7
 8004992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004996:	4770      	bx	lr

08004998 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004998:	b580      	push	{r7, lr}
 800499a:	b084      	sub	sp, #16
 800499c:	af00      	add	r7, sp, #0
 800499e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80049a4:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	2200      	movs	r2, #0
 80049aa:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80049ae:	68f8      	ldr	r0, [r7, #12]
 80049b0:	f7ff f99e 	bl	8003cf0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80049b4:	bf00      	nop
 80049b6:	3710      	adds	r7, #16
 80049b8:	46bd      	mov	sp, r7
 80049ba:	bd80      	pop	{r7, pc}

080049bc <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 80049bc:	b480      	push	{r7}
 80049be:	b08f      	sub	sp, #60	@ 0x3c
 80049c0:	af00      	add	r7, sp, #0
 80049c2:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80049ca:	2b21      	cmp	r3, #33	@ 0x21
 80049cc:	d14c      	bne.n	8004a68 <UART_TxISR_8BIT+0xac>
  {
    if (huart->TxXferCount == 0U)
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80049d4:	b29b      	uxth	r3, r3
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	d132      	bne.n	8004a40 <UART_TxISR_8BIT+0x84>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049e0:	6a3b      	ldr	r3, [r7, #32]
 80049e2:	e853 3f00 	ldrex	r3, [r3]
 80049e6:	61fb      	str	r3, [r7, #28]
   return(result);
 80049e8:	69fb      	ldr	r3, [r7, #28]
 80049ea:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80049ee:	637b      	str	r3, [r7, #52]	@ 0x34
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	461a      	mov	r2, r3
 80049f6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80049f8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80049fa:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049fc:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80049fe:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004a00:	e841 2300 	strex	r3, r2, [r1]
 8004a04:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004a06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a08:	2b00      	cmp	r3, #0
 8004a0a:	d1e6      	bne.n	80049da <UART_TxISR_8BIT+0x1e>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	e853 3f00 	ldrex	r3, [r3]
 8004a18:	60bb      	str	r3, [r7, #8]
   return(result);
 8004a1a:	68bb      	ldr	r3, [r7, #8]
 8004a1c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004a20:	633b      	str	r3, [r7, #48]	@ 0x30
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	461a      	mov	r2, r3
 8004a28:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004a2a:	61bb      	str	r3, [r7, #24]
 8004a2c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a2e:	6979      	ldr	r1, [r7, #20]
 8004a30:	69ba      	ldr	r2, [r7, #24]
 8004a32:	e841 2300 	strex	r3, r2, [r1]
 8004a36:	613b      	str	r3, [r7, #16]
   return(result);
 8004a38:	693b      	ldr	r3, [r7, #16]
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	d1e6      	bne.n	8004a0c <UART_TxISR_8BIT+0x50>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 8004a3e:	e013      	b.n	8004a68 <UART_TxISR_8BIT+0xac>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004a44:	781a      	ldrb	r2, [r3, #0]
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	629a      	str	r2, [r3, #40]	@ 0x28
      huart->pTxBuffPtr++;
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004a50:	1c5a      	adds	r2, r3, #1
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	651a      	str	r2, [r3, #80]	@ 0x50
      huart->TxXferCount--;
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8004a5c:	b29b      	uxth	r3, r3
 8004a5e:	3b01      	subs	r3, #1
 8004a60:	b29a      	uxth	r2, r3
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
}
 8004a68:	bf00      	nop
 8004a6a:	373c      	adds	r7, #60	@ 0x3c
 8004a6c:	46bd      	mov	sp, r7
 8004a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a72:	4770      	bx	lr

08004a74 <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 8004a74:	b480      	push	{r7}
 8004a76:	b091      	sub	sp, #68	@ 0x44
 8004a78:	af00      	add	r7, sp, #0
 8004a7a:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004a82:	2b21      	cmp	r3, #33	@ 0x21
 8004a84:	d151      	bne.n	8004b2a <UART_TxISR_16BIT+0xb6>
  {
    if (huart->TxXferCount == 0U)
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8004a8c:	b29b      	uxth	r3, r3
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	d132      	bne.n	8004af8 <UART_TxISR_16BIT+0x84>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a9a:	e853 3f00 	ldrex	r3, [r3]
 8004a9e:	623b      	str	r3, [r7, #32]
   return(result);
 8004aa0:	6a3b      	ldr	r3, [r7, #32]
 8004aa2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004aa6:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	461a      	mov	r2, r3
 8004aae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004ab0:	633b      	str	r3, [r7, #48]	@ 0x30
 8004ab2:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ab4:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004ab6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004ab8:	e841 2300 	strex	r3, r2, [r1]
 8004abc:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004abe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004ac0:	2b00      	cmp	r3, #0
 8004ac2:	d1e6      	bne.n	8004a92 <UART_TxISR_16BIT+0x1e>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004aca:	693b      	ldr	r3, [r7, #16]
 8004acc:	e853 3f00 	ldrex	r3, [r3]
 8004ad0:	60fb      	str	r3, [r7, #12]
   return(result);
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004ad8:	637b      	str	r3, [r7, #52]	@ 0x34
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	461a      	mov	r2, r3
 8004ae0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004ae2:	61fb      	str	r3, [r7, #28]
 8004ae4:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ae6:	69b9      	ldr	r1, [r7, #24]
 8004ae8:	69fa      	ldr	r2, [r7, #28]
 8004aea:	e841 2300 	strex	r3, r2, [r1]
 8004aee:	617b      	str	r3, [r7, #20]
   return(result);
 8004af0:	697b      	ldr	r3, [r7, #20]
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	d1e6      	bne.n	8004ac4 <UART_TxISR_16BIT+0x50>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 8004af6:	e018      	b.n	8004b2a <UART_TxISR_16BIT+0xb6>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004afc:	63fb      	str	r3, [r7, #60]	@ 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8004afe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004b00:	881b      	ldrh	r3, [r3, #0]
 8004b02:	461a      	mov	r2, r3
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004b0c:	629a      	str	r2, [r3, #40]	@ 0x28
      huart->pTxBuffPtr += 2U;
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004b12:	1c9a      	adds	r2, r3, #2
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	651a      	str	r2, [r3, #80]	@ 0x50
      huart->TxXferCount--;
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8004b1e:	b29b      	uxth	r3, r3
 8004b20:	3b01      	subs	r3, #1
 8004b22:	b29a      	uxth	r2, r3
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
}
 8004b2a:	bf00      	nop
 8004b2c:	3744      	adds	r7, #68	@ 0x44
 8004b2e:	46bd      	mov	sp, r7
 8004b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b34:	4770      	bx	lr

08004b36 <UART_TxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8004b36:	b480      	push	{r7}
 8004b38:	b091      	sub	sp, #68	@ 0x44
 8004b3a:	af00      	add	r7, sp, #0
 8004b3c:	6078      	str	r0, [r7, #4]
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004b44:	2b21      	cmp	r3, #33	@ 0x21
 8004b46:	d160      	bne.n	8004c0a <UART_TxISR_8BIT_FIFOEN+0xd4>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8004b4e:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 8004b50:	e057      	b.n	8004c02 <UART_TxISR_8BIT_FIFOEN+0xcc>
    {
      if (huart->TxXferCount == 0U)
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8004b58:	b29b      	uxth	r3, r3
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	d133      	bne.n	8004bc6 <UART_TxISR_8BIT_FIFOEN+0x90>
      {
        /* Disable the TX FIFO threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	3308      	adds	r3, #8
 8004b64:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b68:	e853 3f00 	ldrex	r3, [r3]
 8004b6c:	623b      	str	r3, [r7, #32]
   return(result);
 8004b6e:	6a3b      	ldr	r3, [r7, #32]
 8004b70:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8004b74:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	3308      	adds	r3, #8
 8004b7c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8004b7e:	633a      	str	r2, [r7, #48]	@ 0x30
 8004b80:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b82:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004b84:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004b86:	e841 2300 	strex	r3, r2, [r1]
 8004b8a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004b8c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	d1e5      	bne.n	8004b5e <UART_TxISR_8BIT_FIFOEN+0x28>

        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b98:	693b      	ldr	r3, [r7, #16]
 8004b9a:	e853 3f00 	ldrex	r3, [r3]
 8004b9e:	60fb      	str	r3, [r7, #12]
   return(result);
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004ba6:	637b      	str	r3, [r7, #52]	@ 0x34
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	461a      	mov	r2, r3
 8004bae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004bb0:	61fb      	str	r3, [r7, #28]
 8004bb2:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004bb4:	69b9      	ldr	r1, [r7, #24]
 8004bb6:	69fa      	ldr	r2, [r7, #28]
 8004bb8:	e841 2300 	strex	r3, r2, [r1]
 8004bbc:	617b      	str	r3, [r7, #20]
   return(result);
 8004bbe:	697b      	ldr	r3, [r7, #20]
 8004bc0:	2b00      	cmp	r3, #0
 8004bc2:	d1e6      	bne.n	8004b92 <UART_TxISR_8BIT_FIFOEN+0x5c>

        break; /* force exit loop */
 8004bc4:	e021      	b.n	8004c0a <UART_TxISR_8BIT_FIFOEN+0xd4>
      }
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	69db      	ldr	r3, [r3, #28]
 8004bcc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004bd0:	2b00      	cmp	r3, #0
 8004bd2:	d013      	beq.n	8004bfc <UART_TxISR_8BIT_FIFOEN+0xc6>
      {
        huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004bd8:	781a      	ldrb	r2, [r3, #0]
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	629a      	str	r2, [r3, #40]	@ 0x28
        huart->pTxBuffPtr++;
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004be4:	1c5a      	adds	r2, r3, #1
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	651a      	str	r2, [r3, #80]	@ 0x50
        huart->TxXferCount--;
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8004bf0:	b29b      	uxth	r3, r3
 8004bf2:	3b01      	subs	r3, #1
 8004bf4:	b29a      	uxth	r2, r3
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8004bfc:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8004bfe:	3b01      	subs	r3, #1
 8004c00:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 8004c02:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8004c04:	2b00      	cmp	r3, #0
 8004c06:	d1a4      	bne.n	8004b52 <UART_TxISR_8BIT_FIFOEN+0x1c>
      {
        /* Nothing to do */
      }
    }
  }
}
 8004c08:	e7ff      	b.n	8004c0a <UART_TxISR_8BIT_FIFOEN+0xd4>
 8004c0a:	bf00      	nop
 8004c0c:	3744      	adds	r7, #68	@ 0x44
 8004c0e:	46bd      	mov	sp, r7
 8004c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c14:	4770      	bx	lr

08004c16 <UART_TxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8004c16:	b480      	push	{r7}
 8004c18:	b091      	sub	sp, #68	@ 0x44
 8004c1a:	af00      	add	r7, sp, #0
 8004c1c:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004c24:	2b21      	cmp	r3, #33	@ 0x21
 8004c26:	d165      	bne.n	8004cf4 <UART_TxISR_16BIT_FIFOEN+0xde>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8004c2e:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 8004c30:	e05c      	b.n	8004cec <UART_TxISR_16BIT_FIFOEN+0xd6>
    {
      if (huart->TxXferCount == 0U)
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8004c38:	b29b      	uxth	r3, r3
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	d133      	bne.n	8004ca6 <UART_TxISR_16BIT_FIFOEN+0x90>
      {
        /* Disable the TX FIFO threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	3308      	adds	r3, #8
 8004c44:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c46:	6a3b      	ldr	r3, [r7, #32]
 8004c48:	e853 3f00 	ldrex	r3, [r3]
 8004c4c:	61fb      	str	r3, [r7, #28]
   return(result);
 8004c4e:	69fb      	ldr	r3, [r7, #28]
 8004c50:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8004c54:	637b      	str	r3, [r7, #52]	@ 0x34
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	3308      	adds	r3, #8
 8004c5c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8004c5e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004c60:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c62:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004c64:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004c66:	e841 2300 	strex	r3, r2, [r1]
 8004c6a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004c6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	d1e5      	bne.n	8004c3e <UART_TxISR_16BIT_FIFOEN+0x28>

        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	e853 3f00 	ldrex	r3, [r3]
 8004c7e:	60bb      	str	r3, [r7, #8]
   return(result);
 8004c80:	68bb      	ldr	r3, [r7, #8]
 8004c82:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004c86:	633b      	str	r3, [r7, #48]	@ 0x30
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	461a      	mov	r2, r3
 8004c8e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004c90:	61bb      	str	r3, [r7, #24]
 8004c92:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c94:	6979      	ldr	r1, [r7, #20]
 8004c96:	69ba      	ldr	r2, [r7, #24]
 8004c98:	e841 2300 	strex	r3, r2, [r1]
 8004c9c:	613b      	str	r3, [r7, #16]
   return(result);
 8004c9e:	693b      	ldr	r3, [r7, #16]
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	d1e6      	bne.n	8004c72 <UART_TxISR_16BIT_FIFOEN+0x5c>

        break; /* force exit loop */
 8004ca4:	e026      	b.n	8004cf4 <UART_TxISR_16BIT_FIFOEN+0xde>
      }
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	69db      	ldr	r3, [r3, #28]
 8004cac:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004cb0:	2b00      	cmp	r3, #0
 8004cb2:	d018      	beq.n	8004ce6 <UART_TxISR_16BIT_FIFOEN+0xd0>
      {
        tmp = (const uint16_t *) huart->pTxBuffPtr;
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004cb8:	63bb      	str	r3, [r7, #56]	@ 0x38
        huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8004cba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004cbc:	881b      	ldrh	r3, [r3, #0]
 8004cbe:	461a      	mov	r2, r3
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004cc8:	629a      	str	r2, [r3, #40]	@ 0x28
        huart->pTxBuffPtr += 2U;
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004cce:	1c9a      	adds	r2, r3, #2
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	651a      	str	r2, [r3, #80]	@ 0x50
        huart->TxXferCount--;
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8004cda:	b29b      	uxth	r3, r3
 8004cdc:	3b01      	subs	r3, #1
 8004cde:	b29a      	uxth	r2, r3
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8004ce6:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8004ce8:	3b01      	subs	r3, #1
 8004cea:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 8004cec:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	d19f      	bne.n	8004c32 <UART_TxISR_16BIT_FIFOEN+0x1c>
      {
        /* Nothing to do */
      }
    }
  }
}
 8004cf2:	e7ff      	b.n	8004cf4 <UART_TxISR_16BIT_FIFOEN+0xde>
 8004cf4:	bf00      	nop
 8004cf6:	3744      	adds	r7, #68	@ 0x44
 8004cf8:	46bd      	mov	sp, r7
 8004cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cfe:	4770      	bx	lr

08004d00 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004d00:	b580      	push	{r7, lr}
 8004d02:	b088      	sub	sp, #32
 8004d04:	af00      	add	r7, sp, #0
 8004d06:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	e853 3f00 	ldrex	r3, [r3]
 8004d14:	60bb      	str	r3, [r7, #8]
   return(result);
 8004d16:	68bb      	ldr	r3, [r7, #8]
 8004d18:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004d1c:	61fb      	str	r3, [r7, #28]
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	461a      	mov	r2, r3
 8004d24:	69fb      	ldr	r3, [r7, #28]
 8004d26:	61bb      	str	r3, [r7, #24]
 8004d28:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d2a:	6979      	ldr	r1, [r7, #20]
 8004d2c:	69ba      	ldr	r2, [r7, #24]
 8004d2e:	e841 2300 	strex	r3, r2, [r1]
 8004d32:	613b      	str	r3, [r7, #16]
   return(result);
 8004d34:	693b      	ldr	r3, [r7, #16]
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	d1e6      	bne.n	8004d08 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	2220      	movs	r2, #32
 8004d3e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	2200      	movs	r2, #0
 8004d46:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004d48:	6878      	ldr	r0, [r7, #4]
 8004d4a:	f7fe ffc7 	bl	8003cdc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004d4e:	bf00      	nop
 8004d50:	3720      	adds	r7, #32
 8004d52:	46bd      	mov	sp, r7
 8004d54:	bd80      	pop	{r7, pc}
	...

08004d58 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8004d58:	b580      	push	{r7, lr}
 8004d5a:	b09c      	sub	sp, #112	@ 0x70
 8004d5c:	af00      	add	r7, sp, #0
 8004d5e:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8004d66:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004d70:	2b22      	cmp	r3, #34	@ 0x22
 8004d72:	f040 80be 	bne.w	8004ef2 <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d7c:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8004d80:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8004d84:	b2d9      	uxtb	r1, r3
 8004d86:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8004d8a:	b2da      	uxtb	r2, r3
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004d90:	400a      	ands	r2, r1
 8004d92:	b2d2      	uxtb	r2, r2
 8004d94:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004d9a:	1c5a      	adds	r2, r3, #1
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8004da6:	b29b      	uxth	r3, r3
 8004da8:	3b01      	subs	r3, #1
 8004daa:	b29a      	uxth	r2, r3
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8004db8:	b29b      	uxth	r3, r3
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	f040 80a1 	bne.w	8004f02 <UART_RxISR_8BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004dc6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004dc8:	e853 3f00 	ldrex	r3, [r3]
 8004dcc:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8004dce:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004dd0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004dd4:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	461a      	mov	r2, r3
 8004ddc:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004dde:	65bb      	str	r3, [r7, #88]	@ 0x58
 8004de0:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004de2:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8004de4:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8004de6:	e841 2300 	strex	r3, r2, [r1]
 8004dea:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8004dec:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	d1e6      	bne.n	8004dc0 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	3308      	adds	r3, #8
 8004df8:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004dfa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004dfc:	e853 3f00 	ldrex	r3, [r3]
 8004e00:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004e02:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004e04:	f023 0301 	bic.w	r3, r3, #1
 8004e08:	667b      	str	r3, [r7, #100]	@ 0x64
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	3308      	adds	r3, #8
 8004e10:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8004e12:	647a      	str	r2, [r7, #68]	@ 0x44
 8004e14:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e16:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004e18:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004e1a:	e841 2300 	strex	r3, r2, [r1]
 8004e1e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004e20:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004e22:	2b00      	cmp	r3, #0
 8004e24:	d1e5      	bne.n	8004df2 <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	2220      	movs	r2, #32
 8004e2a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	2200      	movs	r2, #0
 8004e32:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	2200      	movs	r2, #0
 8004e38:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	4a33      	ldr	r2, [pc, #204]	@ (8004f0c <UART_RxISR_8BIT+0x1b4>)
 8004e40:	4293      	cmp	r3, r2
 8004e42:	d01f      	beq.n	8004e84 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	685b      	ldr	r3, [r3, #4]
 8004e4a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	d018      	beq.n	8004e84 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e5a:	e853 3f00 	ldrex	r3, [r3]
 8004e5e:	623b      	str	r3, [r7, #32]
   return(result);
 8004e60:	6a3b      	ldr	r3, [r7, #32]
 8004e62:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8004e66:	663b      	str	r3, [r7, #96]	@ 0x60
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	461a      	mov	r2, r3
 8004e6e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004e70:	633b      	str	r3, [r7, #48]	@ 0x30
 8004e72:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e74:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004e76:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004e78:	e841 2300 	strex	r3, r2, [r1]
 8004e7c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004e7e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004e80:	2b00      	cmp	r3, #0
 8004e82:	d1e6      	bne.n	8004e52 <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004e88:	2b01      	cmp	r3, #1
 8004e8a:	d12e      	bne.n	8004eea <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	2200      	movs	r2, #0
 8004e90:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e98:	693b      	ldr	r3, [r7, #16]
 8004e9a:	e853 3f00 	ldrex	r3, [r3]
 8004e9e:	60fb      	str	r3, [r7, #12]
   return(result);
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	f023 0310 	bic.w	r3, r3, #16
 8004ea6:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	461a      	mov	r2, r3
 8004eae:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004eb0:	61fb      	str	r3, [r7, #28]
 8004eb2:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004eb4:	69b9      	ldr	r1, [r7, #24]
 8004eb6:	69fa      	ldr	r2, [r7, #28]
 8004eb8:	e841 2300 	strex	r3, r2, [r1]
 8004ebc:	617b      	str	r3, [r7, #20]
   return(result);
 8004ebe:	697b      	ldr	r3, [r7, #20]
 8004ec0:	2b00      	cmp	r3, #0
 8004ec2:	d1e6      	bne.n	8004e92 <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	69db      	ldr	r3, [r3, #28]
 8004eca:	f003 0310 	and.w	r3, r3, #16
 8004ece:	2b10      	cmp	r3, #16
 8004ed0:	d103      	bne.n	8004eda <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	2210      	movs	r2, #16
 8004ed8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8004ee0:	4619      	mov	r1, r3
 8004ee2:	6878      	ldr	r0, [r7, #4]
 8004ee4:	f7fe ff0e 	bl	8003d04 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8004ee8:	e00b      	b.n	8004f02 <UART_RxISR_8BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 8004eea:	6878      	ldr	r0, [r7, #4]
 8004eec:	f7fb fbde 	bl	80006ac <HAL_UART_RxCpltCallback>
}
 8004ef0:	e007      	b.n	8004f02 <UART_RxISR_8BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	699a      	ldr	r2, [r3, #24]
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	f042 0208 	orr.w	r2, r2, #8
 8004f00:	619a      	str	r2, [r3, #24]
}
 8004f02:	bf00      	nop
 8004f04:	3770      	adds	r7, #112	@ 0x70
 8004f06:	46bd      	mov	sp, r7
 8004f08:	bd80      	pop	{r7, pc}
 8004f0a:	bf00      	nop
 8004f0c:	40008000 	.word	0x40008000

08004f10 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8004f10:	b580      	push	{r7, lr}
 8004f12:	b09c      	sub	sp, #112	@ 0x70
 8004f14:	af00      	add	r7, sp, #0
 8004f16:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8004f1e:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004f28:	2b22      	cmp	r3, #34	@ 0x22
 8004f2a:	f040 80be 	bne.w	80050aa <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f34:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004f3c:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 8004f3e:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 8004f42:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8004f46:	4013      	ands	r3, r2
 8004f48:	b29a      	uxth	r2, r3
 8004f4a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004f4c:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004f52:	1c9a      	adds	r2, r3, #2
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8004f5e:	b29b      	uxth	r3, r3
 8004f60:	3b01      	subs	r3, #1
 8004f62:	b29a      	uxth	r2, r3
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8004f70:	b29b      	uxth	r3, r3
 8004f72:	2b00      	cmp	r3, #0
 8004f74:	f040 80a1 	bne.w	80050ba <UART_RxISR_16BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f7e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004f80:	e853 3f00 	ldrex	r3, [r3]
 8004f84:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8004f86:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004f88:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004f8c:	667b      	str	r3, [r7, #100]	@ 0x64
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	461a      	mov	r2, r3
 8004f94:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004f96:	657b      	str	r3, [r7, #84]	@ 0x54
 8004f98:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f9a:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8004f9c:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8004f9e:	e841 2300 	strex	r3, r2, [r1]
 8004fa2:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8004fa4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	d1e6      	bne.n	8004f78 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	3308      	adds	r3, #8
 8004fb0:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004fb2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004fb4:	e853 3f00 	ldrex	r3, [r3]
 8004fb8:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004fba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004fbc:	f023 0301 	bic.w	r3, r3, #1
 8004fc0:	663b      	str	r3, [r7, #96]	@ 0x60
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	3308      	adds	r3, #8
 8004fc8:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8004fca:	643a      	str	r2, [r7, #64]	@ 0x40
 8004fcc:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004fce:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004fd0:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004fd2:	e841 2300 	strex	r3, r2, [r1]
 8004fd6:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004fd8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	d1e5      	bne.n	8004faa <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	2220      	movs	r2, #32
 8004fe2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	2200      	movs	r2, #0
 8004fea:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	2200      	movs	r2, #0
 8004ff0:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	4a33      	ldr	r2, [pc, #204]	@ (80050c4 <UART_RxISR_16BIT+0x1b4>)
 8004ff8:	4293      	cmp	r3, r2
 8004ffa:	d01f      	beq.n	800503c <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	685b      	ldr	r3, [r3, #4]
 8005002:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005006:	2b00      	cmp	r3, #0
 8005008:	d018      	beq.n	800503c <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005010:	6a3b      	ldr	r3, [r7, #32]
 8005012:	e853 3f00 	ldrex	r3, [r3]
 8005016:	61fb      	str	r3, [r7, #28]
   return(result);
 8005018:	69fb      	ldr	r3, [r7, #28]
 800501a:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800501e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	461a      	mov	r2, r3
 8005026:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005028:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800502a:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800502c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800502e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005030:	e841 2300 	strex	r3, r2, [r1]
 8005034:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005036:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005038:	2b00      	cmp	r3, #0
 800503a:	d1e6      	bne.n	800500a <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005040:	2b01      	cmp	r3, #1
 8005042:	d12e      	bne.n	80050a2 <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	2200      	movs	r2, #0
 8005048:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	e853 3f00 	ldrex	r3, [r3]
 8005056:	60bb      	str	r3, [r7, #8]
   return(result);
 8005058:	68bb      	ldr	r3, [r7, #8]
 800505a:	f023 0310 	bic.w	r3, r3, #16
 800505e:	65bb      	str	r3, [r7, #88]	@ 0x58
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	461a      	mov	r2, r3
 8005066:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005068:	61bb      	str	r3, [r7, #24]
 800506a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800506c:	6979      	ldr	r1, [r7, #20]
 800506e:	69ba      	ldr	r2, [r7, #24]
 8005070:	e841 2300 	strex	r3, r2, [r1]
 8005074:	613b      	str	r3, [r7, #16]
   return(result);
 8005076:	693b      	ldr	r3, [r7, #16]
 8005078:	2b00      	cmp	r3, #0
 800507a:	d1e6      	bne.n	800504a <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	69db      	ldr	r3, [r3, #28]
 8005082:	f003 0310 	and.w	r3, r3, #16
 8005086:	2b10      	cmp	r3, #16
 8005088:	d103      	bne.n	8005092 <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	2210      	movs	r2, #16
 8005090:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8005098:	4619      	mov	r1, r3
 800509a:	6878      	ldr	r0, [r7, #4]
 800509c:	f7fe fe32 	bl	8003d04 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80050a0:	e00b      	b.n	80050ba <UART_RxISR_16BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 80050a2:	6878      	ldr	r0, [r7, #4]
 80050a4:	f7fb fb02 	bl	80006ac <HAL_UART_RxCpltCallback>
}
 80050a8:	e007      	b.n	80050ba <UART_RxISR_16BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	699a      	ldr	r2, [r3, #24]
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	f042 0208 	orr.w	r2, r2, #8
 80050b8:	619a      	str	r2, [r3, #24]
}
 80050ba:	bf00      	nop
 80050bc:	3770      	adds	r7, #112	@ 0x70
 80050be:	46bd      	mov	sp, r7
 80050c0:	bd80      	pop	{r7, pc}
 80050c2:	bf00      	nop
 80050c4:	40008000 	.word	0x40008000

080050c8 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 80050c8:	b580      	push	{r7, lr}
 80050ca:	b0ac      	sub	sp, #176	@ 0xb0
 80050cc:	af00      	add	r7, sp, #0
 80050ce:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 80050d6:	f8a7 30aa 	strh.w	r3, [r7, #170]	@ 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	69db      	ldr	r3, [r3, #28]
 80050e0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	689b      	ldr	r3, [r3, #8]
 80050f4:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80050fe:	2b22      	cmp	r3, #34	@ 0x22
 8005100:	f040 8183 	bne.w	800540a <UART_RxISR_8BIT_FIFOEN+0x342>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800510a:	f8a7 309e 	strh.w	r3, [r7, #158]	@ 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800510e:	e126      	b.n	800535e <UART_RxISR_8BIT_FIFOEN+0x296>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005116:	f8a7 309c 	strh.w	r3, [r7, #156]	@ 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800511a:	f8b7 309c 	ldrh.w	r3, [r7, #156]	@ 0x9c
 800511e:	b2d9      	uxtb	r1, r3
 8005120:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	@ 0xaa
 8005124:	b2da      	uxtb	r2, r3
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800512a:	400a      	ands	r2, r1
 800512c:	b2d2      	uxtb	r2, r2
 800512e:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005134:	1c5a      	adds	r2, r3, #1
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8005140:	b29b      	uxth	r3, r3
 8005142:	3b01      	subs	r3, #1
 8005144:	b29a      	uxth	r2, r3
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	69db      	ldr	r3, [r3, #28]
 8005152:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8005156:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800515a:	f003 0307 	and.w	r3, r3, #7
 800515e:	2b00      	cmp	r3, #0
 8005160:	d053      	beq.n	800520a <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005162:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8005166:	f003 0301 	and.w	r3, r3, #1
 800516a:	2b00      	cmp	r3, #0
 800516c:	d011      	beq.n	8005192 <UART_RxISR_8BIT_FIFOEN+0xca>
 800516e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8005172:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005176:	2b00      	cmp	r3, #0
 8005178:	d00b      	beq.n	8005192 <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	2201      	movs	r2, #1
 8005180:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005188:	f043 0201 	orr.w	r2, r3, #1
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005192:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8005196:	f003 0302 	and.w	r3, r3, #2
 800519a:	2b00      	cmp	r3, #0
 800519c:	d011      	beq.n	80051c2 <UART_RxISR_8BIT_FIFOEN+0xfa>
 800519e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80051a2:	f003 0301 	and.w	r3, r3, #1
 80051a6:	2b00      	cmp	r3, #0
 80051a8:	d00b      	beq.n	80051c2 <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	2202      	movs	r2, #2
 80051b0:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80051b8:	f043 0204 	orr.w	r2, r3, #4
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80051c2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80051c6:	f003 0304 	and.w	r3, r3, #4
 80051ca:	2b00      	cmp	r3, #0
 80051cc:	d011      	beq.n	80051f2 <UART_RxISR_8BIT_FIFOEN+0x12a>
 80051ce:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80051d2:	f003 0301 	and.w	r3, r3, #1
 80051d6:	2b00      	cmp	r3, #0
 80051d8:	d00b      	beq.n	80051f2 <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	2204      	movs	r2, #4
 80051e0:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80051e8:	f043 0202 	orr.w	r2, r3, #2
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80051f8:	2b00      	cmp	r3, #0
 80051fa:	d006      	beq.n	800520a <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80051fc:	6878      	ldr	r0, [r7, #4]
 80051fe:	f7fe fd77 	bl	8003cf0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	2200      	movs	r2, #0
 8005206:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8005210:	b29b      	uxth	r3, r3
 8005212:	2b00      	cmp	r3, #0
 8005214:	f040 80a3 	bne.w	800535e <UART_RxISR_8BIT_FIFOEN+0x296>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800521e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005220:	e853 3f00 	ldrex	r3, [r3]
 8005224:	66fb      	str	r3, [r7, #108]	@ 0x6c
   return(result);
 8005226:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005228:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800522c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	461a      	mov	r2, r3
 8005236:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800523a:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800523c:	67ba      	str	r2, [r7, #120]	@ 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800523e:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 8005240:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8005242:	e841 2300 	strex	r3, r2, [r1]
 8005246:	677b      	str	r3, [r7, #116]	@ 0x74
   return(result);
 8005248:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800524a:	2b00      	cmp	r3, #0
 800524c:	d1e4      	bne.n	8005218 <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	3308      	adds	r3, #8
 8005254:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005256:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005258:	e853 3f00 	ldrex	r3, [r3]
 800525c:	65bb      	str	r3, [r7, #88]	@ 0x58
   return(result);
 800525e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005260:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005264:	f023 0301 	bic.w	r3, r3, #1
 8005268:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	3308      	adds	r3, #8
 8005272:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8005276:	66ba      	str	r2, [r7, #104]	@ 0x68
 8005278:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800527a:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 800527c:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800527e:	e841 2300 	strex	r3, r2, [r1]
 8005282:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 8005284:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005286:	2b00      	cmp	r3, #0
 8005288:	d1e1      	bne.n	800524e <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	2220      	movs	r2, #32
 800528e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	2200      	movs	r2, #0
 8005296:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	2200      	movs	r2, #0
 800529c:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	4a60      	ldr	r2, [pc, #384]	@ (8005424 <UART_RxISR_8BIT_FIFOEN+0x35c>)
 80052a4:	4293      	cmp	r3, r2
 80052a6:	d021      	beq.n	80052ec <UART_RxISR_8BIT_FIFOEN+0x224>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	685b      	ldr	r3, [r3, #4]
 80052ae:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80052b2:	2b00      	cmp	r3, #0
 80052b4:	d01a      	beq.n	80052ec <UART_RxISR_8BIT_FIFOEN+0x224>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052bc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80052be:	e853 3f00 	ldrex	r3, [r3]
 80052c2:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 80052c4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80052c6:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80052ca:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	461a      	mov	r2, r3
 80052d4:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80052d8:	657b      	str	r3, [r7, #84]	@ 0x54
 80052da:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052dc:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80052de:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80052e0:	e841 2300 	strex	r3, r2, [r1]
 80052e4:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 80052e6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80052e8:	2b00      	cmp	r3, #0
 80052ea:	d1e4      	bne.n	80052b6 <UART_RxISR_8BIT_FIFOEN+0x1ee>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80052f0:	2b01      	cmp	r3, #1
 80052f2:	d130      	bne.n	8005356 <UART_RxISR_8BIT_FIFOEN+0x28e>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	2200      	movs	r2, #0
 80052f8:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005300:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005302:	e853 3f00 	ldrex	r3, [r3]
 8005306:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005308:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800530a:	f023 0310 	bic.w	r3, r3, #16
 800530e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	461a      	mov	r2, r3
 8005318:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800531c:	643b      	str	r3, [r7, #64]	@ 0x40
 800531e:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005320:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005322:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005324:	e841 2300 	strex	r3, r2, [r1]
 8005328:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800532a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800532c:	2b00      	cmp	r3, #0
 800532e:	d1e4      	bne.n	80052fa <UART_RxISR_8BIT_FIFOEN+0x232>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	69db      	ldr	r3, [r3, #28]
 8005336:	f003 0310 	and.w	r3, r3, #16
 800533a:	2b10      	cmp	r3, #16
 800533c:	d103      	bne.n	8005346 <UART_RxISR_8BIT_FIFOEN+0x27e>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	2210      	movs	r2, #16
 8005344:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800534c:	4619      	mov	r1, r3
 800534e:	6878      	ldr	r0, [r7, #4]
 8005350:	f7fe fcd8 	bl	8003d04 <HAL_UARTEx_RxEventCallback>
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        }
        break;
 8005354:	e00e      	b.n	8005374 <UART_RxISR_8BIT_FIFOEN+0x2ac>
          HAL_UART_RxCpltCallback(huart);
 8005356:	6878      	ldr	r0, [r7, #4]
 8005358:	f7fb f9a8 	bl	80006ac <HAL_UART_RxCpltCallback>
        break;
 800535c:	e00a      	b.n	8005374 <UART_RxISR_8BIT_FIFOEN+0x2ac>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800535e:	f8b7 309e 	ldrh.w	r3, [r7, #158]	@ 0x9e
 8005362:	2b00      	cmp	r3, #0
 8005364:	d006      	beq.n	8005374 <UART_RxISR_8BIT_FIFOEN+0x2ac>
 8005366:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800536a:	f003 0320 	and.w	r3, r3, #32
 800536e:	2b00      	cmp	r3, #0
 8005370:	f47f aece 	bne.w	8005110 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800537a:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800537e:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8005382:	2b00      	cmp	r3, #0
 8005384:	d049      	beq.n	800541a <UART_RxISR_8BIT_FIFOEN+0x352>
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800538c:	f8b7 208a 	ldrh.w	r2, [r7, #138]	@ 0x8a
 8005390:	429a      	cmp	r2, r3
 8005392:	d242      	bcs.n	800541a <UART_RxISR_8BIT_FIFOEN+0x352>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	3308      	adds	r3, #8
 800539a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800539c:	6a3b      	ldr	r3, [r7, #32]
 800539e:	e853 3f00 	ldrex	r3, [r3]
 80053a2:	61fb      	str	r3, [r7, #28]
   return(result);
 80053a4:	69fb      	ldr	r3, [r7, #28]
 80053a6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80053aa:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	3308      	adds	r3, #8
 80053b4:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 80053b8:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80053ba:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053bc:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80053be:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80053c0:	e841 2300 	strex	r3, r2, [r1]
 80053c4:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80053c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80053c8:	2b00      	cmp	r3, #0
 80053ca:	d1e3      	bne.n	8005394 <UART_RxISR_8BIT_FIFOEN+0x2cc>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	4a16      	ldr	r2, [pc, #88]	@ (8005428 <UART_RxISR_8BIT_FIFOEN+0x360>)
 80053d0:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	e853 3f00 	ldrex	r3, [r3]
 80053de:	60bb      	str	r3, [r7, #8]
   return(result);
 80053e0:	68bb      	ldr	r3, [r7, #8]
 80053e2:	f043 0320 	orr.w	r3, r3, #32
 80053e6:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	461a      	mov	r2, r3
 80053f0:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80053f4:	61bb      	str	r3, [r7, #24]
 80053f6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053f8:	6979      	ldr	r1, [r7, #20]
 80053fa:	69ba      	ldr	r2, [r7, #24]
 80053fc:	e841 2300 	strex	r3, r2, [r1]
 8005400:	613b      	str	r3, [r7, #16]
   return(result);
 8005402:	693b      	ldr	r3, [r7, #16]
 8005404:	2b00      	cmp	r3, #0
 8005406:	d1e4      	bne.n	80053d2 <UART_RxISR_8BIT_FIFOEN+0x30a>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8005408:	e007      	b.n	800541a <UART_RxISR_8BIT_FIFOEN+0x352>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	699a      	ldr	r2, [r3, #24]
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	f042 0208 	orr.w	r2, r2, #8
 8005418:	619a      	str	r2, [r3, #24]
}
 800541a:	bf00      	nop
 800541c:	37b0      	adds	r7, #176	@ 0xb0
 800541e:	46bd      	mov	sp, r7
 8005420:	bd80      	pop	{r7, pc}
 8005422:	bf00      	nop
 8005424:	40008000 	.word	0x40008000
 8005428:	08004d59 	.word	0x08004d59

0800542c <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800542c:	b580      	push	{r7, lr}
 800542e:	b0ae      	sub	sp, #184	@ 0xb8
 8005430:	af00      	add	r7, sp, #0
 8005432:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800543a:	f8a7 30b2 	strh.w	r3, [r7, #178]	@ 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	69db      	ldr	r3, [r3, #28]
 8005444:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	689b      	ldr	r3, [r3, #8]
 8005458:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005462:	2b22      	cmp	r3, #34	@ 0x22
 8005464:	f040 8187 	bne.w	8005776 <UART_RxISR_16BIT_FIFOEN+0x34a>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800546e:	f8a7 30a6 	strh.w	r3, [r7, #166]	@ 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8005472:	e12a      	b.n	80056ca <UART_RxISR_16BIT_FIFOEN+0x29e>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800547a:	f8a7 30a4 	strh.w	r3, [r7, #164]	@ 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005482:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 8005486:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	@ 0xa4
 800548a:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	@ 0xb2
 800548e:	4013      	ands	r3, r2
 8005490:	b29a      	uxth	r2, r3
 8005492:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8005496:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800549c:	1c9a      	adds	r2, r3, #2
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80054a8:	b29b      	uxth	r3, r3
 80054aa:	3b01      	subs	r3, #1
 80054ac:	b29a      	uxth	r2, r3
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	69db      	ldr	r3, [r3, #28]
 80054ba:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 80054be:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80054c2:	f003 0307 	and.w	r3, r3, #7
 80054c6:	2b00      	cmp	r3, #0
 80054c8:	d053      	beq.n	8005572 <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80054ca:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80054ce:	f003 0301 	and.w	r3, r3, #1
 80054d2:	2b00      	cmp	r3, #0
 80054d4:	d011      	beq.n	80054fa <UART_RxISR_16BIT_FIFOEN+0xce>
 80054d6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80054da:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80054de:	2b00      	cmp	r3, #0
 80054e0:	d00b      	beq.n	80054fa <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	2201      	movs	r2, #1
 80054e8:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80054f0:	f043 0201 	orr.w	r2, r3, #1
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80054fa:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80054fe:	f003 0302 	and.w	r3, r3, #2
 8005502:	2b00      	cmp	r3, #0
 8005504:	d011      	beq.n	800552a <UART_RxISR_16BIT_FIFOEN+0xfe>
 8005506:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800550a:	f003 0301 	and.w	r3, r3, #1
 800550e:	2b00      	cmp	r3, #0
 8005510:	d00b      	beq.n	800552a <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	2202      	movs	r2, #2
 8005518:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005520:	f043 0204 	orr.w	r2, r3, #4
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800552a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800552e:	f003 0304 	and.w	r3, r3, #4
 8005532:	2b00      	cmp	r3, #0
 8005534:	d011      	beq.n	800555a <UART_RxISR_16BIT_FIFOEN+0x12e>
 8005536:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800553a:	f003 0301 	and.w	r3, r3, #1
 800553e:	2b00      	cmp	r3, #0
 8005540:	d00b      	beq.n	800555a <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	2204      	movs	r2, #4
 8005548:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005550:	f043 0202 	orr.w	r2, r3, #2
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005560:	2b00      	cmp	r3, #0
 8005562:	d006      	beq.n	8005572 <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005564:	6878      	ldr	r0, [r7, #4]
 8005566:	f7fe fbc3 	bl	8003cf0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	2200      	movs	r2, #0
 800556e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8005578:	b29b      	uxth	r3, r3
 800557a:	2b00      	cmp	r3, #0
 800557c:	f040 80a5 	bne.w	80056ca <UART_RxISR_16BIT_FIFOEN+0x29e>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005586:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005588:	e853 3f00 	ldrex	r3, [r3]
 800558c:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800558e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005590:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005594:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	461a      	mov	r2, r3
 800559e:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80055a2:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80055a6:	67fa      	str	r2, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055a8:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80055aa:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80055ae:	e841 2300 	strex	r3, r2, [r1]
 80055b2:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80055b4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80055b6:	2b00      	cmp	r3, #0
 80055b8:	d1e2      	bne.n	8005580 <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	3308      	adds	r3, #8
 80055c0:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055c2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80055c4:	e853 3f00 	ldrex	r3, [r3]
 80055c8:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80055ca:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80055cc:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80055d0:	f023 0301 	bic.w	r3, r3, #1
 80055d4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	3308      	adds	r3, #8
 80055de:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 80055e2:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80055e4:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055e6:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80055e8:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80055ea:	e841 2300 	strex	r3, r2, [r1]
 80055ee:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80055f0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	d1e1      	bne.n	80055ba <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	2220      	movs	r2, #32
 80055fa:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	2200      	movs	r2, #0
 8005602:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	2200      	movs	r2, #0
 8005608:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	4a60      	ldr	r2, [pc, #384]	@ (8005790 <UART_RxISR_16BIT_FIFOEN+0x364>)
 8005610:	4293      	cmp	r3, r2
 8005612:	d021      	beq.n	8005658 <UART_RxISR_16BIT_FIFOEN+0x22c>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	685b      	ldr	r3, [r3, #4]
 800561a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800561e:	2b00      	cmp	r3, #0
 8005620:	d01a      	beq.n	8005658 <UART_RxISR_16BIT_FIFOEN+0x22c>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005628:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800562a:	e853 3f00 	ldrex	r3, [r3]
 800562e:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8005630:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005632:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8005636:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	461a      	mov	r2, r3
 8005640:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8005644:	65bb      	str	r3, [r7, #88]	@ 0x58
 8005646:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005648:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800564a:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800564c:	e841 2300 	strex	r3, r2, [r1]
 8005650:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8005652:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005654:	2b00      	cmp	r3, #0
 8005656:	d1e4      	bne.n	8005622 <UART_RxISR_16BIT_FIFOEN+0x1f6>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800565c:	2b01      	cmp	r3, #1
 800565e:	d130      	bne.n	80056c2 <UART_RxISR_16BIT_FIFOEN+0x296>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	2200      	movs	r2, #0
 8005664:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800566c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800566e:	e853 3f00 	ldrex	r3, [r3]
 8005672:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005674:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005676:	f023 0310 	bic.w	r3, r3, #16
 800567a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	461a      	mov	r2, r3
 8005684:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8005688:	647b      	str	r3, [r7, #68]	@ 0x44
 800568a:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800568c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800568e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005690:	e841 2300 	strex	r3, r2, [r1]
 8005694:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005696:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005698:	2b00      	cmp	r3, #0
 800569a:	d1e4      	bne.n	8005666 <UART_RxISR_16BIT_FIFOEN+0x23a>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	69db      	ldr	r3, [r3, #28]
 80056a2:	f003 0310 	and.w	r3, r3, #16
 80056a6:	2b10      	cmp	r3, #16
 80056a8:	d103      	bne.n	80056b2 <UART_RxISR_16BIT_FIFOEN+0x286>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	2210      	movs	r2, #16
 80056b0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80056b8:	4619      	mov	r1, r3
 80056ba:	6878      	ldr	r0, [r7, #4]
 80056bc:	f7fe fb22 	bl	8003d04 <HAL_UARTEx_RxEventCallback>
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        }
        break;
 80056c0:	e00e      	b.n	80056e0 <UART_RxISR_16BIT_FIFOEN+0x2b4>
          HAL_UART_RxCpltCallback(huart);
 80056c2:	6878      	ldr	r0, [r7, #4]
 80056c4:	f7fa fff2 	bl	80006ac <HAL_UART_RxCpltCallback>
        break;
 80056c8:	e00a      	b.n	80056e0 <UART_RxISR_16BIT_FIFOEN+0x2b4>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80056ca:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	@ 0xa6
 80056ce:	2b00      	cmp	r3, #0
 80056d0:	d006      	beq.n	80056e0 <UART_RxISR_16BIT_FIFOEN+0x2b4>
 80056d2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80056d6:	f003 0320 	and.w	r3, r3, #32
 80056da:	2b00      	cmp	r3, #0
 80056dc:	f47f aeca 	bne.w	8005474 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80056e6:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 80056ea:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 80056ee:	2b00      	cmp	r3, #0
 80056f0:	d049      	beq.n	8005786 <UART_RxISR_16BIT_FIFOEN+0x35a>
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 80056f8:	f8b7 208e 	ldrh.w	r2, [r7, #142]	@ 0x8e
 80056fc:	429a      	cmp	r2, r3
 80056fe:	d242      	bcs.n	8005786 <UART_RxISR_16BIT_FIFOEN+0x35a>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	3308      	adds	r3, #8
 8005706:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005708:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800570a:	e853 3f00 	ldrex	r3, [r3]
 800570e:	623b      	str	r3, [r7, #32]
   return(result);
 8005710:	6a3b      	ldr	r3, [r7, #32]
 8005712:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005716:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	3308      	adds	r3, #8
 8005720:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 8005724:	633a      	str	r2, [r7, #48]	@ 0x30
 8005726:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005728:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800572a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800572c:	e841 2300 	strex	r3, r2, [r1]
 8005730:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005732:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005734:	2b00      	cmp	r3, #0
 8005736:	d1e3      	bne.n	8005700 <UART_RxISR_16BIT_FIFOEN+0x2d4>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	4a16      	ldr	r2, [pc, #88]	@ (8005794 <UART_RxISR_16BIT_FIFOEN+0x368>)
 800573c:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005744:	693b      	ldr	r3, [r7, #16]
 8005746:	e853 3f00 	ldrex	r3, [r3]
 800574a:	60fb      	str	r3, [r7, #12]
   return(result);
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	f043 0320 	orr.w	r3, r3, #32
 8005752:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	461a      	mov	r2, r3
 800575c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8005760:	61fb      	str	r3, [r7, #28]
 8005762:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005764:	69b9      	ldr	r1, [r7, #24]
 8005766:	69fa      	ldr	r2, [r7, #28]
 8005768:	e841 2300 	strex	r3, r2, [r1]
 800576c:	617b      	str	r3, [r7, #20]
   return(result);
 800576e:	697b      	ldr	r3, [r7, #20]
 8005770:	2b00      	cmp	r3, #0
 8005772:	d1e4      	bne.n	800573e <UART_RxISR_16BIT_FIFOEN+0x312>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8005774:	e007      	b.n	8005786 <UART_RxISR_16BIT_FIFOEN+0x35a>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	699a      	ldr	r2, [r3, #24]
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	f042 0208 	orr.w	r2, r2, #8
 8005784:	619a      	str	r2, [r3, #24]
}
 8005786:	bf00      	nop
 8005788:	37b8      	adds	r7, #184	@ 0xb8
 800578a:	46bd      	mov	sp, r7
 800578c:	bd80      	pop	{r7, pc}
 800578e:	bf00      	nop
 8005790:	40008000 	.word	0x40008000
 8005794:	08004f11 	.word	0x08004f11

08005798 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8005798:	b480      	push	{r7}
 800579a:	b083      	sub	sp, #12
 800579c:	af00      	add	r7, sp, #0
 800579e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80057a0:	bf00      	nop
 80057a2:	370c      	adds	r7, #12
 80057a4:	46bd      	mov	sp, r7
 80057a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057aa:	4770      	bx	lr

080057ac <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 80057ac:	b480      	push	{r7}
 80057ae:	b083      	sub	sp, #12
 80057b0:	af00      	add	r7, sp, #0
 80057b2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 80057b4:	bf00      	nop
 80057b6:	370c      	adds	r7, #12
 80057b8:	46bd      	mov	sp, r7
 80057ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057be:	4770      	bx	lr

080057c0 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 80057c0:	b480      	push	{r7}
 80057c2:	b083      	sub	sp, #12
 80057c4:	af00      	add	r7, sp, #0
 80057c6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 80057c8:	bf00      	nop
 80057ca:	370c      	adds	r7, #12
 80057cc:	46bd      	mov	sp, r7
 80057ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057d2:	4770      	bx	lr

080057d4 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80057d4:	b480      	push	{r7}
 80057d6:	b085      	sub	sp, #20
 80057d8:	af00      	add	r7, sp, #0
 80057da:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80057e2:	2b01      	cmp	r3, #1
 80057e4:	d101      	bne.n	80057ea <HAL_UARTEx_DisableFifoMode+0x16>
 80057e6:	2302      	movs	r3, #2
 80057e8:	e027      	b.n	800583a <HAL_UARTEx_DisableFifoMode+0x66>
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	2201      	movs	r2, #1
 80057ee:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	2224      	movs	r2, #36	@ 0x24
 80057f6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	681a      	ldr	r2, [r3, #0]
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	f022 0201 	bic.w	r2, r2, #1
 8005810:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8005812:	68fb      	ldr	r3, [r7, #12]
 8005814:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8005818:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	2200      	movs	r2, #0
 800581e:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	68fa      	ldr	r2, [r7, #12]
 8005826:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	2220      	movs	r2, #32
 800582c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	2200      	movs	r2, #0
 8005834:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8005838:	2300      	movs	r3, #0
}
 800583a:	4618      	mov	r0, r3
 800583c:	3714      	adds	r7, #20
 800583e:	46bd      	mov	sp, r7
 8005840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005844:	4770      	bx	lr

08005846 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005846:	b580      	push	{r7, lr}
 8005848:	b084      	sub	sp, #16
 800584a:	af00      	add	r7, sp, #0
 800584c:	6078      	str	r0, [r7, #4]
 800584e:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8005856:	2b01      	cmp	r3, #1
 8005858:	d101      	bne.n	800585e <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800585a:	2302      	movs	r3, #2
 800585c:	e02d      	b.n	80058ba <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	2201      	movs	r2, #1
 8005862:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	2224      	movs	r2, #36	@ 0x24
 800586a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	681a      	ldr	r2, [r3, #0]
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	f022 0201 	bic.w	r2, r2, #1
 8005884:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	689b      	ldr	r3, [r3, #8]
 800588c:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	683a      	ldr	r2, [r7, #0]
 8005896:	430a      	orrs	r2, r1
 8005898:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800589a:	6878      	ldr	r0, [r7, #4]
 800589c:	f000 f850 	bl	8005940 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	68fa      	ldr	r2, [r7, #12]
 80058a6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	2220      	movs	r2, #32
 80058ac:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	2200      	movs	r2, #0
 80058b4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80058b8:	2300      	movs	r3, #0
}
 80058ba:	4618      	mov	r0, r3
 80058bc:	3710      	adds	r7, #16
 80058be:	46bd      	mov	sp, r7
 80058c0:	bd80      	pop	{r7, pc}

080058c2 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80058c2:	b580      	push	{r7, lr}
 80058c4:	b084      	sub	sp, #16
 80058c6:	af00      	add	r7, sp, #0
 80058c8:	6078      	str	r0, [r7, #4]
 80058ca:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80058d2:	2b01      	cmp	r3, #1
 80058d4:	d101      	bne.n	80058da <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80058d6:	2302      	movs	r3, #2
 80058d8:	e02d      	b.n	8005936 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	2201      	movs	r2, #1
 80058de:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	2224      	movs	r2, #36	@ 0x24
 80058e6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	681a      	ldr	r2, [r3, #0]
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	f022 0201 	bic.w	r2, r2, #1
 8005900:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	689b      	ldr	r3, [r3, #8]
 8005908:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	683a      	ldr	r2, [r7, #0]
 8005912:	430a      	orrs	r2, r1
 8005914:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005916:	6878      	ldr	r0, [r7, #4]
 8005918:	f000 f812 	bl	8005940 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	68fa      	ldr	r2, [r7, #12]
 8005922:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	2220      	movs	r2, #32
 8005928:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	2200      	movs	r2, #0
 8005930:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8005934:	2300      	movs	r3, #0
}
 8005936:	4618      	mov	r0, r3
 8005938:	3710      	adds	r7, #16
 800593a:	46bd      	mov	sp, r7
 800593c:	bd80      	pop	{r7, pc}
	...

08005940 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8005940:	b480      	push	{r7}
 8005942:	b085      	sub	sp, #20
 8005944:	af00      	add	r7, sp, #0
 8005946:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800594c:	2b00      	cmp	r3, #0
 800594e:	d108      	bne.n	8005962 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	2201      	movs	r2, #1
 8005954:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	2201      	movs	r2, #1
 800595c:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8005960:	e031      	b.n	80059c6 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8005962:	2308      	movs	r3, #8
 8005964:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8005966:	2308      	movs	r3, #8
 8005968:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	689b      	ldr	r3, [r3, #8]
 8005970:	0e5b      	lsrs	r3, r3, #25
 8005972:	b2db      	uxtb	r3, r3
 8005974:	f003 0307 	and.w	r3, r3, #7
 8005978:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	689b      	ldr	r3, [r3, #8]
 8005980:	0f5b      	lsrs	r3, r3, #29
 8005982:	b2db      	uxtb	r3, r3
 8005984:	f003 0307 	and.w	r3, r3, #7
 8005988:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800598a:	7bbb      	ldrb	r3, [r7, #14]
 800598c:	7b3a      	ldrb	r2, [r7, #12]
 800598e:	4911      	ldr	r1, [pc, #68]	@ (80059d4 <UARTEx_SetNbDataToProcess+0x94>)
 8005990:	5c8a      	ldrb	r2, [r1, r2]
 8005992:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8005996:	7b3a      	ldrb	r2, [r7, #12]
 8005998:	490f      	ldr	r1, [pc, #60]	@ (80059d8 <UARTEx_SetNbDataToProcess+0x98>)
 800599a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800599c:	fb93 f3f2 	sdiv	r3, r3, r2
 80059a0:	b29a      	uxth	r2, r3
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80059a8:	7bfb      	ldrb	r3, [r7, #15]
 80059aa:	7b7a      	ldrb	r2, [r7, #13]
 80059ac:	4909      	ldr	r1, [pc, #36]	@ (80059d4 <UARTEx_SetNbDataToProcess+0x94>)
 80059ae:	5c8a      	ldrb	r2, [r1, r2]
 80059b0:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80059b4:	7b7a      	ldrb	r2, [r7, #13]
 80059b6:	4908      	ldr	r1, [pc, #32]	@ (80059d8 <UARTEx_SetNbDataToProcess+0x98>)
 80059b8:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80059ba:	fb93 f3f2 	sdiv	r3, r3, r2
 80059be:	b29a      	uxth	r2, r3
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 80059c6:	bf00      	nop
 80059c8:	3714      	adds	r7, #20
 80059ca:	46bd      	mov	sp, r7
 80059cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059d0:	4770      	bx	lr
 80059d2:	bf00      	nop
 80059d4:	08007870 	.word	0x08007870
 80059d8:	08007878 	.word	0x08007878

080059dc <std>:
 80059dc:	2300      	movs	r3, #0
 80059de:	b510      	push	{r4, lr}
 80059e0:	4604      	mov	r4, r0
 80059e2:	e9c0 3300 	strd	r3, r3, [r0]
 80059e6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80059ea:	6083      	str	r3, [r0, #8]
 80059ec:	8181      	strh	r1, [r0, #12]
 80059ee:	6643      	str	r3, [r0, #100]	@ 0x64
 80059f0:	81c2      	strh	r2, [r0, #14]
 80059f2:	6183      	str	r3, [r0, #24]
 80059f4:	4619      	mov	r1, r3
 80059f6:	2208      	movs	r2, #8
 80059f8:	305c      	adds	r0, #92	@ 0x5c
 80059fa:	f000 f940 	bl	8005c7e <memset>
 80059fe:	4b0d      	ldr	r3, [pc, #52]	@ (8005a34 <std+0x58>)
 8005a00:	6263      	str	r3, [r4, #36]	@ 0x24
 8005a02:	4b0d      	ldr	r3, [pc, #52]	@ (8005a38 <std+0x5c>)
 8005a04:	62a3      	str	r3, [r4, #40]	@ 0x28
 8005a06:	4b0d      	ldr	r3, [pc, #52]	@ (8005a3c <std+0x60>)
 8005a08:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8005a0a:	4b0d      	ldr	r3, [pc, #52]	@ (8005a40 <std+0x64>)
 8005a0c:	6323      	str	r3, [r4, #48]	@ 0x30
 8005a0e:	4b0d      	ldr	r3, [pc, #52]	@ (8005a44 <std+0x68>)
 8005a10:	6224      	str	r4, [r4, #32]
 8005a12:	429c      	cmp	r4, r3
 8005a14:	d006      	beq.n	8005a24 <std+0x48>
 8005a16:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8005a1a:	4294      	cmp	r4, r2
 8005a1c:	d002      	beq.n	8005a24 <std+0x48>
 8005a1e:	33d0      	adds	r3, #208	@ 0xd0
 8005a20:	429c      	cmp	r4, r3
 8005a22:	d105      	bne.n	8005a30 <std+0x54>
 8005a24:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8005a28:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005a2c:	f000 ba32 	b.w	8005e94 <__retarget_lock_init_recursive>
 8005a30:	bd10      	pop	{r4, pc}
 8005a32:	bf00      	nop
 8005a34:	08005bf5 	.word	0x08005bf5
 8005a38:	08005c1b 	.word	0x08005c1b
 8005a3c:	08005c53 	.word	0x08005c53
 8005a40:	08005c77 	.word	0x08005c77
 8005a44:	200003f8 	.word	0x200003f8

08005a48 <stdio_exit_handler>:
 8005a48:	4a02      	ldr	r2, [pc, #8]	@ (8005a54 <stdio_exit_handler+0xc>)
 8005a4a:	4903      	ldr	r1, [pc, #12]	@ (8005a58 <stdio_exit_handler+0x10>)
 8005a4c:	4803      	ldr	r0, [pc, #12]	@ (8005a5c <stdio_exit_handler+0x14>)
 8005a4e:	f000 b869 	b.w	8005b24 <_fwalk_sglue>
 8005a52:	bf00      	nop
 8005a54:	20000020 	.word	0x20000020
 8005a58:	08006de1 	.word	0x08006de1
 8005a5c:	20000030 	.word	0x20000030

08005a60 <cleanup_stdio>:
 8005a60:	6841      	ldr	r1, [r0, #4]
 8005a62:	4b0c      	ldr	r3, [pc, #48]	@ (8005a94 <cleanup_stdio+0x34>)
 8005a64:	4299      	cmp	r1, r3
 8005a66:	b510      	push	{r4, lr}
 8005a68:	4604      	mov	r4, r0
 8005a6a:	d001      	beq.n	8005a70 <cleanup_stdio+0x10>
 8005a6c:	f001 f9b8 	bl	8006de0 <_fflush_r>
 8005a70:	68a1      	ldr	r1, [r4, #8]
 8005a72:	4b09      	ldr	r3, [pc, #36]	@ (8005a98 <cleanup_stdio+0x38>)
 8005a74:	4299      	cmp	r1, r3
 8005a76:	d002      	beq.n	8005a7e <cleanup_stdio+0x1e>
 8005a78:	4620      	mov	r0, r4
 8005a7a:	f001 f9b1 	bl	8006de0 <_fflush_r>
 8005a7e:	68e1      	ldr	r1, [r4, #12]
 8005a80:	4b06      	ldr	r3, [pc, #24]	@ (8005a9c <cleanup_stdio+0x3c>)
 8005a82:	4299      	cmp	r1, r3
 8005a84:	d004      	beq.n	8005a90 <cleanup_stdio+0x30>
 8005a86:	4620      	mov	r0, r4
 8005a88:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005a8c:	f001 b9a8 	b.w	8006de0 <_fflush_r>
 8005a90:	bd10      	pop	{r4, pc}
 8005a92:	bf00      	nop
 8005a94:	200003f8 	.word	0x200003f8
 8005a98:	20000460 	.word	0x20000460
 8005a9c:	200004c8 	.word	0x200004c8

08005aa0 <global_stdio_init.part.0>:
 8005aa0:	b510      	push	{r4, lr}
 8005aa2:	4b0b      	ldr	r3, [pc, #44]	@ (8005ad0 <global_stdio_init.part.0+0x30>)
 8005aa4:	4c0b      	ldr	r4, [pc, #44]	@ (8005ad4 <global_stdio_init.part.0+0x34>)
 8005aa6:	4a0c      	ldr	r2, [pc, #48]	@ (8005ad8 <global_stdio_init.part.0+0x38>)
 8005aa8:	601a      	str	r2, [r3, #0]
 8005aaa:	4620      	mov	r0, r4
 8005aac:	2200      	movs	r2, #0
 8005aae:	2104      	movs	r1, #4
 8005ab0:	f7ff ff94 	bl	80059dc <std>
 8005ab4:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8005ab8:	2201      	movs	r2, #1
 8005aba:	2109      	movs	r1, #9
 8005abc:	f7ff ff8e 	bl	80059dc <std>
 8005ac0:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8005ac4:	2202      	movs	r2, #2
 8005ac6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005aca:	2112      	movs	r1, #18
 8005acc:	f7ff bf86 	b.w	80059dc <std>
 8005ad0:	20000530 	.word	0x20000530
 8005ad4:	200003f8 	.word	0x200003f8
 8005ad8:	08005a49 	.word	0x08005a49

08005adc <__sfp_lock_acquire>:
 8005adc:	4801      	ldr	r0, [pc, #4]	@ (8005ae4 <__sfp_lock_acquire+0x8>)
 8005ade:	f000 b9da 	b.w	8005e96 <__retarget_lock_acquire_recursive>
 8005ae2:	bf00      	nop
 8005ae4:	20000539 	.word	0x20000539

08005ae8 <__sfp_lock_release>:
 8005ae8:	4801      	ldr	r0, [pc, #4]	@ (8005af0 <__sfp_lock_release+0x8>)
 8005aea:	f000 b9d5 	b.w	8005e98 <__retarget_lock_release_recursive>
 8005aee:	bf00      	nop
 8005af0:	20000539 	.word	0x20000539

08005af4 <__sinit>:
 8005af4:	b510      	push	{r4, lr}
 8005af6:	4604      	mov	r4, r0
 8005af8:	f7ff fff0 	bl	8005adc <__sfp_lock_acquire>
 8005afc:	6a23      	ldr	r3, [r4, #32]
 8005afe:	b11b      	cbz	r3, 8005b08 <__sinit+0x14>
 8005b00:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005b04:	f7ff bff0 	b.w	8005ae8 <__sfp_lock_release>
 8005b08:	4b04      	ldr	r3, [pc, #16]	@ (8005b1c <__sinit+0x28>)
 8005b0a:	6223      	str	r3, [r4, #32]
 8005b0c:	4b04      	ldr	r3, [pc, #16]	@ (8005b20 <__sinit+0x2c>)
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	2b00      	cmp	r3, #0
 8005b12:	d1f5      	bne.n	8005b00 <__sinit+0xc>
 8005b14:	f7ff ffc4 	bl	8005aa0 <global_stdio_init.part.0>
 8005b18:	e7f2      	b.n	8005b00 <__sinit+0xc>
 8005b1a:	bf00      	nop
 8005b1c:	08005a61 	.word	0x08005a61
 8005b20:	20000530 	.word	0x20000530

08005b24 <_fwalk_sglue>:
 8005b24:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005b28:	4607      	mov	r7, r0
 8005b2a:	4688      	mov	r8, r1
 8005b2c:	4614      	mov	r4, r2
 8005b2e:	2600      	movs	r6, #0
 8005b30:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005b34:	f1b9 0901 	subs.w	r9, r9, #1
 8005b38:	d505      	bpl.n	8005b46 <_fwalk_sglue+0x22>
 8005b3a:	6824      	ldr	r4, [r4, #0]
 8005b3c:	2c00      	cmp	r4, #0
 8005b3e:	d1f7      	bne.n	8005b30 <_fwalk_sglue+0xc>
 8005b40:	4630      	mov	r0, r6
 8005b42:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005b46:	89ab      	ldrh	r3, [r5, #12]
 8005b48:	2b01      	cmp	r3, #1
 8005b4a:	d907      	bls.n	8005b5c <_fwalk_sglue+0x38>
 8005b4c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005b50:	3301      	adds	r3, #1
 8005b52:	d003      	beq.n	8005b5c <_fwalk_sglue+0x38>
 8005b54:	4629      	mov	r1, r5
 8005b56:	4638      	mov	r0, r7
 8005b58:	47c0      	blx	r8
 8005b5a:	4306      	orrs	r6, r0
 8005b5c:	3568      	adds	r5, #104	@ 0x68
 8005b5e:	e7e9      	b.n	8005b34 <_fwalk_sglue+0x10>

08005b60 <siprintf>:
 8005b60:	b40e      	push	{r1, r2, r3}
 8005b62:	b500      	push	{lr}
 8005b64:	b09c      	sub	sp, #112	@ 0x70
 8005b66:	ab1d      	add	r3, sp, #116	@ 0x74
 8005b68:	9002      	str	r0, [sp, #8]
 8005b6a:	9006      	str	r0, [sp, #24]
 8005b6c:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8005b70:	4809      	ldr	r0, [pc, #36]	@ (8005b98 <siprintf+0x38>)
 8005b72:	9107      	str	r1, [sp, #28]
 8005b74:	9104      	str	r1, [sp, #16]
 8005b76:	4909      	ldr	r1, [pc, #36]	@ (8005b9c <siprintf+0x3c>)
 8005b78:	f853 2b04 	ldr.w	r2, [r3], #4
 8005b7c:	9105      	str	r1, [sp, #20]
 8005b7e:	6800      	ldr	r0, [r0, #0]
 8005b80:	9301      	str	r3, [sp, #4]
 8005b82:	a902      	add	r1, sp, #8
 8005b84:	f000 fb04 	bl	8006190 <_svfiprintf_r>
 8005b88:	9b02      	ldr	r3, [sp, #8]
 8005b8a:	2200      	movs	r2, #0
 8005b8c:	701a      	strb	r2, [r3, #0]
 8005b8e:	b01c      	add	sp, #112	@ 0x70
 8005b90:	f85d eb04 	ldr.w	lr, [sp], #4
 8005b94:	b003      	add	sp, #12
 8005b96:	4770      	bx	lr
 8005b98:	2000002c 	.word	0x2000002c
 8005b9c:	ffff0208 	.word	0xffff0208

08005ba0 <siscanf>:
 8005ba0:	b40e      	push	{r1, r2, r3}
 8005ba2:	b530      	push	{r4, r5, lr}
 8005ba4:	b09c      	sub	sp, #112	@ 0x70
 8005ba6:	ac1f      	add	r4, sp, #124	@ 0x7c
 8005ba8:	f44f 7201 	mov.w	r2, #516	@ 0x204
 8005bac:	f854 5b04 	ldr.w	r5, [r4], #4
 8005bb0:	f8ad 2014 	strh.w	r2, [sp, #20]
 8005bb4:	9002      	str	r0, [sp, #8]
 8005bb6:	9006      	str	r0, [sp, #24]
 8005bb8:	f7fa fb32 	bl	8000220 <strlen>
 8005bbc:	4b0b      	ldr	r3, [pc, #44]	@ (8005bec <siscanf+0x4c>)
 8005bbe:	9003      	str	r0, [sp, #12]
 8005bc0:	9007      	str	r0, [sp, #28]
 8005bc2:	930b      	str	r3, [sp, #44]	@ 0x2c
 8005bc4:	480a      	ldr	r0, [pc, #40]	@ (8005bf0 <siscanf+0x50>)
 8005bc6:	9401      	str	r4, [sp, #4]
 8005bc8:	2300      	movs	r3, #0
 8005bca:	930f      	str	r3, [sp, #60]	@ 0x3c
 8005bcc:	9314      	str	r3, [sp, #80]	@ 0x50
 8005bce:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8005bd2:	f8ad 3016 	strh.w	r3, [sp, #22]
 8005bd6:	462a      	mov	r2, r5
 8005bd8:	4623      	mov	r3, r4
 8005bda:	a902      	add	r1, sp, #8
 8005bdc:	6800      	ldr	r0, [r0, #0]
 8005bde:	f000 fc2b 	bl	8006438 <__ssvfiscanf_r>
 8005be2:	b01c      	add	sp, #112	@ 0x70
 8005be4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005be8:	b003      	add	sp, #12
 8005bea:	4770      	bx	lr
 8005bec:	08005c17 	.word	0x08005c17
 8005bf0:	2000002c 	.word	0x2000002c

08005bf4 <__sread>:
 8005bf4:	b510      	push	{r4, lr}
 8005bf6:	460c      	mov	r4, r1
 8005bf8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005bfc:	f000 f8fc 	bl	8005df8 <_read_r>
 8005c00:	2800      	cmp	r0, #0
 8005c02:	bfab      	itete	ge
 8005c04:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8005c06:	89a3      	ldrhlt	r3, [r4, #12]
 8005c08:	181b      	addge	r3, r3, r0
 8005c0a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8005c0e:	bfac      	ite	ge
 8005c10:	6563      	strge	r3, [r4, #84]	@ 0x54
 8005c12:	81a3      	strhlt	r3, [r4, #12]
 8005c14:	bd10      	pop	{r4, pc}

08005c16 <__seofread>:
 8005c16:	2000      	movs	r0, #0
 8005c18:	4770      	bx	lr

08005c1a <__swrite>:
 8005c1a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005c1e:	461f      	mov	r7, r3
 8005c20:	898b      	ldrh	r3, [r1, #12]
 8005c22:	05db      	lsls	r3, r3, #23
 8005c24:	4605      	mov	r5, r0
 8005c26:	460c      	mov	r4, r1
 8005c28:	4616      	mov	r6, r2
 8005c2a:	d505      	bpl.n	8005c38 <__swrite+0x1e>
 8005c2c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005c30:	2302      	movs	r3, #2
 8005c32:	2200      	movs	r2, #0
 8005c34:	f000 f8ce 	bl	8005dd4 <_lseek_r>
 8005c38:	89a3      	ldrh	r3, [r4, #12]
 8005c3a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005c3e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005c42:	81a3      	strh	r3, [r4, #12]
 8005c44:	4632      	mov	r2, r6
 8005c46:	463b      	mov	r3, r7
 8005c48:	4628      	mov	r0, r5
 8005c4a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005c4e:	f000 b8e5 	b.w	8005e1c <_write_r>

08005c52 <__sseek>:
 8005c52:	b510      	push	{r4, lr}
 8005c54:	460c      	mov	r4, r1
 8005c56:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005c5a:	f000 f8bb 	bl	8005dd4 <_lseek_r>
 8005c5e:	1c43      	adds	r3, r0, #1
 8005c60:	89a3      	ldrh	r3, [r4, #12]
 8005c62:	bf15      	itete	ne
 8005c64:	6560      	strne	r0, [r4, #84]	@ 0x54
 8005c66:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8005c6a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8005c6e:	81a3      	strheq	r3, [r4, #12]
 8005c70:	bf18      	it	ne
 8005c72:	81a3      	strhne	r3, [r4, #12]
 8005c74:	bd10      	pop	{r4, pc}

08005c76 <__sclose>:
 8005c76:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005c7a:	f000 b89b 	b.w	8005db4 <_close_r>

08005c7e <memset>:
 8005c7e:	4402      	add	r2, r0
 8005c80:	4603      	mov	r3, r0
 8005c82:	4293      	cmp	r3, r2
 8005c84:	d100      	bne.n	8005c88 <memset+0xa>
 8005c86:	4770      	bx	lr
 8005c88:	f803 1b01 	strb.w	r1, [r3], #1
 8005c8c:	e7f9      	b.n	8005c82 <memset+0x4>

08005c8e <strchr>:
 8005c8e:	b2c9      	uxtb	r1, r1
 8005c90:	4603      	mov	r3, r0
 8005c92:	4618      	mov	r0, r3
 8005c94:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005c98:	b112      	cbz	r2, 8005ca0 <strchr+0x12>
 8005c9a:	428a      	cmp	r2, r1
 8005c9c:	d1f9      	bne.n	8005c92 <strchr+0x4>
 8005c9e:	4770      	bx	lr
 8005ca0:	2900      	cmp	r1, #0
 8005ca2:	bf18      	it	ne
 8005ca4:	2000      	movne	r0, #0
 8005ca6:	4770      	bx	lr

08005ca8 <strncpy>:
 8005ca8:	b510      	push	{r4, lr}
 8005caa:	3901      	subs	r1, #1
 8005cac:	4603      	mov	r3, r0
 8005cae:	b132      	cbz	r2, 8005cbe <strncpy+0x16>
 8005cb0:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8005cb4:	f803 4b01 	strb.w	r4, [r3], #1
 8005cb8:	3a01      	subs	r2, #1
 8005cba:	2c00      	cmp	r4, #0
 8005cbc:	d1f7      	bne.n	8005cae <strncpy+0x6>
 8005cbe:	441a      	add	r2, r3
 8005cc0:	2100      	movs	r1, #0
 8005cc2:	4293      	cmp	r3, r2
 8005cc4:	d100      	bne.n	8005cc8 <strncpy+0x20>
 8005cc6:	bd10      	pop	{r4, pc}
 8005cc8:	f803 1b01 	strb.w	r1, [r3], #1
 8005ccc:	e7f9      	b.n	8005cc2 <strncpy+0x1a>
	...

08005cd0 <strtok>:
 8005cd0:	4b16      	ldr	r3, [pc, #88]	@ (8005d2c <strtok+0x5c>)
 8005cd2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005cd6:	681f      	ldr	r7, [r3, #0]
 8005cd8:	6c7c      	ldr	r4, [r7, #68]	@ 0x44
 8005cda:	4605      	mov	r5, r0
 8005cdc:	460e      	mov	r6, r1
 8005cde:	b9ec      	cbnz	r4, 8005d1c <strtok+0x4c>
 8005ce0:	2050      	movs	r0, #80	@ 0x50
 8005ce2:	f000 f943 	bl	8005f6c <malloc>
 8005ce6:	4602      	mov	r2, r0
 8005ce8:	6478      	str	r0, [r7, #68]	@ 0x44
 8005cea:	b920      	cbnz	r0, 8005cf6 <strtok+0x26>
 8005cec:	4b10      	ldr	r3, [pc, #64]	@ (8005d30 <strtok+0x60>)
 8005cee:	4811      	ldr	r0, [pc, #68]	@ (8005d34 <strtok+0x64>)
 8005cf0:	215b      	movs	r1, #91	@ 0x5b
 8005cf2:	f000 f8d3 	bl	8005e9c <__assert_func>
 8005cf6:	e9c0 4400 	strd	r4, r4, [r0]
 8005cfa:	e9c0 4402 	strd	r4, r4, [r0, #8]
 8005cfe:	e9c0 4404 	strd	r4, r4, [r0, #16]
 8005d02:	e9c0 440a 	strd	r4, r4, [r0, #40]	@ 0x28
 8005d06:	e9c0 440c 	strd	r4, r4, [r0, #48]	@ 0x30
 8005d0a:	e9c0 440e 	strd	r4, r4, [r0, #56]	@ 0x38
 8005d0e:	e9c0 4410 	strd	r4, r4, [r0, #64]	@ 0x40
 8005d12:	e9c0 4412 	strd	r4, r4, [r0, #72]	@ 0x48
 8005d16:	6184      	str	r4, [r0, #24]
 8005d18:	7704      	strb	r4, [r0, #28]
 8005d1a:	6244      	str	r4, [r0, #36]	@ 0x24
 8005d1c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005d1e:	4631      	mov	r1, r6
 8005d20:	4628      	mov	r0, r5
 8005d22:	2301      	movs	r3, #1
 8005d24:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005d28:	f000 b806 	b.w	8005d38 <__strtok_r>
 8005d2c:	2000002c 	.word	0x2000002c
 8005d30:	08007880 	.word	0x08007880
 8005d34:	08007897 	.word	0x08007897

08005d38 <__strtok_r>:
 8005d38:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005d3a:	4604      	mov	r4, r0
 8005d3c:	b908      	cbnz	r0, 8005d42 <__strtok_r+0xa>
 8005d3e:	6814      	ldr	r4, [r2, #0]
 8005d40:	b144      	cbz	r4, 8005d54 <__strtok_r+0x1c>
 8005d42:	4620      	mov	r0, r4
 8005d44:	f814 5b01 	ldrb.w	r5, [r4], #1
 8005d48:	460f      	mov	r7, r1
 8005d4a:	f817 6b01 	ldrb.w	r6, [r7], #1
 8005d4e:	b91e      	cbnz	r6, 8005d58 <__strtok_r+0x20>
 8005d50:	b965      	cbnz	r5, 8005d6c <__strtok_r+0x34>
 8005d52:	6015      	str	r5, [r2, #0]
 8005d54:	2000      	movs	r0, #0
 8005d56:	e005      	b.n	8005d64 <__strtok_r+0x2c>
 8005d58:	42b5      	cmp	r5, r6
 8005d5a:	d1f6      	bne.n	8005d4a <__strtok_r+0x12>
 8005d5c:	2b00      	cmp	r3, #0
 8005d5e:	d1f0      	bne.n	8005d42 <__strtok_r+0xa>
 8005d60:	6014      	str	r4, [r2, #0]
 8005d62:	7003      	strb	r3, [r0, #0]
 8005d64:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005d66:	461c      	mov	r4, r3
 8005d68:	e00c      	b.n	8005d84 <__strtok_r+0x4c>
 8005d6a:	b915      	cbnz	r5, 8005d72 <__strtok_r+0x3a>
 8005d6c:	f814 3b01 	ldrb.w	r3, [r4], #1
 8005d70:	460e      	mov	r6, r1
 8005d72:	f816 5b01 	ldrb.w	r5, [r6], #1
 8005d76:	42ab      	cmp	r3, r5
 8005d78:	d1f7      	bne.n	8005d6a <__strtok_r+0x32>
 8005d7a:	2b00      	cmp	r3, #0
 8005d7c:	d0f3      	beq.n	8005d66 <__strtok_r+0x2e>
 8005d7e:	2300      	movs	r3, #0
 8005d80:	f804 3c01 	strb.w	r3, [r4, #-1]
 8005d84:	6014      	str	r4, [r2, #0]
 8005d86:	e7ed      	b.n	8005d64 <__strtok_r+0x2c>

08005d88 <strstr>:
 8005d88:	780a      	ldrb	r2, [r1, #0]
 8005d8a:	b570      	push	{r4, r5, r6, lr}
 8005d8c:	b96a      	cbnz	r2, 8005daa <strstr+0x22>
 8005d8e:	bd70      	pop	{r4, r5, r6, pc}
 8005d90:	429a      	cmp	r2, r3
 8005d92:	d109      	bne.n	8005da8 <strstr+0x20>
 8005d94:	460c      	mov	r4, r1
 8005d96:	4605      	mov	r5, r0
 8005d98:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 8005d9c:	2b00      	cmp	r3, #0
 8005d9e:	d0f6      	beq.n	8005d8e <strstr+0x6>
 8005da0:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 8005da4:	429e      	cmp	r6, r3
 8005da6:	d0f7      	beq.n	8005d98 <strstr+0x10>
 8005da8:	3001      	adds	r0, #1
 8005daa:	7803      	ldrb	r3, [r0, #0]
 8005dac:	2b00      	cmp	r3, #0
 8005dae:	d1ef      	bne.n	8005d90 <strstr+0x8>
 8005db0:	4618      	mov	r0, r3
 8005db2:	e7ec      	b.n	8005d8e <strstr+0x6>

08005db4 <_close_r>:
 8005db4:	b538      	push	{r3, r4, r5, lr}
 8005db6:	4d06      	ldr	r5, [pc, #24]	@ (8005dd0 <_close_r+0x1c>)
 8005db8:	2300      	movs	r3, #0
 8005dba:	4604      	mov	r4, r0
 8005dbc:	4608      	mov	r0, r1
 8005dbe:	602b      	str	r3, [r5, #0]
 8005dc0:	f7fb f9cb 	bl	800115a <_close>
 8005dc4:	1c43      	adds	r3, r0, #1
 8005dc6:	d102      	bne.n	8005dce <_close_r+0x1a>
 8005dc8:	682b      	ldr	r3, [r5, #0]
 8005dca:	b103      	cbz	r3, 8005dce <_close_r+0x1a>
 8005dcc:	6023      	str	r3, [r4, #0]
 8005dce:	bd38      	pop	{r3, r4, r5, pc}
 8005dd0:	20000534 	.word	0x20000534

08005dd4 <_lseek_r>:
 8005dd4:	b538      	push	{r3, r4, r5, lr}
 8005dd6:	4d07      	ldr	r5, [pc, #28]	@ (8005df4 <_lseek_r+0x20>)
 8005dd8:	4604      	mov	r4, r0
 8005dda:	4608      	mov	r0, r1
 8005ddc:	4611      	mov	r1, r2
 8005dde:	2200      	movs	r2, #0
 8005de0:	602a      	str	r2, [r5, #0]
 8005de2:	461a      	mov	r2, r3
 8005de4:	f7fb f9e0 	bl	80011a8 <_lseek>
 8005de8:	1c43      	adds	r3, r0, #1
 8005dea:	d102      	bne.n	8005df2 <_lseek_r+0x1e>
 8005dec:	682b      	ldr	r3, [r5, #0]
 8005dee:	b103      	cbz	r3, 8005df2 <_lseek_r+0x1e>
 8005df0:	6023      	str	r3, [r4, #0]
 8005df2:	bd38      	pop	{r3, r4, r5, pc}
 8005df4:	20000534 	.word	0x20000534

08005df8 <_read_r>:
 8005df8:	b538      	push	{r3, r4, r5, lr}
 8005dfa:	4d07      	ldr	r5, [pc, #28]	@ (8005e18 <_read_r+0x20>)
 8005dfc:	4604      	mov	r4, r0
 8005dfe:	4608      	mov	r0, r1
 8005e00:	4611      	mov	r1, r2
 8005e02:	2200      	movs	r2, #0
 8005e04:	602a      	str	r2, [r5, #0]
 8005e06:	461a      	mov	r2, r3
 8005e08:	f7fb f96e 	bl	80010e8 <_read>
 8005e0c:	1c43      	adds	r3, r0, #1
 8005e0e:	d102      	bne.n	8005e16 <_read_r+0x1e>
 8005e10:	682b      	ldr	r3, [r5, #0]
 8005e12:	b103      	cbz	r3, 8005e16 <_read_r+0x1e>
 8005e14:	6023      	str	r3, [r4, #0]
 8005e16:	bd38      	pop	{r3, r4, r5, pc}
 8005e18:	20000534 	.word	0x20000534

08005e1c <_write_r>:
 8005e1c:	b538      	push	{r3, r4, r5, lr}
 8005e1e:	4d07      	ldr	r5, [pc, #28]	@ (8005e3c <_write_r+0x20>)
 8005e20:	4604      	mov	r4, r0
 8005e22:	4608      	mov	r0, r1
 8005e24:	4611      	mov	r1, r2
 8005e26:	2200      	movs	r2, #0
 8005e28:	602a      	str	r2, [r5, #0]
 8005e2a:	461a      	mov	r2, r3
 8005e2c:	f7fb f979 	bl	8001122 <_write>
 8005e30:	1c43      	adds	r3, r0, #1
 8005e32:	d102      	bne.n	8005e3a <_write_r+0x1e>
 8005e34:	682b      	ldr	r3, [r5, #0]
 8005e36:	b103      	cbz	r3, 8005e3a <_write_r+0x1e>
 8005e38:	6023      	str	r3, [r4, #0]
 8005e3a:	bd38      	pop	{r3, r4, r5, pc}
 8005e3c:	20000534 	.word	0x20000534

08005e40 <__errno>:
 8005e40:	4b01      	ldr	r3, [pc, #4]	@ (8005e48 <__errno+0x8>)
 8005e42:	6818      	ldr	r0, [r3, #0]
 8005e44:	4770      	bx	lr
 8005e46:	bf00      	nop
 8005e48:	2000002c 	.word	0x2000002c

08005e4c <__libc_init_array>:
 8005e4c:	b570      	push	{r4, r5, r6, lr}
 8005e4e:	4d0d      	ldr	r5, [pc, #52]	@ (8005e84 <__libc_init_array+0x38>)
 8005e50:	4c0d      	ldr	r4, [pc, #52]	@ (8005e88 <__libc_init_array+0x3c>)
 8005e52:	1b64      	subs	r4, r4, r5
 8005e54:	10a4      	asrs	r4, r4, #2
 8005e56:	2600      	movs	r6, #0
 8005e58:	42a6      	cmp	r6, r4
 8005e5a:	d109      	bne.n	8005e70 <__libc_init_array+0x24>
 8005e5c:	4d0b      	ldr	r5, [pc, #44]	@ (8005e8c <__libc_init_array+0x40>)
 8005e5e:	4c0c      	ldr	r4, [pc, #48]	@ (8005e90 <__libc_init_array+0x44>)
 8005e60:	f001 fc6c 	bl	800773c <_init>
 8005e64:	1b64      	subs	r4, r4, r5
 8005e66:	10a4      	asrs	r4, r4, #2
 8005e68:	2600      	movs	r6, #0
 8005e6a:	42a6      	cmp	r6, r4
 8005e6c:	d105      	bne.n	8005e7a <__libc_init_array+0x2e>
 8005e6e:	bd70      	pop	{r4, r5, r6, pc}
 8005e70:	f855 3b04 	ldr.w	r3, [r5], #4
 8005e74:	4798      	blx	r3
 8005e76:	3601      	adds	r6, #1
 8005e78:	e7ee      	b.n	8005e58 <__libc_init_array+0xc>
 8005e7a:	f855 3b04 	ldr.w	r3, [r5], #4
 8005e7e:	4798      	blx	r3
 8005e80:	3601      	adds	r6, #1
 8005e82:	e7f2      	b.n	8005e6a <__libc_init_array+0x1e>
 8005e84:	08007a84 	.word	0x08007a84
 8005e88:	08007a84 	.word	0x08007a84
 8005e8c:	08007a84 	.word	0x08007a84
 8005e90:	08007a88 	.word	0x08007a88

08005e94 <__retarget_lock_init_recursive>:
 8005e94:	4770      	bx	lr

08005e96 <__retarget_lock_acquire_recursive>:
 8005e96:	4770      	bx	lr

08005e98 <__retarget_lock_release_recursive>:
 8005e98:	4770      	bx	lr
	...

08005e9c <__assert_func>:
 8005e9c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8005e9e:	4614      	mov	r4, r2
 8005ea0:	461a      	mov	r2, r3
 8005ea2:	4b09      	ldr	r3, [pc, #36]	@ (8005ec8 <__assert_func+0x2c>)
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	4605      	mov	r5, r0
 8005ea8:	68d8      	ldr	r0, [r3, #12]
 8005eaa:	b954      	cbnz	r4, 8005ec2 <__assert_func+0x26>
 8005eac:	4b07      	ldr	r3, [pc, #28]	@ (8005ecc <__assert_func+0x30>)
 8005eae:	461c      	mov	r4, r3
 8005eb0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8005eb4:	9100      	str	r1, [sp, #0]
 8005eb6:	462b      	mov	r3, r5
 8005eb8:	4905      	ldr	r1, [pc, #20]	@ (8005ed0 <__assert_func+0x34>)
 8005eba:	f000 ffb9 	bl	8006e30 <fiprintf>
 8005ebe:	f001 f875 	bl	8006fac <abort>
 8005ec2:	4b04      	ldr	r3, [pc, #16]	@ (8005ed4 <__assert_func+0x38>)
 8005ec4:	e7f4      	b.n	8005eb0 <__assert_func+0x14>
 8005ec6:	bf00      	nop
 8005ec8:	2000002c 	.word	0x2000002c
 8005ecc:	0800792c 	.word	0x0800792c
 8005ed0:	080078fe 	.word	0x080078fe
 8005ed4:	080078f1 	.word	0x080078f1

08005ed8 <_free_r>:
 8005ed8:	b538      	push	{r3, r4, r5, lr}
 8005eda:	4605      	mov	r5, r0
 8005edc:	2900      	cmp	r1, #0
 8005ede:	d041      	beq.n	8005f64 <_free_r+0x8c>
 8005ee0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005ee4:	1f0c      	subs	r4, r1, #4
 8005ee6:	2b00      	cmp	r3, #0
 8005ee8:	bfb8      	it	lt
 8005eea:	18e4      	addlt	r4, r4, r3
 8005eec:	f000 f8e8 	bl	80060c0 <__malloc_lock>
 8005ef0:	4a1d      	ldr	r2, [pc, #116]	@ (8005f68 <_free_r+0x90>)
 8005ef2:	6813      	ldr	r3, [r2, #0]
 8005ef4:	b933      	cbnz	r3, 8005f04 <_free_r+0x2c>
 8005ef6:	6063      	str	r3, [r4, #4]
 8005ef8:	6014      	str	r4, [r2, #0]
 8005efa:	4628      	mov	r0, r5
 8005efc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005f00:	f000 b8e4 	b.w	80060cc <__malloc_unlock>
 8005f04:	42a3      	cmp	r3, r4
 8005f06:	d908      	bls.n	8005f1a <_free_r+0x42>
 8005f08:	6820      	ldr	r0, [r4, #0]
 8005f0a:	1821      	adds	r1, r4, r0
 8005f0c:	428b      	cmp	r3, r1
 8005f0e:	bf01      	itttt	eq
 8005f10:	6819      	ldreq	r1, [r3, #0]
 8005f12:	685b      	ldreq	r3, [r3, #4]
 8005f14:	1809      	addeq	r1, r1, r0
 8005f16:	6021      	streq	r1, [r4, #0]
 8005f18:	e7ed      	b.n	8005ef6 <_free_r+0x1e>
 8005f1a:	461a      	mov	r2, r3
 8005f1c:	685b      	ldr	r3, [r3, #4]
 8005f1e:	b10b      	cbz	r3, 8005f24 <_free_r+0x4c>
 8005f20:	42a3      	cmp	r3, r4
 8005f22:	d9fa      	bls.n	8005f1a <_free_r+0x42>
 8005f24:	6811      	ldr	r1, [r2, #0]
 8005f26:	1850      	adds	r0, r2, r1
 8005f28:	42a0      	cmp	r0, r4
 8005f2a:	d10b      	bne.n	8005f44 <_free_r+0x6c>
 8005f2c:	6820      	ldr	r0, [r4, #0]
 8005f2e:	4401      	add	r1, r0
 8005f30:	1850      	adds	r0, r2, r1
 8005f32:	4283      	cmp	r3, r0
 8005f34:	6011      	str	r1, [r2, #0]
 8005f36:	d1e0      	bne.n	8005efa <_free_r+0x22>
 8005f38:	6818      	ldr	r0, [r3, #0]
 8005f3a:	685b      	ldr	r3, [r3, #4]
 8005f3c:	6053      	str	r3, [r2, #4]
 8005f3e:	4408      	add	r0, r1
 8005f40:	6010      	str	r0, [r2, #0]
 8005f42:	e7da      	b.n	8005efa <_free_r+0x22>
 8005f44:	d902      	bls.n	8005f4c <_free_r+0x74>
 8005f46:	230c      	movs	r3, #12
 8005f48:	602b      	str	r3, [r5, #0]
 8005f4a:	e7d6      	b.n	8005efa <_free_r+0x22>
 8005f4c:	6820      	ldr	r0, [r4, #0]
 8005f4e:	1821      	adds	r1, r4, r0
 8005f50:	428b      	cmp	r3, r1
 8005f52:	bf04      	itt	eq
 8005f54:	6819      	ldreq	r1, [r3, #0]
 8005f56:	685b      	ldreq	r3, [r3, #4]
 8005f58:	6063      	str	r3, [r4, #4]
 8005f5a:	bf04      	itt	eq
 8005f5c:	1809      	addeq	r1, r1, r0
 8005f5e:	6021      	streq	r1, [r4, #0]
 8005f60:	6054      	str	r4, [r2, #4]
 8005f62:	e7ca      	b.n	8005efa <_free_r+0x22>
 8005f64:	bd38      	pop	{r3, r4, r5, pc}
 8005f66:	bf00      	nop
 8005f68:	20000540 	.word	0x20000540

08005f6c <malloc>:
 8005f6c:	4b02      	ldr	r3, [pc, #8]	@ (8005f78 <malloc+0xc>)
 8005f6e:	4601      	mov	r1, r0
 8005f70:	6818      	ldr	r0, [r3, #0]
 8005f72:	f000 b825 	b.w	8005fc0 <_malloc_r>
 8005f76:	bf00      	nop
 8005f78:	2000002c 	.word	0x2000002c

08005f7c <sbrk_aligned>:
 8005f7c:	b570      	push	{r4, r5, r6, lr}
 8005f7e:	4e0f      	ldr	r6, [pc, #60]	@ (8005fbc <sbrk_aligned+0x40>)
 8005f80:	460c      	mov	r4, r1
 8005f82:	6831      	ldr	r1, [r6, #0]
 8005f84:	4605      	mov	r5, r0
 8005f86:	b911      	cbnz	r1, 8005f8e <sbrk_aligned+0x12>
 8005f88:	f000 fff2 	bl	8006f70 <_sbrk_r>
 8005f8c:	6030      	str	r0, [r6, #0]
 8005f8e:	4621      	mov	r1, r4
 8005f90:	4628      	mov	r0, r5
 8005f92:	f000 ffed 	bl	8006f70 <_sbrk_r>
 8005f96:	1c43      	adds	r3, r0, #1
 8005f98:	d103      	bne.n	8005fa2 <sbrk_aligned+0x26>
 8005f9a:	f04f 34ff 	mov.w	r4, #4294967295
 8005f9e:	4620      	mov	r0, r4
 8005fa0:	bd70      	pop	{r4, r5, r6, pc}
 8005fa2:	1cc4      	adds	r4, r0, #3
 8005fa4:	f024 0403 	bic.w	r4, r4, #3
 8005fa8:	42a0      	cmp	r0, r4
 8005faa:	d0f8      	beq.n	8005f9e <sbrk_aligned+0x22>
 8005fac:	1a21      	subs	r1, r4, r0
 8005fae:	4628      	mov	r0, r5
 8005fb0:	f000 ffde 	bl	8006f70 <_sbrk_r>
 8005fb4:	3001      	adds	r0, #1
 8005fb6:	d1f2      	bne.n	8005f9e <sbrk_aligned+0x22>
 8005fb8:	e7ef      	b.n	8005f9a <sbrk_aligned+0x1e>
 8005fba:	bf00      	nop
 8005fbc:	2000053c 	.word	0x2000053c

08005fc0 <_malloc_r>:
 8005fc0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005fc4:	1ccd      	adds	r5, r1, #3
 8005fc6:	f025 0503 	bic.w	r5, r5, #3
 8005fca:	3508      	adds	r5, #8
 8005fcc:	2d0c      	cmp	r5, #12
 8005fce:	bf38      	it	cc
 8005fd0:	250c      	movcc	r5, #12
 8005fd2:	2d00      	cmp	r5, #0
 8005fd4:	4606      	mov	r6, r0
 8005fd6:	db01      	blt.n	8005fdc <_malloc_r+0x1c>
 8005fd8:	42a9      	cmp	r1, r5
 8005fda:	d904      	bls.n	8005fe6 <_malloc_r+0x26>
 8005fdc:	230c      	movs	r3, #12
 8005fde:	6033      	str	r3, [r6, #0]
 8005fe0:	2000      	movs	r0, #0
 8005fe2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005fe6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80060bc <_malloc_r+0xfc>
 8005fea:	f000 f869 	bl	80060c0 <__malloc_lock>
 8005fee:	f8d8 3000 	ldr.w	r3, [r8]
 8005ff2:	461c      	mov	r4, r3
 8005ff4:	bb44      	cbnz	r4, 8006048 <_malloc_r+0x88>
 8005ff6:	4629      	mov	r1, r5
 8005ff8:	4630      	mov	r0, r6
 8005ffa:	f7ff ffbf 	bl	8005f7c <sbrk_aligned>
 8005ffe:	1c43      	adds	r3, r0, #1
 8006000:	4604      	mov	r4, r0
 8006002:	d158      	bne.n	80060b6 <_malloc_r+0xf6>
 8006004:	f8d8 4000 	ldr.w	r4, [r8]
 8006008:	4627      	mov	r7, r4
 800600a:	2f00      	cmp	r7, #0
 800600c:	d143      	bne.n	8006096 <_malloc_r+0xd6>
 800600e:	2c00      	cmp	r4, #0
 8006010:	d04b      	beq.n	80060aa <_malloc_r+0xea>
 8006012:	6823      	ldr	r3, [r4, #0]
 8006014:	4639      	mov	r1, r7
 8006016:	4630      	mov	r0, r6
 8006018:	eb04 0903 	add.w	r9, r4, r3
 800601c:	f000 ffa8 	bl	8006f70 <_sbrk_r>
 8006020:	4581      	cmp	r9, r0
 8006022:	d142      	bne.n	80060aa <_malloc_r+0xea>
 8006024:	6821      	ldr	r1, [r4, #0]
 8006026:	1a6d      	subs	r5, r5, r1
 8006028:	4629      	mov	r1, r5
 800602a:	4630      	mov	r0, r6
 800602c:	f7ff ffa6 	bl	8005f7c <sbrk_aligned>
 8006030:	3001      	adds	r0, #1
 8006032:	d03a      	beq.n	80060aa <_malloc_r+0xea>
 8006034:	6823      	ldr	r3, [r4, #0]
 8006036:	442b      	add	r3, r5
 8006038:	6023      	str	r3, [r4, #0]
 800603a:	f8d8 3000 	ldr.w	r3, [r8]
 800603e:	685a      	ldr	r2, [r3, #4]
 8006040:	bb62      	cbnz	r2, 800609c <_malloc_r+0xdc>
 8006042:	f8c8 7000 	str.w	r7, [r8]
 8006046:	e00f      	b.n	8006068 <_malloc_r+0xa8>
 8006048:	6822      	ldr	r2, [r4, #0]
 800604a:	1b52      	subs	r2, r2, r5
 800604c:	d420      	bmi.n	8006090 <_malloc_r+0xd0>
 800604e:	2a0b      	cmp	r2, #11
 8006050:	d917      	bls.n	8006082 <_malloc_r+0xc2>
 8006052:	1961      	adds	r1, r4, r5
 8006054:	42a3      	cmp	r3, r4
 8006056:	6025      	str	r5, [r4, #0]
 8006058:	bf18      	it	ne
 800605a:	6059      	strne	r1, [r3, #4]
 800605c:	6863      	ldr	r3, [r4, #4]
 800605e:	bf08      	it	eq
 8006060:	f8c8 1000 	streq.w	r1, [r8]
 8006064:	5162      	str	r2, [r4, r5]
 8006066:	604b      	str	r3, [r1, #4]
 8006068:	4630      	mov	r0, r6
 800606a:	f000 f82f 	bl	80060cc <__malloc_unlock>
 800606e:	f104 000b 	add.w	r0, r4, #11
 8006072:	1d23      	adds	r3, r4, #4
 8006074:	f020 0007 	bic.w	r0, r0, #7
 8006078:	1ac2      	subs	r2, r0, r3
 800607a:	bf1c      	itt	ne
 800607c:	1a1b      	subne	r3, r3, r0
 800607e:	50a3      	strne	r3, [r4, r2]
 8006080:	e7af      	b.n	8005fe2 <_malloc_r+0x22>
 8006082:	6862      	ldr	r2, [r4, #4]
 8006084:	42a3      	cmp	r3, r4
 8006086:	bf0c      	ite	eq
 8006088:	f8c8 2000 	streq.w	r2, [r8]
 800608c:	605a      	strne	r2, [r3, #4]
 800608e:	e7eb      	b.n	8006068 <_malloc_r+0xa8>
 8006090:	4623      	mov	r3, r4
 8006092:	6864      	ldr	r4, [r4, #4]
 8006094:	e7ae      	b.n	8005ff4 <_malloc_r+0x34>
 8006096:	463c      	mov	r4, r7
 8006098:	687f      	ldr	r7, [r7, #4]
 800609a:	e7b6      	b.n	800600a <_malloc_r+0x4a>
 800609c:	461a      	mov	r2, r3
 800609e:	685b      	ldr	r3, [r3, #4]
 80060a0:	42a3      	cmp	r3, r4
 80060a2:	d1fb      	bne.n	800609c <_malloc_r+0xdc>
 80060a4:	2300      	movs	r3, #0
 80060a6:	6053      	str	r3, [r2, #4]
 80060a8:	e7de      	b.n	8006068 <_malloc_r+0xa8>
 80060aa:	230c      	movs	r3, #12
 80060ac:	6033      	str	r3, [r6, #0]
 80060ae:	4630      	mov	r0, r6
 80060b0:	f000 f80c 	bl	80060cc <__malloc_unlock>
 80060b4:	e794      	b.n	8005fe0 <_malloc_r+0x20>
 80060b6:	6005      	str	r5, [r0, #0]
 80060b8:	e7d6      	b.n	8006068 <_malloc_r+0xa8>
 80060ba:	bf00      	nop
 80060bc:	20000540 	.word	0x20000540

080060c0 <__malloc_lock>:
 80060c0:	4801      	ldr	r0, [pc, #4]	@ (80060c8 <__malloc_lock+0x8>)
 80060c2:	f7ff bee8 	b.w	8005e96 <__retarget_lock_acquire_recursive>
 80060c6:	bf00      	nop
 80060c8:	20000538 	.word	0x20000538

080060cc <__malloc_unlock>:
 80060cc:	4801      	ldr	r0, [pc, #4]	@ (80060d4 <__malloc_unlock+0x8>)
 80060ce:	f7ff bee3 	b.w	8005e98 <__retarget_lock_release_recursive>
 80060d2:	bf00      	nop
 80060d4:	20000538 	.word	0x20000538

080060d8 <__ssputs_r>:
 80060d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80060dc:	688e      	ldr	r6, [r1, #8]
 80060de:	461f      	mov	r7, r3
 80060e0:	42be      	cmp	r6, r7
 80060e2:	680b      	ldr	r3, [r1, #0]
 80060e4:	4682      	mov	sl, r0
 80060e6:	460c      	mov	r4, r1
 80060e8:	4690      	mov	r8, r2
 80060ea:	d82d      	bhi.n	8006148 <__ssputs_r+0x70>
 80060ec:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80060f0:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80060f4:	d026      	beq.n	8006144 <__ssputs_r+0x6c>
 80060f6:	6965      	ldr	r5, [r4, #20]
 80060f8:	6909      	ldr	r1, [r1, #16]
 80060fa:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80060fe:	eba3 0901 	sub.w	r9, r3, r1
 8006102:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006106:	1c7b      	adds	r3, r7, #1
 8006108:	444b      	add	r3, r9
 800610a:	106d      	asrs	r5, r5, #1
 800610c:	429d      	cmp	r5, r3
 800610e:	bf38      	it	cc
 8006110:	461d      	movcc	r5, r3
 8006112:	0553      	lsls	r3, r2, #21
 8006114:	d527      	bpl.n	8006166 <__ssputs_r+0x8e>
 8006116:	4629      	mov	r1, r5
 8006118:	f7ff ff52 	bl	8005fc0 <_malloc_r>
 800611c:	4606      	mov	r6, r0
 800611e:	b360      	cbz	r0, 800617a <__ssputs_r+0xa2>
 8006120:	6921      	ldr	r1, [r4, #16]
 8006122:	464a      	mov	r2, r9
 8006124:	f000 ff34 	bl	8006f90 <memcpy>
 8006128:	89a3      	ldrh	r3, [r4, #12]
 800612a:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800612e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006132:	81a3      	strh	r3, [r4, #12]
 8006134:	6126      	str	r6, [r4, #16]
 8006136:	6165      	str	r5, [r4, #20]
 8006138:	444e      	add	r6, r9
 800613a:	eba5 0509 	sub.w	r5, r5, r9
 800613e:	6026      	str	r6, [r4, #0]
 8006140:	60a5      	str	r5, [r4, #8]
 8006142:	463e      	mov	r6, r7
 8006144:	42be      	cmp	r6, r7
 8006146:	d900      	bls.n	800614a <__ssputs_r+0x72>
 8006148:	463e      	mov	r6, r7
 800614a:	6820      	ldr	r0, [r4, #0]
 800614c:	4632      	mov	r2, r6
 800614e:	4641      	mov	r1, r8
 8006150:	f000 fef3 	bl	8006f3a <memmove>
 8006154:	68a3      	ldr	r3, [r4, #8]
 8006156:	1b9b      	subs	r3, r3, r6
 8006158:	60a3      	str	r3, [r4, #8]
 800615a:	6823      	ldr	r3, [r4, #0]
 800615c:	4433      	add	r3, r6
 800615e:	6023      	str	r3, [r4, #0]
 8006160:	2000      	movs	r0, #0
 8006162:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006166:	462a      	mov	r2, r5
 8006168:	f000 ff27 	bl	8006fba <_realloc_r>
 800616c:	4606      	mov	r6, r0
 800616e:	2800      	cmp	r0, #0
 8006170:	d1e0      	bne.n	8006134 <__ssputs_r+0x5c>
 8006172:	6921      	ldr	r1, [r4, #16]
 8006174:	4650      	mov	r0, sl
 8006176:	f7ff feaf 	bl	8005ed8 <_free_r>
 800617a:	230c      	movs	r3, #12
 800617c:	f8ca 3000 	str.w	r3, [sl]
 8006180:	89a3      	ldrh	r3, [r4, #12]
 8006182:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006186:	81a3      	strh	r3, [r4, #12]
 8006188:	f04f 30ff 	mov.w	r0, #4294967295
 800618c:	e7e9      	b.n	8006162 <__ssputs_r+0x8a>
	...

08006190 <_svfiprintf_r>:
 8006190:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006194:	4698      	mov	r8, r3
 8006196:	898b      	ldrh	r3, [r1, #12]
 8006198:	061b      	lsls	r3, r3, #24
 800619a:	b09d      	sub	sp, #116	@ 0x74
 800619c:	4607      	mov	r7, r0
 800619e:	460d      	mov	r5, r1
 80061a0:	4614      	mov	r4, r2
 80061a2:	d510      	bpl.n	80061c6 <_svfiprintf_r+0x36>
 80061a4:	690b      	ldr	r3, [r1, #16]
 80061a6:	b973      	cbnz	r3, 80061c6 <_svfiprintf_r+0x36>
 80061a8:	2140      	movs	r1, #64	@ 0x40
 80061aa:	f7ff ff09 	bl	8005fc0 <_malloc_r>
 80061ae:	6028      	str	r0, [r5, #0]
 80061b0:	6128      	str	r0, [r5, #16]
 80061b2:	b930      	cbnz	r0, 80061c2 <_svfiprintf_r+0x32>
 80061b4:	230c      	movs	r3, #12
 80061b6:	603b      	str	r3, [r7, #0]
 80061b8:	f04f 30ff 	mov.w	r0, #4294967295
 80061bc:	b01d      	add	sp, #116	@ 0x74
 80061be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80061c2:	2340      	movs	r3, #64	@ 0x40
 80061c4:	616b      	str	r3, [r5, #20]
 80061c6:	2300      	movs	r3, #0
 80061c8:	9309      	str	r3, [sp, #36]	@ 0x24
 80061ca:	2320      	movs	r3, #32
 80061cc:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80061d0:	f8cd 800c 	str.w	r8, [sp, #12]
 80061d4:	2330      	movs	r3, #48	@ 0x30
 80061d6:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8006374 <_svfiprintf_r+0x1e4>
 80061da:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80061de:	f04f 0901 	mov.w	r9, #1
 80061e2:	4623      	mov	r3, r4
 80061e4:	469a      	mov	sl, r3
 80061e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80061ea:	b10a      	cbz	r2, 80061f0 <_svfiprintf_r+0x60>
 80061ec:	2a25      	cmp	r2, #37	@ 0x25
 80061ee:	d1f9      	bne.n	80061e4 <_svfiprintf_r+0x54>
 80061f0:	ebba 0b04 	subs.w	fp, sl, r4
 80061f4:	d00b      	beq.n	800620e <_svfiprintf_r+0x7e>
 80061f6:	465b      	mov	r3, fp
 80061f8:	4622      	mov	r2, r4
 80061fa:	4629      	mov	r1, r5
 80061fc:	4638      	mov	r0, r7
 80061fe:	f7ff ff6b 	bl	80060d8 <__ssputs_r>
 8006202:	3001      	adds	r0, #1
 8006204:	f000 80a7 	beq.w	8006356 <_svfiprintf_r+0x1c6>
 8006208:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800620a:	445a      	add	r2, fp
 800620c:	9209      	str	r2, [sp, #36]	@ 0x24
 800620e:	f89a 3000 	ldrb.w	r3, [sl]
 8006212:	2b00      	cmp	r3, #0
 8006214:	f000 809f 	beq.w	8006356 <_svfiprintf_r+0x1c6>
 8006218:	2300      	movs	r3, #0
 800621a:	f04f 32ff 	mov.w	r2, #4294967295
 800621e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006222:	f10a 0a01 	add.w	sl, sl, #1
 8006226:	9304      	str	r3, [sp, #16]
 8006228:	9307      	str	r3, [sp, #28]
 800622a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800622e:	931a      	str	r3, [sp, #104]	@ 0x68
 8006230:	4654      	mov	r4, sl
 8006232:	2205      	movs	r2, #5
 8006234:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006238:	484e      	ldr	r0, [pc, #312]	@ (8006374 <_svfiprintf_r+0x1e4>)
 800623a:	f7f9 fff9 	bl	8000230 <memchr>
 800623e:	9a04      	ldr	r2, [sp, #16]
 8006240:	b9d8      	cbnz	r0, 800627a <_svfiprintf_r+0xea>
 8006242:	06d0      	lsls	r0, r2, #27
 8006244:	bf44      	itt	mi
 8006246:	2320      	movmi	r3, #32
 8006248:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800624c:	0711      	lsls	r1, r2, #28
 800624e:	bf44      	itt	mi
 8006250:	232b      	movmi	r3, #43	@ 0x2b
 8006252:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006256:	f89a 3000 	ldrb.w	r3, [sl]
 800625a:	2b2a      	cmp	r3, #42	@ 0x2a
 800625c:	d015      	beq.n	800628a <_svfiprintf_r+0xfa>
 800625e:	9a07      	ldr	r2, [sp, #28]
 8006260:	4654      	mov	r4, sl
 8006262:	2000      	movs	r0, #0
 8006264:	f04f 0c0a 	mov.w	ip, #10
 8006268:	4621      	mov	r1, r4
 800626a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800626e:	3b30      	subs	r3, #48	@ 0x30
 8006270:	2b09      	cmp	r3, #9
 8006272:	d94b      	bls.n	800630c <_svfiprintf_r+0x17c>
 8006274:	b1b0      	cbz	r0, 80062a4 <_svfiprintf_r+0x114>
 8006276:	9207      	str	r2, [sp, #28]
 8006278:	e014      	b.n	80062a4 <_svfiprintf_r+0x114>
 800627a:	eba0 0308 	sub.w	r3, r0, r8
 800627e:	fa09 f303 	lsl.w	r3, r9, r3
 8006282:	4313      	orrs	r3, r2
 8006284:	9304      	str	r3, [sp, #16]
 8006286:	46a2      	mov	sl, r4
 8006288:	e7d2      	b.n	8006230 <_svfiprintf_r+0xa0>
 800628a:	9b03      	ldr	r3, [sp, #12]
 800628c:	1d19      	adds	r1, r3, #4
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	9103      	str	r1, [sp, #12]
 8006292:	2b00      	cmp	r3, #0
 8006294:	bfbb      	ittet	lt
 8006296:	425b      	neglt	r3, r3
 8006298:	f042 0202 	orrlt.w	r2, r2, #2
 800629c:	9307      	strge	r3, [sp, #28]
 800629e:	9307      	strlt	r3, [sp, #28]
 80062a0:	bfb8      	it	lt
 80062a2:	9204      	strlt	r2, [sp, #16]
 80062a4:	7823      	ldrb	r3, [r4, #0]
 80062a6:	2b2e      	cmp	r3, #46	@ 0x2e
 80062a8:	d10a      	bne.n	80062c0 <_svfiprintf_r+0x130>
 80062aa:	7863      	ldrb	r3, [r4, #1]
 80062ac:	2b2a      	cmp	r3, #42	@ 0x2a
 80062ae:	d132      	bne.n	8006316 <_svfiprintf_r+0x186>
 80062b0:	9b03      	ldr	r3, [sp, #12]
 80062b2:	1d1a      	adds	r2, r3, #4
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	9203      	str	r2, [sp, #12]
 80062b8:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80062bc:	3402      	adds	r4, #2
 80062be:	9305      	str	r3, [sp, #20]
 80062c0:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8006384 <_svfiprintf_r+0x1f4>
 80062c4:	7821      	ldrb	r1, [r4, #0]
 80062c6:	2203      	movs	r2, #3
 80062c8:	4650      	mov	r0, sl
 80062ca:	f7f9 ffb1 	bl	8000230 <memchr>
 80062ce:	b138      	cbz	r0, 80062e0 <_svfiprintf_r+0x150>
 80062d0:	9b04      	ldr	r3, [sp, #16]
 80062d2:	eba0 000a 	sub.w	r0, r0, sl
 80062d6:	2240      	movs	r2, #64	@ 0x40
 80062d8:	4082      	lsls	r2, r0
 80062da:	4313      	orrs	r3, r2
 80062dc:	3401      	adds	r4, #1
 80062de:	9304      	str	r3, [sp, #16]
 80062e0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80062e4:	4824      	ldr	r0, [pc, #144]	@ (8006378 <_svfiprintf_r+0x1e8>)
 80062e6:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80062ea:	2206      	movs	r2, #6
 80062ec:	f7f9 ffa0 	bl	8000230 <memchr>
 80062f0:	2800      	cmp	r0, #0
 80062f2:	d036      	beq.n	8006362 <_svfiprintf_r+0x1d2>
 80062f4:	4b21      	ldr	r3, [pc, #132]	@ (800637c <_svfiprintf_r+0x1ec>)
 80062f6:	bb1b      	cbnz	r3, 8006340 <_svfiprintf_r+0x1b0>
 80062f8:	9b03      	ldr	r3, [sp, #12]
 80062fa:	3307      	adds	r3, #7
 80062fc:	f023 0307 	bic.w	r3, r3, #7
 8006300:	3308      	adds	r3, #8
 8006302:	9303      	str	r3, [sp, #12]
 8006304:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006306:	4433      	add	r3, r6
 8006308:	9309      	str	r3, [sp, #36]	@ 0x24
 800630a:	e76a      	b.n	80061e2 <_svfiprintf_r+0x52>
 800630c:	fb0c 3202 	mla	r2, ip, r2, r3
 8006310:	460c      	mov	r4, r1
 8006312:	2001      	movs	r0, #1
 8006314:	e7a8      	b.n	8006268 <_svfiprintf_r+0xd8>
 8006316:	2300      	movs	r3, #0
 8006318:	3401      	adds	r4, #1
 800631a:	9305      	str	r3, [sp, #20]
 800631c:	4619      	mov	r1, r3
 800631e:	f04f 0c0a 	mov.w	ip, #10
 8006322:	4620      	mov	r0, r4
 8006324:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006328:	3a30      	subs	r2, #48	@ 0x30
 800632a:	2a09      	cmp	r2, #9
 800632c:	d903      	bls.n	8006336 <_svfiprintf_r+0x1a6>
 800632e:	2b00      	cmp	r3, #0
 8006330:	d0c6      	beq.n	80062c0 <_svfiprintf_r+0x130>
 8006332:	9105      	str	r1, [sp, #20]
 8006334:	e7c4      	b.n	80062c0 <_svfiprintf_r+0x130>
 8006336:	fb0c 2101 	mla	r1, ip, r1, r2
 800633a:	4604      	mov	r4, r0
 800633c:	2301      	movs	r3, #1
 800633e:	e7f0      	b.n	8006322 <_svfiprintf_r+0x192>
 8006340:	ab03      	add	r3, sp, #12
 8006342:	9300      	str	r3, [sp, #0]
 8006344:	462a      	mov	r2, r5
 8006346:	4b0e      	ldr	r3, [pc, #56]	@ (8006380 <_svfiprintf_r+0x1f0>)
 8006348:	a904      	add	r1, sp, #16
 800634a:	4638      	mov	r0, r7
 800634c:	f3af 8000 	nop.w
 8006350:	1c42      	adds	r2, r0, #1
 8006352:	4606      	mov	r6, r0
 8006354:	d1d6      	bne.n	8006304 <_svfiprintf_r+0x174>
 8006356:	89ab      	ldrh	r3, [r5, #12]
 8006358:	065b      	lsls	r3, r3, #25
 800635a:	f53f af2d 	bmi.w	80061b8 <_svfiprintf_r+0x28>
 800635e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006360:	e72c      	b.n	80061bc <_svfiprintf_r+0x2c>
 8006362:	ab03      	add	r3, sp, #12
 8006364:	9300      	str	r3, [sp, #0]
 8006366:	462a      	mov	r2, r5
 8006368:	4b05      	ldr	r3, [pc, #20]	@ (8006380 <_svfiprintf_r+0x1f0>)
 800636a:	a904      	add	r1, sp, #16
 800636c:	4638      	mov	r0, r7
 800636e:	f000 fa45 	bl	80067fc <_printf_i>
 8006372:	e7ed      	b.n	8006350 <_svfiprintf_r+0x1c0>
 8006374:	0800792d 	.word	0x0800792d
 8006378:	08007937 	.word	0x08007937
 800637c:	00000000 	.word	0x00000000
 8006380:	080060d9 	.word	0x080060d9
 8006384:	08007933 	.word	0x08007933

08006388 <_sungetc_r>:
 8006388:	b538      	push	{r3, r4, r5, lr}
 800638a:	1c4b      	adds	r3, r1, #1
 800638c:	4614      	mov	r4, r2
 800638e:	d103      	bne.n	8006398 <_sungetc_r+0x10>
 8006390:	f04f 35ff 	mov.w	r5, #4294967295
 8006394:	4628      	mov	r0, r5
 8006396:	bd38      	pop	{r3, r4, r5, pc}
 8006398:	8993      	ldrh	r3, [r2, #12]
 800639a:	f023 0320 	bic.w	r3, r3, #32
 800639e:	8193      	strh	r3, [r2, #12]
 80063a0:	6853      	ldr	r3, [r2, #4]
 80063a2:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80063a4:	b2cd      	uxtb	r5, r1
 80063a6:	b18a      	cbz	r2, 80063cc <_sungetc_r+0x44>
 80063a8:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 80063aa:	429a      	cmp	r2, r3
 80063ac:	dd08      	ble.n	80063c0 <_sungetc_r+0x38>
 80063ae:	6823      	ldr	r3, [r4, #0]
 80063b0:	1e5a      	subs	r2, r3, #1
 80063b2:	6022      	str	r2, [r4, #0]
 80063b4:	f803 5c01 	strb.w	r5, [r3, #-1]
 80063b8:	6863      	ldr	r3, [r4, #4]
 80063ba:	3301      	adds	r3, #1
 80063bc:	6063      	str	r3, [r4, #4]
 80063be:	e7e9      	b.n	8006394 <_sungetc_r+0xc>
 80063c0:	4621      	mov	r1, r4
 80063c2:	f000 fd80 	bl	8006ec6 <__submore>
 80063c6:	2800      	cmp	r0, #0
 80063c8:	d0f1      	beq.n	80063ae <_sungetc_r+0x26>
 80063ca:	e7e1      	b.n	8006390 <_sungetc_r+0x8>
 80063cc:	6921      	ldr	r1, [r4, #16]
 80063ce:	6822      	ldr	r2, [r4, #0]
 80063d0:	b141      	cbz	r1, 80063e4 <_sungetc_r+0x5c>
 80063d2:	4291      	cmp	r1, r2
 80063d4:	d206      	bcs.n	80063e4 <_sungetc_r+0x5c>
 80063d6:	f812 1c01 	ldrb.w	r1, [r2, #-1]
 80063da:	42a9      	cmp	r1, r5
 80063dc:	d102      	bne.n	80063e4 <_sungetc_r+0x5c>
 80063de:	3a01      	subs	r2, #1
 80063e0:	6022      	str	r2, [r4, #0]
 80063e2:	e7ea      	b.n	80063ba <_sungetc_r+0x32>
 80063e4:	e9c4 230f 	strd	r2, r3, [r4, #60]	@ 0x3c
 80063e8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80063ec:	6363      	str	r3, [r4, #52]	@ 0x34
 80063ee:	2303      	movs	r3, #3
 80063f0:	63a3      	str	r3, [r4, #56]	@ 0x38
 80063f2:	4623      	mov	r3, r4
 80063f4:	f803 5f46 	strb.w	r5, [r3, #70]!
 80063f8:	6023      	str	r3, [r4, #0]
 80063fa:	2301      	movs	r3, #1
 80063fc:	e7de      	b.n	80063bc <_sungetc_r+0x34>

080063fe <__ssrefill_r>:
 80063fe:	b510      	push	{r4, lr}
 8006400:	460c      	mov	r4, r1
 8006402:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 8006404:	b169      	cbz	r1, 8006422 <__ssrefill_r+0x24>
 8006406:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800640a:	4299      	cmp	r1, r3
 800640c:	d001      	beq.n	8006412 <__ssrefill_r+0x14>
 800640e:	f7ff fd63 	bl	8005ed8 <_free_r>
 8006412:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8006414:	6063      	str	r3, [r4, #4]
 8006416:	2000      	movs	r0, #0
 8006418:	6360      	str	r0, [r4, #52]	@ 0x34
 800641a:	b113      	cbz	r3, 8006422 <__ssrefill_r+0x24>
 800641c:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 800641e:	6023      	str	r3, [r4, #0]
 8006420:	bd10      	pop	{r4, pc}
 8006422:	6923      	ldr	r3, [r4, #16]
 8006424:	6023      	str	r3, [r4, #0]
 8006426:	2300      	movs	r3, #0
 8006428:	6063      	str	r3, [r4, #4]
 800642a:	89a3      	ldrh	r3, [r4, #12]
 800642c:	f043 0320 	orr.w	r3, r3, #32
 8006430:	81a3      	strh	r3, [r4, #12]
 8006432:	f04f 30ff 	mov.w	r0, #4294967295
 8006436:	e7f3      	b.n	8006420 <__ssrefill_r+0x22>

08006438 <__ssvfiscanf_r>:
 8006438:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800643c:	460c      	mov	r4, r1
 800643e:	f5ad 7d22 	sub.w	sp, sp, #648	@ 0x288
 8006442:	2100      	movs	r1, #0
 8006444:	e9cd 1144 	strd	r1, r1, [sp, #272]	@ 0x110
 8006448:	49a5      	ldr	r1, [pc, #660]	@ (80066e0 <__ssvfiscanf_r+0x2a8>)
 800644a:	91a0      	str	r1, [sp, #640]	@ 0x280
 800644c:	f10d 0804 	add.w	r8, sp, #4
 8006450:	49a4      	ldr	r1, [pc, #656]	@ (80066e4 <__ssvfiscanf_r+0x2ac>)
 8006452:	4fa5      	ldr	r7, [pc, #660]	@ (80066e8 <__ssvfiscanf_r+0x2b0>)
 8006454:	f8cd 8118 	str.w	r8, [sp, #280]	@ 0x118
 8006458:	4606      	mov	r6, r0
 800645a:	91a1      	str	r1, [sp, #644]	@ 0x284
 800645c:	9300      	str	r3, [sp, #0]
 800645e:	7813      	ldrb	r3, [r2, #0]
 8006460:	2b00      	cmp	r3, #0
 8006462:	f000 8158 	beq.w	8006716 <__ssvfiscanf_r+0x2de>
 8006466:	5cf9      	ldrb	r1, [r7, r3]
 8006468:	f011 0108 	ands.w	r1, r1, #8
 800646c:	f102 0501 	add.w	r5, r2, #1
 8006470:	d019      	beq.n	80064a6 <__ssvfiscanf_r+0x6e>
 8006472:	6863      	ldr	r3, [r4, #4]
 8006474:	2b00      	cmp	r3, #0
 8006476:	dd0f      	ble.n	8006498 <__ssvfiscanf_r+0x60>
 8006478:	6823      	ldr	r3, [r4, #0]
 800647a:	781a      	ldrb	r2, [r3, #0]
 800647c:	5cba      	ldrb	r2, [r7, r2]
 800647e:	0712      	lsls	r2, r2, #28
 8006480:	d401      	bmi.n	8006486 <__ssvfiscanf_r+0x4e>
 8006482:	462a      	mov	r2, r5
 8006484:	e7eb      	b.n	800645e <__ssvfiscanf_r+0x26>
 8006486:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 8006488:	3201      	adds	r2, #1
 800648a:	9245      	str	r2, [sp, #276]	@ 0x114
 800648c:	6862      	ldr	r2, [r4, #4]
 800648e:	3301      	adds	r3, #1
 8006490:	3a01      	subs	r2, #1
 8006492:	6062      	str	r2, [r4, #4]
 8006494:	6023      	str	r3, [r4, #0]
 8006496:	e7ec      	b.n	8006472 <__ssvfiscanf_r+0x3a>
 8006498:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 800649a:	4621      	mov	r1, r4
 800649c:	4630      	mov	r0, r6
 800649e:	4798      	blx	r3
 80064a0:	2800      	cmp	r0, #0
 80064a2:	d0e9      	beq.n	8006478 <__ssvfiscanf_r+0x40>
 80064a4:	e7ed      	b.n	8006482 <__ssvfiscanf_r+0x4a>
 80064a6:	2b25      	cmp	r3, #37	@ 0x25
 80064a8:	d012      	beq.n	80064d0 <__ssvfiscanf_r+0x98>
 80064aa:	4699      	mov	r9, r3
 80064ac:	6863      	ldr	r3, [r4, #4]
 80064ae:	2b00      	cmp	r3, #0
 80064b0:	f340 8093 	ble.w	80065da <__ssvfiscanf_r+0x1a2>
 80064b4:	6822      	ldr	r2, [r4, #0]
 80064b6:	7813      	ldrb	r3, [r2, #0]
 80064b8:	454b      	cmp	r3, r9
 80064ba:	f040 812c 	bne.w	8006716 <__ssvfiscanf_r+0x2de>
 80064be:	6863      	ldr	r3, [r4, #4]
 80064c0:	3b01      	subs	r3, #1
 80064c2:	6063      	str	r3, [r4, #4]
 80064c4:	9b45      	ldr	r3, [sp, #276]	@ 0x114
 80064c6:	3201      	adds	r2, #1
 80064c8:	3301      	adds	r3, #1
 80064ca:	6022      	str	r2, [r4, #0]
 80064cc:	9345      	str	r3, [sp, #276]	@ 0x114
 80064ce:	e7d8      	b.n	8006482 <__ssvfiscanf_r+0x4a>
 80064d0:	9141      	str	r1, [sp, #260]	@ 0x104
 80064d2:	9143      	str	r1, [sp, #268]	@ 0x10c
 80064d4:	7853      	ldrb	r3, [r2, #1]
 80064d6:	2b2a      	cmp	r3, #42	@ 0x2a
 80064d8:	bf02      	ittt	eq
 80064da:	2310      	moveq	r3, #16
 80064dc:	1c95      	addeq	r5, r2, #2
 80064de:	9341      	streq	r3, [sp, #260]	@ 0x104
 80064e0:	220a      	movs	r2, #10
 80064e2:	46a9      	mov	r9, r5
 80064e4:	f819 1b01 	ldrb.w	r1, [r9], #1
 80064e8:	f1a1 0330 	sub.w	r3, r1, #48	@ 0x30
 80064ec:	2b09      	cmp	r3, #9
 80064ee:	d91e      	bls.n	800652e <__ssvfiscanf_r+0xf6>
 80064f0:	f8df a1f8 	ldr.w	sl, [pc, #504]	@ 80066ec <__ssvfiscanf_r+0x2b4>
 80064f4:	2203      	movs	r2, #3
 80064f6:	4650      	mov	r0, sl
 80064f8:	f7f9 fe9a 	bl	8000230 <memchr>
 80064fc:	b138      	cbz	r0, 800650e <__ssvfiscanf_r+0xd6>
 80064fe:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 8006500:	eba0 000a 	sub.w	r0, r0, sl
 8006504:	2301      	movs	r3, #1
 8006506:	4083      	lsls	r3, r0
 8006508:	4313      	orrs	r3, r2
 800650a:	9341      	str	r3, [sp, #260]	@ 0x104
 800650c:	464d      	mov	r5, r9
 800650e:	f815 3b01 	ldrb.w	r3, [r5], #1
 8006512:	2b78      	cmp	r3, #120	@ 0x78
 8006514:	d806      	bhi.n	8006524 <__ssvfiscanf_r+0xec>
 8006516:	2b57      	cmp	r3, #87	@ 0x57
 8006518:	d810      	bhi.n	800653c <__ssvfiscanf_r+0x104>
 800651a:	2b25      	cmp	r3, #37	@ 0x25
 800651c:	d0c5      	beq.n	80064aa <__ssvfiscanf_r+0x72>
 800651e:	d857      	bhi.n	80065d0 <__ssvfiscanf_r+0x198>
 8006520:	2b00      	cmp	r3, #0
 8006522:	d065      	beq.n	80065f0 <__ssvfiscanf_r+0x1b8>
 8006524:	2303      	movs	r3, #3
 8006526:	9347      	str	r3, [sp, #284]	@ 0x11c
 8006528:	230a      	movs	r3, #10
 800652a:	9342      	str	r3, [sp, #264]	@ 0x108
 800652c:	e078      	b.n	8006620 <__ssvfiscanf_r+0x1e8>
 800652e:	9b43      	ldr	r3, [sp, #268]	@ 0x10c
 8006530:	fb02 1103 	mla	r1, r2, r3, r1
 8006534:	3930      	subs	r1, #48	@ 0x30
 8006536:	9143      	str	r1, [sp, #268]	@ 0x10c
 8006538:	464d      	mov	r5, r9
 800653a:	e7d2      	b.n	80064e2 <__ssvfiscanf_r+0xaa>
 800653c:	f1a3 0258 	sub.w	r2, r3, #88	@ 0x58
 8006540:	2a20      	cmp	r2, #32
 8006542:	d8ef      	bhi.n	8006524 <__ssvfiscanf_r+0xec>
 8006544:	a101      	add	r1, pc, #4	@ (adr r1, 800654c <__ssvfiscanf_r+0x114>)
 8006546:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800654a:	bf00      	nop
 800654c:	080065ff 	.word	0x080065ff
 8006550:	08006525 	.word	0x08006525
 8006554:	08006525 	.word	0x08006525
 8006558:	08006659 	.word	0x08006659
 800655c:	08006525 	.word	0x08006525
 8006560:	08006525 	.word	0x08006525
 8006564:	08006525 	.word	0x08006525
 8006568:	08006525 	.word	0x08006525
 800656c:	08006525 	.word	0x08006525
 8006570:	08006525 	.word	0x08006525
 8006574:	08006525 	.word	0x08006525
 8006578:	0800666f 	.word	0x0800666f
 800657c:	08006655 	.word	0x08006655
 8006580:	080065d7 	.word	0x080065d7
 8006584:	080065d7 	.word	0x080065d7
 8006588:	080065d7 	.word	0x080065d7
 800658c:	08006525 	.word	0x08006525
 8006590:	08006611 	.word	0x08006611
 8006594:	08006525 	.word	0x08006525
 8006598:	08006525 	.word	0x08006525
 800659c:	08006525 	.word	0x08006525
 80065a0:	08006525 	.word	0x08006525
 80065a4:	0800667f 	.word	0x0800667f
 80065a8:	08006619 	.word	0x08006619
 80065ac:	080065f7 	.word	0x080065f7
 80065b0:	08006525 	.word	0x08006525
 80065b4:	08006525 	.word	0x08006525
 80065b8:	0800667b 	.word	0x0800667b
 80065bc:	08006525 	.word	0x08006525
 80065c0:	08006655 	.word	0x08006655
 80065c4:	08006525 	.word	0x08006525
 80065c8:	08006525 	.word	0x08006525
 80065cc:	080065ff 	.word	0x080065ff
 80065d0:	3b45      	subs	r3, #69	@ 0x45
 80065d2:	2b02      	cmp	r3, #2
 80065d4:	d8a6      	bhi.n	8006524 <__ssvfiscanf_r+0xec>
 80065d6:	2305      	movs	r3, #5
 80065d8:	e021      	b.n	800661e <__ssvfiscanf_r+0x1e6>
 80065da:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 80065dc:	4621      	mov	r1, r4
 80065de:	4630      	mov	r0, r6
 80065e0:	4798      	blx	r3
 80065e2:	2800      	cmp	r0, #0
 80065e4:	f43f af66 	beq.w	80064b4 <__ssvfiscanf_r+0x7c>
 80065e8:	9844      	ldr	r0, [sp, #272]	@ 0x110
 80065ea:	2800      	cmp	r0, #0
 80065ec:	f040 808b 	bne.w	8006706 <__ssvfiscanf_r+0x2ce>
 80065f0:	f04f 30ff 	mov.w	r0, #4294967295
 80065f4:	e08b      	b.n	800670e <__ssvfiscanf_r+0x2d6>
 80065f6:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 80065f8:	f042 0220 	orr.w	r2, r2, #32
 80065fc:	9241      	str	r2, [sp, #260]	@ 0x104
 80065fe:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 8006600:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006604:	9241      	str	r2, [sp, #260]	@ 0x104
 8006606:	2210      	movs	r2, #16
 8006608:	2b6e      	cmp	r3, #110	@ 0x6e
 800660a:	9242      	str	r2, [sp, #264]	@ 0x108
 800660c:	d902      	bls.n	8006614 <__ssvfiscanf_r+0x1dc>
 800660e:	e005      	b.n	800661c <__ssvfiscanf_r+0x1e4>
 8006610:	2300      	movs	r3, #0
 8006612:	9342      	str	r3, [sp, #264]	@ 0x108
 8006614:	2303      	movs	r3, #3
 8006616:	e002      	b.n	800661e <__ssvfiscanf_r+0x1e6>
 8006618:	2308      	movs	r3, #8
 800661a:	9342      	str	r3, [sp, #264]	@ 0x108
 800661c:	2304      	movs	r3, #4
 800661e:	9347      	str	r3, [sp, #284]	@ 0x11c
 8006620:	6863      	ldr	r3, [r4, #4]
 8006622:	2b00      	cmp	r3, #0
 8006624:	dd39      	ble.n	800669a <__ssvfiscanf_r+0x262>
 8006626:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 8006628:	0659      	lsls	r1, r3, #25
 800662a:	d404      	bmi.n	8006636 <__ssvfiscanf_r+0x1fe>
 800662c:	6823      	ldr	r3, [r4, #0]
 800662e:	781a      	ldrb	r2, [r3, #0]
 8006630:	5cba      	ldrb	r2, [r7, r2]
 8006632:	0712      	lsls	r2, r2, #28
 8006634:	d438      	bmi.n	80066a8 <__ssvfiscanf_r+0x270>
 8006636:	9b47      	ldr	r3, [sp, #284]	@ 0x11c
 8006638:	2b02      	cmp	r3, #2
 800663a:	dc47      	bgt.n	80066cc <__ssvfiscanf_r+0x294>
 800663c:	466b      	mov	r3, sp
 800663e:	4622      	mov	r2, r4
 8006640:	a941      	add	r1, sp, #260	@ 0x104
 8006642:	4630      	mov	r0, r6
 8006644:	f000 f9fa 	bl	8006a3c <_scanf_chars>
 8006648:	2801      	cmp	r0, #1
 800664a:	d064      	beq.n	8006716 <__ssvfiscanf_r+0x2de>
 800664c:	2802      	cmp	r0, #2
 800664e:	f47f af18 	bne.w	8006482 <__ssvfiscanf_r+0x4a>
 8006652:	e7c9      	b.n	80065e8 <__ssvfiscanf_r+0x1b0>
 8006654:	220a      	movs	r2, #10
 8006656:	e7d7      	b.n	8006608 <__ssvfiscanf_r+0x1d0>
 8006658:	4629      	mov	r1, r5
 800665a:	4640      	mov	r0, r8
 800665c:	f000 fbfa 	bl	8006e54 <__sccl>
 8006660:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 8006662:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006666:	9341      	str	r3, [sp, #260]	@ 0x104
 8006668:	4605      	mov	r5, r0
 800666a:	2301      	movs	r3, #1
 800666c:	e7d7      	b.n	800661e <__ssvfiscanf_r+0x1e6>
 800666e:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 8006670:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006674:	9341      	str	r3, [sp, #260]	@ 0x104
 8006676:	2300      	movs	r3, #0
 8006678:	e7d1      	b.n	800661e <__ssvfiscanf_r+0x1e6>
 800667a:	2302      	movs	r3, #2
 800667c:	e7cf      	b.n	800661e <__ssvfiscanf_r+0x1e6>
 800667e:	9841      	ldr	r0, [sp, #260]	@ 0x104
 8006680:	06c3      	lsls	r3, r0, #27
 8006682:	f53f aefe 	bmi.w	8006482 <__ssvfiscanf_r+0x4a>
 8006686:	9b00      	ldr	r3, [sp, #0]
 8006688:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 800668a:	1d19      	adds	r1, r3, #4
 800668c:	9100      	str	r1, [sp, #0]
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	07c0      	lsls	r0, r0, #31
 8006692:	bf4c      	ite	mi
 8006694:	801a      	strhmi	r2, [r3, #0]
 8006696:	601a      	strpl	r2, [r3, #0]
 8006698:	e6f3      	b.n	8006482 <__ssvfiscanf_r+0x4a>
 800669a:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 800669c:	4621      	mov	r1, r4
 800669e:	4630      	mov	r0, r6
 80066a0:	4798      	blx	r3
 80066a2:	2800      	cmp	r0, #0
 80066a4:	d0bf      	beq.n	8006626 <__ssvfiscanf_r+0x1ee>
 80066a6:	e79f      	b.n	80065e8 <__ssvfiscanf_r+0x1b0>
 80066a8:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 80066aa:	3201      	adds	r2, #1
 80066ac:	9245      	str	r2, [sp, #276]	@ 0x114
 80066ae:	6862      	ldr	r2, [r4, #4]
 80066b0:	3a01      	subs	r2, #1
 80066b2:	2a00      	cmp	r2, #0
 80066b4:	6062      	str	r2, [r4, #4]
 80066b6:	dd02      	ble.n	80066be <__ssvfiscanf_r+0x286>
 80066b8:	3301      	adds	r3, #1
 80066ba:	6023      	str	r3, [r4, #0]
 80066bc:	e7b6      	b.n	800662c <__ssvfiscanf_r+0x1f4>
 80066be:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 80066c0:	4621      	mov	r1, r4
 80066c2:	4630      	mov	r0, r6
 80066c4:	4798      	blx	r3
 80066c6:	2800      	cmp	r0, #0
 80066c8:	d0b0      	beq.n	800662c <__ssvfiscanf_r+0x1f4>
 80066ca:	e78d      	b.n	80065e8 <__ssvfiscanf_r+0x1b0>
 80066cc:	2b04      	cmp	r3, #4
 80066ce:	dc0f      	bgt.n	80066f0 <__ssvfiscanf_r+0x2b8>
 80066d0:	466b      	mov	r3, sp
 80066d2:	4622      	mov	r2, r4
 80066d4:	a941      	add	r1, sp, #260	@ 0x104
 80066d6:	4630      	mov	r0, r6
 80066d8:	f000 fa0a 	bl	8006af0 <_scanf_i>
 80066dc:	e7b4      	b.n	8006648 <__ssvfiscanf_r+0x210>
 80066de:	bf00      	nop
 80066e0:	08006389 	.word	0x08006389
 80066e4:	080063ff 	.word	0x080063ff
 80066e8:	0800797c 	.word	0x0800797c
 80066ec:	08007933 	.word	0x08007933
 80066f0:	4b0a      	ldr	r3, [pc, #40]	@ (800671c <__ssvfiscanf_r+0x2e4>)
 80066f2:	2b00      	cmp	r3, #0
 80066f4:	f43f aec5 	beq.w	8006482 <__ssvfiscanf_r+0x4a>
 80066f8:	466b      	mov	r3, sp
 80066fa:	4622      	mov	r2, r4
 80066fc:	a941      	add	r1, sp, #260	@ 0x104
 80066fe:	4630      	mov	r0, r6
 8006700:	f3af 8000 	nop.w
 8006704:	e7a0      	b.n	8006648 <__ssvfiscanf_r+0x210>
 8006706:	89a3      	ldrh	r3, [r4, #12]
 8006708:	065b      	lsls	r3, r3, #25
 800670a:	f53f af71 	bmi.w	80065f0 <__ssvfiscanf_r+0x1b8>
 800670e:	f50d 7d22 	add.w	sp, sp, #648	@ 0x288
 8006712:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006716:	9844      	ldr	r0, [sp, #272]	@ 0x110
 8006718:	e7f9      	b.n	800670e <__ssvfiscanf_r+0x2d6>
 800671a:	bf00      	nop
 800671c:	00000000 	.word	0x00000000

08006720 <_printf_common>:
 8006720:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006724:	4616      	mov	r6, r2
 8006726:	4698      	mov	r8, r3
 8006728:	688a      	ldr	r2, [r1, #8]
 800672a:	690b      	ldr	r3, [r1, #16]
 800672c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8006730:	4293      	cmp	r3, r2
 8006732:	bfb8      	it	lt
 8006734:	4613      	movlt	r3, r2
 8006736:	6033      	str	r3, [r6, #0]
 8006738:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800673c:	4607      	mov	r7, r0
 800673e:	460c      	mov	r4, r1
 8006740:	b10a      	cbz	r2, 8006746 <_printf_common+0x26>
 8006742:	3301      	adds	r3, #1
 8006744:	6033      	str	r3, [r6, #0]
 8006746:	6823      	ldr	r3, [r4, #0]
 8006748:	0699      	lsls	r1, r3, #26
 800674a:	bf42      	ittt	mi
 800674c:	6833      	ldrmi	r3, [r6, #0]
 800674e:	3302      	addmi	r3, #2
 8006750:	6033      	strmi	r3, [r6, #0]
 8006752:	6825      	ldr	r5, [r4, #0]
 8006754:	f015 0506 	ands.w	r5, r5, #6
 8006758:	d106      	bne.n	8006768 <_printf_common+0x48>
 800675a:	f104 0a19 	add.w	sl, r4, #25
 800675e:	68e3      	ldr	r3, [r4, #12]
 8006760:	6832      	ldr	r2, [r6, #0]
 8006762:	1a9b      	subs	r3, r3, r2
 8006764:	42ab      	cmp	r3, r5
 8006766:	dc26      	bgt.n	80067b6 <_printf_common+0x96>
 8006768:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800676c:	6822      	ldr	r2, [r4, #0]
 800676e:	3b00      	subs	r3, #0
 8006770:	bf18      	it	ne
 8006772:	2301      	movne	r3, #1
 8006774:	0692      	lsls	r2, r2, #26
 8006776:	d42b      	bmi.n	80067d0 <_printf_common+0xb0>
 8006778:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800677c:	4641      	mov	r1, r8
 800677e:	4638      	mov	r0, r7
 8006780:	47c8      	blx	r9
 8006782:	3001      	adds	r0, #1
 8006784:	d01e      	beq.n	80067c4 <_printf_common+0xa4>
 8006786:	6823      	ldr	r3, [r4, #0]
 8006788:	6922      	ldr	r2, [r4, #16]
 800678a:	f003 0306 	and.w	r3, r3, #6
 800678e:	2b04      	cmp	r3, #4
 8006790:	bf02      	ittt	eq
 8006792:	68e5      	ldreq	r5, [r4, #12]
 8006794:	6833      	ldreq	r3, [r6, #0]
 8006796:	1aed      	subeq	r5, r5, r3
 8006798:	68a3      	ldr	r3, [r4, #8]
 800679a:	bf0c      	ite	eq
 800679c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80067a0:	2500      	movne	r5, #0
 80067a2:	4293      	cmp	r3, r2
 80067a4:	bfc4      	itt	gt
 80067a6:	1a9b      	subgt	r3, r3, r2
 80067a8:	18ed      	addgt	r5, r5, r3
 80067aa:	2600      	movs	r6, #0
 80067ac:	341a      	adds	r4, #26
 80067ae:	42b5      	cmp	r5, r6
 80067b0:	d11a      	bne.n	80067e8 <_printf_common+0xc8>
 80067b2:	2000      	movs	r0, #0
 80067b4:	e008      	b.n	80067c8 <_printf_common+0xa8>
 80067b6:	2301      	movs	r3, #1
 80067b8:	4652      	mov	r2, sl
 80067ba:	4641      	mov	r1, r8
 80067bc:	4638      	mov	r0, r7
 80067be:	47c8      	blx	r9
 80067c0:	3001      	adds	r0, #1
 80067c2:	d103      	bne.n	80067cc <_printf_common+0xac>
 80067c4:	f04f 30ff 	mov.w	r0, #4294967295
 80067c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80067cc:	3501      	adds	r5, #1
 80067ce:	e7c6      	b.n	800675e <_printf_common+0x3e>
 80067d0:	18e1      	adds	r1, r4, r3
 80067d2:	1c5a      	adds	r2, r3, #1
 80067d4:	2030      	movs	r0, #48	@ 0x30
 80067d6:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80067da:	4422      	add	r2, r4
 80067dc:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80067e0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80067e4:	3302      	adds	r3, #2
 80067e6:	e7c7      	b.n	8006778 <_printf_common+0x58>
 80067e8:	2301      	movs	r3, #1
 80067ea:	4622      	mov	r2, r4
 80067ec:	4641      	mov	r1, r8
 80067ee:	4638      	mov	r0, r7
 80067f0:	47c8      	blx	r9
 80067f2:	3001      	adds	r0, #1
 80067f4:	d0e6      	beq.n	80067c4 <_printf_common+0xa4>
 80067f6:	3601      	adds	r6, #1
 80067f8:	e7d9      	b.n	80067ae <_printf_common+0x8e>
	...

080067fc <_printf_i>:
 80067fc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006800:	7e0f      	ldrb	r7, [r1, #24]
 8006802:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8006804:	2f78      	cmp	r7, #120	@ 0x78
 8006806:	4691      	mov	r9, r2
 8006808:	4680      	mov	r8, r0
 800680a:	460c      	mov	r4, r1
 800680c:	469a      	mov	sl, r3
 800680e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8006812:	d807      	bhi.n	8006824 <_printf_i+0x28>
 8006814:	2f62      	cmp	r7, #98	@ 0x62
 8006816:	d80a      	bhi.n	800682e <_printf_i+0x32>
 8006818:	2f00      	cmp	r7, #0
 800681a:	f000 80d2 	beq.w	80069c2 <_printf_i+0x1c6>
 800681e:	2f58      	cmp	r7, #88	@ 0x58
 8006820:	f000 80b9 	beq.w	8006996 <_printf_i+0x19a>
 8006824:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006828:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800682c:	e03a      	b.n	80068a4 <_printf_i+0xa8>
 800682e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8006832:	2b15      	cmp	r3, #21
 8006834:	d8f6      	bhi.n	8006824 <_printf_i+0x28>
 8006836:	a101      	add	r1, pc, #4	@ (adr r1, 800683c <_printf_i+0x40>)
 8006838:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800683c:	08006895 	.word	0x08006895
 8006840:	080068a9 	.word	0x080068a9
 8006844:	08006825 	.word	0x08006825
 8006848:	08006825 	.word	0x08006825
 800684c:	08006825 	.word	0x08006825
 8006850:	08006825 	.word	0x08006825
 8006854:	080068a9 	.word	0x080068a9
 8006858:	08006825 	.word	0x08006825
 800685c:	08006825 	.word	0x08006825
 8006860:	08006825 	.word	0x08006825
 8006864:	08006825 	.word	0x08006825
 8006868:	080069a9 	.word	0x080069a9
 800686c:	080068d3 	.word	0x080068d3
 8006870:	08006963 	.word	0x08006963
 8006874:	08006825 	.word	0x08006825
 8006878:	08006825 	.word	0x08006825
 800687c:	080069cb 	.word	0x080069cb
 8006880:	08006825 	.word	0x08006825
 8006884:	080068d3 	.word	0x080068d3
 8006888:	08006825 	.word	0x08006825
 800688c:	08006825 	.word	0x08006825
 8006890:	0800696b 	.word	0x0800696b
 8006894:	6833      	ldr	r3, [r6, #0]
 8006896:	1d1a      	adds	r2, r3, #4
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	6032      	str	r2, [r6, #0]
 800689c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80068a0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80068a4:	2301      	movs	r3, #1
 80068a6:	e09d      	b.n	80069e4 <_printf_i+0x1e8>
 80068a8:	6833      	ldr	r3, [r6, #0]
 80068aa:	6820      	ldr	r0, [r4, #0]
 80068ac:	1d19      	adds	r1, r3, #4
 80068ae:	6031      	str	r1, [r6, #0]
 80068b0:	0606      	lsls	r6, r0, #24
 80068b2:	d501      	bpl.n	80068b8 <_printf_i+0xbc>
 80068b4:	681d      	ldr	r5, [r3, #0]
 80068b6:	e003      	b.n	80068c0 <_printf_i+0xc4>
 80068b8:	0645      	lsls	r5, r0, #25
 80068ba:	d5fb      	bpl.n	80068b4 <_printf_i+0xb8>
 80068bc:	f9b3 5000 	ldrsh.w	r5, [r3]
 80068c0:	2d00      	cmp	r5, #0
 80068c2:	da03      	bge.n	80068cc <_printf_i+0xd0>
 80068c4:	232d      	movs	r3, #45	@ 0x2d
 80068c6:	426d      	negs	r5, r5
 80068c8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80068cc:	4859      	ldr	r0, [pc, #356]	@ (8006a34 <_printf_i+0x238>)
 80068ce:	230a      	movs	r3, #10
 80068d0:	e011      	b.n	80068f6 <_printf_i+0xfa>
 80068d2:	6821      	ldr	r1, [r4, #0]
 80068d4:	6833      	ldr	r3, [r6, #0]
 80068d6:	0608      	lsls	r0, r1, #24
 80068d8:	f853 5b04 	ldr.w	r5, [r3], #4
 80068dc:	d402      	bmi.n	80068e4 <_printf_i+0xe8>
 80068de:	0649      	lsls	r1, r1, #25
 80068e0:	bf48      	it	mi
 80068e2:	b2ad      	uxthmi	r5, r5
 80068e4:	2f6f      	cmp	r7, #111	@ 0x6f
 80068e6:	4853      	ldr	r0, [pc, #332]	@ (8006a34 <_printf_i+0x238>)
 80068e8:	6033      	str	r3, [r6, #0]
 80068ea:	bf14      	ite	ne
 80068ec:	230a      	movne	r3, #10
 80068ee:	2308      	moveq	r3, #8
 80068f0:	2100      	movs	r1, #0
 80068f2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80068f6:	6866      	ldr	r6, [r4, #4]
 80068f8:	60a6      	str	r6, [r4, #8]
 80068fa:	2e00      	cmp	r6, #0
 80068fc:	bfa2      	ittt	ge
 80068fe:	6821      	ldrge	r1, [r4, #0]
 8006900:	f021 0104 	bicge.w	r1, r1, #4
 8006904:	6021      	strge	r1, [r4, #0]
 8006906:	b90d      	cbnz	r5, 800690c <_printf_i+0x110>
 8006908:	2e00      	cmp	r6, #0
 800690a:	d04b      	beq.n	80069a4 <_printf_i+0x1a8>
 800690c:	4616      	mov	r6, r2
 800690e:	fbb5 f1f3 	udiv	r1, r5, r3
 8006912:	fb03 5711 	mls	r7, r3, r1, r5
 8006916:	5dc7      	ldrb	r7, [r0, r7]
 8006918:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800691c:	462f      	mov	r7, r5
 800691e:	42bb      	cmp	r3, r7
 8006920:	460d      	mov	r5, r1
 8006922:	d9f4      	bls.n	800690e <_printf_i+0x112>
 8006924:	2b08      	cmp	r3, #8
 8006926:	d10b      	bne.n	8006940 <_printf_i+0x144>
 8006928:	6823      	ldr	r3, [r4, #0]
 800692a:	07df      	lsls	r7, r3, #31
 800692c:	d508      	bpl.n	8006940 <_printf_i+0x144>
 800692e:	6923      	ldr	r3, [r4, #16]
 8006930:	6861      	ldr	r1, [r4, #4]
 8006932:	4299      	cmp	r1, r3
 8006934:	bfde      	ittt	le
 8006936:	2330      	movle	r3, #48	@ 0x30
 8006938:	f806 3c01 	strble.w	r3, [r6, #-1]
 800693c:	f106 36ff 	addle.w	r6, r6, #4294967295
 8006940:	1b92      	subs	r2, r2, r6
 8006942:	6122      	str	r2, [r4, #16]
 8006944:	f8cd a000 	str.w	sl, [sp]
 8006948:	464b      	mov	r3, r9
 800694a:	aa03      	add	r2, sp, #12
 800694c:	4621      	mov	r1, r4
 800694e:	4640      	mov	r0, r8
 8006950:	f7ff fee6 	bl	8006720 <_printf_common>
 8006954:	3001      	adds	r0, #1
 8006956:	d14a      	bne.n	80069ee <_printf_i+0x1f2>
 8006958:	f04f 30ff 	mov.w	r0, #4294967295
 800695c:	b004      	add	sp, #16
 800695e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006962:	6823      	ldr	r3, [r4, #0]
 8006964:	f043 0320 	orr.w	r3, r3, #32
 8006968:	6023      	str	r3, [r4, #0]
 800696a:	4833      	ldr	r0, [pc, #204]	@ (8006a38 <_printf_i+0x23c>)
 800696c:	2778      	movs	r7, #120	@ 0x78
 800696e:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8006972:	6823      	ldr	r3, [r4, #0]
 8006974:	6831      	ldr	r1, [r6, #0]
 8006976:	061f      	lsls	r7, r3, #24
 8006978:	f851 5b04 	ldr.w	r5, [r1], #4
 800697c:	d402      	bmi.n	8006984 <_printf_i+0x188>
 800697e:	065f      	lsls	r7, r3, #25
 8006980:	bf48      	it	mi
 8006982:	b2ad      	uxthmi	r5, r5
 8006984:	6031      	str	r1, [r6, #0]
 8006986:	07d9      	lsls	r1, r3, #31
 8006988:	bf44      	itt	mi
 800698a:	f043 0320 	orrmi.w	r3, r3, #32
 800698e:	6023      	strmi	r3, [r4, #0]
 8006990:	b11d      	cbz	r5, 800699a <_printf_i+0x19e>
 8006992:	2310      	movs	r3, #16
 8006994:	e7ac      	b.n	80068f0 <_printf_i+0xf4>
 8006996:	4827      	ldr	r0, [pc, #156]	@ (8006a34 <_printf_i+0x238>)
 8006998:	e7e9      	b.n	800696e <_printf_i+0x172>
 800699a:	6823      	ldr	r3, [r4, #0]
 800699c:	f023 0320 	bic.w	r3, r3, #32
 80069a0:	6023      	str	r3, [r4, #0]
 80069a2:	e7f6      	b.n	8006992 <_printf_i+0x196>
 80069a4:	4616      	mov	r6, r2
 80069a6:	e7bd      	b.n	8006924 <_printf_i+0x128>
 80069a8:	6833      	ldr	r3, [r6, #0]
 80069aa:	6825      	ldr	r5, [r4, #0]
 80069ac:	6961      	ldr	r1, [r4, #20]
 80069ae:	1d18      	adds	r0, r3, #4
 80069b0:	6030      	str	r0, [r6, #0]
 80069b2:	062e      	lsls	r6, r5, #24
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	d501      	bpl.n	80069bc <_printf_i+0x1c0>
 80069b8:	6019      	str	r1, [r3, #0]
 80069ba:	e002      	b.n	80069c2 <_printf_i+0x1c6>
 80069bc:	0668      	lsls	r0, r5, #25
 80069be:	d5fb      	bpl.n	80069b8 <_printf_i+0x1bc>
 80069c0:	8019      	strh	r1, [r3, #0]
 80069c2:	2300      	movs	r3, #0
 80069c4:	6123      	str	r3, [r4, #16]
 80069c6:	4616      	mov	r6, r2
 80069c8:	e7bc      	b.n	8006944 <_printf_i+0x148>
 80069ca:	6833      	ldr	r3, [r6, #0]
 80069cc:	1d1a      	adds	r2, r3, #4
 80069ce:	6032      	str	r2, [r6, #0]
 80069d0:	681e      	ldr	r6, [r3, #0]
 80069d2:	6862      	ldr	r2, [r4, #4]
 80069d4:	2100      	movs	r1, #0
 80069d6:	4630      	mov	r0, r6
 80069d8:	f7f9 fc2a 	bl	8000230 <memchr>
 80069dc:	b108      	cbz	r0, 80069e2 <_printf_i+0x1e6>
 80069de:	1b80      	subs	r0, r0, r6
 80069e0:	6060      	str	r0, [r4, #4]
 80069e2:	6863      	ldr	r3, [r4, #4]
 80069e4:	6123      	str	r3, [r4, #16]
 80069e6:	2300      	movs	r3, #0
 80069e8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80069ec:	e7aa      	b.n	8006944 <_printf_i+0x148>
 80069ee:	6923      	ldr	r3, [r4, #16]
 80069f0:	4632      	mov	r2, r6
 80069f2:	4649      	mov	r1, r9
 80069f4:	4640      	mov	r0, r8
 80069f6:	47d0      	blx	sl
 80069f8:	3001      	adds	r0, #1
 80069fa:	d0ad      	beq.n	8006958 <_printf_i+0x15c>
 80069fc:	6823      	ldr	r3, [r4, #0]
 80069fe:	079b      	lsls	r3, r3, #30
 8006a00:	d413      	bmi.n	8006a2a <_printf_i+0x22e>
 8006a02:	68e0      	ldr	r0, [r4, #12]
 8006a04:	9b03      	ldr	r3, [sp, #12]
 8006a06:	4298      	cmp	r0, r3
 8006a08:	bfb8      	it	lt
 8006a0a:	4618      	movlt	r0, r3
 8006a0c:	e7a6      	b.n	800695c <_printf_i+0x160>
 8006a0e:	2301      	movs	r3, #1
 8006a10:	4632      	mov	r2, r6
 8006a12:	4649      	mov	r1, r9
 8006a14:	4640      	mov	r0, r8
 8006a16:	47d0      	blx	sl
 8006a18:	3001      	adds	r0, #1
 8006a1a:	d09d      	beq.n	8006958 <_printf_i+0x15c>
 8006a1c:	3501      	adds	r5, #1
 8006a1e:	68e3      	ldr	r3, [r4, #12]
 8006a20:	9903      	ldr	r1, [sp, #12]
 8006a22:	1a5b      	subs	r3, r3, r1
 8006a24:	42ab      	cmp	r3, r5
 8006a26:	dcf2      	bgt.n	8006a0e <_printf_i+0x212>
 8006a28:	e7eb      	b.n	8006a02 <_printf_i+0x206>
 8006a2a:	2500      	movs	r5, #0
 8006a2c:	f104 0619 	add.w	r6, r4, #25
 8006a30:	e7f5      	b.n	8006a1e <_printf_i+0x222>
 8006a32:	bf00      	nop
 8006a34:	0800793e 	.word	0x0800793e
 8006a38:	0800794f 	.word	0x0800794f

08006a3c <_scanf_chars>:
 8006a3c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006a40:	4615      	mov	r5, r2
 8006a42:	688a      	ldr	r2, [r1, #8]
 8006a44:	4680      	mov	r8, r0
 8006a46:	460c      	mov	r4, r1
 8006a48:	b932      	cbnz	r2, 8006a58 <_scanf_chars+0x1c>
 8006a4a:	698a      	ldr	r2, [r1, #24]
 8006a4c:	2a00      	cmp	r2, #0
 8006a4e:	bf14      	ite	ne
 8006a50:	f04f 32ff 	movne.w	r2, #4294967295
 8006a54:	2201      	moveq	r2, #1
 8006a56:	608a      	str	r2, [r1, #8]
 8006a58:	6822      	ldr	r2, [r4, #0]
 8006a5a:	f8df 9090 	ldr.w	r9, [pc, #144]	@ 8006aec <_scanf_chars+0xb0>
 8006a5e:	06d1      	lsls	r1, r2, #27
 8006a60:	bf5f      	itttt	pl
 8006a62:	681a      	ldrpl	r2, [r3, #0]
 8006a64:	1d11      	addpl	r1, r2, #4
 8006a66:	6019      	strpl	r1, [r3, #0]
 8006a68:	6816      	ldrpl	r6, [r2, #0]
 8006a6a:	2700      	movs	r7, #0
 8006a6c:	69a0      	ldr	r0, [r4, #24]
 8006a6e:	b188      	cbz	r0, 8006a94 <_scanf_chars+0x58>
 8006a70:	2801      	cmp	r0, #1
 8006a72:	d107      	bne.n	8006a84 <_scanf_chars+0x48>
 8006a74:	682b      	ldr	r3, [r5, #0]
 8006a76:	781a      	ldrb	r2, [r3, #0]
 8006a78:	6963      	ldr	r3, [r4, #20]
 8006a7a:	5c9b      	ldrb	r3, [r3, r2]
 8006a7c:	b953      	cbnz	r3, 8006a94 <_scanf_chars+0x58>
 8006a7e:	2f00      	cmp	r7, #0
 8006a80:	d031      	beq.n	8006ae6 <_scanf_chars+0xaa>
 8006a82:	e022      	b.n	8006aca <_scanf_chars+0x8e>
 8006a84:	2802      	cmp	r0, #2
 8006a86:	d120      	bne.n	8006aca <_scanf_chars+0x8e>
 8006a88:	682b      	ldr	r3, [r5, #0]
 8006a8a:	781b      	ldrb	r3, [r3, #0]
 8006a8c:	f819 3003 	ldrb.w	r3, [r9, r3]
 8006a90:	071b      	lsls	r3, r3, #28
 8006a92:	d41a      	bmi.n	8006aca <_scanf_chars+0x8e>
 8006a94:	6823      	ldr	r3, [r4, #0]
 8006a96:	06da      	lsls	r2, r3, #27
 8006a98:	bf5e      	ittt	pl
 8006a9a:	682b      	ldrpl	r3, [r5, #0]
 8006a9c:	781b      	ldrbpl	r3, [r3, #0]
 8006a9e:	f806 3b01 	strbpl.w	r3, [r6], #1
 8006aa2:	682a      	ldr	r2, [r5, #0]
 8006aa4:	686b      	ldr	r3, [r5, #4]
 8006aa6:	3201      	adds	r2, #1
 8006aa8:	602a      	str	r2, [r5, #0]
 8006aaa:	68a2      	ldr	r2, [r4, #8]
 8006aac:	3b01      	subs	r3, #1
 8006aae:	3a01      	subs	r2, #1
 8006ab0:	606b      	str	r3, [r5, #4]
 8006ab2:	3701      	adds	r7, #1
 8006ab4:	60a2      	str	r2, [r4, #8]
 8006ab6:	b142      	cbz	r2, 8006aca <_scanf_chars+0x8e>
 8006ab8:	2b00      	cmp	r3, #0
 8006aba:	dcd7      	bgt.n	8006a6c <_scanf_chars+0x30>
 8006abc:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8006ac0:	4629      	mov	r1, r5
 8006ac2:	4640      	mov	r0, r8
 8006ac4:	4798      	blx	r3
 8006ac6:	2800      	cmp	r0, #0
 8006ac8:	d0d0      	beq.n	8006a6c <_scanf_chars+0x30>
 8006aca:	6823      	ldr	r3, [r4, #0]
 8006acc:	f013 0310 	ands.w	r3, r3, #16
 8006ad0:	d105      	bne.n	8006ade <_scanf_chars+0xa2>
 8006ad2:	68e2      	ldr	r2, [r4, #12]
 8006ad4:	3201      	adds	r2, #1
 8006ad6:	60e2      	str	r2, [r4, #12]
 8006ad8:	69a2      	ldr	r2, [r4, #24]
 8006ada:	b102      	cbz	r2, 8006ade <_scanf_chars+0xa2>
 8006adc:	7033      	strb	r3, [r6, #0]
 8006ade:	6923      	ldr	r3, [r4, #16]
 8006ae0:	443b      	add	r3, r7
 8006ae2:	6123      	str	r3, [r4, #16]
 8006ae4:	2000      	movs	r0, #0
 8006ae6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006aea:	bf00      	nop
 8006aec:	0800797c 	.word	0x0800797c

08006af0 <_scanf_i>:
 8006af0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006af4:	4698      	mov	r8, r3
 8006af6:	4b74      	ldr	r3, [pc, #464]	@ (8006cc8 <_scanf_i+0x1d8>)
 8006af8:	460c      	mov	r4, r1
 8006afa:	4682      	mov	sl, r0
 8006afc:	4616      	mov	r6, r2
 8006afe:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8006b02:	b087      	sub	sp, #28
 8006b04:	ab03      	add	r3, sp, #12
 8006b06:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8006b0a:	4b70      	ldr	r3, [pc, #448]	@ (8006ccc <_scanf_i+0x1dc>)
 8006b0c:	69a1      	ldr	r1, [r4, #24]
 8006b0e:	4a70      	ldr	r2, [pc, #448]	@ (8006cd0 <_scanf_i+0x1e0>)
 8006b10:	2903      	cmp	r1, #3
 8006b12:	bf08      	it	eq
 8006b14:	461a      	moveq	r2, r3
 8006b16:	68a3      	ldr	r3, [r4, #8]
 8006b18:	9201      	str	r2, [sp, #4]
 8006b1a:	1e5a      	subs	r2, r3, #1
 8006b1c:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 8006b20:	bf88      	it	hi
 8006b22:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 8006b26:	4627      	mov	r7, r4
 8006b28:	bf82      	ittt	hi
 8006b2a:	eb03 0905 	addhi.w	r9, r3, r5
 8006b2e:	f240 135d 	movwhi	r3, #349	@ 0x15d
 8006b32:	60a3      	strhi	r3, [r4, #8]
 8006b34:	f857 3b1c 	ldr.w	r3, [r7], #28
 8006b38:	f443 6350 	orr.w	r3, r3, #3328	@ 0xd00
 8006b3c:	bf98      	it	ls
 8006b3e:	f04f 0900 	movls.w	r9, #0
 8006b42:	6023      	str	r3, [r4, #0]
 8006b44:	463d      	mov	r5, r7
 8006b46:	f04f 0b00 	mov.w	fp, #0
 8006b4a:	6831      	ldr	r1, [r6, #0]
 8006b4c:	ab03      	add	r3, sp, #12
 8006b4e:	7809      	ldrb	r1, [r1, #0]
 8006b50:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 8006b54:	2202      	movs	r2, #2
 8006b56:	f7f9 fb6b 	bl	8000230 <memchr>
 8006b5a:	b328      	cbz	r0, 8006ba8 <_scanf_i+0xb8>
 8006b5c:	f1bb 0f01 	cmp.w	fp, #1
 8006b60:	d159      	bne.n	8006c16 <_scanf_i+0x126>
 8006b62:	6862      	ldr	r2, [r4, #4]
 8006b64:	b92a      	cbnz	r2, 8006b72 <_scanf_i+0x82>
 8006b66:	6822      	ldr	r2, [r4, #0]
 8006b68:	2108      	movs	r1, #8
 8006b6a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006b6e:	6061      	str	r1, [r4, #4]
 8006b70:	6022      	str	r2, [r4, #0]
 8006b72:	6822      	ldr	r2, [r4, #0]
 8006b74:	f422 62a0 	bic.w	r2, r2, #1280	@ 0x500
 8006b78:	6022      	str	r2, [r4, #0]
 8006b7a:	68a2      	ldr	r2, [r4, #8]
 8006b7c:	1e51      	subs	r1, r2, #1
 8006b7e:	60a1      	str	r1, [r4, #8]
 8006b80:	b192      	cbz	r2, 8006ba8 <_scanf_i+0xb8>
 8006b82:	6832      	ldr	r2, [r6, #0]
 8006b84:	1c51      	adds	r1, r2, #1
 8006b86:	6031      	str	r1, [r6, #0]
 8006b88:	7812      	ldrb	r2, [r2, #0]
 8006b8a:	f805 2b01 	strb.w	r2, [r5], #1
 8006b8e:	6872      	ldr	r2, [r6, #4]
 8006b90:	3a01      	subs	r2, #1
 8006b92:	2a00      	cmp	r2, #0
 8006b94:	6072      	str	r2, [r6, #4]
 8006b96:	dc07      	bgt.n	8006ba8 <_scanf_i+0xb8>
 8006b98:	f8d4 2180 	ldr.w	r2, [r4, #384]	@ 0x180
 8006b9c:	4631      	mov	r1, r6
 8006b9e:	4650      	mov	r0, sl
 8006ba0:	4790      	blx	r2
 8006ba2:	2800      	cmp	r0, #0
 8006ba4:	f040 8085 	bne.w	8006cb2 <_scanf_i+0x1c2>
 8006ba8:	f10b 0b01 	add.w	fp, fp, #1
 8006bac:	f1bb 0f03 	cmp.w	fp, #3
 8006bb0:	d1cb      	bne.n	8006b4a <_scanf_i+0x5a>
 8006bb2:	6863      	ldr	r3, [r4, #4]
 8006bb4:	b90b      	cbnz	r3, 8006bba <_scanf_i+0xca>
 8006bb6:	230a      	movs	r3, #10
 8006bb8:	6063      	str	r3, [r4, #4]
 8006bba:	6863      	ldr	r3, [r4, #4]
 8006bbc:	4945      	ldr	r1, [pc, #276]	@ (8006cd4 <_scanf_i+0x1e4>)
 8006bbe:	6960      	ldr	r0, [r4, #20]
 8006bc0:	1ac9      	subs	r1, r1, r3
 8006bc2:	f000 f947 	bl	8006e54 <__sccl>
 8006bc6:	f04f 0b00 	mov.w	fp, #0
 8006bca:	68a3      	ldr	r3, [r4, #8]
 8006bcc:	6822      	ldr	r2, [r4, #0]
 8006bce:	2b00      	cmp	r3, #0
 8006bd0:	d03d      	beq.n	8006c4e <_scanf_i+0x15e>
 8006bd2:	6831      	ldr	r1, [r6, #0]
 8006bd4:	6960      	ldr	r0, [r4, #20]
 8006bd6:	f891 c000 	ldrb.w	ip, [r1]
 8006bda:	f810 000c 	ldrb.w	r0, [r0, ip]
 8006bde:	2800      	cmp	r0, #0
 8006be0:	d035      	beq.n	8006c4e <_scanf_i+0x15e>
 8006be2:	f1bc 0f30 	cmp.w	ip, #48	@ 0x30
 8006be6:	d124      	bne.n	8006c32 <_scanf_i+0x142>
 8006be8:	0510      	lsls	r0, r2, #20
 8006bea:	d522      	bpl.n	8006c32 <_scanf_i+0x142>
 8006bec:	f10b 0b01 	add.w	fp, fp, #1
 8006bf0:	f1b9 0f00 	cmp.w	r9, #0
 8006bf4:	d003      	beq.n	8006bfe <_scanf_i+0x10e>
 8006bf6:	3301      	adds	r3, #1
 8006bf8:	f109 39ff 	add.w	r9, r9, #4294967295
 8006bfc:	60a3      	str	r3, [r4, #8]
 8006bfe:	6873      	ldr	r3, [r6, #4]
 8006c00:	3b01      	subs	r3, #1
 8006c02:	2b00      	cmp	r3, #0
 8006c04:	6073      	str	r3, [r6, #4]
 8006c06:	dd1b      	ble.n	8006c40 <_scanf_i+0x150>
 8006c08:	6833      	ldr	r3, [r6, #0]
 8006c0a:	3301      	adds	r3, #1
 8006c0c:	6033      	str	r3, [r6, #0]
 8006c0e:	68a3      	ldr	r3, [r4, #8]
 8006c10:	3b01      	subs	r3, #1
 8006c12:	60a3      	str	r3, [r4, #8]
 8006c14:	e7d9      	b.n	8006bca <_scanf_i+0xda>
 8006c16:	f1bb 0f02 	cmp.w	fp, #2
 8006c1a:	d1ae      	bne.n	8006b7a <_scanf_i+0x8a>
 8006c1c:	6822      	ldr	r2, [r4, #0]
 8006c1e:	f402 61c0 	and.w	r1, r2, #1536	@ 0x600
 8006c22:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 8006c26:	d1bf      	bne.n	8006ba8 <_scanf_i+0xb8>
 8006c28:	2110      	movs	r1, #16
 8006c2a:	6061      	str	r1, [r4, #4]
 8006c2c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8006c30:	e7a2      	b.n	8006b78 <_scanf_i+0x88>
 8006c32:	f422 6210 	bic.w	r2, r2, #2304	@ 0x900
 8006c36:	6022      	str	r2, [r4, #0]
 8006c38:	780b      	ldrb	r3, [r1, #0]
 8006c3a:	f805 3b01 	strb.w	r3, [r5], #1
 8006c3e:	e7de      	b.n	8006bfe <_scanf_i+0x10e>
 8006c40:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8006c44:	4631      	mov	r1, r6
 8006c46:	4650      	mov	r0, sl
 8006c48:	4798      	blx	r3
 8006c4a:	2800      	cmp	r0, #0
 8006c4c:	d0df      	beq.n	8006c0e <_scanf_i+0x11e>
 8006c4e:	6823      	ldr	r3, [r4, #0]
 8006c50:	05d9      	lsls	r1, r3, #23
 8006c52:	d50d      	bpl.n	8006c70 <_scanf_i+0x180>
 8006c54:	42bd      	cmp	r5, r7
 8006c56:	d909      	bls.n	8006c6c <_scanf_i+0x17c>
 8006c58:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8006c5c:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8006c60:	4632      	mov	r2, r6
 8006c62:	4650      	mov	r0, sl
 8006c64:	4798      	blx	r3
 8006c66:	f105 39ff 	add.w	r9, r5, #4294967295
 8006c6a:	464d      	mov	r5, r9
 8006c6c:	42bd      	cmp	r5, r7
 8006c6e:	d028      	beq.n	8006cc2 <_scanf_i+0x1d2>
 8006c70:	6822      	ldr	r2, [r4, #0]
 8006c72:	f012 0210 	ands.w	r2, r2, #16
 8006c76:	d113      	bne.n	8006ca0 <_scanf_i+0x1b0>
 8006c78:	702a      	strb	r2, [r5, #0]
 8006c7a:	6863      	ldr	r3, [r4, #4]
 8006c7c:	9e01      	ldr	r6, [sp, #4]
 8006c7e:	4639      	mov	r1, r7
 8006c80:	4650      	mov	r0, sl
 8006c82:	47b0      	blx	r6
 8006c84:	f8d8 3000 	ldr.w	r3, [r8]
 8006c88:	6821      	ldr	r1, [r4, #0]
 8006c8a:	1d1a      	adds	r2, r3, #4
 8006c8c:	f8c8 2000 	str.w	r2, [r8]
 8006c90:	f011 0f20 	tst.w	r1, #32
 8006c94:	681b      	ldr	r3, [r3, #0]
 8006c96:	d00f      	beq.n	8006cb8 <_scanf_i+0x1c8>
 8006c98:	6018      	str	r0, [r3, #0]
 8006c9a:	68e3      	ldr	r3, [r4, #12]
 8006c9c:	3301      	adds	r3, #1
 8006c9e:	60e3      	str	r3, [r4, #12]
 8006ca0:	6923      	ldr	r3, [r4, #16]
 8006ca2:	1bed      	subs	r5, r5, r7
 8006ca4:	445d      	add	r5, fp
 8006ca6:	442b      	add	r3, r5
 8006ca8:	6123      	str	r3, [r4, #16]
 8006caa:	2000      	movs	r0, #0
 8006cac:	b007      	add	sp, #28
 8006cae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006cb2:	f04f 0b00 	mov.w	fp, #0
 8006cb6:	e7ca      	b.n	8006c4e <_scanf_i+0x15e>
 8006cb8:	07ca      	lsls	r2, r1, #31
 8006cba:	bf4c      	ite	mi
 8006cbc:	8018      	strhmi	r0, [r3, #0]
 8006cbe:	6018      	strpl	r0, [r3, #0]
 8006cc0:	e7eb      	b.n	8006c9a <_scanf_i+0x1aa>
 8006cc2:	2001      	movs	r0, #1
 8006cc4:	e7f2      	b.n	8006cac <_scanf_i+0x1bc>
 8006cc6:	bf00      	nop
 8006cc8:	08007830 	.word	0x08007830
 8006ccc:	0800710d 	.word	0x0800710d
 8006cd0:	080071ed 	.word	0x080071ed
 8006cd4:	08007970 	.word	0x08007970

08006cd8 <__sflush_r>:
 8006cd8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8006cdc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006ce0:	0716      	lsls	r6, r2, #28
 8006ce2:	4605      	mov	r5, r0
 8006ce4:	460c      	mov	r4, r1
 8006ce6:	d454      	bmi.n	8006d92 <__sflush_r+0xba>
 8006ce8:	684b      	ldr	r3, [r1, #4]
 8006cea:	2b00      	cmp	r3, #0
 8006cec:	dc02      	bgt.n	8006cf4 <__sflush_r+0x1c>
 8006cee:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8006cf0:	2b00      	cmp	r3, #0
 8006cf2:	dd48      	ble.n	8006d86 <__sflush_r+0xae>
 8006cf4:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8006cf6:	2e00      	cmp	r6, #0
 8006cf8:	d045      	beq.n	8006d86 <__sflush_r+0xae>
 8006cfa:	2300      	movs	r3, #0
 8006cfc:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8006d00:	682f      	ldr	r7, [r5, #0]
 8006d02:	6a21      	ldr	r1, [r4, #32]
 8006d04:	602b      	str	r3, [r5, #0]
 8006d06:	d030      	beq.n	8006d6a <__sflush_r+0x92>
 8006d08:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8006d0a:	89a3      	ldrh	r3, [r4, #12]
 8006d0c:	0759      	lsls	r1, r3, #29
 8006d0e:	d505      	bpl.n	8006d1c <__sflush_r+0x44>
 8006d10:	6863      	ldr	r3, [r4, #4]
 8006d12:	1ad2      	subs	r2, r2, r3
 8006d14:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8006d16:	b10b      	cbz	r3, 8006d1c <__sflush_r+0x44>
 8006d18:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8006d1a:	1ad2      	subs	r2, r2, r3
 8006d1c:	2300      	movs	r3, #0
 8006d1e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8006d20:	6a21      	ldr	r1, [r4, #32]
 8006d22:	4628      	mov	r0, r5
 8006d24:	47b0      	blx	r6
 8006d26:	1c43      	adds	r3, r0, #1
 8006d28:	89a3      	ldrh	r3, [r4, #12]
 8006d2a:	d106      	bne.n	8006d3a <__sflush_r+0x62>
 8006d2c:	6829      	ldr	r1, [r5, #0]
 8006d2e:	291d      	cmp	r1, #29
 8006d30:	d82b      	bhi.n	8006d8a <__sflush_r+0xb2>
 8006d32:	4a2a      	ldr	r2, [pc, #168]	@ (8006ddc <__sflush_r+0x104>)
 8006d34:	410a      	asrs	r2, r1
 8006d36:	07d6      	lsls	r6, r2, #31
 8006d38:	d427      	bmi.n	8006d8a <__sflush_r+0xb2>
 8006d3a:	2200      	movs	r2, #0
 8006d3c:	6062      	str	r2, [r4, #4]
 8006d3e:	04d9      	lsls	r1, r3, #19
 8006d40:	6922      	ldr	r2, [r4, #16]
 8006d42:	6022      	str	r2, [r4, #0]
 8006d44:	d504      	bpl.n	8006d50 <__sflush_r+0x78>
 8006d46:	1c42      	adds	r2, r0, #1
 8006d48:	d101      	bne.n	8006d4e <__sflush_r+0x76>
 8006d4a:	682b      	ldr	r3, [r5, #0]
 8006d4c:	b903      	cbnz	r3, 8006d50 <__sflush_r+0x78>
 8006d4e:	6560      	str	r0, [r4, #84]	@ 0x54
 8006d50:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8006d52:	602f      	str	r7, [r5, #0]
 8006d54:	b1b9      	cbz	r1, 8006d86 <__sflush_r+0xae>
 8006d56:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8006d5a:	4299      	cmp	r1, r3
 8006d5c:	d002      	beq.n	8006d64 <__sflush_r+0x8c>
 8006d5e:	4628      	mov	r0, r5
 8006d60:	f7ff f8ba 	bl	8005ed8 <_free_r>
 8006d64:	2300      	movs	r3, #0
 8006d66:	6363      	str	r3, [r4, #52]	@ 0x34
 8006d68:	e00d      	b.n	8006d86 <__sflush_r+0xae>
 8006d6a:	2301      	movs	r3, #1
 8006d6c:	4628      	mov	r0, r5
 8006d6e:	47b0      	blx	r6
 8006d70:	4602      	mov	r2, r0
 8006d72:	1c50      	adds	r0, r2, #1
 8006d74:	d1c9      	bne.n	8006d0a <__sflush_r+0x32>
 8006d76:	682b      	ldr	r3, [r5, #0]
 8006d78:	2b00      	cmp	r3, #0
 8006d7a:	d0c6      	beq.n	8006d0a <__sflush_r+0x32>
 8006d7c:	2b1d      	cmp	r3, #29
 8006d7e:	d001      	beq.n	8006d84 <__sflush_r+0xac>
 8006d80:	2b16      	cmp	r3, #22
 8006d82:	d11e      	bne.n	8006dc2 <__sflush_r+0xea>
 8006d84:	602f      	str	r7, [r5, #0]
 8006d86:	2000      	movs	r0, #0
 8006d88:	e022      	b.n	8006dd0 <__sflush_r+0xf8>
 8006d8a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006d8e:	b21b      	sxth	r3, r3
 8006d90:	e01b      	b.n	8006dca <__sflush_r+0xf2>
 8006d92:	690f      	ldr	r7, [r1, #16]
 8006d94:	2f00      	cmp	r7, #0
 8006d96:	d0f6      	beq.n	8006d86 <__sflush_r+0xae>
 8006d98:	0793      	lsls	r3, r2, #30
 8006d9a:	680e      	ldr	r6, [r1, #0]
 8006d9c:	bf08      	it	eq
 8006d9e:	694b      	ldreq	r3, [r1, #20]
 8006da0:	600f      	str	r7, [r1, #0]
 8006da2:	bf18      	it	ne
 8006da4:	2300      	movne	r3, #0
 8006da6:	eba6 0807 	sub.w	r8, r6, r7
 8006daa:	608b      	str	r3, [r1, #8]
 8006dac:	f1b8 0f00 	cmp.w	r8, #0
 8006db0:	dde9      	ble.n	8006d86 <__sflush_r+0xae>
 8006db2:	6a21      	ldr	r1, [r4, #32]
 8006db4:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8006db6:	4643      	mov	r3, r8
 8006db8:	463a      	mov	r2, r7
 8006dba:	4628      	mov	r0, r5
 8006dbc:	47b0      	blx	r6
 8006dbe:	2800      	cmp	r0, #0
 8006dc0:	dc08      	bgt.n	8006dd4 <__sflush_r+0xfc>
 8006dc2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006dc6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006dca:	81a3      	strh	r3, [r4, #12]
 8006dcc:	f04f 30ff 	mov.w	r0, #4294967295
 8006dd0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006dd4:	4407      	add	r7, r0
 8006dd6:	eba8 0800 	sub.w	r8, r8, r0
 8006dda:	e7e7      	b.n	8006dac <__sflush_r+0xd4>
 8006ddc:	dfbffffe 	.word	0xdfbffffe

08006de0 <_fflush_r>:
 8006de0:	b538      	push	{r3, r4, r5, lr}
 8006de2:	690b      	ldr	r3, [r1, #16]
 8006de4:	4605      	mov	r5, r0
 8006de6:	460c      	mov	r4, r1
 8006de8:	b913      	cbnz	r3, 8006df0 <_fflush_r+0x10>
 8006dea:	2500      	movs	r5, #0
 8006dec:	4628      	mov	r0, r5
 8006dee:	bd38      	pop	{r3, r4, r5, pc}
 8006df0:	b118      	cbz	r0, 8006dfa <_fflush_r+0x1a>
 8006df2:	6a03      	ldr	r3, [r0, #32]
 8006df4:	b90b      	cbnz	r3, 8006dfa <_fflush_r+0x1a>
 8006df6:	f7fe fe7d 	bl	8005af4 <__sinit>
 8006dfa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006dfe:	2b00      	cmp	r3, #0
 8006e00:	d0f3      	beq.n	8006dea <_fflush_r+0xa>
 8006e02:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8006e04:	07d0      	lsls	r0, r2, #31
 8006e06:	d404      	bmi.n	8006e12 <_fflush_r+0x32>
 8006e08:	0599      	lsls	r1, r3, #22
 8006e0a:	d402      	bmi.n	8006e12 <_fflush_r+0x32>
 8006e0c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006e0e:	f7ff f842 	bl	8005e96 <__retarget_lock_acquire_recursive>
 8006e12:	4628      	mov	r0, r5
 8006e14:	4621      	mov	r1, r4
 8006e16:	f7ff ff5f 	bl	8006cd8 <__sflush_r>
 8006e1a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8006e1c:	07da      	lsls	r2, r3, #31
 8006e1e:	4605      	mov	r5, r0
 8006e20:	d4e4      	bmi.n	8006dec <_fflush_r+0xc>
 8006e22:	89a3      	ldrh	r3, [r4, #12]
 8006e24:	059b      	lsls	r3, r3, #22
 8006e26:	d4e1      	bmi.n	8006dec <_fflush_r+0xc>
 8006e28:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006e2a:	f7ff f835 	bl	8005e98 <__retarget_lock_release_recursive>
 8006e2e:	e7dd      	b.n	8006dec <_fflush_r+0xc>

08006e30 <fiprintf>:
 8006e30:	b40e      	push	{r1, r2, r3}
 8006e32:	b503      	push	{r0, r1, lr}
 8006e34:	4601      	mov	r1, r0
 8006e36:	ab03      	add	r3, sp, #12
 8006e38:	4805      	ldr	r0, [pc, #20]	@ (8006e50 <fiprintf+0x20>)
 8006e3a:	f853 2b04 	ldr.w	r2, [r3], #4
 8006e3e:	6800      	ldr	r0, [r0, #0]
 8006e40:	9301      	str	r3, [sp, #4]
 8006e42:	f000 f9ff 	bl	8007244 <_vfiprintf_r>
 8006e46:	b002      	add	sp, #8
 8006e48:	f85d eb04 	ldr.w	lr, [sp], #4
 8006e4c:	b003      	add	sp, #12
 8006e4e:	4770      	bx	lr
 8006e50:	2000002c 	.word	0x2000002c

08006e54 <__sccl>:
 8006e54:	b570      	push	{r4, r5, r6, lr}
 8006e56:	780b      	ldrb	r3, [r1, #0]
 8006e58:	4604      	mov	r4, r0
 8006e5a:	2b5e      	cmp	r3, #94	@ 0x5e
 8006e5c:	bf0b      	itete	eq
 8006e5e:	784b      	ldrbeq	r3, [r1, #1]
 8006e60:	1c4a      	addne	r2, r1, #1
 8006e62:	1c8a      	addeq	r2, r1, #2
 8006e64:	2100      	movne	r1, #0
 8006e66:	bf08      	it	eq
 8006e68:	2101      	moveq	r1, #1
 8006e6a:	3801      	subs	r0, #1
 8006e6c:	f104 05ff 	add.w	r5, r4, #255	@ 0xff
 8006e70:	f800 1f01 	strb.w	r1, [r0, #1]!
 8006e74:	42a8      	cmp	r0, r5
 8006e76:	d1fb      	bne.n	8006e70 <__sccl+0x1c>
 8006e78:	b90b      	cbnz	r3, 8006e7e <__sccl+0x2a>
 8006e7a:	1e50      	subs	r0, r2, #1
 8006e7c:	bd70      	pop	{r4, r5, r6, pc}
 8006e7e:	f081 0101 	eor.w	r1, r1, #1
 8006e82:	54e1      	strb	r1, [r4, r3]
 8006e84:	4610      	mov	r0, r2
 8006e86:	4602      	mov	r2, r0
 8006e88:	f812 5b01 	ldrb.w	r5, [r2], #1
 8006e8c:	2d2d      	cmp	r5, #45	@ 0x2d
 8006e8e:	d005      	beq.n	8006e9c <__sccl+0x48>
 8006e90:	2d5d      	cmp	r5, #93	@ 0x5d
 8006e92:	d016      	beq.n	8006ec2 <__sccl+0x6e>
 8006e94:	2d00      	cmp	r5, #0
 8006e96:	d0f1      	beq.n	8006e7c <__sccl+0x28>
 8006e98:	462b      	mov	r3, r5
 8006e9a:	e7f2      	b.n	8006e82 <__sccl+0x2e>
 8006e9c:	7846      	ldrb	r6, [r0, #1]
 8006e9e:	2e5d      	cmp	r6, #93	@ 0x5d
 8006ea0:	d0fa      	beq.n	8006e98 <__sccl+0x44>
 8006ea2:	42b3      	cmp	r3, r6
 8006ea4:	dcf8      	bgt.n	8006e98 <__sccl+0x44>
 8006ea6:	3002      	adds	r0, #2
 8006ea8:	461a      	mov	r2, r3
 8006eaa:	3201      	adds	r2, #1
 8006eac:	4296      	cmp	r6, r2
 8006eae:	54a1      	strb	r1, [r4, r2]
 8006eb0:	dcfb      	bgt.n	8006eaa <__sccl+0x56>
 8006eb2:	1af2      	subs	r2, r6, r3
 8006eb4:	3a01      	subs	r2, #1
 8006eb6:	1c5d      	adds	r5, r3, #1
 8006eb8:	42b3      	cmp	r3, r6
 8006eba:	bfa8      	it	ge
 8006ebc:	2200      	movge	r2, #0
 8006ebe:	18ab      	adds	r3, r5, r2
 8006ec0:	e7e1      	b.n	8006e86 <__sccl+0x32>
 8006ec2:	4610      	mov	r0, r2
 8006ec4:	e7da      	b.n	8006e7c <__sccl+0x28>

08006ec6 <__submore>:
 8006ec6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006eca:	460c      	mov	r4, r1
 8006ecc:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 8006ece:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8006ed2:	4299      	cmp	r1, r3
 8006ed4:	d11d      	bne.n	8006f12 <__submore+0x4c>
 8006ed6:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8006eda:	f7ff f871 	bl	8005fc0 <_malloc_r>
 8006ede:	b918      	cbnz	r0, 8006ee8 <__submore+0x22>
 8006ee0:	f04f 30ff 	mov.w	r0, #4294967295
 8006ee4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006ee8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8006eec:	63a3      	str	r3, [r4, #56]	@ 0x38
 8006eee:	f894 3046 	ldrb.w	r3, [r4, #70]	@ 0x46
 8006ef2:	6360      	str	r0, [r4, #52]	@ 0x34
 8006ef4:	f880 33ff 	strb.w	r3, [r0, #1023]	@ 0x3ff
 8006ef8:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 8006efc:	f880 33fe 	strb.w	r3, [r0, #1022]	@ 0x3fe
 8006f00:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 8006f04:	f880 33fd 	strb.w	r3, [r0, #1021]	@ 0x3fd
 8006f08:	f200 30fd 	addw	r0, r0, #1021	@ 0x3fd
 8006f0c:	6020      	str	r0, [r4, #0]
 8006f0e:	2000      	movs	r0, #0
 8006f10:	e7e8      	b.n	8006ee4 <__submore+0x1e>
 8006f12:	6ba6      	ldr	r6, [r4, #56]	@ 0x38
 8006f14:	0077      	lsls	r7, r6, #1
 8006f16:	463a      	mov	r2, r7
 8006f18:	f000 f84f 	bl	8006fba <_realloc_r>
 8006f1c:	4605      	mov	r5, r0
 8006f1e:	2800      	cmp	r0, #0
 8006f20:	d0de      	beq.n	8006ee0 <__submore+0x1a>
 8006f22:	eb00 0806 	add.w	r8, r0, r6
 8006f26:	4601      	mov	r1, r0
 8006f28:	4632      	mov	r2, r6
 8006f2a:	4640      	mov	r0, r8
 8006f2c:	f000 f830 	bl	8006f90 <memcpy>
 8006f30:	e9c4 570d 	strd	r5, r7, [r4, #52]	@ 0x34
 8006f34:	f8c4 8000 	str.w	r8, [r4]
 8006f38:	e7e9      	b.n	8006f0e <__submore+0x48>

08006f3a <memmove>:
 8006f3a:	4288      	cmp	r0, r1
 8006f3c:	b510      	push	{r4, lr}
 8006f3e:	eb01 0402 	add.w	r4, r1, r2
 8006f42:	d902      	bls.n	8006f4a <memmove+0x10>
 8006f44:	4284      	cmp	r4, r0
 8006f46:	4623      	mov	r3, r4
 8006f48:	d807      	bhi.n	8006f5a <memmove+0x20>
 8006f4a:	1e43      	subs	r3, r0, #1
 8006f4c:	42a1      	cmp	r1, r4
 8006f4e:	d008      	beq.n	8006f62 <memmove+0x28>
 8006f50:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006f54:	f803 2f01 	strb.w	r2, [r3, #1]!
 8006f58:	e7f8      	b.n	8006f4c <memmove+0x12>
 8006f5a:	4402      	add	r2, r0
 8006f5c:	4601      	mov	r1, r0
 8006f5e:	428a      	cmp	r2, r1
 8006f60:	d100      	bne.n	8006f64 <memmove+0x2a>
 8006f62:	bd10      	pop	{r4, pc}
 8006f64:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006f68:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8006f6c:	e7f7      	b.n	8006f5e <memmove+0x24>
	...

08006f70 <_sbrk_r>:
 8006f70:	b538      	push	{r3, r4, r5, lr}
 8006f72:	4d06      	ldr	r5, [pc, #24]	@ (8006f8c <_sbrk_r+0x1c>)
 8006f74:	2300      	movs	r3, #0
 8006f76:	4604      	mov	r4, r0
 8006f78:	4608      	mov	r0, r1
 8006f7a:	602b      	str	r3, [r5, #0]
 8006f7c:	f7fa f922 	bl	80011c4 <_sbrk>
 8006f80:	1c43      	adds	r3, r0, #1
 8006f82:	d102      	bne.n	8006f8a <_sbrk_r+0x1a>
 8006f84:	682b      	ldr	r3, [r5, #0]
 8006f86:	b103      	cbz	r3, 8006f8a <_sbrk_r+0x1a>
 8006f88:	6023      	str	r3, [r4, #0]
 8006f8a:	bd38      	pop	{r3, r4, r5, pc}
 8006f8c:	20000534 	.word	0x20000534

08006f90 <memcpy>:
 8006f90:	440a      	add	r2, r1
 8006f92:	4291      	cmp	r1, r2
 8006f94:	f100 33ff 	add.w	r3, r0, #4294967295
 8006f98:	d100      	bne.n	8006f9c <memcpy+0xc>
 8006f9a:	4770      	bx	lr
 8006f9c:	b510      	push	{r4, lr}
 8006f9e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006fa2:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006fa6:	4291      	cmp	r1, r2
 8006fa8:	d1f9      	bne.n	8006f9e <memcpy+0xe>
 8006faa:	bd10      	pop	{r4, pc}

08006fac <abort>:
 8006fac:	b508      	push	{r3, lr}
 8006fae:	2006      	movs	r0, #6
 8006fb0:	f000 fb1c 	bl	80075ec <raise>
 8006fb4:	2001      	movs	r0, #1
 8006fb6:	f7fa f88c 	bl	80010d2 <_exit>

08006fba <_realloc_r>:
 8006fba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006fbe:	4680      	mov	r8, r0
 8006fc0:	4615      	mov	r5, r2
 8006fc2:	460c      	mov	r4, r1
 8006fc4:	b921      	cbnz	r1, 8006fd0 <_realloc_r+0x16>
 8006fc6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006fca:	4611      	mov	r1, r2
 8006fcc:	f7fe bff8 	b.w	8005fc0 <_malloc_r>
 8006fd0:	b92a      	cbnz	r2, 8006fde <_realloc_r+0x24>
 8006fd2:	f7fe ff81 	bl	8005ed8 <_free_r>
 8006fd6:	2400      	movs	r4, #0
 8006fd8:	4620      	mov	r0, r4
 8006fda:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006fde:	f000 fb21 	bl	8007624 <_malloc_usable_size_r>
 8006fe2:	4285      	cmp	r5, r0
 8006fe4:	4606      	mov	r6, r0
 8006fe6:	d802      	bhi.n	8006fee <_realloc_r+0x34>
 8006fe8:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8006fec:	d8f4      	bhi.n	8006fd8 <_realloc_r+0x1e>
 8006fee:	4629      	mov	r1, r5
 8006ff0:	4640      	mov	r0, r8
 8006ff2:	f7fe ffe5 	bl	8005fc0 <_malloc_r>
 8006ff6:	4607      	mov	r7, r0
 8006ff8:	2800      	cmp	r0, #0
 8006ffa:	d0ec      	beq.n	8006fd6 <_realloc_r+0x1c>
 8006ffc:	42b5      	cmp	r5, r6
 8006ffe:	462a      	mov	r2, r5
 8007000:	4621      	mov	r1, r4
 8007002:	bf28      	it	cs
 8007004:	4632      	movcs	r2, r6
 8007006:	f7ff ffc3 	bl	8006f90 <memcpy>
 800700a:	4621      	mov	r1, r4
 800700c:	4640      	mov	r0, r8
 800700e:	f7fe ff63 	bl	8005ed8 <_free_r>
 8007012:	463c      	mov	r4, r7
 8007014:	e7e0      	b.n	8006fd8 <_realloc_r+0x1e>
	...

08007018 <_strtol_l.constprop.0>:
 8007018:	2b24      	cmp	r3, #36	@ 0x24
 800701a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800701e:	4686      	mov	lr, r0
 8007020:	4690      	mov	r8, r2
 8007022:	d801      	bhi.n	8007028 <_strtol_l.constprop.0+0x10>
 8007024:	2b01      	cmp	r3, #1
 8007026:	d106      	bne.n	8007036 <_strtol_l.constprop.0+0x1e>
 8007028:	f7fe ff0a 	bl	8005e40 <__errno>
 800702c:	2316      	movs	r3, #22
 800702e:	6003      	str	r3, [r0, #0]
 8007030:	2000      	movs	r0, #0
 8007032:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007036:	4834      	ldr	r0, [pc, #208]	@ (8007108 <_strtol_l.constprop.0+0xf0>)
 8007038:	460d      	mov	r5, r1
 800703a:	462a      	mov	r2, r5
 800703c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007040:	5d06      	ldrb	r6, [r0, r4]
 8007042:	f016 0608 	ands.w	r6, r6, #8
 8007046:	d1f8      	bne.n	800703a <_strtol_l.constprop.0+0x22>
 8007048:	2c2d      	cmp	r4, #45	@ 0x2d
 800704a:	d12d      	bne.n	80070a8 <_strtol_l.constprop.0+0x90>
 800704c:	782c      	ldrb	r4, [r5, #0]
 800704e:	2601      	movs	r6, #1
 8007050:	1c95      	adds	r5, r2, #2
 8007052:	f033 0210 	bics.w	r2, r3, #16
 8007056:	d109      	bne.n	800706c <_strtol_l.constprop.0+0x54>
 8007058:	2c30      	cmp	r4, #48	@ 0x30
 800705a:	d12a      	bne.n	80070b2 <_strtol_l.constprop.0+0x9a>
 800705c:	782a      	ldrb	r2, [r5, #0]
 800705e:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8007062:	2a58      	cmp	r2, #88	@ 0x58
 8007064:	d125      	bne.n	80070b2 <_strtol_l.constprop.0+0x9a>
 8007066:	786c      	ldrb	r4, [r5, #1]
 8007068:	2310      	movs	r3, #16
 800706a:	3502      	adds	r5, #2
 800706c:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8007070:	f10c 3cff 	add.w	ip, ip, #4294967295
 8007074:	2200      	movs	r2, #0
 8007076:	fbbc f9f3 	udiv	r9, ip, r3
 800707a:	4610      	mov	r0, r2
 800707c:	fb03 ca19 	mls	sl, r3, r9, ip
 8007080:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8007084:	2f09      	cmp	r7, #9
 8007086:	d81b      	bhi.n	80070c0 <_strtol_l.constprop.0+0xa8>
 8007088:	463c      	mov	r4, r7
 800708a:	42a3      	cmp	r3, r4
 800708c:	dd27      	ble.n	80070de <_strtol_l.constprop.0+0xc6>
 800708e:	1c57      	adds	r7, r2, #1
 8007090:	d007      	beq.n	80070a2 <_strtol_l.constprop.0+0x8a>
 8007092:	4581      	cmp	r9, r0
 8007094:	d320      	bcc.n	80070d8 <_strtol_l.constprop.0+0xc0>
 8007096:	d101      	bne.n	800709c <_strtol_l.constprop.0+0x84>
 8007098:	45a2      	cmp	sl, r4
 800709a:	db1d      	blt.n	80070d8 <_strtol_l.constprop.0+0xc0>
 800709c:	fb00 4003 	mla	r0, r0, r3, r4
 80070a0:	2201      	movs	r2, #1
 80070a2:	f815 4b01 	ldrb.w	r4, [r5], #1
 80070a6:	e7eb      	b.n	8007080 <_strtol_l.constprop.0+0x68>
 80070a8:	2c2b      	cmp	r4, #43	@ 0x2b
 80070aa:	bf04      	itt	eq
 80070ac:	782c      	ldrbeq	r4, [r5, #0]
 80070ae:	1c95      	addeq	r5, r2, #2
 80070b0:	e7cf      	b.n	8007052 <_strtol_l.constprop.0+0x3a>
 80070b2:	2b00      	cmp	r3, #0
 80070b4:	d1da      	bne.n	800706c <_strtol_l.constprop.0+0x54>
 80070b6:	2c30      	cmp	r4, #48	@ 0x30
 80070b8:	bf0c      	ite	eq
 80070ba:	2308      	moveq	r3, #8
 80070bc:	230a      	movne	r3, #10
 80070be:	e7d5      	b.n	800706c <_strtol_l.constprop.0+0x54>
 80070c0:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 80070c4:	2f19      	cmp	r7, #25
 80070c6:	d801      	bhi.n	80070cc <_strtol_l.constprop.0+0xb4>
 80070c8:	3c37      	subs	r4, #55	@ 0x37
 80070ca:	e7de      	b.n	800708a <_strtol_l.constprop.0+0x72>
 80070cc:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 80070d0:	2f19      	cmp	r7, #25
 80070d2:	d804      	bhi.n	80070de <_strtol_l.constprop.0+0xc6>
 80070d4:	3c57      	subs	r4, #87	@ 0x57
 80070d6:	e7d8      	b.n	800708a <_strtol_l.constprop.0+0x72>
 80070d8:	f04f 32ff 	mov.w	r2, #4294967295
 80070dc:	e7e1      	b.n	80070a2 <_strtol_l.constprop.0+0x8a>
 80070de:	1c53      	adds	r3, r2, #1
 80070e0:	d108      	bne.n	80070f4 <_strtol_l.constprop.0+0xdc>
 80070e2:	2322      	movs	r3, #34	@ 0x22
 80070e4:	f8ce 3000 	str.w	r3, [lr]
 80070e8:	4660      	mov	r0, ip
 80070ea:	f1b8 0f00 	cmp.w	r8, #0
 80070ee:	d0a0      	beq.n	8007032 <_strtol_l.constprop.0+0x1a>
 80070f0:	1e69      	subs	r1, r5, #1
 80070f2:	e006      	b.n	8007102 <_strtol_l.constprop.0+0xea>
 80070f4:	b106      	cbz	r6, 80070f8 <_strtol_l.constprop.0+0xe0>
 80070f6:	4240      	negs	r0, r0
 80070f8:	f1b8 0f00 	cmp.w	r8, #0
 80070fc:	d099      	beq.n	8007032 <_strtol_l.constprop.0+0x1a>
 80070fe:	2a00      	cmp	r2, #0
 8007100:	d1f6      	bne.n	80070f0 <_strtol_l.constprop.0+0xd8>
 8007102:	f8c8 1000 	str.w	r1, [r8]
 8007106:	e794      	b.n	8007032 <_strtol_l.constprop.0+0x1a>
 8007108:	0800797c 	.word	0x0800797c

0800710c <_strtol_r>:
 800710c:	f7ff bf84 	b.w	8007018 <_strtol_l.constprop.0>

08007110 <_strtoul_l.constprop.0>:
 8007110:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8007114:	4e34      	ldr	r6, [pc, #208]	@ (80071e8 <_strtoul_l.constprop.0+0xd8>)
 8007116:	4686      	mov	lr, r0
 8007118:	460d      	mov	r5, r1
 800711a:	4628      	mov	r0, r5
 800711c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007120:	5d37      	ldrb	r7, [r6, r4]
 8007122:	f017 0708 	ands.w	r7, r7, #8
 8007126:	d1f8      	bne.n	800711a <_strtoul_l.constprop.0+0xa>
 8007128:	2c2d      	cmp	r4, #45	@ 0x2d
 800712a:	d12f      	bne.n	800718c <_strtoul_l.constprop.0+0x7c>
 800712c:	782c      	ldrb	r4, [r5, #0]
 800712e:	2701      	movs	r7, #1
 8007130:	1c85      	adds	r5, r0, #2
 8007132:	f033 0010 	bics.w	r0, r3, #16
 8007136:	d109      	bne.n	800714c <_strtoul_l.constprop.0+0x3c>
 8007138:	2c30      	cmp	r4, #48	@ 0x30
 800713a:	d12c      	bne.n	8007196 <_strtoul_l.constprop.0+0x86>
 800713c:	7828      	ldrb	r0, [r5, #0]
 800713e:	f000 00df 	and.w	r0, r0, #223	@ 0xdf
 8007142:	2858      	cmp	r0, #88	@ 0x58
 8007144:	d127      	bne.n	8007196 <_strtoul_l.constprop.0+0x86>
 8007146:	786c      	ldrb	r4, [r5, #1]
 8007148:	2310      	movs	r3, #16
 800714a:	3502      	adds	r5, #2
 800714c:	f04f 38ff 	mov.w	r8, #4294967295
 8007150:	2600      	movs	r6, #0
 8007152:	fbb8 f8f3 	udiv	r8, r8, r3
 8007156:	fb03 f908 	mul.w	r9, r3, r8
 800715a:	ea6f 0909 	mvn.w	r9, r9
 800715e:	4630      	mov	r0, r6
 8007160:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 8007164:	f1bc 0f09 	cmp.w	ip, #9
 8007168:	d81c      	bhi.n	80071a4 <_strtoul_l.constprop.0+0x94>
 800716a:	4664      	mov	r4, ip
 800716c:	42a3      	cmp	r3, r4
 800716e:	dd2a      	ble.n	80071c6 <_strtoul_l.constprop.0+0xb6>
 8007170:	f1b6 3fff 	cmp.w	r6, #4294967295
 8007174:	d007      	beq.n	8007186 <_strtoul_l.constprop.0+0x76>
 8007176:	4580      	cmp	r8, r0
 8007178:	d322      	bcc.n	80071c0 <_strtoul_l.constprop.0+0xb0>
 800717a:	d101      	bne.n	8007180 <_strtoul_l.constprop.0+0x70>
 800717c:	45a1      	cmp	r9, r4
 800717e:	db1f      	blt.n	80071c0 <_strtoul_l.constprop.0+0xb0>
 8007180:	fb00 4003 	mla	r0, r0, r3, r4
 8007184:	2601      	movs	r6, #1
 8007186:	f815 4b01 	ldrb.w	r4, [r5], #1
 800718a:	e7e9      	b.n	8007160 <_strtoul_l.constprop.0+0x50>
 800718c:	2c2b      	cmp	r4, #43	@ 0x2b
 800718e:	bf04      	itt	eq
 8007190:	782c      	ldrbeq	r4, [r5, #0]
 8007192:	1c85      	addeq	r5, r0, #2
 8007194:	e7cd      	b.n	8007132 <_strtoul_l.constprop.0+0x22>
 8007196:	2b00      	cmp	r3, #0
 8007198:	d1d8      	bne.n	800714c <_strtoul_l.constprop.0+0x3c>
 800719a:	2c30      	cmp	r4, #48	@ 0x30
 800719c:	bf0c      	ite	eq
 800719e:	2308      	moveq	r3, #8
 80071a0:	230a      	movne	r3, #10
 80071a2:	e7d3      	b.n	800714c <_strtoul_l.constprop.0+0x3c>
 80071a4:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 80071a8:	f1bc 0f19 	cmp.w	ip, #25
 80071ac:	d801      	bhi.n	80071b2 <_strtoul_l.constprop.0+0xa2>
 80071ae:	3c37      	subs	r4, #55	@ 0x37
 80071b0:	e7dc      	b.n	800716c <_strtoul_l.constprop.0+0x5c>
 80071b2:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 80071b6:	f1bc 0f19 	cmp.w	ip, #25
 80071ba:	d804      	bhi.n	80071c6 <_strtoul_l.constprop.0+0xb6>
 80071bc:	3c57      	subs	r4, #87	@ 0x57
 80071be:	e7d5      	b.n	800716c <_strtoul_l.constprop.0+0x5c>
 80071c0:	f04f 36ff 	mov.w	r6, #4294967295
 80071c4:	e7df      	b.n	8007186 <_strtoul_l.constprop.0+0x76>
 80071c6:	1c73      	adds	r3, r6, #1
 80071c8:	d106      	bne.n	80071d8 <_strtoul_l.constprop.0+0xc8>
 80071ca:	2322      	movs	r3, #34	@ 0x22
 80071cc:	f8ce 3000 	str.w	r3, [lr]
 80071d0:	4630      	mov	r0, r6
 80071d2:	b932      	cbnz	r2, 80071e2 <_strtoul_l.constprop.0+0xd2>
 80071d4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80071d8:	b107      	cbz	r7, 80071dc <_strtoul_l.constprop.0+0xcc>
 80071da:	4240      	negs	r0, r0
 80071dc:	2a00      	cmp	r2, #0
 80071de:	d0f9      	beq.n	80071d4 <_strtoul_l.constprop.0+0xc4>
 80071e0:	b106      	cbz	r6, 80071e4 <_strtoul_l.constprop.0+0xd4>
 80071e2:	1e69      	subs	r1, r5, #1
 80071e4:	6011      	str	r1, [r2, #0]
 80071e6:	e7f5      	b.n	80071d4 <_strtoul_l.constprop.0+0xc4>
 80071e8:	0800797c 	.word	0x0800797c

080071ec <_strtoul_r>:
 80071ec:	f7ff bf90 	b.w	8007110 <_strtoul_l.constprop.0>

080071f0 <__sfputc_r>:
 80071f0:	6893      	ldr	r3, [r2, #8]
 80071f2:	3b01      	subs	r3, #1
 80071f4:	2b00      	cmp	r3, #0
 80071f6:	b410      	push	{r4}
 80071f8:	6093      	str	r3, [r2, #8]
 80071fa:	da08      	bge.n	800720e <__sfputc_r+0x1e>
 80071fc:	6994      	ldr	r4, [r2, #24]
 80071fe:	42a3      	cmp	r3, r4
 8007200:	db01      	blt.n	8007206 <__sfputc_r+0x16>
 8007202:	290a      	cmp	r1, #10
 8007204:	d103      	bne.n	800720e <__sfputc_r+0x1e>
 8007206:	f85d 4b04 	ldr.w	r4, [sp], #4
 800720a:	f000 b933 	b.w	8007474 <__swbuf_r>
 800720e:	6813      	ldr	r3, [r2, #0]
 8007210:	1c58      	adds	r0, r3, #1
 8007212:	6010      	str	r0, [r2, #0]
 8007214:	7019      	strb	r1, [r3, #0]
 8007216:	4608      	mov	r0, r1
 8007218:	f85d 4b04 	ldr.w	r4, [sp], #4
 800721c:	4770      	bx	lr

0800721e <__sfputs_r>:
 800721e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007220:	4606      	mov	r6, r0
 8007222:	460f      	mov	r7, r1
 8007224:	4614      	mov	r4, r2
 8007226:	18d5      	adds	r5, r2, r3
 8007228:	42ac      	cmp	r4, r5
 800722a:	d101      	bne.n	8007230 <__sfputs_r+0x12>
 800722c:	2000      	movs	r0, #0
 800722e:	e007      	b.n	8007240 <__sfputs_r+0x22>
 8007230:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007234:	463a      	mov	r2, r7
 8007236:	4630      	mov	r0, r6
 8007238:	f7ff ffda 	bl	80071f0 <__sfputc_r>
 800723c:	1c43      	adds	r3, r0, #1
 800723e:	d1f3      	bne.n	8007228 <__sfputs_r+0xa>
 8007240:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08007244 <_vfiprintf_r>:
 8007244:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007248:	460d      	mov	r5, r1
 800724a:	b09d      	sub	sp, #116	@ 0x74
 800724c:	4614      	mov	r4, r2
 800724e:	4698      	mov	r8, r3
 8007250:	4606      	mov	r6, r0
 8007252:	b118      	cbz	r0, 800725c <_vfiprintf_r+0x18>
 8007254:	6a03      	ldr	r3, [r0, #32]
 8007256:	b90b      	cbnz	r3, 800725c <_vfiprintf_r+0x18>
 8007258:	f7fe fc4c 	bl	8005af4 <__sinit>
 800725c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800725e:	07d9      	lsls	r1, r3, #31
 8007260:	d405      	bmi.n	800726e <_vfiprintf_r+0x2a>
 8007262:	89ab      	ldrh	r3, [r5, #12]
 8007264:	059a      	lsls	r2, r3, #22
 8007266:	d402      	bmi.n	800726e <_vfiprintf_r+0x2a>
 8007268:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800726a:	f7fe fe14 	bl	8005e96 <__retarget_lock_acquire_recursive>
 800726e:	89ab      	ldrh	r3, [r5, #12]
 8007270:	071b      	lsls	r3, r3, #28
 8007272:	d501      	bpl.n	8007278 <_vfiprintf_r+0x34>
 8007274:	692b      	ldr	r3, [r5, #16]
 8007276:	b99b      	cbnz	r3, 80072a0 <_vfiprintf_r+0x5c>
 8007278:	4629      	mov	r1, r5
 800727a:	4630      	mov	r0, r6
 800727c:	f000 f938 	bl	80074f0 <__swsetup_r>
 8007280:	b170      	cbz	r0, 80072a0 <_vfiprintf_r+0x5c>
 8007282:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007284:	07dc      	lsls	r4, r3, #31
 8007286:	d504      	bpl.n	8007292 <_vfiprintf_r+0x4e>
 8007288:	f04f 30ff 	mov.w	r0, #4294967295
 800728c:	b01d      	add	sp, #116	@ 0x74
 800728e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007292:	89ab      	ldrh	r3, [r5, #12]
 8007294:	0598      	lsls	r0, r3, #22
 8007296:	d4f7      	bmi.n	8007288 <_vfiprintf_r+0x44>
 8007298:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800729a:	f7fe fdfd 	bl	8005e98 <__retarget_lock_release_recursive>
 800729e:	e7f3      	b.n	8007288 <_vfiprintf_r+0x44>
 80072a0:	2300      	movs	r3, #0
 80072a2:	9309      	str	r3, [sp, #36]	@ 0x24
 80072a4:	2320      	movs	r3, #32
 80072a6:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80072aa:	f8cd 800c 	str.w	r8, [sp, #12]
 80072ae:	2330      	movs	r3, #48	@ 0x30
 80072b0:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8007460 <_vfiprintf_r+0x21c>
 80072b4:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80072b8:	f04f 0901 	mov.w	r9, #1
 80072bc:	4623      	mov	r3, r4
 80072be:	469a      	mov	sl, r3
 80072c0:	f813 2b01 	ldrb.w	r2, [r3], #1
 80072c4:	b10a      	cbz	r2, 80072ca <_vfiprintf_r+0x86>
 80072c6:	2a25      	cmp	r2, #37	@ 0x25
 80072c8:	d1f9      	bne.n	80072be <_vfiprintf_r+0x7a>
 80072ca:	ebba 0b04 	subs.w	fp, sl, r4
 80072ce:	d00b      	beq.n	80072e8 <_vfiprintf_r+0xa4>
 80072d0:	465b      	mov	r3, fp
 80072d2:	4622      	mov	r2, r4
 80072d4:	4629      	mov	r1, r5
 80072d6:	4630      	mov	r0, r6
 80072d8:	f7ff ffa1 	bl	800721e <__sfputs_r>
 80072dc:	3001      	adds	r0, #1
 80072de:	f000 80a7 	beq.w	8007430 <_vfiprintf_r+0x1ec>
 80072e2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80072e4:	445a      	add	r2, fp
 80072e6:	9209      	str	r2, [sp, #36]	@ 0x24
 80072e8:	f89a 3000 	ldrb.w	r3, [sl]
 80072ec:	2b00      	cmp	r3, #0
 80072ee:	f000 809f 	beq.w	8007430 <_vfiprintf_r+0x1ec>
 80072f2:	2300      	movs	r3, #0
 80072f4:	f04f 32ff 	mov.w	r2, #4294967295
 80072f8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80072fc:	f10a 0a01 	add.w	sl, sl, #1
 8007300:	9304      	str	r3, [sp, #16]
 8007302:	9307      	str	r3, [sp, #28]
 8007304:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8007308:	931a      	str	r3, [sp, #104]	@ 0x68
 800730a:	4654      	mov	r4, sl
 800730c:	2205      	movs	r2, #5
 800730e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007312:	4853      	ldr	r0, [pc, #332]	@ (8007460 <_vfiprintf_r+0x21c>)
 8007314:	f7f8 ff8c 	bl	8000230 <memchr>
 8007318:	9a04      	ldr	r2, [sp, #16]
 800731a:	b9d8      	cbnz	r0, 8007354 <_vfiprintf_r+0x110>
 800731c:	06d1      	lsls	r1, r2, #27
 800731e:	bf44      	itt	mi
 8007320:	2320      	movmi	r3, #32
 8007322:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007326:	0713      	lsls	r3, r2, #28
 8007328:	bf44      	itt	mi
 800732a:	232b      	movmi	r3, #43	@ 0x2b
 800732c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007330:	f89a 3000 	ldrb.w	r3, [sl]
 8007334:	2b2a      	cmp	r3, #42	@ 0x2a
 8007336:	d015      	beq.n	8007364 <_vfiprintf_r+0x120>
 8007338:	9a07      	ldr	r2, [sp, #28]
 800733a:	4654      	mov	r4, sl
 800733c:	2000      	movs	r0, #0
 800733e:	f04f 0c0a 	mov.w	ip, #10
 8007342:	4621      	mov	r1, r4
 8007344:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007348:	3b30      	subs	r3, #48	@ 0x30
 800734a:	2b09      	cmp	r3, #9
 800734c:	d94b      	bls.n	80073e6 <_vfiprintf_r+0x1a2>
 800734e:	b1b0      	cbz	r0, 800737e <_vfiprintf_r+0x13a>
 8007350:	9207      	str	r2, [sp, #28]
 8007352:	e014      	b.n	800737e <_vfiprintf_r+0x13a>
 8007354:	eba0 0308 	sub.w	r3, r0, r8
 8007358:	fa09 f303 	lsl.w	r3, r9, r3
 800735c:	4313      	orrs	r3, r2
 800735e:	9304      	str	r3, [sp, #16]
 8007360:	46a2      	mov	sl, r4
 8007362:	e7d2      	b.n	800730a <_vfiprintf_r+0xc6>
 8007364:	9b03      	ldr	r3, [sp, #12]
 8007366:	1d19      	adds	r1, r3, #4
 8007368:	681b      	ldr	r3, [r3, #0]
 800736a:	9103      	str	r1, [sp, #12]
 800736c:	2b00      	cmp	r3, #0
 800736e:	bfbb      	ittet	lt
 8007370:	425b      	neglt	r3, r3
 8007372:	f042 0202 	orrlt.w	r2, r2, #2
 8007376:	9307      	strge	r3, [sp, #28]
 8007378:	9307      	strlt	r3, [sp, #28]
 800737a:	bfb8      	it	lt
 800737c:	9204      	strlt	r2, [sp, #16]
 800737e:	7823      	ldrb	r3, [r4, #0]
 8007380:	2b2e      	cmp	r3, #46	@ 0x2e
 8007382:	d10a      	bne.n	800739a <_vfiprintf_r+0x156>
 8007384:	7863      	ldrb	r3, [r4, #1]
 8007386:	2b2a      	cmp	r3, #42	@ 0x2a
 8007388:	d132      	bne.n	80073f0 <_vfiprintf_r+0x1ac>
 800738a:	9b03      	ldr	r3, [sp, #12]
 800738c:	1d1a      	adds	r2, r3, #4
 800738e:	681b      	ldr	r3, [r3, #0]
 8007390:	9203      	str	r2, [sp, #12]
 8007392:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8007396:	3402      	adds	r4, #2
 8007398:	9305      	str	r3, [sp, #20]
 800739a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8007470 <_vfiprintf_r+0x22c>
 800739e:	7821      	ldrb	r1, [r4, #0]
 80073a0:	2203      	movs	r2, #3
 80073a2:	4650      	mov	r0, sl
 80073a4:	f7f8 ff44 	bl	8000230 <memchr>
 80073a8:	b138      	cbz	r0, 80073ba <_vfiprintf_r+0x176>
 80073aa:	9b04      	ldr	r3, [sp, #16]
 80073ac:	eba0 000a 	sub.w	r0, r0, sl
 80073b0:	2240      	movs	r2, #64	@ 0x40
 80073b2:	4082      	lsls	r2, r0
 80073b4:	4313      	orrs	r3, r2
 80073b6:	3401      	adds	r4, #1
 80073b8:	9304      	str	r3, [sp, #16]
 80073ba:	f814 1b01 	ldrb.w	r1, [r4], #1
 80073be:	4829      	ldr	r0, [pc, #164]	@ (8007464 <_vfiprintf_r+0x220>)
 80073c0:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80073c4:	2206      	movs	r2, #6
 80073c6:	f7f8 ff33 	bl	8000230 <memchr>
 80073ca:	2800      	cmp	r0, #0
 80073cc:	d03f      	beq.n	800744e <_vfiprintf_r+0x20a>
 80073ce:	4b26      	ldr	r3, [pc, #152]	@ (8007468 <_vfiprintf_r+0x224>)
 80073d0:	bb1b      	cbnz	r3, 800741a <_vfiprintf_r+0x1d6>
 80073d2:	9b03      	ldr	r3, [sp, #12]
 80073d4:	3307      	adds	r3, #7
 80073d6:	f023 0307 	bic.w	r3, r3, #7
 80073da:	3308      	adds	r3, #8
 80073dc:	9303      	str	r3, [sp, #12]
 80073de:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80073e0:	443b      	add	r3, r7
 80073e2:	9309      	str	r3, [sp, #36]	@ 0x24
 80073e4:	e76a      	b.n	80072bc <_vfiprintf_r+0x78>
 80073e6:	fb0c 3202 	mla	r2, ip, r2, r3
 80073ea:	460c      	mov	r4, r1
 80073ec:	2001      	movs	r0, #1
 80073ee:	e7a8      	b.n	8007342 <_vfiprintf_r+0xfe>
 80073f0:	2300      	movs	r3, #0
 80073f2:	3401      	adds	r4, #1
 80073f4:	9305      	str	r3, [sp, #20]
 80073f6:	4619      	mov	r1, r3
 80073f8:	f04f 0c0a 	mov.w	ip, #10
 80073fc:	4620      	mov	r0, r4
 80073fe:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007402:	3a30      	subs	r2, #48	@ 0x30
 8007404:	2a09      	cmp	r2, #9
 8007406:	d903      	bls.n	8007410 <_vfiprintf_r+0x1cc>
 8007408:	2b00      	cmp	r3, #0
 800740a:	d0c6      	beq.n	800739a <_vfiprintf_r+0x156>
 800740c:	9105      	str	r1, [sp, #20]
 800740e:	e7c4      	b.n	800739a <_vfiprintf_r+0x156>
 8007410:	fb0c 2101 	mla	r1, ip, r1, r2
 8007414:	4604      	mov	r4, r0
 8007416:	2301      	movs	r3, #1
 8007418:	e7f0      	b.n	80073fc <_vfiprintf_r+0x1b8>
 800741a:	ab03      	add	r3, sp, #12
 800741c:	9300      	str	r3, [sp, #0]
 800741e:	462a      	mov	r2, r5
 8007420:	4b12      	ldr	r3, [pc, #72]	@ (800746c <_vfiprintf_r+0x228>)
 8007422:	a904      	add	r1, sp, #16
 8007424:	4630      	mov	r0, r6
 8007426:	f3af 8000 	nop.w
 800742a:	4607      	mov	r7, r0
 800742c:	1c78      	adds	r0, r7, #1
 800742e:	d1d6      	bne.n	80073de <_vfiprintf_r+0x19a>
 8007430:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007432:	07d9      	lsls	r1, r3, #31
 8007434:	d405      	bmi.n	8007442 <_vfiprintf_r+0x1fe>
 8007436:	89ab      	ldrh	r3, [r5, #12]
 8007438:	059a      	lsls	r2, r3, #22
 800743a:	d402      	bmi.n	8007442 <_vfiprintf_r+0x1fe>
 800743c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800743e:	f7fe fd2b 	bl	8005e98 <__retarget_lock_release_recursive>
 8007442:	89ab      	ldrh	r3, [r5, #12]
 8007444:	065b      	lsls	r3, r3, #25
 8007446:	f53f af1f 	bmi.w	8007288 <_vfiprintf_r+0x44>
 800744a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800744c:	e71e      	b.n	800728c <_vfiprintf_r+0x48>
 800744e:	ab03      	add	r3, sp, #12
 8007450:	9300      	str	r3, [sp, #0]
 8007452:	462a      	mov	r2, r5
 8007454:	4b05      	ldr	r3, [pc, #20]	@ (800746c <_vfiprintf_r+0x228>)
 8007456:	a904      	add	r1, sp, #16
 8007458:	4630      	mov	r0, r6
 800745a:	f7ff f9cf 	bl	80067fc <_printf_i>
 800745e:	e7e4      	b.n	800742a <_vfiprintf_r+0x1e6>
 8007460:	0800792d 	.word	0x0800792d
 8007464:	08007937 	.word	0x08007937
 8007468:	00000000 	.word	0x00000000
 800746c:	0800721f 	.word	0x0800721f
 8007470:	08007933 	.word	0x08007933

08007474 <__swbuf_r>:
 8007474:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007476:	460e      	mov	r6, r1
 8007478:	4614      	mov	r4, r2
 800747a:	4605      	mov	r5, r0
 800747c:	b118      	cbz	r0, 8007486 <__swbuf_r+0x12>
 800747e:	6a03      	ldr	r3, [r0, #32]
 8007480:	b90b      	cbnz	r3, 8007486 <__swbuf_r+0x12>
 8007482:	f7fe fb37 	bl	8005af4 <__sinit>
 8007486:	69a3      	ldr	r3, [r4, #24]
 8007488:	60a3      	str	r3, [r4, #8]
 800748a:	89a3      	ldrh	r3, [r4, #12]
 800748c:	071a      	lsls	r2, r3, #28
 800748e:	d501      	bpl.n	8007494 <__swbuf_r+0x20>
 8007490:	6923      	ldr	r3, [r4, #16]
 8007492:	b943      	cbnz	r3, 80074a6 <__swbuf_r+0x32>
 8007494:	4621      	mov	r1, r4
 8007496:	4628      	mov	r0, r5
 8007498:	f000 f82a 	bl	80074f0 <__swsetup_r>
 800749c:	b118      	cbz	r0, 80074a6 <__swbuf_r+0x32>
 800749e:	f04f 37ff 	mov.w	r7, #4294967295
 80074a2:	4638      	mov	r0, r7
 80074a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80074a6:	6823      	ldr	r3, [r4, #0]
 80074a8:	6922      	ldr	r2, [r4, #16]
 80074aa:	1a98      	subs	r0, r3, r2
 80074ac:	6963      	ldr	r3, [r4, #20]
 80074ae:	b2f6      	uxtb	r6, r6
 80074b0:	4283      	cmp	r3, r0
 80074b2:	4637      	mov	r7, r6
 80074b4:	dc05      	bgt.n	80074c2 <__swbuf_r+0x4e>
 80074b6:	4621      	mov	r1, r4
 80074b8:	4628      	mov	r0, r5
 80074ba:	f7ff fc91 	bl	8006de0 <_fflush_r>
 80074be:	2800      	cmp	r0, #0
 80074c0:	d1ed      	bne.n	800749e <__swbuf_r+0x2a>
 80074c2:	68a3      	ldr	r3, [r4, #8]
 80074c4:	3b01      	subs	r3, #1
 80074c6:	60a3      	str	r3, [r4, #8]
 80074c8:	6823      	ldr	r3, [r4, #0]
 80074ca:	1c5a      	adds	r2, r3, #1
 80074cc:	6022      	str	r2, [r4, #0]
 80074ce:	701e      	strb	r6, [r3, #0]
 80074d0:	6962      	ldr	r2, [r4, #20]
 80074d2:	1c43      	adds	r3, r0, #1
 80074d4:	429a      	cmp	r2, r3
 80074d6:	d004      	beq.n	80074e2 <__swbuf_r+0x6e>
 80074d8:	89a3      	ldrh	r3, [r4, #12]
 80074da:	07db      	lsls	r3, r3, #31
 80074dc:	d5e1      	bpl.n	80074a2 <__swbuf_r+0x2e>
 80074de:	2e0a      	cmp	r6, #10
 80074e0:	d1df      	bne.n	80074a2 <__swbuf_r+0x2e>
 80074e2:	4621      	mov	r1, r4
 80074e4:	4628      	mov	r0, r5
 80074e6:	f7ff fc7b 	bl	8006de0 <_fflush_r>
 80074ea:	2800      	cmp	r0, #0
 80074ec:	d0d9      	beq.n	80074a2 <__swbuf_r+0x2e>
 80074ee:	e7d6      	b.n	800749e <__swbuf_r+0x2a>

080074f0 <__swsetup_r>:
 80074f0:	b538      	push	{r3, r4, r5, lr}
 80074f2:	4b29      	ldr	r3, [pc, #164]	@ (8007598 <__swsetup_r+0xa8>)
 80074f4:	4605      	mov	r5, r0
 80074f6:	6818      	ldr	r0, [r3, #0]
 80074f8:	460c      	mov	r4, r1
 80074fa:	b118      	cbz	r0, 8007504 <__swsetup_r+0x14>
 80074fc:	6a03      	ldr	r3, [r0, #32]
 80074fe:	b90b      	cbnz	r3, 8007504 <__swsetup_r+0x14>
 8007500:	f7fe faf8 	bl	8005af4 <__sinit>
 8007504:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007508:	0719      	lsls	r1, r3, #28
 800750a:	d422      	bmi.n	8007552 <__swsetup_r+0x62>
 800750c:	06da      	lsls	r2, r3, #27
 800750e:	d407      	bmi.n	8007520 <__swsetup_r+0x30>
 8007510:	2209      	movs	r2, #9
 8007512:	602a      	str	r2, [r5, #0]
 8007514:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007518:	81a3      	strh	r3, [r4, #12]
 800751a:	f04f 30ff 	mov.w	r0, #4294967295
 800751e:	e033      	b.n	8007588 <__swsetup_r+0x98>
 8007520:	0758      	lsls	r0, r3, #29
 8007522:	d512      	bpl.n	800754a <__swsetup_r+0x5a>
 8007524:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8007526:	b141      	cbz	r1, 800753a <__swsetup_r+0x4a>
 8007528:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800752c:	4299      	cmp	r1, r3
 800752e:	d002      	beq.n	8007536 <__swsetup_r+0x46>
 8007530:	4628      	mov	r0, r5
 8007532:	f7fe fcd1 	bl	8005ed8 <_free_r>
 8007536:	2300      	movs	r3, #0
 8007538:	6363      	str	r3, [r4, #52]	@ 0x34
 800753a:	89a3      	ldrh	r3, [r4, #12]
 800753c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8007540:	81a3      	strh	r3, [r4, #12]
 8007542:	2300      	movs	r3, #0
 8007544:	6063      	str	r3, [r4, #4]
 8007546:	6923      	ldr	r3, [r4, #16]
 8007548:	6023      	str	r3, [r4, #0]
 800754a:	89a3      	ldrh	r3, [r4, #12]
 800754c:	f043 0308 	orr.w	r3, r3, #8
 8007550:	81a3      	strh	r3, [r4, #12]
 8007552:	6923      	ldr	r3, [r4, #16]
 8007554:	b94b      	cbnz	r3, 800756a <__swsetup_r+0x7a>
 8007556:	89a3      	ldrh	r3, [r4, #12]
 8007558:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800755c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007560:	d003      	beq.n	800756a <__swsetup_r+0x7a>
 8007562:	4621      	mov	r1, r4
 8007564:	4628      	mov	r0, r5
 8007566:	f000 f88b 	bl	8007680 <__smakebuf_r>
 800756a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800756e:	f013 0201 	ands.w	r2, r3, #1
 8007572:	d00a      	beq.n	800758a <__swsetup_r+0x9a>
 8007574:	2200      	movs	r2, #0
 8007576:	60a2      	str	r2, [r4, #8]
 8007578:	6962      	ldr	r2, [r4, #20]
 800757a:	4252      	negs	r2, r2
 800757c:	61a2      	str	r2, [r4, #24]
 800757e:	6922      	ldr	r2, [r4, #16]
 8007580:	b942      	cbnz	r2, 8007594 <__swsetup_r+0xa4>
 8007582:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8007586:	d1c5      	bne.n	8007514 <__swsetup_r+0x24>
 8007588:	bd38      	pop	{r3, r4, r5, pc}
 800758a:	0799      	lsls	r1, r3, #30
 800758c:	bf58      	it	pl
 800758e:	6962      	ldrpl	r2, [r4, #20]
 8007590:	60a2      	str	r2, [r4, #8]
 8007592:	e7f4      	b.n	800757e <__swsetup_r+0x8e>
 8007594:	2000      	movs	r0, #0
 8007596:	e7f7      	b.n	8007588 <__swsetup_r+0x98>
 8007598:	2000002c 	.word	0x2000002c

0800759c <_raise_r>:
 800759c:	291f      	cmp	r1, #31
 800759e:	b538      	push	{r3, r4, r5, lr}
 80075a0:	4605      	mov	r5, r0
 80075a2:	460c      	mov	r4, r1
 80075a4:	d904      	bls.n	80075b0 <_raise_r+0x14>
 80075a6:	2316      	movs	r3, #22
 80075a8:	6003      	str	r3, [r0, #0]
 80075aa:	f04f 30ff 	mov.w	r0, #4294967295
 80075ae:	bd38      	pop	{r3, r4, r5, pc}
 80075b0:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 80075b2:	b112      	cbz	r2, 80075ba <_raise_r+0x1e>
 80075b4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80075b8:	b94b      	cbnz	r3, 80075ce <_raise_r+0x32>
 80075ba:	4628      	mov	r0, r5
 80075bc:	f000 f830 	bl	8007620 <_getpid_r>
 80075c0:	4622      	mov	r2, r4
 80075c2:	4601      	mov	r1, r0
 80075c4:	4628      	mov	r0, r5
 80075c6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80075ca:	f000 b817 	b.w	80075fc <_kill_r>
 80075ce:	2b01      	cmp	r3, #1
 80075d0:	d00a      	beq.n	80075e8 <_raise_r+0x4c>
 80075d2:	1c59      	adds	r1, r3, #1
 80075d4:	d103      	bne.n	80075de <_raise_r+0x42>
 80075d6:	2316      	movs	r3, #22
 80075d8:	6003      	str	r3, [r0, #0]
 80075da:	2001      	movs	r0, #1
 80075dc:	e7e7      	b.n	80075ae <_raise_r+0x12>
 80075de:	2100      	movs	r1, #0
 80075e0:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 80075e4:	4620      	mov	r0, r4
 80075e6:	4798      	blx	r3
 80075e8:	2000      	movs	r0, #0
 80075ea:	e7e0      	b.n	80075ae <_raise_r+0x12>

080075ec <raise>:
 80075ec:	4b02      	ldr	r3, [pc, #8]	@ (80075f8 <raise+0xc>)
 80075ee:	4601      	mov	r1, r0
 80075f0:	6818      	ldr	r0, [r3, #0]
 80075f2:	f7ff bfd3 	b.w	800759c <_raise_r>
 80075f6:	bf00      	nop
 80075f8:	2000002c 	.word	0x2000002c

080075fc <_kill_r>:
 80075fc:	b538      	push	{r3, r4, r5, lr}
 80075fe:	4d07      	ldr	r5, [pc, #28]	@ (800761c <_kill_r+0x20>)
 8007600:	2300      	movs	r3, #0
 8007602:	4604      	mov	r4, r0
 8007604:	4608      	mov	r0, r1
 8007606:	4611      	mov	r1, r2
 8007608:	602b      	str	r3, [r5, #0]
 800760a:	f7f9 fd52 	bl	80010b2 <_kill>
 800760e:	1c43      	adds	r3, r0, #1
 8007610:	d102      	bne.n	8007618 <_kill_r+0x1c>
 8007612:	682b      	ldr	r3, [r5, #0]
 8007614:	b103      	cbz	r3, 8007618 <_kill_r+0x1c>
 8007616:	6023      	str	r3, [r4, #0]
 8007618:	bd38      	pop	{r3, r4, r5, pc}
 800761a:	bf00      	nop
 800761c:	20000534 	.word	0x20000534

08007620 <_getpid_r>:
 8007620:	f7f9 bd3f 	b.w	80010a2 <_getpid>

08007624 <_malloc_usable_size_r>:
 8007624:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007628:	1f18      	subs	r0, r3, #4
 800762a:	2b00      	cmp	r3, #0
 800762c:	bfbc      	itt	lt
 800762e:	580b      	ldrlt	r3, [r1, r0]
 8007630:	18c0      	addlt	r0, r0, r3
 8007632:	4770      	bx	lr

08007634 <__swhatbuf_r>:
 8007634:	b570      	push	{r4, r5, r6, lr}
 8007636:	460c      	mov	r4, r1
 8007638:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800763c:	2900      	cmp	r1, #0
 800763e:	b096      	sub	sp, #88	@ 0x58
 8007640:	4615      	mov	r5, r2
 8007642:	461e      	mov	r6, r3
 8007644:	da0d      	bge.n	8007662 <__swhatbuf_r+0x2e>
 8007646:	89a3      	ldrh	r3, [r4, #12]
 8007648:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800764c:	f04f 0100 	mov.w	r1, #0
 8007650:	bf14      	ite	ne
 8007652:	2340      	movne	r3, #64	@ 0x40
 8007654:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8007658:	2000      	movs	r0, #0
 800765a:	6031      	str	r1, [r6, #0]
 800765c:	602b      	str	r3, [r5, #0]
 800765e:	b016      	add	sp, #88	@ 0x58
 8007660:	bd70      	pop	{r4, r5, r6, pc}
 8007662:	466a      	mov	r2, sp
 8007664:	f000 f848 	bl	80076f8 <_fstat_r>
 8007668:	2800      	cmp	r0, #0
 800766a:	dbec      	blt.n	8007646 <__swhatbuf_r+0x12>
 800766c:	9901      	ldr	r1, [sp, #4]
 800766e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8007672:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8007676:	4259      	negs	r1, r3
 8007678:	4159      	adcs	r1, r3
 800767a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800767e:	e7eb      	b.n	8007658 <__swhatbuf_r+0x24>

08007680 <__smakebuf_r>:
 8007680:	898b      	ldrh	r3, [r1, #12]
 8007682:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007684:	079d      	lsls	r5, r3, #30
 8007686:	4606      	mov	r6, r0
 8007688:	460c      	mov	r4, r1
 800768a:	d507      	bpl.n	800769c <__smakebuf_r+0x1c>
 800768c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8007690:	6023      	str	r3, [r4, #0]
 8007692:	6123      	str	r3, [r4, #16]
 8007694:	2301      	movs	r3, #1
 8007696:	6163      	str	r3, [r4, #20]
 8007698:	b003      	add	sp, #12
 800769a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800769c:	ab01      	add	r3, sp, #4
 800769e:	466a      	mov	r2, sp
 80076a0:	f7ff ffc8 	bl	8007634 <__swhatbuf_r>
 80076a4:	9f00      	ldr	r7, [sp, #0]
 80076a6:	4605      	mov	r5, r0
 80076a8:	4639      	mov	r1, r7
 80076aa:	4630      	mov	r0, r6
 80076ac:	f7fe fc88 	bl	8005fc0 <_malloc_r>
 80076b0:	b948      	cbnz	r0, 80076c6 <__smakebuf_r+0x46>
 80076b2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80076b6:	059a      	lsls	r2, r3, #22
 80076b8:	d4ee      	bmi.n	8007698 <__smakebuf_r+0x18>
 80076ba:	f023 0303 	bic.w	r3, r3, #3
 80076be:	f043 0302 	orr.w	r3, r3, #2
 80076c2:	81a3      	strh	r3, [r4, #12]
 80076c4:	e7e2      	b.n	800768c <__smakebuf_r+0xc>
 80076c6:	89a3      	ldrh	r3, [r4, #12]
 80076c8:	6020      	str	r0, [r4, #0]
 80076ca:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80076ce:	81a3      	strh	r3, [r4, #12]
 80076d0:	9b01      	ldr	r3, [sp, #4]
 80076d2:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80076d6:	b15b      	cbz	r3, 80076f0 <__smakebuf_r+0x70>
 80076d8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80076dc:	4630      	mov	r0, r6
 80076de:	f000 f81d 	bl	800771c <_isatty_r>
 80076e2:	b128      	cbz	r0, 80076f0 <__smakebuf_r+0x70>
 80076e4:	89a3      	ldrh	r3, [r4, #12]
 80076e6:	f023 0303 	bic.w	r3, r3, #3
 80076ea:	f043 0301 	orr.w	r3, r3, #1
 80076ee:	81a3      	strh	r3, [r4, #12]
 80076f0:	89a3      	ldrh	r3, [r4, #12]
 80076f2:	431d      	orrs	r5, r3
 80076f4:	81a5      	strh	r5, [r4, #12]
 80076f6:	e7cf      	b.n	8007698 <__smakebuf_r+0x18>

080076f8 <_fstat_r>:
 80076f8:	b538      	push	{r3, r4, r5, lr}
 80076fa:	4d07      	ldr	r5, [pc, #28]	@ (8007718 <_fstat_r+0x20>)
 80076fc:	2300      	movs	r3, #0
 80076fe:	4604      	mov	r4, r0
 8007700:	4608      	mov	r0, r1
 8007702:	4611      	mov	r1, r2
 8007704:	602b      	str	r3, [r5, #0]
 8007706:	f7f9 fd34 	bl	8001172 <_fstat>
 800770a:	1c43      	adds	r3, r0, #1
 800770c:	d102      	bne.n	8007714 <_fstat_r+0x1c>
 800770e:	682b      	ldr	r3, [r5, #0]
 8007710:	b103      	cbz	r3, 8007714 <_fstat_r+0x1c>
 8007712:	6023      	str	r3, [r4, #0]
 8007714:	bd38      	pop	{r3, r4, r5, pc}
 8007716:	bf00      	nop
 8007718:	20000534 	.word	0x20000534

0800771c <_isatty_r>:
 800771c:	b538      	push	{r3, r4, r5, lr}
 800771e:	4d06      	ldr	r5, [pc, #24]	@ (8007738 <_isatty_r+0x1c>)
 8007720:	2300      	movs	r3, #0
 8007722:	4604      	mov	r4, r0
 8007724:	4608      	mov	r0, r1
 8007726:	602b      	str	r3, [r5, #0]
 8007728:	f7f9 fd33 	bl	8001192 <_isatty>
 800772c:	1c43      	adds	r3, r0, #1
 800772e:	d102      	bne.n	8007736 <_isatty_r+0x1a>
 8007730:	682b      	ldr	r3, [r5, #0]
 8007732:	b103      	cbz	r3, 8007736 <_isatty_r+0x1a>
 8007734:	6023      	str	r3, [r4, #0]
 8007736:	bd38      	pop	{r3, r4, r5, pc}
 8007738:	20000534 	.word	0x20000534

0800773c <_init>:
 800773c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800773e:	bf00      	nop
 8007740:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007742:	bc08      	pop	{r3}
 8007744:	469e      	mov	lr, r3
 8007746:	4770      	bx	lr

08007748 <_fini>:
 8007748:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800774a:	bf00      	nop
 800774c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800774e:	bc08      	pop	{r3}
 8007750:	469e      	mov	lr, r3
 8007752:	4770      	bx	lr
