
mTEMProject.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008d0c  080001e0  080001e0  000011e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000057c  08008ef0  08008ef0  00009ef0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800946c  0800946c  0000b1f0  2**0
                  CONTENTS
  4 .ARM          00000008  0800946c  0800946c  0000a46c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009474  08009474  0000b1f0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009474  08009474  0000a474  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08009478  08009478  0000a478  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001f0  20000000  0800947c  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000004f0  200001f0  0800966c  0000b1f0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200006e0  0800966c  0000b6e0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000b1f0  2**0
                  CONTENTS, READONLY
 12 .debug_info   000152fb  00000000  00000000  0000b220  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000030b7  00000000  00000000  0002051b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ff0  00000000  00000000  000235d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000c4a  00000000  00000000  000245c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00003fc2  00000000  00000000  00025212  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000164ff  00000000  00000000  000291d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ef60c  00000000  00000000  0003f6d3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0012ecdf  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000528c  00000000  00000000  0012ed24  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005b  00000000  00000000  00133fb0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	@ (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	@ (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	200001f0 	.word	0x200001f0
 80001fc:	00000000 	.word	0x00000000
 8000200:	08008ed4 	.word	0x08008ed4

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	@ (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	@ (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	@ (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	200001f4 	.word	0x200001f4
 800021c:	08008ed4 	.word	0x08008ed4

08000220 <strcmp>:
 8000220:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000224:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000228:	2a01      	cmp	r2, #1
 800022a:	bf28      	it	cs
 800022c:	429a      	cmpcs	r2, r3
 800022e:	d0f7      	beq.n	8000220 <strcmp>
 8000230:	1ad0      	subs	r0, r2, r3
 8000232:	4770      	bx	lr
	...

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <strlen>:
 80002e0:	4603      	mov	r3, r0
 80002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d1fb      	bne.n	80002e2 <strlen+0x2>
 80002ea:	1a18      	subs	r0, r3, r0
 80002ec:	3801      	subs	r0, #1
 80002ee:	4770      	bx	lr

080002f0 <__aeabi_drsub>:
 80002f0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002f4:	e002      	b.n	80002fc <__adddf3>
 80002f6:	bf00      	nop

080002f8 <__aeabi_dsub>:
 80002f8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002fc <__adddf3>:
 80002fc:	b530      	push	{r4, r5, lr}
 80002fe:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000302:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000306:	ea94 0f05 	teq	r4, r5
 800030a:	bf08      	it	eq
 800030c:	ea90 0f02 	teqeq	r0, r2
 8000310:	bf1f      	itttt	ne
 8000312:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000316:	ea55 0c02 	orrsne.w	ip, r5, r2
 800031a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800031e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000322:	f000 80e2 	beq.w	80004ea <__adddf3+0x1ee>
 8000326:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800032a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800032e:	bfb8      	it	lt
 8000330:	426d      	neglt	r5, r5
 8000332:	dd0c      	ble.n	800034e <__adddf3+0x52>
 8000334:	442c      	add	r4, r5
 8000336:	ea80 0202 	eor.w	r2, r0, r2
 800033a:	ea81 0303 	eor.w	r3, r1, r3
 800033e:	ea82 0000 	eor.w	r0, r2, r0
 8000342:	ea83 0101 	eor.w	r1, r3, r1
 8000346:	ea80 0202 	eor.w	r2, r0, r2
 800034a:	ea81 0303 	eor.w	r3, r1, r3
 800034e:	2d36      	cmp	r5, #54	@ 0x36
 8000350:	bf88      	it	hi
 8000352:	bd30      	pophi	{r4, r5, pc}
 8000354:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000358:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800035c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000360:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000364:	d002      	beq.n	800036c <__adddf3+0x70>
 8000366:	4240      	negs	r0, r0
 8000368:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800036c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000370:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000374:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000378:	d002      	beq.n	8000380 <__adddf3+0x84>
 800037a:	4252      	negs	r2, r2
 800037c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000380:	ea94 0f05 	teq	r4, r5
 8000384:	f000 80a7 	beq.w	80004d6 <__adddf3+0x1da>
 8000388:	f1a4 0401 	sub.w	r4, r4, #1
 800038c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000390:	db0d      	blt.n	80003ae <__adddf3+0xb2>
 8000392:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000396:	fa22 f205 	lsr.w	r2, r2, r5
 800039a:	1880      	adds	r0, r0, r2
 800039c:	f141 0100 	adc.w	r1, r1, #0
 80003a0:	fa03 f20e 	lsl.w	r2, r3, lr
 80003a4:	1880      	adds	r0, r0, r2
 80003a6:	fa43 f305 	asr.w	r3, r3, r5
 80003aa:	4159      	adcs	r1, r3
 80003ac:	e00e      	b.n	80003cc <__adddf3+0xd0>
 80003ae:	f1a5 0520 	sub.w	r5, r5, #32
 80003b2:	f10e 0e20 	add.w	lr, lr, #32
 80003b6:	2a01      	cmp	r2, #1
 80003b8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80003bc:	bf28      	it	cs
 80003be:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003c2:	fa43 f305 	asr.w	r3, r3, r5
 80003c6:	18c0      	adds	r0, r0, r3
 80003c8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003cc:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003d0:	d507      	bpl.n	80003e2 <__adddf3+0xe6>
 80003d2:	f04f 0e00 	mov.w	lr, #0
 80003d6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003da:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003de:	eb6e 0101 	sbc.w	r1, lr, r1
 80003e2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003e6:	d31b      	bcc.n	8000420 <__adddf3+0x124>
 80003e8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003ec:	d30c      	bcc.n	8000408 <__adddf3+0x10c>
 80003ee:	0849      	lsrs	r1, r1, #1
 80003f0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003f4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003f8:	f104 0401 	add.w	r4, r4, #1
 80003fc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000400:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000404:	f080 809a 	bcs.w	800053c <__adddf3+0x240>
 8000408:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800040c:	bf08      	it	eq
 800040e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000412:	f150 0000 	adcs.w	r0, r0, #0
 8000416:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800041a:	ea41 0105 	orr.w	r1, r1, r5
 800041e:	bd30      	pop	{r4, r5, pc}
 8000420:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000424:	4140      	adcs	r0, r0
 8000426:	eb41 0101 	adc.w	r1, r1, r1
 800042a:	3c01      	subs	r4, #1
 800042c:	bf28      	it	cs
 800042e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000432:	d2e9      	bcs.n	8000408 <__adddf3+0x10c>
 8000434:	f091 0f00 	teq	r1, #0
 8000438:	bf04      	itt	eq
 800043a:	4601      	moveq	r1, r0
 800043c:	2000      	moveq	r0, #0
 800043e:	fab1 f381 	clz	r3, r1
 8000442:	bf08      	it	eq
 8000444:	3320      	addeq	r3, #32
 8000446:	f1a3 030b 	sub.w	r3, r3, #11
 800044a:	f1b3 0220 	subs.w	r2, r3, #32
 800044e:	da0c      	bge.n	800046a <__adddf3+0x16e>
 8000450:	320c      	adds	r2, #12
 8000452:	dd08      	ble.n	8000466 <__adddf3+0x16a>
 8000454:	f102 0c14 	add.w	ip, r2, #20
 8000458:	f1c2 020c 	rsb	r2, r2, #12
 800045c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000460:	fa21 f102 	lsr.w	r1, r1, r2
 8000464:	e00c      	b.n	8000480 <__adddf3+0x184>
 8000466:	f102 0214 	add.w	r2, r2, #20
 800046a:	bfd8      	it	le
 800046c:	f1c2 0c20 	rsble	ip, r2, #32
 8000470:	fa01 f102 	lsl.w	r1, r1, r2
 8000474:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000478:	bfdc      	itt	le
 800047a:	ea41 010c 	orrle.w	r1, r1, ip
 800047e:	4090      	lslle	r0, r2
 8000480:	1ae4      	subs	r4, r4, r3
 8000482:	bfa2      	ittt	ge
 8000484:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000488:	4329      	orrge	r1, r5
 800048a:	bd30      	popge	{r4, r5, pc}
 800048c:	ea6f 0404 	mvn.w	r4, r4
 8000490:	3c1f      	subs	r4, #31
 8000492:	da1c      	bge.n	80004ce <__adddf3+0x1d2>
 8000494:	340c      	adds	r4, #12
 8000496:	dc0e      	bgt.n	80004b6 <__adddf3+0x1ba>
 8000498:	f104 0414 	add.w	r4, r4, #20
 800049c:	f1c4 0220 	rsb	r2, r4, #32
 80004a0:	fa20 f004 	lsr.w	r0, r0, r4
 80004a4:	fa01 f302 	lsl.w	r3, r1, r2
 80004a8:	ea40 0003 	orr.w	r0, r0, r3
 80004ac:	fa21 f304 	lsr.w	r3, r1, r4
 80004b0:	ea45 0103 	orr.w	r1, r5, r3
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f1c4 040c 	rsb	r4, r4, #12
 80004ba:	f1c4 0220 	rsb	r2, r4, #32
 80004be:	fa20 f002 	lsr.w	r0, r0, r2
 80004c2:	fa01 f304 	lsl.w	r3, r1, r4
 80004c6:	ea40 0003 	orr.w	r0, r0, r3
 80004ca:	4629      	mov	r1, r5
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	fa21 f004 	lsr.w	r0, r1, r4
 80004d2:	4629      	mov	r1, r5
 80004d4:	bd30      	pop	{r4, r5, pc}
 80004d6:	f094 0f00 	teq	r4, #0
 80004da:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004de:	bf06      	itte	eq
 80004e0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004e4:	3401      	addeq	r4, #1
 80004e6:	3d01      	subne	r5, #1
 80004e8:	e74e      	b.n	8000388 <__adddf3+0x8c>
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf18      	it	ne
 80004f0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004f4:	d029      	beq.n	800054a <__adddf3+0x24e>
 80004f6:	ea94 0f05 	teq	r4, r5
 80004fa:	bf08      	it	eq
 80004fc:	ea90 0f02 	teqeq	r0, r2
 8000500:	d005      	beq.n	800050e <__adddf3+0x212>
 8000502:	ea54 0c00 	orrs.w	ip, r4, r0
 8000506:	bf04      	itt	eq
 8000508:	4619      	moveq	r1, r3
 800050a:	4610      	moveq	r0, r2
 800050c:	bd30      	pop	{r4, r5, pc}
 800050e:	ea91 0f03 	teq	r1, r3
 8000512:	bf1e      	ittt	ne
 8000514:	2100      	movne	r1, #0
 8000516:	2000      	movne	r0, #0
 8000518:	bd30      	popne	{r4, r5, pc}
 800051a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800051e:	d105      	bne.n	800052c <__adddf3+0x230>
 8000520:	0040      	lsls	r0, r0, #1
 8000522:	4149      	adcs	r1, r1
 8000524:	bf28      	it	cs
 8000526:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800052a:	bd30      	pop	{r4, r5, pc}
 800052c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000530:	bf3c      	itt	cc
 8000532:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000536:	bd30      	popcc	{r4, r5, pc}
 8000538:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800053c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000540:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000544:	f04f 0000 	mov.w	r0, #0
 8000548:	bd30      	pop	{r4, r5, pc}
 800054a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800054e:	bf1a      	itte	ne
 8000550:	4619      	movne	r1, r3
 8000552:	4610      	movne	r0, r2
 8000554:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000558:	bf1c      	itt	ne
 800055a:	460b      	movne	r3, r1
 800055c:	4602      	movne	r2, r0
 800055e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000562:	bf06      	itte	eq
 8000564:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000568:	ea91 0f03 	teqeq	r1, r3
 800056c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000570:	bd30      	pop	{r4, r5, pc}
 8000572:	bf00      	nop

08000574 <__aeabi_ui2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000588:	f04f 0500 	mov.w	r5, #0
 800058c:	f04f 0100 	mov.w	r1, #0
 8000590:	e750      	b.n	8000434 <__adddf3+0x138>
 8000592:	bf00      	nop

08000594 <__aeabi_i2d>:
 8000594:	f090 0f00 	teq	r0, #0
 8000598:	bf04      	itt	eq
 800059a:	2100      	moveq	r1, #0
 800059c:	4770      	bxeq	lr
 800059e:	b530      	push	{r4, r5, lr}
 80005a0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005a4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005a8:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80005ac:	bf48      	it	mi
 80005ae:	4240      	negmi	r0, r0
 80005b0:	f04f 0100 	mov.w	r1, #0
 80005b4:	e73e      	b.n	8000434 <__adddf3+0x138>
 80005b6:	bf00      	nop

080005b8 <__aeabi_f2d>:
 80005b8:	0042      	lsls	r2, r0, #1
 80005ba:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80005be:	ea4f 0131 	mov.w	r1, r1, rrx
 80005c2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005c6:	bf1f      	itttt	ne
 80005c8:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80005cc:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005d0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005d4:	4770      	bxne	lr
 80005d6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005da:	bf08      	it	eq
 80005dc:	4770      	bxeq	lr
 80005de:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005e2:	bf04      	itt	eq
 80005e4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005e8:	4770      	bxeq	lr
 80005ea:	b530      	push	{r4, r5, lr}
 80005ec:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005f0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005f4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005f8:	e71c      	b.n	8000434 <__adddf3+0x138>
 80005fa:	bf00      	nop

080005fc <__aeabi_ul2d>:
 80005fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000600:	bf08      	it	eq
 8000602:	4770      	bxeq	lr
 8000604:	b530      	push	{r4, r5, lr}
 8000606:	f04f 0500 	mov.w	r5, #0
 800060a:	e00a      	b.n	8000622 <__aeabi_l2d+0x16>

0800060c <__aeabi_l2d>:
 800060c:	ea50 0201 	orrs.w	r2, r0, r1
 8000610:	bf08      	it	eq
 8000612:	4770      	bxeq	lr
 8000614:	b530      	push	{r4, r5, lr}
 8000616:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800061a:	d502      	bpl.n	8000622 <__aeabi_l2d+0x16>
 800061c:	4240      	negs	r0, r0
 800061e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000622:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000626:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800062a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800062e:	f43f aed8 	beq.w	80003e2 <__adddf3+0xe6>
 8000632:	f04f 0203 	mov.w	r2, #3
 8000636:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800063a:	bf18      	it	ne
 800063c:	3203      	addne	r2, #3
 800063e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000642:	bf18      	it	ne
 8000644:	3203      	addne	r2, #3
 8000646:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800064a:	f1c2 0320 	rsb	r3, r2, #32
 800064e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000652:	fa20 f002 	lsr.w	r0, r0, r2
 8000656:	fa01 fe03 	lsl.w	lr, r1, r3
 800065a:	ea40 000e 	orr.w	r0, r0, lr
 800065e:	fa21 f102 	lsr.w	r1, r1, r2
 8000662:	4414      	add	r4, r2
 8000664:	e6bd      	b.n	80003e2 <__adddf3+0xe6>
 8000666:	bf00      	nop

08000668 <__aeabi_dmul>:
 8000668:	b570      	push	{r4, r5, r6, lr}
 800066a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800066e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000672:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000676:	bf1d      	ittte	ne
 8000678:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800067c:	ea94 0f0c 	teqne	r4, ip
 8000680:	ea95 0f0c 	teqne	r5, ip
 8000684:	f000 f8de 	bleq	8000844 <__aeabi_dmul+0x1dc>
 8000688:	442c      	add	r4, r5
 800068a:	ea81 0603 	eor.w	r6, r1, r3
 800068e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000692:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000696:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800069a:	bf18      	it	ne
 800069c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80006a0:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006a4:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80006a8:	d038      	beq.n	800071c <__aeabi_dmul+0xb4>
 80006aa:	fba0 ce02 	umull	ip, lr, r0, r2
 80006ae:	f04f 0500 	mov.w	r5, #0
 80006b2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80006b6:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80006ba:	fbe0 e503 	umlal	lr, r5, r0, r3
 80006be:	f04f 0600 	mov.w	r6, #0
 80006c2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006c6:	f09c 0f00 	teq	ip, #0
 80006ca:	bf18      	it	ne
 80006cc:	f04e 0e01 	orrne.w	lr, lr, #1
 80006d0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006d4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006d8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006dc:	d204      	bcs.n	80006e8 <__aeabi_dmul+0x80>
 80006de:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006e2:	416d      	adcs	r5, r5
 80006e4:	eb46 0606 	adc.w	r6, r6, r6
 80006e8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ec:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006f0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006f4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006f8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006fc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000700:	bf88      	it	hi
 8000702:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000706:	d81e      	bhi.n	8000746 <__aeabi_dmul+0xde>
 8000708:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800070c:	bf08      	it	eq
 800070e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000712:	f150 0000 	adcs.w	r0, r0, #0
 8000716:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000720:	ea46 0101 	orr.w	r1, r6, r1
 8000724:	ea40 0002 	orr.w	r0, r0, r2
 8000728:	ea81 0103 	eor.w	r1, r1, r3
 800072c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000730:	bfc2      	ittt	gt
 8000732:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000736:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800073a:	bd70      	popgt	{r4, r5, r6, pc}
 800073c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000740:	f04f 0e00 	mov.w	lr, #0
 8000744:	3c01      	subs	r4, #1
 8000746:	f300 80ab 	bgt.w	80008a0 <__aeabi_dmul+0x238>
 800074a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800074e:	bfde      	ittt	le
 8000750:	2000      	movle	r0, #0
 8000752:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000756:	bd70      	pople	{r4, r5, r6, pc}
 8000758:	f1c4 0400 	rsb	r4, r4, #0
 800075c:	3c20      	subs	r4, #32
 800075e:	da35      	bge.n	80007cc <__aeabi_dmul+0x164>
 8000760:	340c      	adds	r4, #12
 8000762:	dc1b      	bgt.n	800079c <__aeabi_dmul+0x134>
 8000764:	f104 0414 	add.w	r4, r4, #20
 8000768:	f1c4 0520 	rsb	r5, r4, #32
 800076c:	fa00 f305 	lsl.w	r3, r0, r5
 8000770:	fa20 f004 	lsr.w	r0, r0, r4
 8000774:	fa01 f205 	lsl.w	r2, r1, r5
 8000778:	ea40 0002 	orr.w	r0, r0, r2
 800077c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000780:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000784:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000788:	fa21 f604 	lsr.w	r6, r1, r4
 800078c:	eb42 0106 	adc.w	r1, r2, r6
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 040c 	rsb	r4, r4, #12
 80007a0:	f1c4 0520 	rsb	r5, r4, #32
 80007a4:	fa00 f304 	lsl.w	r3, r0, r4
 80007a8:	fa20 f005 	lsr.w	r0, r0, r5
 80007ac:	fa01 f204 	lsl.w	r2, r1, r4
 80007b0:	ea40 0002 	orr.w	r0, r0, r2
 80007b4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007b8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80007bc:	f141 0100 	adc.w	r1, r1, #0
 80007c0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007c4:	bf08      	it	eq
 80007c6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007ca:	bd70      	pop	{r4, r5, r6, pc}
 80007cc:	f1c4 0520 	rsb	r5, r4, #32
 80007d0:	fa00 f205 	lsl.w	r2, r0, r5
 80007d4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007d8:	fa20 f304 	lsr.w	r3, r0, r4
 80007dc:	fa01 f205 	lsl.w	r2, r1, r5
 80007e0:	ea43 0302 	orr.w	r3, r3, r2
 80007e4:	fa21 f004 	lsr.w	r0, r1, r4
 80007e8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007ec:	fa21 f204 	lsr.w	r2, r1, r4
 80007f0:	ea20 0002 	bic.w	r0, r0, r2
 80007f4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007f8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007fc:	bf08      	it	eq
 80007fe:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000802:	bd70      	pop	{r4, r5, r6, pc}
 8000804:	f094 0f00 	teq	r4, #0
 8000808:	d10f      	bne.n	800082a <__aeabi_dmul+0x1c2>
 800080a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800080e:	0040      	lsls	r0, r0, #1
 8000810:	eb41 0101 	adc.w	r1, r1, r1
 8000814:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000818:	bf08      	it	eq
 800081a:	3c01      	subeq	r4, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1a6>
 800081e:	ea41 0106 	orr.w	r1, r1, r6
 8000822:	f095 0f00 	teq	r5, #0
 8000826:	bf18      	it	ne
 8000828:	4770      	bxne	lr
 800082a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800082e:	0052      	lsls	r2, r2, #1
 8000830:	eb43 0303 	adc.w	r3, r3, r3
 8000834:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000838:	bf08      	it	eq
 800083a:	3d01      	subeq	r5, #1
 800083c:	d0f7      	beq.n	800082e <__aeabi_dmul+0x1c6>
 800083e:	ea43 0306 	orr.w	r3, r3, r6
 8000842:	4770      	bx	lr
 8000844:	ea94 0f0c 	teq	r4, ip
 8000848:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800084c:	bf18      	it	ne
 800084e:	ea95 0f0c 	teqne	r5, ip
 8000852:	d00c      	beq.n	800086e <__aeabi_dmul+0x206>
 8000854:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000858:	bf18      	it	ne
 800085a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085e:	d1d1      	bne.n	8000804 <__aeabi_dmul+0x19c>
 8000860:	ea81 0103 	eor.w	r1, r1, r3
 8000864:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000868:	f04f 0000 	mov.w	r0, #0
 800086c:	bd70      	pop	{r4, r5, r6, pc}
 800086e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000872:	bf06      	itte	eq
 8000874:	4610      	moveq	r0, r2
 8000876:	4619      	moveq	r1, r3
 8000878:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800087c:	d019      	beq.n	80008b2 <__aeabi_dmul+0x24a>
 800087e:	ea94 0f0c 	teq	r4, ip
 8000882:	d102      	bne.n	800088a <__aeabi_dmul+0x222>
 8000884:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000888:	d113      	bne.n	80008b2 <__aeabi_dmul+0x24a>
 800088a:	ea95 0f0c 	teq	r5, ip
 800088e:	d105      	bne.n	800089c <__aeabi_dmul+0x234>
 8000890:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000894:	bf1c      	itt	ne
 8000896:	4610      	movne	r0, r2
 8000898:	4619      	movne	r1, r3
 800089a:	d10a      	bne.n	80008b2 <__aeabi_dmul+0x24a>
 800089c:	ea81 0103 	eor.w	r1, r1, r3
 80008a0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80008a4:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80008a8:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80008ac:	f04f 0000 	mov.w	r0, #0
 80008b0:	bd70      	pop	{r4, r5, r6, pc}
 80008b2:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80008b6:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80008ba:	bd70      	pop	{r4, r5, r6, pc}

080008bc <__aeabi_ddiv>:
 80008bc:	b570      	push	{r4, r5, r6, lr}
 80008be:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80008c2:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80008c6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008ca:	bf1d      	ittte	ne
 80008cc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008d0:	ea94 0f0c 	teqne	r4, ip
 80008d4:	ea95 0f0c 	teqne	r5, ip
 80008d8:	f000 f8a7 	bleq	8000a2a <__aeabi_ddiv+0x16e>
 80008dc:	eba4 0405 	sub.w	r4, r4, r5
 80008e0:	ea81 0e03 	eor.w	lr, r1, r3
 80008e4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ec:	f000 8088 	beq.w	8000a00 <__aeabi_ddiv+0x144>
 80008f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008f4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008f8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008fc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000900:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000904:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000908:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800090c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000910:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000914:	429d      	cmp	r5, r3
 8000916:	bf08      	it	eq
 8000918:	4296      	cmpeq	r6, r2
 800091a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800091e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000922:	d202      	bcs.n	800092a <__aeabi_ddiv+0x6e>
 8000924:	085b      	lsrs	r3, r3, #1
 8000926:	ea4f 0232 	mov.w	r2, r2, rrx
 800092a:	1ab6      	subs	r6, r6, r2
 800092c:	eb65 0503 	sbc.w	r5, r5, r3
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800093a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000968:	085b      	lsrs	r3, r3, #1
 800096a:	ea4f 0232 	mov.w	r2, r2, rrx
 800096e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000972:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000976:	bf22      	ittt	cs
 8000978:	1ab6      	subcs	r6, r6, r2
 800097a:	4675      	movcs	r5, lr
 800097c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000980:	085b      	lsrs	r3, r3, #1
 8000982:	ea4f 0232 	mov.w	r2, r2, rrx
 8000986:	ebb6 0e02 	subs.w	lr, r6, r2
 800098a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800098e:	bf22      	ittt	cs
 8000990:	1ab6      	subcs	r6, r6, r2
 8000992:	4675      	movcs	r5, lr
 8000994:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000998:	ea55 0e06 	orrs.w	lr, r5, r6
 800099c:	d018      	beq.n	80009d0 <__aeabi_ddiv+0x114>
 800099e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80009a2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80009a6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80009aa:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80009ae:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80009b2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80009b6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80009ba:	d1c0      	bne.n	800093e <__aeabi_ddiv+0x82>
 80009bc:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009c0:	d10b      	bne.n	80009da <__aeabi_ddiv+0x11e>
 80009c2:	ea41 0100 	orr.w	r1, r1, r0
 80009c6:	f04f 0000 	mov.w	r0, #0
 80009ca:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80009ce:	e7b6      	b.n	800093e <__aeabi_ddiv+0x82>
 80009d0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009d4:	bf04      	itt	eq
 80009d6:	4301      	orreq	r1, r0
 80009d8:	2000      	moveq	r0, #0
 80009da:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009de:	bf88      	it	hi
 80009e0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009e4:	f63f aeaf 	bhi.w	8000746 <__aeabi_dmul+0xde>
 80009e8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ec:	bf04      	itt	eq
 80009ee:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009f2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009f6:	f150 0000 	adcs.w	r0, r0, #0
 80009fa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009fe:	bd70      	pop	{r4, r5, r6, pc}
 8000a00:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000a04:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000a08:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000a0c:	bfc2      	ittt	gt
 8000a0e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000a12:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000a16:	bd70      	popgt	{r4, r5, r6, pc}
 8000a18:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000a1c:	f04f 0e00 	mov.w	lr, #0
 8000a20:	3c01      	subs	r4, #1
 8000a22:	e690      	b.n	8000746 <__aeabi_dmul+0xde>
 8000a24:	ea45 0e06 	orr.w	lr, r5, r6
 8000a28:	e68d      	b.n	8000746 <__aeabi_dmul+0xde>
 8000a2a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a2e:	ea94 0f0c 	teq	r4, ip
 8000a32:	bf08      	it	eq
 8000a34:	ea95 0f0c 	teqeq	r5, ip
 8000a38:	f43f af3b 	beq.w	80008b2 <__aeabi_dmul+0x24a>
 8000a3c:	ea94 0f0c 	teq	r4, ip
 8000a40:	d10a      	bne.n	8000a58 <__aeabi_ddiv+0x19c>
 8000a42:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a46:	f47f af34 	bne.w	80008b2 <__aeabi_dmul+0x24a>
 8000a4a:	ea95 0f0c 	teq	r5, ip
 8000a4e:	f47f af25 	bne.w	800089c <__aeabi_dmul+0x234>
 8000a52:	4610      	mov	r0, r2
 8000a54:	4619      	mov	r1, r3
 8000a56:	e72c      	b.n	80008b2 <__aeabi_dmul+0x24a>
 8000a58:	ea95 0f0c 	teq	r5, ip
 8000a5c:	d106      	bne.n	8000a6c <__aeabi_ddiv+0x1b0>
 8000a5e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a62:	f43f aefd 	beq.w	8000860 <__aeabi_dmul+0x1f8>
 8000a66:	4610      	mov	r0, r2
 8000a68:	4619      	mov	r1, r3
 8000a6a:	e722      	b.n	80008b2 <__aeabi_dmul+0x24a>
 8000a6c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a76:	f47f aec5 	bne.w	8000804 <__aeabi_dmul+0x19c>
 8000a7a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a7e:	f47f af0d 	bne.w	800089c <__aeabi_dmul+0x234>
 8000a82:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a86:	f47f aeeb 	bne.w	8000860 <__aeabi_dmul+0x1f8>
 8000a8a:	e712      	b.n	80008b2 <__aeabi_dmul+0x24a>

08000a8c <__gedf2>:
 8000a8c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a90:	e006      	b.n	8000aa0 <__cmpdf2+0x4>
 8000a92:	bf00      	nop

08000a94 <__ledf2>:
 8000a94:	f04f 0c01 	mov.w	ip, #1
 8000a98:	e002      	b.n	8000aa0 <__cmpdf2+0x4>
 8000a9a:	bf00      	nop

08000a9c <__cmpdf2>:
 8000a9c:	f04f 0c01 	mov.w	ip, #1
 8000aa0:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000aa4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aac:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab0:	bf18      	it	ne
 8000ab2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000ab6:	d01b      	beq.n	8000af0 <__cmpdf2+0x54>
 8000ab8:	b001      	add	sp, #4
 8000aba:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000abe:	bf0c      	ite	eq
 8000ac0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000ac4:	ea91 0f03 	teqne	r1, r3
 8000ac8:	bf02      	ittt	eq
 8000aca:	ea90 0f02 	teqeq	r0, r2
 8000ace:	2000      	moveq	r0, #0
 8000ad0:	4770      	bxeq	lr
 8000ad2:	f110 0f00 	cmn.w	r0, #0
 8000ad6:	ea91 0f03 	teq	r1, r3
 8000ada:	bf58      	it	pl
 8000adc:	4299      	cmppl	r1, r3
 8000ade:	bf08      	it	eq
 8000ae0:	4290      	cmpeq	r0, r2
 8000ae2:	bf2c      	ite	cs
 8000ae4:	17d8      	asrcs	r0, r3, #31
 8000ae6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aea:	f040 0001 	orr.w	r0, r0, #1
 8000aee:	4770      	bx	lr
 8000af0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000af4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000af8:	d102      	bne.n	8000b00 <__cmpdf2+0x64>
 8000afa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000afe:	d107      	bne.n	8000b10 <__cmpdf2+0x74>
 8000b00:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b04:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b08:	d1d6      	bne.n	8000ab8 <__cmpdf2+0x1c>
 8000b0a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b0e:	d0d3      	beq.n	8000ab8 <__cmpdf2+0x1c>
 8000b10:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000b14:	4770      	bx	lr
 8000b16:	bf00      	nop

08000b18 <__aeabi_cdrcmple>:
 8000b18:	4684      	mov	ip, r0
 8000b1a:	4610      	mov	r0, r2
 8000b1c:	4662      	mov	r2, ip
 8000b1e:	468c      	mov	ip, r1
 8000b20:	4619      	mov	r1, r3
 8000b22:	4663      	mov	r3, ip
 8000b24:	e000      	b.n	8000b28 <__aeabi_cdcmpeq>
 8000b26:	bf00      	nop

08000b28 <__aeabi_cdcmpeq>:
 8000b28:	b501      	push	{r0, lr}
 8000b2a:	f7ff ffb7 	bl	8000a9c <__cmpdf2>
 8000b2e:	2800      	cmp	r0, #0
 8000b30:	bf48      	it	mi
 8000b32:	f110 0f00 	cmnmi.w	r0, #0
 8000b36:	bd01      	pop	{r0, pc}

08000b38 <__aeabi_dcmpeq>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff fff4 	bl	8000b28 <__aeabi_cdcmpeq>
 8000b40:	bf0c      	ite	eq
 8000b42:	2001      	moveq	r0, #1
 8000b44:	2000      	movne	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmplt>:
 8000b4c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b50:	f7ff ffea 	bl	8000b28 <__aeabi_cdcmpeq>
 8000b54:	bf34      	ite	cc
 8000b56:	2001      	movcc	r0, #1
 8000b58:	2000      	movcs	r0, #0
 8000b5a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5e:	bf00      	nop

08000b60 <__aeabi_dcmple>:
 8000b60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b64:	f7ff ffe0 	bl	8000b28 <__aeabi_cdcmpeq>
 8000b68:	bf94      	ite	ls
 8000b6a:	2001      	movls	r0, #1
 8000b6c:	2000      	movhi	r0, #0
 8000b6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b72:	bf00      	nop

08000b74 <__aeabi_dcmpge>:
 8000b74:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b78:	f7ff ffce 	bl	8000b18 <__aeabi_cdrcmple>
 8000b7c:	bf94      	ite	ls
 8000b7e:	2001      	movls	r0, #1
 8000b80:	2000      	movhi	r0, #0
 8000b82:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b86:	bf00      	nop

08000b88 <__aeabi_dcmpgt>:
 8000b88:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b8c:	f7ff ffc4 	bl	8000b18 <__aeabi_cdrcmple>
 8000b90:	bf34      	ite	cc
 8000b92:	2001      	movcc	r0, #1
 8000b94:	2000      	movcs	r0, #0
 8000b96:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b9a:	bf00      	nop

08000b9c <__aeabi_dcmpun>:
 8000b9c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ba0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ba4:	d102      	bne.n	8000bac <__aeabi_dcmpun+0x10>
 8000ba6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000baa:	d10a      	bne.n	8000bc2 <__aeabi_dcmpun+0x26>
 8000bac:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000bb0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000bb4:	d102      	bne.n	8000bbc <__aeabi_dcmpun+0x20>
 8000bb6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000bba:	d102      	bne.n	8000bc2 <__aeabi_dcmpun+0x26>
 8000bbc:	f04f 0000 	mov.w	r0, #0
 8000bc0:	4770      	bx	lr
 8000bc2:	f04f 0001 	mov.w	r0, #1
 8000bc6:	4770      	bx	lr

08000bc8 <__aeabi_d2iz>:
 8000bc8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bcc:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bd0:	d215      	bcs.n	8000bfe <__aeabi_d2iz+0x36>
 8000bd2:	d511      	bpl.n	8000bf8 <__aeabi_d2iz+0x30>
 8000bd4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bd8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bdc:	d912      	bls.n	8000c04 <__aeabi_d2iz+0x3c>
 8000bde:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000be2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000be6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bea:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bee:	fa23 f002 	lsr.w	r0, r3, r2
 8000bf2:	bf18      	it	ne
 8000bf4:	4240      	negne	r0, r0
 8000bf6:	4770      	bx	lr
 8000bf8:	f04f 0000 	mov.w	r0, #0
 8000bfc:	4770      	bx	lr
 8000bfe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c02:	d105      	bne.n	8000c10 <__aeabi_d2iz+0x48>
 8000c04:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000c08:	bf08      	it	eq
 8000c0a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000c0e:	4770      	bx	lr
 8000c10:	f04f 0000 	mov.w	r0, #0
 8000c14:	4770      	bx	lr
 8000c16:	bf00      	nop

08000c18 <__aeabi_uldivmod>:
 8000c18:	b953      	cbnz	r3, 8000c30 <__aeabi_uldivmod+0x18>
 8000c1a:	b94a      	cbnz	r2, 8000c30 <__aeabi_uldivmod+0x18>
 8000c1c:	2900      	cmp	r1, #0
 8000c1e:	bf08      	it	eq
 8000c20:	2800      	cmpeq	r0, #0
 8000c22:	bf1c      	itt	ne
 8000c24:	f04f 31ff 	movne.w	r1, #4294967295
 8000c28:	f04f 30ff 	movne.w	r0, #4294967295
 8000c2c:	f000 b96a 	b.w	8000f04 <__aeabi_idiv0>
 8000c30:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c34:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c38:	f000 f806 	bl	8000c48 <__udivmoddi4>
 8000c3c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c40:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c44:	b004      	add	sp, #16
 8000c46:	4770      	bx	lr

08000c48 <__udivmoddi4>:
 8000c48:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c4c:	9d08      	ldr	r5, [sp, #32]
 8000c4e:	460c      	mov	r4, r1
 8000c50:	2b00      	cmp	r3, #0
 8000c52:	d14e      	bne.n	8000cf2 <__udivmoddi4+0xaa>
 8000c54:	4694      	mov	ip, r2
 8000c56:	458c      	cmp	ip, r1
 8000c58:	4686      	mov	lr, r0
 8000c5a:	fab2 f282 	clz	r2, r2
 8000c5e:	d962      	bls.n	8000d26 <__udivmoddi4+0xde>
 8000c60:	b14a      	cbz	r2, 8000c76 <__udivmoddi4+0x2e>
 8000c62:	f1c2 0320 	rsb	r3, r2, #32
 8000c66:	4091      	lsls	r1, r2
 8000c68:	fa20 f303 	lsr.w	r3, r0, r3
 8000c6c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c70:	4319      	orrs	r1, r3
 8000c72:	fa00 fe02 	lsl.w	lr, r0, r2
 8000c76:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c7a:	fa1f f68c 	uxth.w	r6, ip
 8000c7e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000c82:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000c86:	fb07 1114 	mls	r1, r7, r4, r1
 8000c8a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c8e:	fb04 f106 	mul.w	r1, r4, r6
 8000c92:	4299      	cmp	r1, r3
 8000c94:	d90a      	bls.n	8000cac <__udivmoddi4+0x64>
 8000c96:	eb1c 0303 	adds.w	r3, ip, r3
 8000c9a:	f104 30ff 	add.w	r0, r4, #4294967295
 8000c9e:	f080 8112 	bcs.w	8000ec6 <__udivmoddi4+0x27e>
 8000ca2:	4299      	cmp	r1, r3
 8000ca4:	f240 810f 	bls.w	8000ec6 <__udivmoddi4+0x27e>
 8000ca8:	3c02      	subs	r4, #2
 8000caa:	4463      	add	r3, ip
 8000cac:	1a59      	subs	r1, r3, r1
 8000cae:	fa1f f38e 	uxth.w	r3, lr
 8000cb2:	fbb1 f0f7 	udiv	r0, r1, r7
 8000cb6:	fb07 1110 	mls	r1, r7, r0, r1
 8000cba:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cbe:	fb00 f606 	mul.w	r6, r0, r6
 8000cc2:	429e      	cmp	r6, r3
 8000cc4:	d90a      	bls.n	8000cdc <__udivmoddi4+0x94>
 8000cc6:	eb1c 0303 	adds.w	r3, ip, r3
 8000cca:	f100 31ff 	add.w	r1, r0, #4294967295
 8000cce:	f080 80fc 	bcs.w	8000eca <__udivmoddi4+0x282>
 8000cd2:	429e      	cmp	r6, r3
 8000cd4:	f240 80f9 	bls.w	8000eca <__udivmoddi4+0x282>
 8000cd8:	4463      	add	r3, ip
 8000cda:	3802      	subs	r0, #2
 8000cdc:	1b9b      	subs	r3, r3, r6
 8000cde:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000ce2:	2100      	movs	r1, #0
 8000ce4:	b11d      	cbz	r5, 8000cee <__udivmoddi4+0xa6>
 8000ce6:	40d3      	lsrs	r3, r2
 8000ce8:	2200      	movs	r2, #0
 8000cea:	e9c5 3200 	strd	r3, r2, [r5]
 8000cee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cf2:	428b      	cmp	r3, r1
 8000cf4:	d905      	bls.n	8000d02 <__udivmoddi4+0xba>
 8000cf6:	b10d      	cbz	r5, 8000cfc <__udivmoddi4+0xb4>
 8000cf8:	e9c5 0100 	strd	r0, r1, [r5]
 8000cfc:	2100      	movs	r1, #0
 8000cfe:	4608      	mov	r0, r1
 8000d00:	e7f5      	b.n	8000cee <__udivmoddi4+0xa6>
 8000d02:	fab3 f183 	clz	r1, r3
 8000d06:	2900      	cmp	r1, #0
 8000d08:	d146      	bne.n	8000d98 <__udivmoddi4+0x150>
 8000d0a:	42a3      	cmp	r3, r4
 8000d0c:	d302      	bcc.n	8000d14 <__udivmoddi4+0xcc>
 8000d0e:	4290      	cmp	r0, r2
 8000d10:	f0c0 80f0 	bcc.w	8000ef4 <__udivmoddi4+0x2ac>
 8000d14:	1a86      	subs	r6, r0, r2
 8000d16:	eb64 0303 	sbc.w	r3, r4, r3
 8000d1a:	2001      	movs	r0, #1
 8000d1c:	2d00      	cmp	r5, #0
 8000d1e:	d0e6      	beq.n	8000cee <__udivmoddi4+0xa6>
 8000d20:	e9c5 6300 	strd	r6, r3, [r5]
 8000d24:	e7e3      	b.n	8000cee <__udivmoddi4+0xa6>
 8000d26:	2a00      	cmp	r2, #0
 8000d28:	f040 8090 	bne.w	8000e4c <__udivmoddi4+0x204>
 8000d2c:	eba1 040c 	sub.w	r4, r1, ip
 8000d30:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d34:	fa1f f78c 	uxth.w	r7, ip
 8000d38:	2101      	movs	r1, #1
 8000d3a:	fbb4 f6f8 	udiv	r6, r4, r8
 8000d3e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d42:	fb08 4416 	mls	r4, r8, r6, r4
 8000d46:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d4a:	fb07 f006 	mul.w	r0, r7, r6
 8000d4e:	4298      	cmp	r0, r3
 8000d50:	d908      	bls.n	8000d64 <__udivmoddi4+0x11c>
 8000d52:	eb1c 0303 	adds.w	r3, ip, r3
 8000d56:	f106 34ff 	add.w	r4, r6, #4294967295
 8000d5a:	d202      	bcs.n	8000d62 <__udivmoddi4+0x11a>
 8000d5c:	4298      	cmp	r0, r3
 8000d5e:	f200 80cd 	bhi.w	8000efc <__udivmoddi4+0x2b4>
 8000d62:	4626      	mov	r6, r4
 8000d64:	1a1c      	subs	r4, r3, r0
 8000d66:	fa1f f38e 	uxth.w	r3, lr
 8000d6a:	fbb4 f0f8 	udiv	r0, r4, r8
 8000d6e:	fb08 4410 	mls	r4, r8, r0, r4
 8000d72:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d76:	fb00 f707 	mul.w	r7, r0, r7
 8000d7a:	429f      	cmp	r7, r3
 8000d7c:	d908      	bls.n	8000d90 <__udivmoddi4+0x148>
 8000d7e:	eb1c 0303 	adds.w	r3, ip, r3
 8000d82:	f100 34ff 	add.w	r4, r0, #4294967295
 8000d86:	d202      	bcs.n	8000d8e <__udivmoddi4+0x146>
 8000d88:	429f      	cmp	r7, r3
 8000d8a:	f200 80b0 	bhi.w	8000eee <__udivmoddi4+0x2a6>
 8000d8e:	4620      	mov	r0, r4
 8000d90:	1bdb      	subs	r3, r3, r7
 8000d92:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d96:	e7a5      	b.n	8000ce4 <__udivmoddi4+0x9c>
 8000d98:	f1c1 0620 	rsb	r6, r1, #32
 8000d9c:	408b      	lsls	r3, r1
 8000d9e:	fa22 f706 	lsr.w	r7, r2, r6
 8000da2:	431f      	orrs	r7, r3
 8000da4:	fa20 fc06 	lsr.w	ip, r0, r6
 8000da8:	fa04 f301 	lsl.w	r3, r4, r1
 8000dac:	ea43 030c 	orr.w	r3, r3, ip
 8000db0:	40f4      	lsrs	r4, r6
 8000db2:	fa00 f801 	lsl.w	r8, r0, r1
 8000db6:	0c38      	lsrs	r0, r7, #16
 8000db8:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000dbc:	fbb4 fef0 	udiv	lr, r4, r0
 8000dc0:	fa1f fc87 	uxth.w	ip, r7
 8000dc4:	fb00 441e 	mls	r4, r0, lr, r4
 8000dc8:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000dcc:	fb0e f90c 	mul.w	r9, lr, ip
 8000dd0:	45a1      	cmp	r9, r4
 8000dd2:	fa02 f201 	lsl.w	r2, r2, r1
 8000dd6:	d90a      	bls.n	8000dee <__udivmoddi4+0x1a6>
 8000dd8:	193c      	adds	r4, r7, r4
 8000dda:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000dde:	f080 8084 	bcs.w	8000eea <__udivmoddi4+0x2a2>
 8000de2:	45a1      	cmp	r9, r4
 8000de4:	f240 8081 	bls.w	8000eea <__udivmoddi4+0x2a2>
 8000de8:	f1ae 0e02 	sub.w	lr, lr, #2
 8000dec:	443c      	add	r4, r7
 8000dee:	eba4 0409 	sub.w	r4, r4, r9
 8000df2:	fa1f f983 	uxth.w	r9, r3
 8000df6:	fbb4 f3f0 	udiv	r3, r4, r0
 8000dfa:	fb00 4413 	mls	r4, r0, r3, r4
 8000dfe:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e02:	fb03 fc0c 	mul.w	ip, r3, ip
 8000e06:	45a4      	cmp	ip, r4
 8000e08:	d907      	bls.n	8000e1a <__udivmoddi4+0x1d2>
 8000e0a:	193c      	adds	r4, r7, r4
 8000e0c:	f103 30ff 	add.w	r0, r3, #4294967295
 8000e10:	d267      	bcs.n	8000ee2 <__udivmoddi4+0x29a>
 8000e12:	45a4      	cmp	ip, r4
 8000e14:	d965      	bls.n	8000ee2 <__udivmoddi4+0x29a>
 8000e16:	3b02      	subs	r3, #2
 8000e18:	443c      	add	r4, r7
 8000e1a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000e1e:	fba0 9302 	umull	r9, r3, r0, r2
 8000e22:	eba4 040c 	sub.w	r4, r4, ip
 8000e26:	429c      	cmp	r4, r3
 8000e28:	46ce      	mov	lr, r9
 8000e2a:	469c      	mov	ip, r3
 8000e2c:	d351      	bcc.n	8000ed2 <__udivmoddi4+0x28a>
 8000e2e:	d04e      	beq.n	8000ece <__udivmoddi4+0x286>
 8000e30:	b155      	cbz	r5, 8000e48 <__udivmoddi4+0x200>
 8000e32:	ebb8 030e 	subs.w	r3, r8, lr
 8000e36:	eb64 040c 	sbc.w	r4, r4, ip
 8000e3a:	fa04 f606 	lsl.w	r6, r4, r6
 8000e3e:	40cb      	lsrs	r3, r1
 8000e40:	431e      	orrs	r6, r3
 8000e42:	40cc      	lsrs	r4, r1
 8000e44:	e9c5 6400 	strd	r6, r4, [r5]
 8000e48:	2100      	movs	r1, #0
 8000e4a:	e750      	b.n	8000cee <__udivmoddi4+0xa6>
 8000e4c:	f1c2 0320 	rsb	r3, r2, #32
 8000e50:	fa20 f103 	lsr.w	r1, r0, r3
 8000e54:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e58:	fa24 f303 	lsr.w	r3, r4, r3
 8000e5c:	4094      	lsls	r4, r2
 8000e5e:	430c      	orrs	r4, r1
 8000e60:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e64:	fa00 fe02 	lsl.w	lr, r0, r2
 8000e68:	fa1f f78c 	uxth.w	r7, ip
 8000e6c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e70:	fb08 3110 	mls	r1, r8, r0, r3
 8000e74:	0c23      	lsrs	r3, r4, #16
 8000e76:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e7a:	fb00 f107 	mul.w	r1, r0, r7
 8000e7e:	4299      	cmp	r1, r3
 8000e80:	d908      	bls.n	8000e94 <__udivmoddi4+0x24c>
 8000e82:	eb1c 0303 	adds.w	r3, ip, r3
 8000e86:	f100 36ff 	add.w	r6, r0, #4294967295
 8000e8a:	d22c      	bcs.n	8000ee6 <__udivmoddi4+0x29e>
 8000e8c:	4299      	cmp	r1, r3
 8000e8e:	d92a      	bls.n	8000ee6 <__udivmoddi4+0x29e>
 8000e90:	3802      	subs	r0, #2
 8000e92:	4463      	add	r3, ip
 8000e94:	1a5b      	subs	r3, r3, r1
 8000e96:	b2a4      	uxth	r4, r4
 8000e98:	fbb3 f1f8 	udiv	r1, r3, r8
 8000e9c:	fb08 3311 	mls	r3, r8, r1, r3
 8000ea0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000ea4:	fb01 f307 	mul.w	r3, r1, r7
 8000ea8:	42a3      	cmp	r3, r4
 8000eaa:	d908      	bls.n	8000ebe <__udivmoddi4+0x276>
 8000eac:	eb1c 0404 	adds.w	r4, ip, r4
 8000eb0:	f101 36ff 	add.w	r6, r1, #4294967295
 8000eb4:	d213      	bcs.n	8000ede <__udivmoddi4+0x296>
 8000eb6:	42a3      	cmp	r3, r4
 8000eb8:	d911      	bls.n	8000ede <__udivmoddi4+0x296>
 8000eba:	3902      	subs	r1, #2
 8000ebc:	4464      	add	r4, ip
 8000ebe:	1ae4      	subs	r4, r4, r3
 8000ec0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000ec4:	e739      	b.n	8000d3a <__udivmoddi4+0xf2>
 8000ec6:	4604      	mov	r4, r0
 8000ec8:	e6f0      	b.n	8000cac <__udivmoddi4+0x64>
 8000eca:	4608      	mov	r0, r1
 8000ecc:	e706      	b.n	8000cdc <__udivmoddi4+0x94>
 8000ece:	45c8      	cmp	r8, r9
 8000ed0:	d2ae      	bcs.n	8000e30 <__udivmoddi4+0x1e8>
 8000ed2:	ebb9 0e02 	subs.w	lr, r9, r2
 8000ed6:	eb63 0c07 	sbc.w	ip, r3, r7
 8000eda:	3801      	subs	r0, #1
 8000edc:	e7a8      	b.n	8000e30 <__udivmoddi4+0x1e8>
 8000ede:	4631      	mov	r1, r6
 8000ee0:	e7ed      	b.n	8000ebe <__udivmoddi4+0x276>
 8000ee2:	4603      	mov	r3, r0
 8000ee4:	e799      	b.n	8000e1a <__udivmoddi4+0x1d2>
 8000ee6:	4630      	mov	r0, r6
 8000ee8:	e7d4      	b.n	8000e94 <__udivmoddi4+0x24c>
 8000eea:	46d6      	mov	lr, sl
 8000eec:	e77f      	b.n	8000dee <__udivmoddi4+0x1a6>
 8000eee:	4463      	add	r3, ip
 8000ef0:	3802      	subs	r0, #2
 8000ef2:	e74d      	b.n	8000d90 <__udivmoddi4+0x148>
 8000ef4:	4606      	mov	r6, r0
 8000ef6:	4623      	mov	r3, r4
 8000ef8:	4608      	mov	r0, r1
 8000efa:	e70f      	b.n	8000d1c <__udivmoddi4+0xd4>
 8000efc:	3e02      	subs	r6, #2
 8000efe:	4463      	add	r3, ip
 8000f00:	e730      	b.n	8000d64 <__udivmoddi4+0x11c>
 8000f02:	bf00      	nop

08000f04 <__aeabi_idiv0>:
 8000f04:	4770      	bx	lr
 8000f06:	bf00      	nop

08000f08 <SIMTransmitSleep>:
extern UART_HandleTypeDef huart1;
extern UART_HandleTypeDef huart3;

uint8_t buffer_sleep[100] = {0};

void SIMTransmitSleep(char *cmd){
 8000f08:	b580      	push	{r7, lr}
 8000f0a:	b082      	sub	sp, #8
 8000f0c:	af00      	add	r7, sp, #0
 8000f0e:	6078      	str	r0, [r7, #4]
  memset(buffer_sleep,0,sizeof(buffer_sleep));
 8000f10:	2264      	movs	r2, #100	@ 0x64
 8000f12:	2100      	movs	r1, #0
 8000f14:	480c      	ldr	r0, [pc, #48]	@ (8000f48 <SIMTransmitSleep+0x40>)
 8000f16:	f005 fe82 	bl	8006c1e <memset>
  HAL_UART_Transmit(&huart1,(uint8_t *)cmd,strlen(cmd),1000);
 8000f1a:	6878      	ldr	r0, [r7, #4]
 8000f1c:	f7ff f9e0 	bl	80002e0 <strlen>
 8000f20:	4603      	mov	r3, r0
 8000f22:	b29a      	uxth	r2, r3
 8000f24:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000f28:	6879      	ldr	r1, [r7, #4]
 8000f2a:	4808      	ldr	r0, [pc, #32]	@ (8000f4c <SIMTransmitSleep+0x44>)
 8000f2c:	f003 fdc8 	bl	8004ac0 <HAL_UART_Transmit>
  HAL_UART_Receive(&huart1, buffer_sleep, sizeof(buffer_sleep), 1000);
 8000f30:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000f34:	2264      	movs	r2, #100	@ 0x64
 8000f36:	4904      	ldr	r1, [pc, #16]	@ (8000f48 <SIMTransmitSleep+0x40>)
 8000f38:	4804      	ldr	r0, [pc, #16]	@ (8000f4c <SIMTransmitSleep+0x44>)
 8000f3a:	f003 fe4f 	bl	8004bdc <HAL_UART_Receive>
}
 8000f3e:	bf00      	nop
 8000f40:	3708      	adds	r7, #8
 8000f42:	46bd      	mov	sp, r7
 8000f44:	bd80      	pop	{r7, pc}
 8000f46:	bf00      	nop
 8000f48:	2000020c 	.word	0x2000020c
 8000f4c:	200003c4 	.word	0x200003c4

08000f50 <sleep>:

void sleep(){
 8000f50:	b580      	push	{r7, lr}
 8000f52:	af00      	add	r7, sp, #0
//	SIMTransmitSleep("AT+CRESET\r\n");
//	HAL_Delay(10000);
	SIMTransmitSleep("AT+CSCLK=1\r\n");
 8000f54:	4810      	ldr	r0, [pc, #64]	@ (8000f98 <sleep+0x48>)
 8000f56:	f7ff ffd7 	bl	8000f08 <SIMTransmitSleep>
	HAL_GPIO_WritePin(DTR_Port, DTR_Pin, GPIO_PIN_SET);
 8000f5a:	2201      	movs	r2, #1
 8000f5c:	2140      	movs	r1, #64	@ 0x40
 8000f5e:	480f      	ldr	r0, [pc, #60]	@ (8000f9c <sleep+0x4c>)
 8000f60:	f001 ff2e 	bl	8002dc0 <HAL_GPIO_WritePin>
	HAL_Delay(30000);
 8000f64:	f247 5030 	movw	r0, #30000	@ 0x7530
 8000f68:	f001 fb56 	bl	8002618 <HAL_Delay>

	HAL_GPIO_WritePin(DTR_Port, DTR_Pin, GPIO_PIN_RESET);
 8000f6c:	2200      	movs	r2, #0
 8000f6e:	2140      	movs	r1, #64	@ 0x40
 8000f70:	480a      	ldr	r0, [pc, #40]	@ (8000f9c <sleep+0x4c>)
 8000f72:	f001 ff25 	bl	8002dc0 <HAL_GPIO_WritePin>

	while(1){
		SIMTransmitSleep("AT\r\n");
 8000f76:	480a      	ldr	r0, [pc, #40]	@ (8000fa0 <sleep+0x50>)
 8000f78:	f7ff ffc6 	bl	8000f08 <SIMTransmitSleep>
		if(strstr((char *)buffer_sleep, "OK\r\n")){
 8000f7c:	4909      	ldr	r1, [pc, #36]	@ (8000fa4 <sleep+0x54>)
 8000f7e:	480a      	ldr	r0, [pc, #40]	@ (8000fa8 <sleep+0x58>)
 8000f80:	f005 fed2 	bl	8006d28 <strstr>
 8000f84:	4603      	mov	r3, r0
 8000f86:	2b00      	cmp	r3, #0
 8000f88:	d103      	bne.n	8000f92 <sleep+0x42>
			break;
		}
		HAL_Delay(100);
 8000f8a:	2064      	movs	r0, #100	@ 0x64
 8000f8c:	f001 fb44 	bl	8002618 <HAL_Delay>
		SIMTransmitSleep("AT\r\n");
 8000f90:	e7f1      	b.n	8000f76 <sleep+0x26>
			break;
 8000f92:	bf00      	nop
	}

}
 8000f94:	bf00      	nop
 8000f96:	bd80      	pop	{r7, pc}
 8000f98:	08008ef0 	.word	0x08008ef0
 8000f9c:	48000400 	.word	0x48000400
 8000fa0:	08008f00 	.word	0x08008f00
 8000fa4:	08008f08 	.word	0x08008f08
 8000fa8:	2000020c 	.word	0x2000020c

08000fac <SIMTransmitTime>:

uint8_t buffer_time[100] = {0};
char timeGSM[10] = {0};

//Resets buffer and transmits and receives from uart1
void SIMTransmitTime(char *cmd){
 8000fac:	b580      	push	{r7, lr}
 8000fae:	b082      	sub	sp, #8
 8000fb0:	af00      	add	r7, sp, #0
 8000fb2:	6078      	str	r0, [r7, #4]
  memset(buffer_time,0,sizeof(buffer_time));
 8000fb4:	2264      	movs	r2, #100	@ 0x64
 8000fb6:	2100      	movs	r1, #0
 8000fb8:	480c      	ldr	r0, [pc, #48]	@ (8000fec <SIMTransmitTime+0x40>)
 8000fba:	f005 fe30 	bl	8006c1e <memset>
  HAL_UART_Transmit(&huart1,(uint8_t *)cmd,strlen(cmd),1000);
 8000fbe:	6878      	ldr	r0, [r7, #4]
 8000fc0:	f7ff f98e 	bl	80002e0 <strlen>
 8000fc4:	4603      	mov	r3, r0
 8000fc6:	b29a      	uxth	r2, r3
 8000fc8:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000fcc:	6879      	ldr	r1, [r7, #4]
 8000fce:	4808      	ldr	r0, [pc, #32]	@ (8000ff0 <SIMTransmitTime+0x44>)
 8000fd0:	f003 fd76 	bl	8004ac0 <HAL_UART_Transmit>
  HAL_UART_Receive(&huart1, buffer_time, sizeof(buffer_time), 1000);
 8000fd4:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000fd8:	2264      	movs	r2, #100	@ 0x64
 8000fda:	4904      	ldr	r1, [pc, #16]	@ (8000fec <SIMTransmitTime+0x40>)
 8000fdc:	4804      	ldr	r0, [pc, #16]	@ (8000ff0 <SIMTransmitTime+0x44>)
 8000fde:	f003 fdfd 	bl	8004bdc <HAL_UART_Receive>
}
 8000fe2:	bf00      	nop
 8000fe4:	3708      	adds	r7, #8
 8000fe6:	46bd      	mov	sp, r7
 8000fe8:	bd80      	pop	{r7, pc}
 8000fea:	bf00      	nop
 8000fec:	20000270 	.word	0x20000270
 8000ff0:	200003c4 	.word	0x200003c4

08000ff4 <startGPS>:

void startGPS(){
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	af00      	add	r7, sp, #0
	SIMTransmitTime("AT\r\n");
 8000ff8:	4807      	ldr	r0, [pc, #28]	@ (8001018 <startGPS+0x24>)
 8000ffa:	f7ff ffd7 	bl	8000fac <SIMTransmitTime>
	HAL_Delay(100);
 8000ffe:	2064      	movs	r0, #100	@ 0x64
 8001000:	f001 fb0a 	bl	8002618 <HAL_Delay>
	SIMTransmitTime("AT+CGPS=1\r\n");
 8001004:	4805      	ldr	r0, [pc, #20]	@ (800101c <startGPS+0x28>)
 8001006:	f7ff ffd1 	bl	8000fac <SIMTransmitTime>
	HAL_Delay(60000);
 800100a:	f64e 2060 	movw	r0, #60000	@ 0xea60
 800100e:	f001 fb03 	bl	8002618 <HAL_Delay>

}
 8001012:	bf00      	nop
 8001014:	bd80      	pop	{r7, pc}
 8001016:	bf00      	nop
 8001018:	08008f10 	.word	0x08008f10
 800101c:	08008f18 	.word	0x08008f18

08001020 <getTime>:

void getTime(){
 8001020:	b580      	push	{r7, lr}
 8001022:	b084      	sub	sp, #16
 8001024:	af00      	add	r7, sp, #0
	HAL_Delay(5000);
 8001026:	f241 3088 	movw	r0, #5000	@ 0x1388
 800102a:	f001 faf5 	bl	8002618 <HAL_Delay>
	SIMTransmitTime("AT+CGPSINFO\r\n");
 800102e:	482a      	ldr	r0, [pc, #168]	@ (80010d8 <getTime+0xb8>)
 8001030:	f7ff ffbc 	bl	8000fac <SIMTransmitTime>
	HAL_Delay(1000);
 8001034:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001038:	f001 faee 	bl	8002618 <HAL_Delay>

	char *start = strstr((char*)buffer_time, "+CGPSINFO:");
 800103c:	4927      	ldr	r1, [pc, #156]	@ (80010dc <getTime+0xbc>)
 800103e:	4828      	ldr	r0, [pc, #160]	@ (80010e0 <getTime+0xc0>)
 8001040:	f005 fe72 	bl	8006d28 <strstr>
 8001044:	6078      	str	r0, [r7, #4]
	if(start != NULL){
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	2b00      	cmp	r3, #0
 800104a:	d03b      	beq.n	80010c4 <getTime+0xa4>
		start = strchr(start, ':');
 800104c:	213a      	movs	r1, #58	@ 0x3a
 800104e:	6878      	ldr	r0, [r7, #4]
 8001050:	f005 fded 	bl	8006c2e <strchr>
 8001054:	6078      	str	r0, [r7, #4]
		if(start != NULL){
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	2b00      	cmp	r3, #0
 800105a:	d039      	beq.n	80010d0 <getTime+0xb0>
			start++;
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	3301      	adds	r3, #1
 8001060:	607b      	str	r3, [r7, #4]

			char *token;
			int fieldIndex = 0;
 8001062:	2300      	movs	r3, #0
 8001064:	60bb      	str	r3, [r7, #8]
			token = strtok(start, ",");
 8001066:	491f      	ldr	r1, [pc, #124]	@ (80010e4 <getTime+0xc4>)
 8001068:	6878      	ldr	r0, [r7, #4]
 800106a:	f005 fe01 	bl	8006c70 <strtok>
 800106e:	60f8      	str	r0, [r7, #12]

			while(token != NULL){
 8001070:	e024      	b.n	80010bc <getTime+0x9c>
				fieldIndex++;
 8001072:	68bb      	ldr	r3, [r7, #8]
 8001074:	3301      	adds	r3, #1
 8001076:	60bb      	str	r3, [r7, #8]

				if(fieldIndex == 6){
 8001078:	68bb      	ldr	r3, [r7, #8]
 800107a:	2b06      	cmp	r3, #6
 800107c:	d119      	bne.n	80010b2 <getTime+0x92>
					strncpy(timeGSM, token, 6);
 800107e:	2206      	movs	r2, #6
 8001080:	68f9      	ldr	r1, [r7, #12]
 8001082:	4819      	ldr	r0, [pc, #100]	@ (80010e8 <getTime+0xc8>)
 8001084:	f005 fde0 	bl	8006c48 <strncpy>
					timeGSM[4] = '\0';
 8001088:	4b17      	ldr	r3, [pc, #92]	@ (80010e8 <getTime+0xc8>)
 800108a:	2200      	movs	r2, #0
 800108c:	711a      	strb	r2, [r3, #4]

					HAL_UART_Transmit(&huart3, (uint8_t*)timeGSM, strlen(timeGSM), 100);
 800108e:	4816      	ldr	r0, [pc, #88]	@ (80010e8 <getTime+0xc8>)
 8001090:	f7ff f926 	bl	80002e0 <strlen>
 8001094:	4603      	mov	r3, r0
 8001096:	b29a      	uxth	r2, r3
 8001098:	2364      	movs	r3, #100	@ 0x64
 800109a:	4913      	ldr	r1, [pc, #76]	@ (80010e8 <getTime+0xc8>)
 800109c:	4813      	ldr	r0, [pc, #76]	@ (80010ec <getTime+0xcc>)
 800109e:	f003 fd0f 	bl	8004ac0 <HAL_UART_Transmit>
					HAL_UART_Transmit(&huart3, (uint8_t*)"\r\n", 2, 100);
 80010a2:	2364      	movs	r3, #100	@ 0x64
 80010a4:	2202      	movs	r2, #2
 80010a6:	4912      	ldr	r1, [pc, #72]	@ (80010f0 <getTime+0xd0>)
 80010a8:	4810      	ldr	r0, [pc, #64]	@ (80010ec <getTime+0xcc>)
 80010aa:	f003 fd09 	bl	8004ac0 <HAL_UART_Transmit>
					break;
 80010ae:	bf00      	nop
			}
		}
	}else{
		HAL_UART_Transmit(&huart3, (uint8_t*)"GPS info not found\r\n", 21, 100);
	}
}
 80010b0:	e00e      	b.n	80010d0 <getTime+0xb0>
				token = strtok(NULL, ",");
 80010b2:	490c      	ldr	r1, [pc, #48]	@ (80010e4 <getTime+0xc4>)
 80010b4:	2000      	movs	r0, #0
 80010b6:	f005 fddb 	bl	8006c70 <strtok>
 80010ba:	60f8      	str	r0, [r7, #12]
			while(token != NULL){
 80010bc:	68fb      	ldr	r3, [r7, #12]
 80010be:	2b00      	cmp	r3, #0
 80010c0:	d1d7      	bne.n	8001072 <getTime+0x52>
}
 80010c2:	e005      	b.n	80010d0 <getTime+0xb0>
		HAL_UART_Transmit(&huart3, (uint8_t*)"GPS info not found\r\n", 21, 100);
 80010c4:	2364      	movs	r3, #100	@ 0x64
 80010c6:	2215      	movs	r2, #21
 80010c8:	490a      	ldr	r1, [pc, #40]	@ (80010f4 <getTime+0xd4>)
 80010ca:	4808      	ldr	r0, [pc, #32]	@ (80010ec <getTime+0xcc>)
 80010cc:	f003 fcf8 	bl	8004ac0 <HAL_UART_Transmit>
}
 80010d0:	bf00      	nop
 80010d2:	3710      	adds	r7, #16
 80010d4:	46bd      	mov	sp, r7
 80010d6:	bd80      	pop	{r7, pc}
 80010d8:	08008f24 	.word	0x08008f24
 80010dc:	08008f34 	.word	0x08008f34
 80010e0:	20000270 	.word	0x20000270
 80010e4:	08008f40 	.word	0x08008f40
 80010e8:	200002d4 	.word	0x200002d4
 80010ec:	20000458 	.word	0x20000458
 80010f0:	08008f44 	.word	0x08008f44
 80010f4:	08008f48 	.word	0x08008f48

080010f8 <batt_charge1>:
float temp2 = 0;
uint16_t batt1 = 0;
uint16_t batt2 = 0;

// function to get the battery capacity in % on first battery
void batt_charge1(){
 80010f8:	b580      	push	{r7, lr}
 80010fa:	b084      	sub	sp, #16
 80010fc:	af02      	add	r7, sp, #8

	relayOn(RELAY2_Port, RELAY2_Pin);
 80010fe:	2102      	movs	r1, #2
 8001100:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001104:	f000 f9c4 	bl	8001490 <relayOn>
	relayOff(RELAY3_Port, RELAY3_Pin);
 8001108:	2110      	movs	r1, #16
 800110a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800110e:	f000 f9cf 	bl	80014b0 <relayOff>
	HAL_Delay(500);
 8001112:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8001116:	f001 fa7f 	bl	8002618 <HAL_Delay>

	if (HAL_I2C_Master_Transmit(&hi2c1, BATTERY_ADDR, &command_charge, 1, 100) != HAL_OK) {
 800111a:	2364      	movs	r3, #100	@ 0x64
 800111c:	9300      	str	r3, [sp, #0]
 800111e:	2301      	movs	r3, #1
 8001120:	4a1f      	ldr	r2, [pc, #124]	@ (80011a0 <batt_charge1+0xa8>)
 8001122:	2116      	movs	r1, #22
 8001124:	481f      	ldr	r0, [pc, #124]	@ (80011a4 <batt_charge1+0xac>)
 8001126:	f001 feff 	bl	8002f28 <HAL_I2C_Master_Transmit>
 800112a:	4603      	mov	r3, r0
 800112c:	2b00      	cmp	r3, #0
 800112e:	d005      	beq.n	800113c <batt_charge1+0x44>
		HAL_UART_Transmit(&huart1, (uint8_t*)"I2C1 TX Failed!\r\n", 19, 100);
 8001130:	2364      	movs	r3, #100	@ 0x64
 8001132:	2213      	movs	r2, #19
 8001134:	491c      	ldr	r1, [pc, #112]	@ (80011a8 <batt_charge1+0xb0>)
 8001136:	481d      	ldr	r0, [pc, #116]	@ (80011ac <batt_charge1+0xb4>)
 8001138:	f003 fcc2 	bl	8004ac0 <HAL_UART_Transmit>
	}

	if (HAL_I2C_Master_Receive(&hi2c1, BATTERY_ADDR, buffer, 2, 100) != HAL_OK) {
 800113c:	2364      	movs	r3, #100	@ 0x64
 800113e:	9300      	str	r3, [sp, #0]
 8001140:	2302      	movs	r3, #2
 8001142:	4a1b      	ldr	r2, [pc, #108]	@ (80011b0 <batt_charge1+0xb8>)
 8001144:	2116      	movs	r1, #22
 8001146:	4817      	ldr	r0, [pc, #92]	@ (80011a4 <batt_charge1+0xac>)
 8001148:	f002 f806 	bl	8003158 <HAL_I2C_Master_Receive>
 800114c:	4603      	mov	r3, r0
 800114e:	2b00      	cmp	r3, #0
 8001150:	d005      	beq.n	800115e <batt_charge1+0x66>
		HAL_UART_Transmit(&huart1, (uint8_t*)"I2C1 RX Failed!\r\n", 19, 100);
 8001152:	2364      	movs	r3, #100	@ 0x64
 8001154:	2213      	movs	r2, #19
 8001156:	4917      	ldr	r1, [pc, #92]	@ (80011b4 <batt_charge1+0xbc>)
 8001158:	4814      	ldr	r0, [pc, #80]	@ (80011ac <batt_charge1+0xb4>)
 800115a:	f003 fcb1 	bl	8004ac0 <HAL_UART_Transmit>
	}

	uint16_t charge = (buffer[1] << 8) | buffer[0];  // Converts little-endian
 800115e:	4b14      	ldr	r3, [pc, #80]	@ (80011b0 <batt_charge1+0xb8>)
 8001160:	785b      	ldrb	r3, [r3, #1]
 8001162:	021b      	lsls	r3, r3, #8
 8001164:	b21a      	sxth	r2, r3
 8001166:	4b12      	ldr	r3, [pc, #72]	@ (80011b0 <batt_charge1+0xb8>)
 8001168:	781b      	ldrb	r3, [r3, #0]
 800116a:	b21b      	sxth	r3, r3
 800116c:	4313      	orrs	r3, r2
 800116e:	b21b      	sxth	r3, r3
 8001170:	80fb      	strh	r3, [r7, #6]
	batt1 = charge;
 8001172:	4a11      	ldr	r2, [pc, #68]	@ (80011b8 <batt_charge1+0xc0>)
 8001174:	88fb      	ldrh	r3, [r7, #6]
 8001176:	8013      	strh	r3, [r2, #0]

	sprintf(uart_buffer, "Battery Charge1: %d%% \r\n", charge);
 8001178:	88fb      	ldrh	r3, [r7, #6]
 800117a:	461a      	mov	r2, r3
 800117c:	490f      	ldr	r1, [pc, #60]	@ (80011bc <batt_charge1+0xc4>)
 800117e:	4810      	ldr	r0, [pc, #64]	@ (80011c0 <batt_charge1+0xc8>)
 8001180:	f005 fcea 	bl	8006b58 <siprintf>
	HAL_UART_Transmit(&huart3, (uint8_t*)uart_buffer, strlen(uart_buffer), 100);
 8001184:	480e      	ldr	r0, [pc, #56]	@ (80011c0 <batt_charge1+0xc8>)
 8001186:	f7ff f8ab 	bl	80002e0 <strlen>
 800118a:	4603      	mov	r3, r0
 800118c:	b29a      	uxth	r2, r3
 800118e:	2364      	movs	r3, #100	@ 0x64
 8001190:	490b      	ldr	r1, [pc, #44]	@ (80011c0 <batt_charge1+0xc8>)
 8001192:	480c      	ldr	r0, [pc, #48]	@ (80011c4 <batt_charge1+0xcc>)
 8001194:	f003 fc94 	bl	8004ac0 <HAL_UART_Transmit>

}
 8001198:	bf00      	nop
 800119a:	3708      	adds	r7, #8
 800119c:	46bd      	mov	sp, r7
 800119e:	bd80      	pop	{r7, pc}
 80011a0:	20000000 	.word	0x20000000
 80011a4:	2000031c 	.word	0x2000031c
 80011a8:	08008f60 	.word	0x08008f60
 80011ac:	200003c4 	.word	0x200003c4
 80011b0:	200002e0 	.word	0x200002e0
 80011b4:	08008f74 	.word	0x08008f74
 80011b8:	20000308 	.word	0x20000308
 80011bc:	08008f88 	.word	0x08008f88
 80011c0:	200002e4 	.word	0x200002e4
 80011c4:	20000458 	.word	0x20000458

080011c8 <batt_temp1>:

    return voltage;
}

// function the get the temperature from battery 1
void batt_temp1(){
 80011c8:	b580      	push	{r7, lr}
 80011ca:	b084      	sub	sp, #16
 80011cc:	af02      	add	r7, sp, #8

	relayOn(RELAY2_Port, RELAY2_Pin);
 80011ce:	2102      	movs	r1, #2
 80011d0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80011d4:	f000 f95c 	bl	8001490 <relayOn>
	relayOff(RELAY3_Port, RELAY3_Pin);
 80011d8:	2110      	movs	r1, #16
 80011da:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80011de:	f000 f967 	bl	80014b0 <relayOff>
	HAL_Delay(500);
 80011e2:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80011e6:	f001 fa17 	bl	8002618 <HAL_Delay>

    if (HAL_I2C_Master_Transmit(&hi2c1, BATTERY_ADDR, &commant_temp, 1, 100) != HAL_OK) {
 80011ea:	2364      	movs	r3, #100	@ 0x64
 80011ec:	9300      	str	r3, [sp, #0]
 80011ee:	2301      	movs	r3, #1
 80011f0:	4a28      	ldr	r2, [pc, #160]	@ (8001294 <batt_temp1+0xcc>)
 80011f2:	2116      	movs	r1, #22
 80011f4:	4828      	ldr	r0, [pc, #160]	@ (8001298 <batt_temp1+0xd0>)
 80011f6:	f001 fe97 	bl	8002f28 <HAL_I2C_Master_Transmit>
 80011fa:	4603      	mov	r3, r0
 80011fc:	2b00      	cmp	r3, #0
 80011fe:	d005      	beq.n	800120c <batt_temp1+0x44>
        HAL_UART_Transmit(&huart1, (uint8_t*)"I2C1 TX Failed!\r\n", 19, 100);
 8001200:	2364      	movs	r3, #100	@ 0x64
 8001202:	2213      	movs	r2, #19
 8001204:	4925      	ldr	r1, [pc, #148]	@ (800129c <batt_temp1+0xd4>)
 8001206:	4826      	ldr	r0, [pc, #152]	@ (80012a0 <batt_temp1+0xd8>)
 8001208:	f003 fc5a 	bl	8004ac0 <HAL_UART_Transmit>
    }

    if (HAL_I2C_Master_Receive(&hi2c1, BATTERY_ADDR, buffer, 2, 100) != HAL_OK) {
 800120c:	2364      	movs	r3, #100	@ 0x64
 800120e:	9300      	str	r3, [sp, #0]
 8001210:	2302      	movs	r3, #2
 8001212:	4a24      	ldr	r2, [pc, #144]	@ (80012a4 <batt_temp1+0xdc>)
 8001214:	2116      	movs	r1, #22
 8001216:	4820      	ldr	r0, [pc, #128]	@ (8001298 <batt_temp1+0xd0>)
 8001218:	f001 ff9e 	bl	8003158 <HAL_I2C_Master_Receive>
 800121c:	4603      	mov	r3, r0
 800121e:	2b00      	cmp	r3, #0
 8001220:	d005      	beq.n	800122e <batt_temp1+0x66>
        HAL_UART_Transmit(&huart1, (uint8_t*)"I2C1 RX Failed!\r\n", 19, 100);
 8001222:	2364      	movs	r3, #100	@ 0x64
 8001224:	2213      	movs	r2, #19
 8001226:	4920      	ldr	r1, [pc, #128]	@ (80012a8 <batt_temp1+0xe0>)
 8001228:	481d      	ldr	r0, [pc, #116]	@ (80012a0 <batt_temp1+0xd8>)
 800122a:	f003 fc49 	bl	8004ac0 <HAL_UART_Transmit>
    }

    uint16_t temp = (buffer[1] << 8) | buffer[0];  // Converts little-endian
 800122e:	4b1d      	ldr	r3, [pc, #116]	@ (80012a4 <batt_temp1+0xdc>)
 8001230:	785b      	ldrb	r3, [r3, #1]
 8001232:	021b      	lsls	r3, r3, #8
 8001234:	b21a      	sxth	r2, r3
 8001236:	4b1b      	ldr	r3, [pc, #108]	@ (80012a4 <batt_temp1+0xdc>)
 8001238:	781b      	ldrb	r3, [r3, #0]
 800123a:	b21b      	sxth	r3, r3
 800123c:	4313      	orrs	r3, r2
 800123e:	b21b      	sxth	r3, r3
 8001240:	80fb      	strh	r3, [r7, #6]
    temp1 = ((float)temp - 273.15f) / 100;
 8001242:	88fb      	ldrh	r3, [r7, #6]
 8001244:	ee07 3a90 	vmov	s15, r3
 8001248:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800124c:	ed9f 7a17 	vldr	s14, [pc, #92]	@ 80012ac <batt_temp1+0xe4>
 8001250:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8001254:	eddf 6a16 	vldr	s13, [pc, #88]	@ 80012b0 <batt_temp1+0xe8>
 8001258:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800125c:	4b15      	ldr	r3, [pc, #84]	@ (80012b4 <batt_temp1+0xec>)
 800125e:	edc3 7a00 	vstr	s15, [r3]

    sprintf(uart_buffer, "Temperature1: %.2f Celcius\r\n", temp1);
 8001262:	4b14      	ldr	r3, [pc, #80]	@ (80012b4 <batt_temp1+0xec>)
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	4618      	mov	r0, r3
 8001268:	f7ff f9a6 	bl	80005b8 <__aeabi_f2d>
 800126c:	4602      	mov	r2, r0
 800126e:	460b      	mov	r3, r1
 8001270:	4911      	ldr	r1, [pc, #68]	@ (80012b8 <batt_temp1+0xf0>)
 8001272:	4812      	ldr	r0, [pc, #72]	@ (80012bc <batt_temp1+0xf4>)
 8001274:	f005 fc70 	bl	8006b58 <siprintf>
    HAL_UART_Transmit(&huart3, (uint8_t*)uart_buffer, strlen(uart_buffer), 100);
 8001278:	4810      	ldr	r0, [pc, #64]	@ (80012bc <batt_temp1+0xf4>)
 800127a:	f7ff f831 	bl	80002e0 <strlen>
 800127e:	4603      	mov	r3, r0
 8001280:	b29a      	uxth	r2, r3
 8001282:	2364      	movs	r3, #100	@ 0x64
 8001284:	490d      	ldr	r1, [pc, #52]	@ (80012bc <batt_temp1+0xf4>)
 8001286:	480e      	ldr	r0, [pc, #56]	@ (80012c0 <batt_temp1+0xf8>)
 8001288:	f003 fc1a 	bl	8004ac0 <HAL_UART_Transmit>
}
 800128c:	bf00      	nop
 800128e:	3708      	adds	r7, #8
 8001290:	46bd      	mov	sp, r7
 8001292:	bd80      	pop	{r7, pc}
 8001294:	20000001 	.word	0x20000001
 8001298:	2000031c 	.word	0x2000031c
 800129c:	08008f60 	.word	0x08008f60
 80012a0:	200003c4 	.word	0x200003c4
 80012a4:	200002e0 	.word	0x200002e0
 80012a8:	08008f74 	.word	0x08008f74
 80012ac:	43889333 	.word	0x43889333
 80012b0:	42c80000 	.word	0x42c80000
 80012b4:	20000300 	.word	0x20000300
 80012b8:	08008fa4 	.word	0x08008fa4
 80012bc:	200002e4 	.word	0x200002e4
 80012c0:	20000458 	.word	0x20000458

080012c4 <batt_charge2>:

// function to get the battery capacity in % on second battery
void batt_charge2(){
 80012c4:	b580      	push	{r7, lr}
 80012c6:	b084      	sub	sp, #16
 80012c8:	af02      	add	r7, sp, #8

	relayOn(RELAY3_Port, RELAY3_Pin);
 80012ca:	2110      	movs	r1, #16
 80012cc:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80012d0:	f000 f8de 	bl	8001490 <relayOn>
	relayOff(RELAY2_Port, RELAY2_Pin);
 80012d4:	2102      	movs	r1, #2
 80012d6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80012da:	f000 f8e9 	bl	80014b0 <relayOff>
	HAL_Delay(500);
 80012de:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80012e2:	f001 f999 	bl	8002618 <HAL_Delay>

	if (HAL_I2C_Master_Transmit(&hi2c2, BATTERY_ADDR, &command_charge, 1, 100) != HAL_OK) {
 80012e6:	2364      	movs	r3, #100	@ 0x64
 80012e8:	9300      	str	r3, [sp, #0]
 80012ea:	2301      	movs	r3, #1
 80012ec:	4a1f      	ldr	r2, [pc, #124]	@ (800136c <batt_charge2+0xa8>)
 80012ee:	2116      	movs	r1, #22
 80012f0:	481f      	ldr	r0, [pc, #124]	@ (8001370 <batt_charge2+0xac>)
 80012f2:	f001 fe19 	bl	8002f28 <HAL_I2C_Master_Transmit>
 80012f6:	4603      	mov	r3, r0
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	d005      	beq.n	8001308 <batt_charge2+0x44>
		HAL_UART_Transmit(&huart1, (uint8_t*)"I2C2 TX Failed!\r\n", 19, 100);
 80012fc:	2364      	movs	r3, #100	@ 0x64
 80012fe:	2213      	movs	r2, #19
 8001300:	491c      	ldr	r1, [pc, #112]	@ (8001374 <batt_charge2+0xb0>)
 8001302:	481d      	ldr	r0, [pc, #116]	@ (8001378 <batt_charge2+0xb4>)
 8001304:	f003 fbdc 	bl	8004ac0 <HAL_UART_Transmit>
	}

	if (HAL_I2C_Master_Receive(&hi2c2, BATTERY_ADDR, buffer, 2, 100) != HAL_OK) {
 8001308:	2364      	movs	r3, #100	@ 0x64
 800130a:	9300      	str	r3, [sp, #0]
 800130c:	2302      	movs	r3, #2
 800130e:	4a1b      	ldr	r2, [pc, #108]	@ (800137c <batt_charge2+0xb8>)
 8001310:	2116      	movs	r1, #22
 8001312:	4817      	ldr	r0, [pc, #92]	@ (8001370 <batt_charge2+0xac>)
 8001314:	f001 ff20 	bl	8003158 <HAL_I2C_Master_Receive>
 8001318:	4603      	mov	r3, r0
 800131a:	2b00      	cmp	r3, #0
 800131c:	d005      	beq.n	800132a <batt_charge2+0x66>
		HAL_UART_Transmit(&huart1, (uint8_t*)"I2C2 RX Failed!\r\n", 19, 100);
 800131e:	2364      	movs	r3, #100	@ 0x64
 8001320:	2213      	movs	r2, #19
 8001322:	4917      	ldr	r1, [pc, #92]	@ (8001380 <batt_charge2+0xbc>)
 8001324:	4814      	ldr	r0, [pc, #80]	@ (8001378 <batt_charge2+0xb4>)
 8001326:	f003 fbcb 	bl	8004ac0 <HAL_UART_Transmit>
	}

	uint16_t charge = (buffer[1] << 8) | buffer[0];  // Converts little-endian
 800132a:	4b14      	ldr	r3, [pc, #80]	@ (800137c <batt_charge2+0xb8>)
 800132c:	785b      	ldrb	r3, [r3, #1]
 800132e:	021b      	lsls	r3, r3, #8
 8001330:	b21a      	sxth	r2, r3
 8001332:	4b12      	ldr	r3, [pc, #72]	@ (800137c <batt_charge2+0xb8>)
 8001334:	781b      	ldrb	r3, [r3, #0]
 8001336:	b21b      	sxth	r3, r3
 8001338:	4313      	orrs	r3, r2
 800133a:	b21b      	sxth	r3, r3
 800133c:	80fb      	strh	r3, [r7, #6]
	batt2 = charge;
 800133e:	4a11      	ldr	r2, [pc, #68]	@ (8001384 <batt_charge2+0xc0>)
 8001340:	88fb      	ldrh	r3, [r7, #6]
 8001342:	8013      	strh	r3, [r2, #0]

	sprintf(uart_buffer, "Battery Charge2: %d%% \r\n", charge);
 8001344:	88fb      	ldrh	r3, [r7, #6]
 8001346:	461a      	mov	r2, r3
 8001348:	490f      	ldr	r1, [pc, #60]	@ (8001388 <batt_charge2+0xc4>)
 800134a:	4810      	ldr	r0, [pc, #64]	@ (800138c <batt_charge2+0xc8>)
 800134c:	f005 fc04 	bl	8006b58 <siprintf>
	HAL_UART_Transmit(&huart3, (uint8_t*)uart_buffer, strlen(uart_buffer), 100);
 8001350:	480e      	ldr	r0, [pc, #56]	@ (800138c <batt_charge2+0xc8>)
 8001352:	f7fe ffc5 	bl	80002e0 <strlen>
 8001356:	4603      	mov	r3, r0
 8001358:	b29a      	uxth	r2, r3
 800135a:	2364      	movs	r3, #100	@ 0x64
 800135c:	490b      	ldr	r1, [pc, #44]	@ (800138c <batt_charge2+0xc8>)
 800135e:	480c      	ldr	r0, [pc, #48]	@ (8001390 <batt_charge2+0xcc>)
 8001360:	f003 fbae 	bl	8004ac0 <HAL_UART_Transmit>
}
 8001364:	bf00      	nop
 8001366:	3708      	adds	r7, #8
 8001368:	46bd      	mov	sp, r7
 800136a:	bd80      	pop	{r7, pc}
 800136c:	20000000 	.word	0x20000000
 8001370:	20000370 	.word	0x20000370
 8001374:	08008fc4 	.word	0x08008fc4
 8001378:	200003c4 	.word	0x200003c4
 800137c:	200002e0 	.word	0x200002e0
 8001380:	08008fd8 	.word	0x08008fd8
 8001384:	2000030a 	.word	0x2000030a
 8001388:	08008fec 	.word	0x08008fec
 800138c:	200002e4 	.word	0x200002e4
 8001390:	20000458 	.word	0x20000458

08001394 <batt_temp2>:

    return voltage;
}

// function the get the temperature from battery 2
void batt_temp2(){
 8001394:	b580      	push	{r7, lr}
 8001396:	b084      	sub	sp, #16
 8001398:	af02      	add	r7, sp, #8

	relayOn(RELAY3_Port, RELAY3_Pin);
 800139a:	2110      	movs	r1, #16
 800139c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80013a0:	f000 f876 	bl	8001490 <relayOn>
	relayOff(RELAY2_Port, RELAY2_Pin);
 80013a4:	2102      	movs	r1, #2
 80013a6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80013aa:	f000 f881 	bl	80014b0 <relayOff>
	HAL_Delay(500);
 80013ae:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80013b2:	f001 f931 	bl	8002618 <HAL_Delay>

    if (HAL_I2C_Master_Transmit(&hi2c2, BATTERY_ADDR, &commant_temp, 1, 100) != HAL_OK) {
 80013b6:	2364      	movs	r3, #100	@ 0x64
 80013b8:	9300      	str	r3, [sp, #0]
 80013ba:	2301      	movs	r3, #1
 80013bc:	4a28      	ldr	r2, [pc, #160]	@ (8001460 <batt_temp2+0xcc>)
 80013be:	2116      	movs	r1, #22
 80013c0:	4828      	ldr	r0, [pc, #160]	@ (8001464 <batt_temp2+0xd0>)
 80013c2:	f001 fdb1 	bl	8002f28 <HAL_I2C_Master_Transmit>
 80013c6:	4603      	mov	r3, r0
 80013c8:	2b00      	cmp	r3, #0
 80013ca:	d005      	beq.n	80013d8 <batt_temp2+0x44>
        HAL_UART_Transmit(&huart1, (uint8_t*)"I2C1 TX Failed!\r\n", 19, 100);
 80013cc:	2364      	movs	r3, #100	@ 0x64
 80013ce:	2213      	movs	r2, #19
 80013d0:	4925      	ldr	r1, [pc, #148]	@ (8001468 <batt_temp2+0xd4>)
 80013d2:	4826      	ldr	r0, [pc, #152]	@ (800146c <batt_temp2+0xd8>)
 80013d4:	f003 fb74 	bl	8004ac0 <HAL_UART_Transmit>
    }

    if (HAL_I2C_Master_Receive(&hi2c2, BATTERY_ADDR, buffer, 2, 100) != HAL_OK) {
 80013d8:	2364      	movs	r3, #100	@ 0x64
 80013da:	9300      	str	r3, [sp, #0]
 80013dc:	2302      	movs	r3, #2
 80013de:	4a24      	ldr	r2, [pc, #144]	@ (8001470 <batt_temp2+0xdc>)
 80013e0:	2116      	movs	r1, #22
 80013e2:	4820      	ldr	r0, [pc, #128]	@ (8001464 <batt_temp2+0xd0>)
 80013e4:	f001 feb8 	bl	8003158 <HAL_I2C_Master_Receive>
 80013e8:	4603      	mov	r3, r0
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d005      	beq.n	80013fa <batt_temp2+0x66>
        HAL_UART_Transmit(&huart1, (uint8_t*)"I2C1 RX Failed!\r\n", 19, 100);
 80013ee:	2364      	movs	r3, #100	@ 0x64
 80013f0:	2213      	movs	r2, #19
 80013f2:	4920      	ldr	r1, [pc, #128]	@ (8001474 <batt_temp2+0xe0>)
 80013f4:	481d      	ldr	r0, [pc, #116]	@ (800146c <batt_temp2+0xd8>)
 80013f6:	f003 fb63 	bl	8004ac0 <HAL_UART_Transmit>
    }

    uint16_t temp = (buffer[1] << 8) | buffer[0];  // Converts little-endian
 80013fa:	4b1d      	ldr	r3, [pc, #116]	@ (8001470 <batt_temp2+0xdc>)
 80013fc:	785b      	ldrb	r3, [r3, #1]
 80013fe:	021b      	lsls	r3, r3, #8
 8001400:	b21a      	sxth	r2, r3
 8001402:	4b1b      	ldr	r3, [pc, #108]	@ (8001470 <batt_temp2+0xdc>)
 8001404:	781b      	ldrb	r3, [r3, #0]
 8001406:	b21b      	sxth	r3, r3
 8001408:	4313      	orrs	r3, r2
 800140a:	b21b      	sxth	r3, r3
 800140c:	80fb      	strh	r3, [r7, #6]
    temp2 = ((float)temp - 273.15f) / 100;
 800140e:	88fb      	ldrh	r3, [r7, #6]
 8001410:	ee07 3a90 	vmov	s15, r3
 8001414:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001418:	ed9f 7a17 	vldr	s14, [pc, #92]	@ 8001478 <batt_temp2+0xe4>
 800141c:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8001420:	eddf 6a16 	vldr	s13, [pc, #88]	@ 800147c <batt_temp2+0xe8>
 8001424:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001428:	4b15      	ldr	r3, [pc, #84]	@ (8001480 <batt_temp2+0xec>)
 800142a:	edc3 7a00 	vstr	s15, [r3]

    sprintf(uart_buffer, "Temperature2: %.2f Celcius\r\n", temp2);
 800142e:	4b14      	ldr	r3, [pc, #80]	@ (8001480 <batt_temp2+0xec>)
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	4618      	mov	r0, r3
 8001434:	f7ff f8c0 	bl	80005b8 <__aeabi_f2d>
 8001438:	4602      	mov	r2, r0
 800143a:	460b      	mov	r3, r1
 800143c:	4911      	ldr	r1, [pc, #68]	@ (8001484 <batt_temp2+0xf0>)
 800143e:	4812      	ldr	r0, [pc, #72]	@ (8001488 <batt_temp2+0xf4>)
 8001440:	f005 fb8a 	bl	8006b58 <siprintf>
    HAL_UART_Transmit(&huart3, (uint8_t*)uart_buffer, strlen(uart_buffer), 100);
 8001444:	4810      	ldr	r0, [pc, #64]	@ (8001488 <batt_temp2+0xf4>)
 8001446:	f7fe ff4b 	bl	80002e0 <strlen>
 800144a:	4603      	mov	r3, r0
 800144c:	b29a      	uxth	r2, r3
 800144e:	2364      	movs	r3, #100	@ 0x64
 8001450:	490d      	ldr	r1, [pc, #52]	@ (8001488 <batt_temp2+0xf4>)
 8001452:	480e      	ldr	r0, [pc, #56]	@ (800148c <batt_temp2+0xf8>)
 8001454:	f003 fb34 	bl	8004ac0 <HAL_UART_Transmit>
}
 8001458:	bf00      	nop
 800145a:	3708      	adds	r7, #8
 800145c:	46bd      	mov	sp, r7
 800145e:	bd80      	pop	{r7, pc}
 8001460:	20000001 	.word	0x20000001
 8001464:	20000370 	.word	0x20000370
 8001468:	08008f60 	.word	0x08008f60
 800146c:	200003c4 	.word	0x200003c4
 8001470:	200002e0 	.word	0x200002e0
 8001474:	08008f74 	.word	0x08008f74
 8001478:	43889333 	.word	0x43889333
 800147c:	42c80000 	.word	0x42c80000
 8001480:	20000304 	.word	0x20000304
 8001484:	0800901c 	.word	0x0800901c
 8001488:	200002e4 	.word	0x200002e4
 800148c:	20000458 	.word	0x20000458

08001490 <relayOn>:
#include <string.h>
#include <stdio.h>
#include <stm32g4xx_hal.h>
#include <main.h>

void relayOn(GPIO_TypeDef* port, uint16_t pin){
 8001490:	b580      	push	{r7, lr}
 8001492:	b082      	sub	sp, #8
 8001494:	af00      	add	r7, sp, #0
 8001496:	6078      	str	r0, [r7, #4]
 8001498:	460b      	mov	r3, r1
 800149a:	807b      	strh	r3, [r7, #2]
	HAL_GPIO_WritePin(port, pin, GPIO_PIN_SET);
 800149c:	887b      	ldrh	r3, [r7, #2]
 800149e:	2201      	movs	r2, #1
 80014a0:	4619      	mov	r1, r3
 80014a2:	6878      	ldr	r0, [r7, #4]
 80014a4:	f001 fc8c 	bl	8002dc0 <HAL_GPIO_WritePin>
}
 80014a8:	bf00      	nop
 80014aa:	3708      	adds	r7, #8
 80014ac:	46bd      	mov	sp, r7
 80014ae:	bd80      	pop	{r7, pc}

080014b0 <relayOff>:

void relayOff(GPIO_TypeDef* port, uint16_t pin){
 80014b0:	b580      	push	{r7, lr}
 80014b2:	b082      	sub	sp, #8
 80014b4:	af00      	add	r7, sp, #0
 80014b6:	6078      	str	r0, [r7, #4]
 80014b8:	460b      	mov	r3, r1
 80014ba:	807b      	strh	r3, [r7, #2]
	HAL_GPIO_WritePin(port, pin, GPIO_PIN_RESET);
 80014bc:	887b      	ldrh	r3, [r7, #2]
 80014be:	2200      	movs	r2, #0
 80014c0:	4619      	mov	r1, r3
 80014c2:	6878      	ldr	r0, [r7, #4]
 80014c4:	f001 fc7c 	bl	8002dc0 <HAL_GPIO_WritePin>
}
 80014c8:	bf00      	nop
 80014ca:	3708      	adds	r7, #8
 80014cc:	46bd      	mov	sp, r7
 80014ce:	bd80      	pop	{r7, pc}

080014d0 <power_system>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

// User-defined wakeup for powering instruments using SMS
void power_system(const char* testtime){
 80014d0:	b580      	push	{r7, lr}
 80014d2:	b082      	sub	sp, #8
 80014d4:	af00      	add	r7, sp, #0
 80014d6:	6078      	str	r0, [r7, #4]

    HAL_UART_Transmit(&huart3, (uint8_t*)"testtime: ", 10, 100);
 80014d8:	2364      	movs	r3, #100	@ 0x64
 80014da:	220a      	movs	r2, #10
 80014dc:	493d      	ldr	r1, [pc, #244]	@ (80015d4 <power_system+0x104>)
 80014de:	483e      	ldr	r0, [pc, #248]	@ (80015d8 <power_system+0x108>)
 80014e0:	f003 faee 	bl	8004ac0 <HAL_UART_Transmit>
    HAL_UART_Transmit(&huart3, (uint8_t*)testtime, strlen(testtime), 100);
 80014e4:	6878      	ldr	r0, [r7, #4]
 80014e6:	f7fe fefb 	bl	80002e0 <strlen>
 80014ea:	4603      	mov	r3, r0
 80014ec:	b29a      	uxth	r2, r3
 80014ee:	2364      	movs	r3, #100	@ 0x64
 80014f0:	6879      	ldr	r1, [r7, #4]
 80014f2:	4839      	ldr	r0, [pc, #228]	@ (80015d8 <power_system+0x108>)
 80014f4:	f003 fae4 	bl	8004ac0 <HAL_UART_Transmit>
    HAL_UART_Transmit(&huart3, (uint8_t*)"\r\n", 2, 100);
 80014f8:	2364      	movs	r3, #100	@ 0x64
 80014fa:	2202      	movs	r2, #2
 80014fc:	4937      	ldr	r1, [pc, #220]	@ (80015dc <power_system+0x10c>)
 80014fe:	4836      	ldr	r0, [pc, #216]	@ (80015d8 <power_system+0x108>)
 8001500:	f003 fade 	bl	8004ac0 <HAL_UART_Transmit>

    HAL_UART_Transmit(&huart3, (uint8_t*)"timeGSM: ", 9, 100);
 8001504:	2364      	movs	r3, #100	@ 0x64
 8001506:	2209      	movs	r2, #9
 8001508:	4935      	ldr	r1, [pc, #212]	@ (80015e0 <power_system+0x110>)
 800150a:	4833      	ldr	r0, [pc, #204]	@ (80015d8 <power_system+0x108>)
 800150c:	f003 fad8 	bl	8004ac0 <HAL_UART_Transmit>
    HAL_UART_Transmit(&huart3, (uint8_t*)timeGSM, strlen(timeGSM), 100);
 8001510:	4834      	ldr	r0, [pc, #208]	@ (80015e4 <power_system+0x114>)
 8001512:	f7fe fee5 	bl	80002e0 <strlen>
 8001516:	4603      	mov	r3, r0
 8001518:	b29a      	uxth	r2, r3
 800151a:	2364      	movs	r3, #100	@ 0x64
 800151c:	4931      	ldr	r1, [pc, #196]	@ (80015e4 <power_system+0x114>)
 800151e:	482e      	ldr	r0, [pc, #184]	@ (80015d8 <power_system+0x108>)
 8001520:	f003 face 	bl	8004ac0 <HAL_UART_Transmit>
    HAL_UART_Transmit(&huart3, (uint8_t*)"\r\n", 2, 100);
 8001524:	2364      	movs	r3, #100	@ 0x64
 8001526:	2202      	movs	r2, #2
 8001528:	492c      	ldr	r1, [pc, #176]	@ (80015dc <power_system+0x10c>)
 800152a:	482b      	ldr	r0, [pc, #172]	@ (80015d8 <power_system+0x108>)
 800152c:	f003 fac8 	bl	8004ac0 <HAL_UART_Transmit>

	if(strcmp(testtime, timeGSM) == 0){
 8001530:	492c      	ldr	r1, [pc, #176]	@ (80015e4 <power_system+0x114>)
 8001532:	6878      	ldr	r0, [r7, #4]
 8001534:	f7fe fe74 	bl	8000220 <strcmp>
 8001538:	4603      	mov	r3, r0
 800153a:	2b00      	cmp	r3, #0
 800153c:	d125      	bne.n	800158a <power_system+0xba>
		relayOff(RELAY1_Port, RELAY1_Pin);
 800153e:	2101      	movs	r1, #1
 8001540:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001544:	f7ff ffb4 	bl	80014b0 <relayOff>
		relayOn(RELAY2_Port, RELAY2_Pin);
 8001548:	2102      	movs	r1, #2
 800154a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800154e:	f7ff ff9f 	bl	8001490 <relayOn>
		relayOn(RELAY3_Port, RELAY3_Pin);
 8001552:	2110      	movs	r1, #16
 8001554:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001558:	f7ff ff9a 	bl	8001490 <relayOn>
		relayOn(RELAY4_Port, RELAY4_Pin);
 800155c:	2101      	movs	r1, #1
 800155e:	4822      	ldr	r0, [pc, #136]	@ (80015e8 <power_system+0x118>)
 8001560:	f7ff ff96 	bl	8001490 <relayOn>
		relayOn(RELAY5_Port, RELAY5_Pin);
 8001564:	2102      	movs	r1, #2
 8001566:	4821      	ldr	r0, [pc, #132]	@ (80015ec <power_system+0x11c>)
 8001568:	f7ff ff92 	bl	8001490 <relayOn>
		relayOn(RELAY6_Port, RELAY6_Pin);
 800156c:	2101      	movs	r1, #1
 800156e:	481f      	ldr	r0, [pc, #124]	@ (80015ec <power_system+0x11c>)
 8001570:	f7ff ff8e 	bl	8001490 <relayOn>
		relayOn(RELAY7_Port, RELAY7_Pin);
 8001574:	2140      	movs	r1, #64	@ 0x40
 8001576:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800157a:	f7ff ff89 	bl	8001490 <relayOn>
		HAL_Delay(scanDuration); // Waits for the scan to complete
 800157e:	4b1c      	ldr	r3, [pc, #112]	@ (80015f0 <power_system+0x120>)
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	4618      	mov	r0, r3
 8001584:	f001 f848 	bl	8002618 <HAL_Delay>
		relayOff(RELAY4_Port, RELAY4_Pin);
		relayOff(RELAY5_Port, RELAY5_Pin);
		relayOff(RELAY6_Port, RELAY6_Pin);
		relayOff(RELAY7_Port, RELAY7_Pin);
	}
}
 8001588:	e01f      	b.n	80015ca <power_system+0xfa>
		relayOff(RELAY1_Port, RELAY1_Pin);
 800158a:	2101      	movs	r1, #1
 800158c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001590:	f7ff ff8e 	bl	80014b0 <relayOff>
		relayOff(RELAY2_Port, RELAY2_Pin);
 8001594:	2102      	movs	r1, #2
 8001596:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800159a:	f7ff ff89 	bl	80014b0 <relayOff>
		relayOff(RELAY3_Port, RELAY3_Pin);
 800159e:	2110      	movs	r1, #16
 80015a0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80015a4:	f7ff ff84 	bl	80014b0 <relayOff>
		relayOff(RELAY4_Port, RELAY4_Pin);
 80015a8:	2101      	movs	r1, #1
 80015aa:	480f      	ldr	r0, [pc, #60]	@ (80015e8 <power_system+0x118>)
 80015ac:	f7ff ff80 	bl	80014b0 <relayOff>
		relayOff(RELAY5_Port, RELAY5_Pin);
 80015b0:	2102      	movs	r1, #2
 80015b2:	480e      	ldr	r0, [pc, #56]	@ (80015ec <power_system+0x11c>)
 80015b4:	f7ff ff7c 	bl	80014b0 <relayOff>
		relayOff(RELAY6_Port, RELAY6_Pin);
 80015b8:	2101      	movs	r1, #1
 80015ba:	480c      	ldr	r0, [pc, #48]	@ (80015ec <power_system+0x11c>)
 80015bc:	f7ff ff78 	bl	80014b0 <relayOff>
		relayOff(RELAY7_Port, RELAY7_Pin);
 80015c0:	2140      	movs	r1, #64	@ 0x40
 80015c2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80015c6:	f7ff ff73 	bl	80014b0 <relayOff>
}
 80015ca:	bf00      	nop
 80015cc:	3708      	adds	r7, #8
 80015ce:	46bd      	mov	sp, r7
 80015d0:	bd80      	pop	{r7, pc}
 80015d2:	bf00      	nop
 80015d4:	0800903c 	.word	0x0800903c
 80015d8:	20000458 	.word	0x20000458
 80015dc:	08009048 	.word	0x08009048
 80015e0:	0800904c 	.word	0x0800904c
 80015e4:	200002d4 	.word	0x200002d4
 80015e8:	48000400 	.word	0x48000400
 80015ec:	48000800 	.word	0x48000800
 80015f0:	20000004 	.word	0x20000004

080015f4 <charge_batt>:

// Decides which battery to charge
void charge_batt(){
 80015f4:	b580      	push	{r7, lr}
 80015f6:	af00      	add	r7, sp, #0
	batt_temp1();
 80015f8:	f7ff fde6 	bl	80011c8 <batt_temp1>
	HAL_Delay(500);
 80015fc:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8001600:	f001 f80a 	bl	8002618 <HAL_Delay>
	batt_charge1();
 8001604:	f7ff fd78 	bl	80010f8 <batt_charge1>
	HAL_Delay(1000);
 8001608:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800160c:	f001 f804 	bl	8002618 <HAL_Delay>
	batt_temp2();
 8001610:	f7ff fec0 	bl	8001394 <batt_temp2>
	HAL_Delay(500);
 8001614:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8001618:	f000 fffe 	bl	8002618 <HAL_Delay>
	batt_charge2();
 800161c:	f7ff fe52 	bl	80012c4 <batt_charge2>
	HAL_Delay(1000);
 8001620:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001624:	f000 fff8 	bl	8002618 <HAL_Delay>

	if(temp1 >= 60 || temp2 >= 60){
 8001628:	4b65      	ldr	r3, [pc, #404]	@ (80017c0 <charge_batt+0x1cc>)
 800162a:	edd3 7a00 	vldr	s15, [r3]
 800162e:	ed9f 7a65 	vldr	s14, [pc, #404]	@ 80017c4 <charge_batt+0x1d0>
 8001632:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001636:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800163a:	da09      	bge.n	8001650 <charge_batt+0x5c>
 800163c:	4b62      	ldr	r3, [pc, #392]	@ (80017c8 <charge_batt+0x1d4>)
 800163e:	edd3 7a00 	vldr	s15, [r3]
 8001642:	ed9f 7a60 	vldr	s14, [pc, #384]	@ 80017c4 <charge_batt+0x1d0>
 8001646:	eef4 7ac7 	vcmpe.f32	s15, s14
 800164a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800164e:	db20      	blt.n	8001692 <charge_batt+0x9e>
		relayOff(RELAY1_Port, RELAY1_Pin);
 8001650:	2101      	movs	r1, #1
 8001652:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001656:	f7ff ff2b 	bl	80014b0 <relayOff>
		relayOff(RELAY2_Port, RELAY2_Pin);
 800165a:	2102      	movs	r1, #2
 800165c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001660:	f7ff ff26 	bl	80014b0 <relayOff>
		relayOff(RELAY3_Port, RELAY3_Pin);
 8001664:	2110      	movs	r1, #16
 8001666:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800166a:	f7ff ff21 	bl	80014b0 <relayOff>
		relayOff(RELAY4_Port, RELAY4_Pin);
 800166e:	2101      	movs	r1, #1
 8001670:	4856      	ldr	r0, [pc, #344]	@ (80017cc <charge_batt+0x1d8>)
 8001672:	f7ff ff1d 	bl	80014b0 <relayOff>
		relayOff(RELAY5_Port, RELAY5_Pin);
 8001676:	2102      	movs	r1, #2
 8001678:	4855      	ldr	r0, [pc, #340]	@ (80017d0 <charge_batt+0x1dc>)
 800167a:	f7ff ff19 	bl	80014b0 <relayOff>
		relayOff(RELAY6_Port, RELAY6_Pin);
 800167e:	2101      	movs	r1, #1
 8001680:	4853      	ldr	r0, [pc, #332]	@ (80017d0 <charge_batt+0x1dc>)
 8001682:	f7ff ff15 	bl	80014b0 <relayOff>
		relayOff(RELAY7_Port, RELAY7_Pin);
 8001686:	2140      	movs	r1, #64	@ 0x40
 8001688:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800168c:	f7ff ff10 	bl	80014b0 <relayOff>
		relayOff(RELAY4_Port, RELAY4_Pin);
		relayOff(RELAY5_Port, RELAY5_Pin);
		relayOff(RELAY6_Port, RELAY6_Pin);
		relayOff(RELAY7_Port, RELAY7_Pin);
	}
}
 8001690:	e094      	b.n	80017bc <charge_batt+0x1c8>
	else if(batt1 < batt2){
 8001692:	4b50      	ldr	r3, [pc, #320]	@ (80017d4 <charge_batt+0x1e0>)
 8001694:	881a      	ldrh	r2, [r3, #0]
 8001696:	4b50      	ldr	r3, [pc, #320]	@ (80017d8 <charge_batt+0x1e4>)
 8001698:	881b      	ldrh	r3, [r3, #0]
 800169a:	429a      	cmp	r2, r3
 800169c:	d220      	bcs.n	80016e0 <charge_batt+0xec>
		relayOn(RELAY1_Port, RELAY1_Pin);
 800169e:	2101      	movs	r1, #1
 80016a0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80016a4:	f7ff fef4 	bl	8001490 <relayOn>
		relayOn(RELAY2_Port, RELAY2_Pin);
 80016a8:	2102      	movs	r1, #2
 80016aa:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80016ae:	f7ff feef 	bl	8001490 <relayOn>
		relayOff(RELAY3_Port, RELAY3_Pin);
 80016b2:	2110      	movs	r1, #16
 80016b4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80016b8:	f7ff fefa 	bl	80014b0 <relayOff>
		relayOff(RELAY4_Port, RELAY4_Pin);
 80016bc:	2101      	movs	r1, #1
 80016be:	4843      	ldr	r0, [pc, #268]	@ (80017cc <charge_batt+0x1d8>)
 80016c0:	f7ff fef6 	bl	80014b0 <relayOff>
		relayOff(RELAY5_Port, RELAY5_Pin);
 80016c4:	2102      	movs	r1, #2
 80016c6:	4842      	ldr	r0, [pc, #264]	@ (80017d0 <charge_batt+0x1dc>)
 80016c8:	f7ff fef2 	bl	80014b0 <relayOff>
		relayOff(RELAY6_Port, RELAY6_Pin);
 80016cc:	2101      	movs	r1, #1
 80016ce:	4840      	ldr	r0, [pc, #256]	@ (80017d0 <charge_batt+0x1dc>)
 80016d0:	f7ff feee 	bl	80014b0 <relayOff>
		relayOff(RELAY7_Port, RELAY7_Pin);
 80016d4:	2140      	movs	r1, #64	@ 0x40
 80016d6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80016da:	f7ff fee9 	bl	80014b0 <relayOff>
}
 80016de:	e06d      	b.n	80017bc <charge_batt+0x1c8>
	else if(batt2 < batt1){
 80016e0:	4b3d      	ldr	r3, [pc, #244]	@ (80017d8 <charge_batt+0x1e4>)
 80016e2:	881a      	ldrh	r2, [r3, #0]
 80016e4:	4b3b      	ldr	r3, [pc, #236]	@ (80017d4 <charge_batt+0x1e0>)
 80016e6:	881b      	ldrh	r3, [r3, #0]
 80016e8:	429a      	cmp	r2, r3
 80016ea:	d220      	bcs.n	800172e <charge_batt+0x13a>
		relayOn(RELAY1_Port, RELAY1_Pin);
 80016ec:	2101      	movs	r1, #1
 80016ee:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80016f2:	f7ff fecd 	bl	8001490 <relayOn>
		relayOff(RELAY2_Port, RELAY2_Pin);
 80016f6:	2102      	movs	r1, #2
 80016f8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80016fc:	f7ff fed8 	bl	80014b0 <relayOff>
		relayOn(RELAY3_Port, RELAY3_Pin);
 8001700:	2110      	movs	r1, #16
 8001702:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001706:	f7ff fec3 	bl	8001490 <relayOn>
		relayOff(RELAY4_Port, RELAY4_Pin);
 800170a:	2101      	movs	r1, #1
 800170c:	482f      	ldr	r0, [pc, #188]	@ (80017cc <charge_batt+0x1d8>)
 800170e:	f7ff fecf 	bl	80014b0 <relayOff>
		relayOff(RELAY5_Port, RELAY5_Pin);
 8001712:	2102      	movs	r1, #2
 8001714:	482e      	ldr	r0, [pc, #184]	@ (80017d0 <charge_batt+0x1dc>)
 8001716:	f7ff fecb 	bl	80014b0 <relayOff>
		relayOff(RELAY6_Port, RELAY6_Pin);
 800171a:	2101      	movs	r1, #1
 800171c:	482c      	ldr	r0, [pc, #176]	@ (80017d0 <charge_batt+0x1dc>)
 800171e:	f7ff fec7 	bl	80014b0 <relayOff>
		relayOff(RELAY7_Port, RELAY7_Pin);
 8001722:	2140      	movs	r1, #64	@ 0x40
 8001724:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001728:	f7ff fec2 	bl	80014b0 <relayOff>
}
 800172c:	e046      	b.n	80017bc <charge_batt+0x1c8>
	else if(batt1 == batt2){
 800172e:	4b29      	ldr	r3, [pc, #164]	@ (80017d4 <charge_batt+0x1e0>)
 8001730:	881a      	ldrh	r2, [r3, #0]
 8001732:	4b29      	ldr	r3, [pc, #164]	@ (80017d8 <charge_batt+0x1e4>)
 8001734:	881b      	ldrh	r3, [r3, #0]
 8001736:	429a      	cmp	r2, r3
 8001738:	d120      	bne.n	800177c <charge_batt+0x188>
		relayOn(RELAY1_Port, RELAY1_Pin);
 800173a:	2101      	movs	r1, #1
 800173c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001740:	f7ff fea6 	bl	8001490 <relayOn>
		relayOn(RELAY2_Port, RELAY2_Pin);
 8001744:	2102      	movs	r1, #2
 8001746:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800174a:	f7ff fea1 	bl	8001490 <relayOn>
		relayOff(RELAY3_Port, RELAY3_Pin);
 800174e:	2110      	movs	r1, #16
 8001750:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001754:	f7ff feac 	bl	80014b0 <relayOff>
		relayOff(RELAY4_Port, RELAY4_Pin);
 8001758:	2101      	movs	r1, #1
 800175a:	481c      	ldr	r0, [pc, #112]	@ (80017cc <charge_batt+0x1d8>)
 800175c:	f7ff fea8 	bl	80014b0 <relayOff>
		relayOff(RELAY5_Port, RELAY5_Pin);
 8001760:	2102      	movs	r1, #2
 8001762:	481b      	ldr	r0, [pc, #108]	@ (80017d0 <charge_batt+0x1dc>)
 8001764:	f7ff fea4 	bl	80014b0 <relayOff>
		relayOff(RELAY6_Port, RELAY6_Pin);
 8001768:	2101      	movs	r1, #1
 800176a:	4819      	ldr	r0, [pc, #100]	@ (80017d0 <charge_batt+0x1dc>)
 800176c:	f7ff fea0 	bl	80014b0 <relayOff>
		relayOff(RELAY7_Port, RELAY7_Pin);
 8001770:	2140      	movs	r1, #64	@ 0x40
 8001772:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001776:	f7ff fe9b 	bl	80014b0 <relayOff>
}
 800177a:	e01f      	b.n	80017bc <charge_batt+0x1c8>
		relayOff(RELAY1_Port, RELAY1_Pin);
 800177c:	2101      	movs	r1, #1
 800177e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001782:	f7ff fe95 	bl	80014b0 <relayOff>
		relayOff(RELAY2_Port, RELAY2_Pin);
 8001786:	2102      	movs	r1, #2
 8001788:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800178c:	f7ff fe90 	bl	80014b0 <relayOff>
		relayOff(RELAY3_Port, RELAY3_Pin);
 8001790:	2110      	movs	r1, #16
 8001792:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001796:	f7ff fe8b 	bl	80014b0 <relayOff>
		relayOff(RELAY4_Port, RELAY4_Pin);
 800179a:	2101      	movs	r1, #1
 800179c:	480b      	ldr	r0, [pc, #44]	@ (80017cc <charge_batt+0x1d8>)
 800179e:	f7ff fe87 	bl	80014b0 <relayOff>
		relayOff(RELAY5_Port, RELAY5_Pin);
 80017a2:	2102      	movs	r1, #2
 80017a4:	480a      	ldr	r0, [pc, #40]	@ (80017d0 <charge_batt+0x1dc>)
 80017a6:	f7ff fe83 	bl	80014b0 <relayOff>
		relayOff(RELAY6_Port, RELAY6_Pin);
 80017aa:	2101      	movs	r1, #1
 80017ac:	4808      	ldr	r0, [pc, #32]	@ (80017d0 <charge_batt+0x1dc>)
 80017ae:	f7ff fe7f 	bl	80014b0 <relayOff>
		relayOff(RELAY7_Port, RELAY7_Pin);
 80017b2:	2140      	movs	r1, #64	@ 0x40
 80017b4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80017b8:	f7ff fe7a 	bl	80014b0 <relayOff>
}
 80017bc:	bf00      	nop
 80017be:	bd80      	pop	{r7, pc}
 80017c0:	20000300 	.word	0x20000300
 80017c4:	42700000 	.word	0x42700000
 80017c8:	20000304 	.word	0x20000304
 80017cc:	48000400 	.word	0x48000400
 80017d0:	48000800 	.word	0x48000800
 80017d4:	20000308 	.word	0x20000308
 80017d8:	2000030a 	.word	0x2000030a

080017dc <run_mTEM>:
		HAL_Delay(100);
	}

}

void run_mTEM(){
 80017dc:	b580      	push	{r7, lr}
 80017de:	af00      	add	r7, sp, #0
	charge_batt();
 80017e0:	f7ff ff08 	bl	80015f4 <charge_batt>
	HAL_Delay(500);
 80017e4:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80017e8:	f000 ff16 	bl	8002618 <HAL_Delay>
	getTime();
 80017ec:	f7ff fc18 	bl	8001020 <getTime>
	HAL_Delay(500);
 80017f0:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80017f4:	f000 ff10 	bl	8002618 <HAL_Delay>
	power_system("1135");
 80017f8:	4805      	ldr	r0, [pc, #20]	@ (8001810 <run_mTEM+0x34>)
 80017fa:	f7ff fe69 	bl	80014d0 <power_system>
	HAL_Delay(2000);
 80017fe:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8001802:	f000 ff09 	bl	8002618 <HAL_Delay>
	sleep();
 8001806:	f7ff fba3 	bl	8000f50 <sleep>
}
 800180a:	bf00      	nop
 800180c:	bd80      	pop	{r7, pc}
 800180e:	bf00      	nop
 8001810:	08009058 	.word	0x08009058

08001814 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001814:	b580      	push	{r7, lr}
 8001816:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001818:	f000 fe8e 	bl	8002538 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800181c:	f000 f836 	bl	800188c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001820:	f000 f998 	bl	8001b54 <MX_GPIO_Init>
  MX_I2C1_Init();
 8001824:	f000 f87e 	bl	8001924 <MX_I2C1_Init>
  MX_I2C2_Init();
 8001828:	f000 f8bc 	bl	80019a4 <MX_I2C2_Init>
  MX_USART3_UART_Init();
 800182c:	f000 f946 	bl	8001abc <MX_USART3_UART_Init>
  MX_USART1_UART_Init();
 8001830:	f000 f8f8 	bl	8001a24 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
//  mqtt_send();
//  sleep();
//  mqtt_receiveconn();
//  send_SMS("+4530861453", "codeTest");
  relayOn(Converter_Port, Converter_Pin);
 8001834:	2180      	movs	r1, #128	@ 0x80
 8001836:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800183a:	f7ff fe29 	bl	8001490 <relayOn>
//  start_melody();
  startGPS();
 800183e:	f7ff fbd9 	bl	8000ff4 <startGPS>

//	receive_SMS();
  /* USER CODE END 2 */

  /* Initialize led */
  BSP_LED_Init(LED_GREEN);
 8001842:	2000      	movs	r0, #0
 8001844:	f000 fce4 	bl	8002210 <BSP_LED_Init>

  /* Initialize USER push-button, will be used to trigger an interrupt each time it's pressed.*/
  BSP_PB_Init(BUTTON_USER, BUTTON_MODE_EXTI);
 8001848:	2101      	movs	r1, #1
 800184a:	2000      	movs	r0, #0
 800184c:	f000 fd16 	bl	800227c <BSP_PB_Init>

  /* Initialize COM1 port (115200, 8 bits (7-bit data + 1 stop bit), no parity */
  BspCOMInit.BaudRate   = 115200;
 8001850:	4b0d      	ldr	r3, [pc, #52]	@ (8001888 <main+0x74>)
 8001852:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001856:	601a      	str	r2, [r3, #0]
  BspCOMInit.WordLength = COM_WORDLENGTH_8B;
 8001858:	4b0b      	ldr	r3, [pc, #44]	@ (8001888 <main+0x74>)
 800185a:	2200      	movs	r2, #0
 800185c:	605a      	str	r2, [r3, #4]
  BspCOMInit.StopBits   = COM_STOPBITS_1;
 800185e:	4b0a      	ldr	r3, [pc, #40]	@ (8001888 <main+0x74>)
 8001860:	2200      	movs	r2, #0
 8001862:	811a      	strh	r2, [r3, #8]
  BspCOMInit.Parity     = COM_PARITY_NONE;
 8001864:	4b08      	ldr	r3, [pc, #32]	@ (8001888 <main+0x74>)
 8001866:	2200      	movs	r2, #0
 8001868:	815a      	strh	r2, [r3, #10]
  BspCOMInit.HwFlowCtl  = COM_HWCONTROL_NONE;
 800186a:	4b07      	ldr	r3, [pc, #28]	@ (8001888 <main+0x74>)
 800186c:	2200      	movs	r2, #0
 800186e:	819a      	strh	r2, [r3, #12]
  if (BSP_COM_Init(COM1, &BspCOMInit) != BSP_ERROR_NONE)
 8001870:	4905      	ldr	r1, [pc, #20]	@ (8001888 <main+0x74>)
 8001872:	2000      	movs	r0, #0
 8001874:	f000 fd8e 	bl	8002394 <BSP_COM_Init>
 8001878:	4603      	mov	r3, r0
 800187a:	2b00      	cmp	r3, #0
 800187c:	d001      	beq.n	8001882 <main+0x6e>
  {
    Error_Handler();
 800187e:	f000 f9e9 	bl	8001c54 <Error_Handler>
	  power_system();
	  HAL_Delay(5000);
	  reset_GSM();
	  HAL_Delay(10000);*/

	  run_mTEM();
 8001882:	f7ff ffab 	bl	80017dc <run_mTEM>
 8001886:	e7fc      	b.n	8001882 <main+0x6e>
 8001888:	2000030c 	.word	0x2000030c

0800188c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800188c:	b580      	push	{r7, lr}
 800188e:	b094      	sub	sp, #80	@ 0x50
 8001890:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001892:	f107 0318 	add.w	r3, r7, #24
 8001896:	2238      	movs	r2, #56	@ 0x38
 8001898:	2100      	movs	r1, #0
 800189a:	4618      	mov	r0, r3
 800189c:	f005 f9bf 	bl	8006c1e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80018a0:	1d3b      	adds	r3, r7, #4
 80018a2:	2200      	movs	r2, #0
 80018a4:	601a      	str	r2, [r3, #0]
 80018a6:	605a      	str	r2, [r3, #4]
 80018a8:	609a      	str	r2, [r3, #8]
 80018aa:	60da      	str	r2, [r3, #12]
 80018ac:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 80018ae:	f44f 7000 	mov.w	r0, #512	@ 0x200
 80018b2:	f002 f885 	bl	80039c0 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80018b6:	2302      	movs	r3, #2
 80018b8:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80018ba:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80018be:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80018c0:	2340      	movs	r3, #64	@ 0x40
 80018c2:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80018c4:	2302      	movs	r3, #2
 80018c6:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80018c8:	2302      	movs	r3, #2
 80018ca:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 80018cc:	2301      	movs	r3, #1
 80018ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 12;
 80018d0:	230c      	movs	r3, #12
 80018d2:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80018d4:	2302      	movs	r3, #2
 80018d6:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV4;
 80018d8:	2304      	movs	r3, #4
 80018da:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80018dc:	2302      	movs	r3, #2
 80018de:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80018e0:	f107 0318 	add.w	r3, r7, #24
 80018e4:	4618      	mov	r0, r3
 80018e6:	f002 f91f 	bl	8003b28 <HAL_RCC_OscConfig>
 80018ea:	4603      	mov	r3, r0
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	d001      	beq.n	80018f4 <SystemClock_Config+0x68>
  {
    Error_Handler();
 80018f0:	f000 f9b0 	bl	8001c54 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80018f4:	230f      	movs	r3, #15
 80018f6:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80018f8:	2303      	movs	r3, #3
 80018fa:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80018fc:	2300      	movs	r3, #0
 80018fe:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001900:	2300      	movs	r3, #0
 8001902:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001904:	2300      	movs	r3, #0
 8001906:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8001908:	1d3b      	adds	r3, r7, #4
 800190a:	2103      	movs	r1, #3
 800190c:	4618      	mov	r0, r3
 800190e:	f002 fc1d 	bl	800414c <HAL_RCC_ClockConfig>
 8001912:	4603      	mov	r3, r0
 8001914:	2b00      	cmp	r3, #0
 8001916:	d001      	beq.n	800191c <SystemClock_Config+0x90>
  {
    Error_Handler();
 8001918:	f000 f99c 	bl	8001c54 <Error_Handler>
  }
}
 800191c:	bf00      	nop
 800191e:	3750      	adds	r7, #80	@ 0x50
 8001920:	46bd      	mov	sp, r7
 8001922:	bd80      	pop	{r7, pc}

08001924 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001924:	b580      	push	{r7, lr}
 8001926:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001928:	4b1b      	ldr	r3, [pc, #108]	@ (8001998 <MX_I2C1_Init+0x74>)
 800192a:	4a1c      	ldr	r2, [pc, #112]	@ (800199c <MX_I2C1_Init+0x78>)
 800192c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x20B17DB6;
 800192e:	4b1a      	ldr	r3, [pc, #104]	@ (8001998 <MX_I2C1_Init+0x74>)
 8001930:	4a1b      	ldr	r2, [pc, #108]	@ (80019a0 <MX_I2C1_Init+0x7c>)
 8001932:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001934:	4b18      	ldr	r3, [pc, #96]	@ (8001998 <MX_I2C1_Init+0x74>)
 8001936:	2200      	movs	r2, #0
 8001938:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800193a:	4b17      	ldr	r3, [pc, #92]	@ (8001998 <MX_I2C1_Init+0x74>)
 800193c:	2201      	movs	r2, #1
 800193e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001940:	4b15      	ldr	r3, [pc, #84]	@ (8001998 <MX_I2C1_Init+0x74>)
 8001942:	2200      	movs	r2, #0
 8001944:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001946:	4b14      	ldr	r3, [pc, #80]	@ (8001998 <MX_I2C1_Init+0x74>)
 8001948:	2200      	movs	r2, #0
 800194a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800194c:	4b12      	ldr	r3, [pc, #72]	@ (8001998 <MX_I2C1_Init+0x74>)
 800194e:	2200      	movs	r2, #0
 8001950:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001952:	4b11      	ldr	r3, [pc, #68]	@ (8001998 <MX_I2C1_Init+0x74>)
 8001954:	2200      	movs	r2, #0
 8001956:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001958:	4b0f      	ldr	r3, [pc, #60]	@ (8001998 <MX_I2C1_Init+0x74>)
 800195a:	2200      	movs	r2, #0
 800195c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800195e:	480e      	ldr	r0, [pc, #56]	@ (8001998 <MX_I2C1_Init+0x74>)
 8001960:	f001 fa46 	bl	8002df0 <HAL_I2C_Init>
 8001964:	4603      	mov	r3, r0
 8001966:	2b00      	cmp	r3, #0
 8001968:	d001      	beq.n	800196e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800196a:	f000 f973 	bl	8001c54 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800196e:	2100      	movs	r1, #0
 8001970:	4809      	ldr	r0, [pc, #36]	@ (8001998 <MX_I2C1_Init+0x74>)
 8001972:	f001 ff8d 	bl	8003890 <HAL_I2CEx_ConfigAnalogFilter>
 8001976:	4603      	mov	r3, r0
 8001978:	2b00      	cmp	r3, #0
 800197a:	d001      	beq.n	8001980 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 800197c:	f000 f96a 	bl	8001c54 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001980:	2100      	movs	r1, #0
 8001982:	4805      	ldr	r0, [pc, #20]	@ (8001998 <MX_I2C1_Init+0x74>)
 8001984:	f001 ffcf 	bl	8003926 <HAL_I2CEx_ConfigDigitalFilter>
 8001988:	4603      	mov	r3, r0
 800198a:	2b00      	cmp	r3, #0
 800198c:	d001      	beq.n	8001992 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800198e:	f000 f961 	bl	8001c54 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001992:	bf00      	nop
 8001994:	bd80      	pop	{r7, pc}
 8001996:	bf00      	nop
 8001998:	2000031c 	.word	0x2000031c
 800199c:	40005400 	.word	0x40005400
 80019a0:	20b17db6 	.word	0x20b17db6

080019a4 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 80019a4:	b580      	push	{r7, lr}
 80019a6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80019a8:	4b1b      	ldr	r3, [pc, #108]	@ (8001a18 <MX_I2C2_Init+0x74>)
 80019aa:	4a1c      	ldr	r2, [pc, #112]	@ (8001a1c <MX_I2C2_Init+0x78>)
 80019ac:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x20B17DB6;
 80019ae:	4b1a      	ldr	r3, [pc, #104]	@ (8001a18 <MX_I2C2_Init+0x74>)
 80019b0:	4a1b      	ldr	r2, [pc, #108]	@ (8001a20 <MX_I2C2_Init+0x7c>)
 80019b2:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 80019b4:	4b18      	ldr	r3, [pc, #96]	@ (8001a18 <MX_I2C2_Init+0x74>)
 80019b6:	2200      	movs	r2, #0
 80019b8:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80019ba:	4b17      	ldr	r3, [pc, #92]	@ (8001a18 <MX_I2C2_Init+0x74>)
 80019bc:	2201      	movs	r2, #1
 80019be:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80019c0:	4b15      	ldr	r3, [pc, #84]	@ (8001a18 <MX_I2C2_Init+0x74>)
 80019c2:	2200      	movs	r2, #0
 80019c4:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 80019c6:	4b14      	ldr	r3, [pc, #80]	@ (8001a18 <MX_I2C2_Init+0x74>)
 80019c8:	2200      	movs	r2, #0
 80019ca:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80019cc:	4b12      	ldr	r3, [pc, #72]	@ (8001a18 <MX_I2C2_Init+0x74>)
 80019ce:	2200      	movs	r2, #0
 80019d0:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80019d2:	4b11      	ldr	r3, [pc, #68]	@ (8001a18 <MX_I2C2_Init+0x74>)
 80019d4:	2200      	movs	r2, #0
 80019d6:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80019d8:	4b0f      	ldr	r3, [pc, #60]	@ (8001a18 <MX_I2C2_Init+0x74>)
 80019da:	2200      	movs	r2, #0
 80019dc:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80019de:	480e      	ldr	r0, [pc, #56]	@ (8001a18 <MX_I2C2_Init+0x74>)
 80019e0:	f001 fa06 	bl	8002df0 <HAL_I2C_Init>
 80019e4:	4603      	mov	r3, r0
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d001      	beq.n	80019ee <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 80019ea:	f000 f933 	bl	8001c54 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80019ee:	2100      	movs	r1, #0
 80019f0:	4809      	ldr	r0, [pc, #36]	@ (8001a18 <MX_I2C2_Init+0x74>)
 80019f2:	f001 ff4d 	bl	8003890 <HAL_I2CEx_ConfigAnalogFilter>
 80019f6:	4603      	mov	r3, r0
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	d001      	beq.n	8001a00 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 80019fc:	f000 f92a 	bl	8001c54 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8001a00:	2100      	movs	r1, #0
 8001a02:	4805      	ldr	r0, [pc, #20]	@ (8001a18 <MX_I2C2_Init+0x74>)
 8001a04:	f001 ff8f 	bl	8003926 <HAL_I2CEx_ConfigDigitalFilter>
 8001a08:	4603      	mov	r3, r0
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d001      	beq.n	8001a12 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8001a0e:	f000 f921 	bl	8001c54 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8001a12:	bf00      	nop
 8001a14:	bd80      	pop	{r7, pc}
 8001a16:	bf00      	nop
 8001a18:	20000370 	.word	0x20000370
 8001a1c:	40005800 	.word	0x40005800
 8001a20:	20b17db6 	.word	0x20b17db6

08001a24 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001a24:	b580      	push	{r7, lr}
 8001a26:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001a28:	4b22      	ldr	r3, [pc, #136]	@ (8001ab4 <MX_USART1_UART_Init+0x90>)
 8001a2a:	4a23      	ldr	r2, [pc, #140]	@ (8001ab8 <MX_USART1_UART_Init+0x94>)
 8001a2c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001a2e:	4b21      	ldr	r3, [pc, #132]	@ (8001ab4 <MX_USART1_UART_Init+0x90>)
 8001a30:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001a34:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001a36:	4b1f      	ldr	r3, [pc, #124]	@ (8001ab4 <MX_USART1_UART_Init+0x90>)
 8001a38:	2200      	movs	r2, #0
 8001a3a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001a3c:	4b1d      	ldr	r3, [pc, #116]	@ (8001ab4 <MX_USART1_UART_Init+0x90>)
 8001a3e:	2200      	movs	r2, #0
 8001a40:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001a42:	4b1c      	ldr	r3, [pc, #112]	@ (8001ab4 <MX_USART1_UART_Init+0x90>)
 8001a44:	2200      	movs	r2, #0
 8001a46:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001a48:	4b1a      	ldr	r3, [pc, #104]	@ (8001ab4 <MX_USART1_UART_Init+0x90>)
 8001a4a:	220c      	movs	r2, #12
 8001a4c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001a4e:	4b19      	ldr	r3, [pc, #100]	@ (8001ab4 <MX_USART1_UART_Init+0x90>)
 8001a50:	2200      	movs	r2, #0
 8001a52:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001a54:	4b17      	ldr	r3, [pc, #92]	@ (8001ab4 <MX_USART1_UART_Init+0x90>)
 8001a56:	2200      	movs	r2, #0
 8001a58:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001a5a:	4b16      	ldr	r3, [pc, #88]	@ (8001ab4 <MX_USART1_UART_Init+0x90>)
 8001a5c:	2200      	movs	r2, #0
 8001a5e:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001a60:	4b14      	ldr	r3, [pc, #80]	@ (8001ab4 <MX_USART1_UART_Init+0x90>)
 8001a62:	2200      	movs	r2, #0
 8001a64:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001a66:	4b13      	ldr	r3, [pc, #76]	@ (8001ab4 <MX_USART1_UART_Init+0x90>)
 8001a68:	2200      	movs	r2, #0
 8001a6a:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001a6c:	4811      	ldr	r0, [pc, #68]	@ (8001ab4 <MX_USART1_UART_Init+0x90>)
 8001a6e:	f002 ffd7 	bl	8004a20 <HAL_UART_Init>
 8001a72:	4603      	mov	r3, r0
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	d001      	beq.n	8001a7c <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8001a78:	f000 f8ec 	bl	8001c54 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001a7c:	2100      	movs	r1, #0
 8001a7e:	480d      	ldr	r0, [pc, #52]	@ (8001ab4 <MX_USART1_UART_Init+0x90>)
 8001a80:	f004 fa85 	bl	8005f8e <HAL_UARTEx_SetTxFifoThreshold>
 8001a84:	4603      	mov	r3, r0
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d001      	beq.n	8001a8e <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8001a8a:	f000 f8e3 	bl	8001c54 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001a8e:	2100      	movs	r1, #0
 8001a90:	4808      	ldr	r0, [pc, #32]	@ (8001ab4 <MX_USART1_UART_Init+0x90>)
 8001a92:	f004 faba 	bl	800600a <HAL_UARTEx_SetRxFifoThreshold>
 8001a96:	4603      	mov	r3, r0
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d001      	beq.n	8001aa0 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8001a9c:	f000 f8da 	bl	8001c54 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8001aa0:	4804      	ldr	r0, [pc, #16]	@ (8001ab4 <MX_USART1_UART_Init+0x90>)
 8001aa2:	f004 fa3b 	bl	8005f1c <HAL_UARTEx_DisableFifoMode>
 8001aa6:	4603      	mov	r3, r0
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d001      	beq.n	8001ab0 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8001aac:	f000 f8d2 	bl	8001c54 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001ab0:	bf00      	nop
 8001ab2:	bd80      	pop	{r7, pc}
 8001ab4:	200003c4 	.word	0x200003c4
 8001ab8:	40013800 	.word	0x40013800

08001abc <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001abc:	b580      	push	{r7, lr}
 8001abe:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001ac0:	4b22      	ldr	r3, [pc, #136]	@ (8001b4c <MX_USART3_UART_Init+0x90>)
 8001ac2:	4a23      	ldr	r2, [pc, #140]	@ (8001b50 <MX_USART3_UART_Init+0x94>)
 8001ac4:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001ac6:	4b21      	ldr	r3, [pc, #132]	@ (8001b4c <MX_USART3_UART_Init+0x90>)
 8001ac8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001acc:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001ace:	4b1f      	ldr	r3, [pc, #124]	@ (8001b4c <MX_USART3_UART_Init+0x90>)
 8001ad0:	2200      	movs	r2, #0
 8001ad2:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001ad4:	4b1d      	ldr	r3, [pc, #116]	@ (8001b4c <MX_USART3_UART_Init+0x90>)
 8001ad6:	2200      	movs	r2, #0
 8001ad8:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001ada:	4b1c      	ldr	r3, [pc, #112]	@ (8001b4c <MX_USART3_UART_Init+0x90>)
 8001adc:	2200      	movs	r2, #0
 8001ade:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001ae0:	4b1a      	ldr	r3, [pc, #104]	@ (8001b4c <MX_USART3_UART_Init+0x90>)
 8001ae2:	220c      	movs	r2, #12
 8001ae4:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001ae6:	4b19      	ldr	r3, [pc, #100]	@ (8001b4c <MX_USART3_UART_Init+0x90>)
 8001ae8:	2200      	movs	r2, #0
 8001aea:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001aec:	4b17      	ldr	r3, [pc, #92]	@ (8001b4c <MX_USART3_UART_Init+0x90>)
 8001aee:	2200      	movs	r2, #0
 8001af0:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001af2:	4b16      	ldr	r3, [pc, #88]	@ (8001b4c <MX_USART3_UART_Init+0x90>)
 8001af4:	2200      	movs	r2, #0
 8001af6:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001af8:	4b14      	ldr	r3, [pc, #80]	@ (8001b4c <MX_USART3_UART_Init+0x90>)
 8001afa:	2200      	movs	r2, #0
 8001afc:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001afe:	4b13      	ldr	r3, [pc, #76]	@ (8001b4c <MX_USART3_UART_Init+0x90>)
 8001b00:	2200      	movs	r2, #0
 8001b02:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001b04:	4811      	ldr	r0, [pc, #68]	@ (8001b4c <MX_USART3_UART_Init+0x90>)
 8001b06:	f002 ff8b 	bl	8004a20 <HAL_UART_Init>
 8001b0a:	4603      	mov	r3, r0
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d001      	beq.n	8001b14 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8001b10:	f000 f8a0 	bl	8001c54 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001b14:	2100      	movs	r1, #0
 8001b16:	480d      	ldr	r0, [pc, #52]	@ (8001b4c <MX_USART3_UART_Init+0x90>)
 8001b18:	f004 fa39 	bl	8005f8e <HAL_UARTEx_SetTxFifoThreshold>
 8001b1c:	4603      	mov	r3, r0
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d001      	beq.n	8001b26 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8001b22:	f000 f897 	bl	8001c54 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001b26:	2100      	movs	r1, #0
 8001b28:	4808      	ldr	r0, [pc, #32]	@ (8001b4c <MX_USART3_UART_Init+0x90>)
 8001b2a:	f004 fa6e 	bl	800600a <HAL_UARTEx_SetRxFifoThreshold>
 8001b2e:	4603      	mov	r3, r0
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	d001      	beq.n	8001b38 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8001b34:	f000 f88e 	bl	8001c54 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8001b38:	4804      	ldr	r0, [pc, #16]	@ (8001b4c <MX_USART3_UART_Init+0x90>)
 8001b3a:	f004 f9ef 	bl	8005f1c <HAL_UARTEx_DisableFifoMode>
 8001b3e:	4603      	mov	r3, r0
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	d001      	beq.n	8001b48 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8001b44:	f000 f886 	bl	8001c54 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001b48:	bf00      	nop
 8001b4a:	bd80      	pop	{r7, pc}
 8001b4c:	20000458 	.word	0x20000458
 8001b50:	40004800 	.word	0x40004800

08001b54 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001b54:	b580      	push	{r7, lr}
 8001b56:	b08a      	sub	sp, #40	@ 0x28
 8001b58:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b5a:	f107 0314 	add.w	r3, r7, #20
 8001b5e:	2200      	movs	r2, #0
 8001b60:	601a      	str	r2, [r3, #0]
 8001b62:	605a      	str	r2, [r3, #4]
 8001b64:	609a      	str	r2, [r3, #8]
 8001b66:	60da      	str	r2, [r3, #12]
 8001b68:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001b6a:	4b37      	ldr	r3, [pc, #220]	@ (8001c48 <MX_GPIO_Init+0xf4>)
 8001b6c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001b6e:	4a36      	ldr	r2, [pc, #216]	@ (8001c48 <MX_GPIO_Init+0xf4>)
 8001b70:	f043 0304 	orr.w	r3, r3, #4
 8001b74:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001b76:	4b34      	ldr	r3, [pc, #208]	@ (8001c48 <MX_GPIO_Init+0xf4>)
 8001b78:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001b7a:	f003 0304 	and.w	r3, r3, #4
 8001b7e:	613b      	str	r3, [r7, #16]
 8001b80:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001b82:	4b31      	ldr	r3, [pc, #196]	@ (8001c48 <MX_GPIO_Init+0xf4>)
 8001b84:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001b86:	4a30      	ldr	r2, [pc, #192]	@ (8001c48 <MX_GPIO_Init+0xf4>)
 8001b88:	f043 0320 	orr.w	r3, r3, #32
 8001b8c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001b8e:	4b2e      	ldr	r3, [pc, #184]	@ (8001c48 <MX_GPIO_Init+0xf4>)
 8001b90:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001b92:	f003 0320 	and.w	r3, r3, #32
 8001b96:	60fb      	str	r3, [r7, #12]
 8001b98:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b9a:	4b2b      	ldr	r3, [pc, #172]	@ (8001c48 <MX_GPIO_Init+0xf4>)
 8001b9c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001b9e:	4a2a      	ldr	r2, [pc, #168]	@ (8001c48 <MX_GPIO_Init+0xf4>)
 8001ba0:	f043 0301 	orr.w	r3, r3, #1
 8001ba4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001ba6:	4b28      	ldr	r3, [pc, #160]	@ (8001c48 <MX_GPIO_Init+0xf4>)
 8001ba8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001baa:	f003 0301 	and.w	r3, r3, #1
 8001bae:	60bb      	str	r3, [r7, #8]
 8001bb0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001bb2:	4b25      	ldr	r3, [pc, #148]	@ (8001c48 <MX_GPIO_Init+0xf4>)
 8001bb4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001bb6:	4a24      	ldr	r2, [pc, #144]	@ (8001c48 <MX_GPIO_Init+0xf4>)
 8001bb8:	f043 0302 	orr.w	r3, r3, #2
 8001bbc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001bbe:	4b22      	ldr	r3, [pc, #136]	@ (8001c48 <MX_GPIO_Init+0xf4>)
 8001bc0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001bc2:	f003 0302 	and.w	r3, r3, #2
 8001bc6:	607b      	str	r3, [r7, #4]
 8001bc8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0|GPIO_PIN_1, GPIO_PIN_RESET);
 8001bca:	2200      	movs	r2, #0
 8001bcc:	2103      	movs	r1, #3
 8001bce:	481f      	ldr	r0, [pc, #124]	@ (8001c4c <MX_GPIO_Init+0xf8>)
 8001bd0:	f001 f8f6 	bl	8002dc0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_6
 8001bd4:	2200      	movs	r2, #0
 8001bd6:	21d3      	movs	r1, #211	@ 0xd3
 8001bd8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001bdc:	f001 f8f0 	bl	8002dc0 <HAL_GPIO_WritePin>
                          |GPIO_PIN_7, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_6, GPIO_PIN_RESET);
 8001be0:	2200      	movs	r2, #0
 8001be2:	2141      	movs	r1, #65	@ 0x41
 8001be4:	481a      	ldr	r0, [pc, #104]	@ (8001c50 <MX_GPIO_Init+0xfc>)
 8001be6:	f001 f8eb 	bl	8002dc0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC0 PC1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001bea:	2303      	movs	r3, #3
 8001bec:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001bee:	2301      	movs	r3, #1
 8001bf0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bf2:	2300      	movs	r3, #0
 8001bf4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bf6:	2300      	movs	r3, #0
 8001bf8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001bfa:	f107 0314 	add.w	r3, r7, #20
 8001bfe:	4619      	mov	r1, r3
 8001c00:	4812      	ldr	r0, [pc, #72]	@ (8001c4c <MX_GPIO_Init+0xf8>)
 8001c02:	f000 ff5b 	bl	8002abc <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA1 PA4 PA6
                           PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_6
 8001c06:	23d3      	movs	r3, #211	@ 0xd3
 8001c08:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c0a:	2301      	movs	r3, #1
 8001c0c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c0e:	2300      	movs	r3, #0
 8001c10:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c12:	2300      	movs	r3, #0
 8001c14:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c16:	f107 0314 	add.w	r3, r7, #20
 8001c1a:	4619      	mov	r1, r3
 8001c1c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001c20:	f000 ff4c 	bl	8002abc <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_6;
 8001c24:	2341      	movs	r3, #65	@ 0x41
 8001c26:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c28:	2301      	movs	r3, #1
 8001c2a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c2c:	2300      	movs	r3, #0
 8001c2e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c30:	2300      	movs	r3, #0
 8001c32:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c34:	f107 0314 	add.w	r3, r7, #20
 8001c38:	4619      	mov	r1, r3
 8001c3a:	4805      	ldr	r0, [pc, #20]	@ (8001c50 <MX_GPIO_Init+0xfc>)
 8001c3c:	f000 ff3e 	bl	8002abc <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001c40:	bf00      	nop
 8001c42:	3728      	adds	r7, #40	@ 0x28
 8001c44:	46bd      	mov	sp, r7
 8001c46:	bd80      	pop	{r7, pc}
 8001c48:	40021000 	.word	0x40021000
 8001c4c:	48000800 	.word	0x48000800
 8001c50:	48000400 	.word	0x48000400

08001c54 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001c54:	b480      	push	{r7}
 8001c56:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001c58:	b672      	cpsid	i
}
 8001c5a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001c5c:	bf00      	nop
 8001c5e:	e7fd      	b.n	8001c5c <Error_Handler+0x8>

08001c60 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001c60:	b580      	push	{r7, lr}
 8001c62:	b082      	sub	sp, #8
 8001c64:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c66:	4b0f      	ldr	r3, [pc, #60]	@ (8001ca4 <HAL_MspInit+0x44>)
 8001c68:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001c6a:	4a0e      	ldr	r2, [pc, #56]	@ (8001ca4 <HAL_MspInit+0x44>)
 8001c6c:	f043 0301 	orr.w	r3, r3, #1
 8001c70:	6613      	str	r3, [r2, #96]	@ 0x60
 8001c72:	4b0c      	ldr	r3, [pc, #48]	@ (8001ca4 <HAL_MspInit+0x44>)
 8001c74:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001c76:	f003 0301 	and.w	r3, r3, #1
 8001c7a:	607b      	str	r3, [r7, #4]
 8001c7c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001c7e:	4b09      	ldr	r3, [pc, #36]	@ (8001ca4 <HAL_MspInit+0x44>)
 8001c80:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001c82:	4a08      	ldr	r2, [pc, #32]	@ (8001ca4 <HAL_MspInit+0x44>)
 8001c84:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001c88:	6593      	str	r3, [r2, #88]	@ 0x58
 8001c8a:	4b06      	ldr	r3, [pc, #24]	@ (8001ca4 <HAL_MspInit+0x44>)
 8001c8c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001c8e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001c92:	603b      	str	r3, [r7, #0]
 8001c94:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8001c96:	f001 ff37 	bl	8003b08 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001c9a:	bf00      	nop
 8001c9c:	3708      	adds	r7, #8
 8001c9e:	46bd      	mov	sp, r7
 8001ca0:	bd80      	pop	{r7, pc}
 8001ca2:	bf00      	nop
 8001ca4:	40021000 	.word	0x40021000

08001ca8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001ca8:	b580      	push	{r7, lr}
 8001caa:	b0a2      	sub	sp, #136	@ 0x88
 8001cac:	af00      	add	r7, sp, #0
 8001cae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cb0:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 8001cb4:	2200      	movs	r2, #0
 8001cb6:	601a      	str	r2, [r3, #0]
 8001cb8:	605a      	str	r2, [r3, #4]
 8001cba:	609a      	str	r2, [r3, #8]
 8001cbc:	60da      	str	r2, [r3, #12]
 8001cbe:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001cc0:	f107 0320 	add.w	r3, r7, #32
 8001cc4:	2254      	movs	r2, #84	@ 0x54
 8001cc6:	2100      	movs	r1, #0
 8001cc8:	4618      	mov	r0, r3
 8001cca:	f004 ffa8 	bl	8006c1e <memset>
  if(hi2c->Instance==I2C1)
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	4a4f      	ldr	r2, [pc, #316]	@ (8001e10 <HAL_I2C_MspInit+0x168>)
 8001cd4:	4293      	cmp	r3, r2
 8001cd6:	d158      	bne.n	8001d8a <HAL_I2C_MspInit+0xe2>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001cd8:	2340      	movs	r3, #64	@ 0x40
 8001cda:	623b      	str	r3, [r7, #32]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001cdc:	2300      	movs	r3, #0
 8001cde:	63fb      	str	r3, [r7, #60]	@ 0x3c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001ce0:	f107 0320 	add.w	r3, r7, #32
 8001ce4:	4618      	mov	r0, r3
 8001ce6:	f002 fc4d 	bl	8004584 <HAL_RCCEx_PeriphCLKConfig>
 8001cea:	4603      	mov	r3, r0
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d001      	beq.n	8001cf4 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8001cf0:	f7ff ffb0 	bl	8001c54 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001cf4:	4b47      	ldr	r3, [pc, #284]	@ (8001e14 <HAL_I2C_MspInit+0x16c>)
 8001cf6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001cf8:	4a46      	ldr	r2, [pc, #280]	@ (8001e14 <HAL_I2C_MspInit+0x16c>)
 8001cfa:	f043 0301 	orr.w	r3, r3, #1
 8001cfe:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001d00:	4b44      	ldr	r3, [pc, #272]	@ (8001e14 <HAL_I2C_MspInit+0x16c>)
 8001d02:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001d04:	f003 0301 	and.w	r3, r3, #1
 8001d08:	61fb      	str	r3, [r7, #28]
 8001d0a:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d0c:	4b41      	ldr	r3, [pc, #260]	@ (8001e14 <HAL_I2C_MspInit+0x16c>)
 8001d0e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001d10:	4a40      	ldr	r2, [pc, #256]	@ (8001e14 <HAL_I2C_MspInit+0x16c>)
 8001d12:	f043 0302 	orr.w	r3, r3, #2
 8001d16:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001d18:	4b3e      	ldr	r3, [pc, #248]	@ (8001e14 <HAL_I2C_MspInit+0x16c>)
 8001d1a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001d1c:	f003 0302 	and.w	r3, r3, #2
 8001d20:	61bb      	str	r3, [r7, #24]
 8001d22:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PA15     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001d24:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001d28:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001d2a:	2312      	movs	r3, #18
 8001d2c:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d2e:	2300      	movs	r3, #0
 8001d30:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d32:	2300      	movs	r3, #0
 8001d34:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001d38:	2304      	movs	r3, #4
 8001d3a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d3e:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 8001d42:	4619      	mov	r1, r3
 8001d44:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001d48:	f000 feb8 	bl	8002abc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001d4c:	2380      	movs	r3, #128	@ 0x80
 8001d4e:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001d50:	2312      	movs	r3, #18
 8001d52:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d54:	2300      	movs	r3, #0
 8001d56:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d58:	2300      	movs	r3, #0
 8001d5a:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001d5e:	2304      	movs	r3, #4
 8001d60:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d64:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 8001d68:	4619      	mov	r1, r3
 8001d6a:	482b      	ldr	r0, [pc, #172]	@ (8001e18 <HAL_I2C_MspInit+0x170>)
 8001d6c:	f000 fea6 	bl	8002abc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001d70:	4b28      	ldr	r3, [pc, #160]	@ (8001e14 <HAL_I2C_MspInit+0x16c>)
 8001d72:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001d74:	4a27      	ldr	r2, [pc, #156]	@ (8001e14 <HAL_I2C_MspInit+0x16c>)
 8001d76:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001d7a:	6593      	str	r3, [r2, #88]	@ 0x58
 8001d7c:	4b25      	ldr	r3, [pc, #148]	@ (8001e14 <HAL_I2C_MspInit+0x16c>)
 8001d7e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001d80:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001d84:	617b      	str	r3, [r7, #20]
 8001d86:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8001d88:	e03e      	b.n	8001e08 <HAL_I2C_MspInit+0x160>
  else if(hi2c->Instance==I2C2)
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	4a23      	ldr	r2, [pc, #140]	@ (8001e1c <HAL_I2C_MspInit+0x174>)
 8001d90:	4293      	cmp	r3, r2
 8001d92:	d139      	bne.n	8001e08 <HAL_I2C_MspInit+0x160>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8001d94:	2380      	movs	r3, #128	@ 0x80
 8001d96:	623b      	str	r3, [r7, #32]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8001d98:	2300      	movs	r3, #0
 8001d9a:	643b      	str	r3, [r7, #64]	@ 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001d9c:	f107 0320 	add.w	r3, r7, #32
 8001da0:	4618      	mov	r0, r3
 8001da2:	f002 fbef 	bl	8004584 <HAL_RCCEx_PeriphCLKConfig>
 8001da6:	4603      	mov	r3, r0
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d001      	beq.n	8001db0 <HAL_I2C_MspInit+0x108>
      Error_Handler();
 8001dac:	f7ff ff52 	bl	8001c54 <Error_Handler>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001db0:	4b18      	ldr	r3, [pc, #96]	@ (8001e14 <HAL_I2C_MspInit+0x16c>)
 8001db2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001db4:	4a17      	ldr	r2, [pc, #92]	@ (8001e14 <HAL_I2C_MspInit+0x16c>)
 8001db6:	f043 0301 	orr.w	r3, r3, #1
 8001dba:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001dbc:	4b15      	ldr	r3, [pc, #84]	@ (8001e14 <HAL_I2C_MspInit+0x16c>)
 8001dbe:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001dc0:	f003 0301 	and.w	r3, r3, #1
 8001dc4:	613b      	str	r3, [r7, #16]
 8001dc6:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001dc8:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001dcc:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001dce:	2312      	movs	r3, #18
 8001dd0:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dd2:	2300      	movs	r3, #0
 8001dd4:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001dd6:	2300      	movs	r3, #0
 8001dd8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001ddc:	2304      	movs	r3, #4
 8001dde:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001de2:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 8001de6:	4619      	mov	r1, r3
 8001de8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001dec:	f000 fe66 	bl	8002abc <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001df0:	4b08      	ldr	r3, [pc, #32]	@ (8001e14 <HAL_I2C_MspInit+0x16c>)
 8001df2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001df4:	4a07      	ldr	r2, [pc, #28]	@ (8001e14 <HAL_I2C_MspInit+0x16c>)
 8001df6:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001dfa:	6593      	str	r3, [r2, #88]	@ 0x58
 8001dfc:	4b05      	ldr	r3, [pc, #20]	@ (8001e14 <HAL_I2C_MspInit+0x16c>)
 8001dfe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e00:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001e04:	60fb      	str	r3, [r7, #12]
 8001e06:	68fb      	ldr	r3, [r7, #12]
}
 8001e08:	bf00      	nop
 8001e0a:	3788      	adds	r7, #136	@ 0x88
 8001e0c:	46bd      	mov	sp, r7
 8001e0e:	bd80      	pop	{r7, pc}
 8001e10:	40005400 	.word	0x40005400
 8001e14:	40021000 	.word	0x40021000
 8001e18:	48000400 	.word	0x48000400
 8001e1c:	40005800 	.word	0x40005800

08001e20 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001e20:	b580      	push	{r7, lr}
 8001e22:	b0a0      	sub	sp, #128	@ 0x80
 8001e24:	af00      	add	r7, sp, #0
 8001e26:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e28:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8001e2c:	2200      	movs	r2, #0
 8001e2e:	601a      	str	r2, [r3, #0]
 8001e30:	605a      	str	r2, [r3, #4]
 8001e32:	609a      	str	r2, [r3, #8]
 8001e34:	60da      	str	r2, [r3, #12]
 8001e36:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001e38:	f107 0318 	add.w	r3, r7, #24
 8001e3c:	2254      	movs	r2, #84	@ 0x54
 8001e3e:	2100      	movs	r1, #0
 8001e40:	4618      	mov	r0, r3
 8001e42:	f004 feec 	bl	8006c1e <memset>
  if(huart->Instance==USART1)
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	4a45      	ldr	r2, [pc, #276]	@ (8001f60 <HAL_UART_MspInit+0x140>)
 8001e4c:	4293      	cmp	r3, r2
 8001e4e:	d13e      	bne.n	8001ece <HAL_UART_MspInit+0xae>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001e50:	2301      	movs	r3, #1
 8001e52:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001e54:	2300      	movs	r3, #0
 8001e56:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001e58:	f107 0318 	add.w	r3, r7, #24
 8001e5c:	4618      	mov	r0, r3
 8001e5e:	f002 fb91 	bl	8004584 <HAL_RCCEx_PeriphCLKConfig>
 8001e62:	4603      	mov	r3, r0
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	d001      	beq.n	8001e6c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001e68:	f7ff fef4 	bl	8001c54 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001e6c:	4b3d      	ldr	r3, [pc, #244]	@ (8001f64 <HAL_UART_MspInit+0x144>)
 8001e6e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001e70:	4a3c      	ldr	r2, [pc, #240]	@ (8001f64 <HAL_UART_MspInit+0x144>)
 8001e72:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001e76:	6613      	str	r3, [r2, #96]	@ 0x60
 8001e78:	4b3a      	ldr	r3, [pc, #232]	@ (8001f64 <HAL_UART_MspInit+0x144>)
 8001e7a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001e7c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001e80:	617b      	str	r3, [r7, #20]
 8001e82:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001e84:	4b37      	ldr	r3, [pc, #220]	@ (8001f64 <HAL_UART_MspInit+0x144>)
 8001e86:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001e88:	4a36      	ldr	r2, [pc, #216]	@ (8001f64 <HAL_UART_MspInit+0x144>)
 8001e8a:	f043 0304 	orr.w	r3, r3, #4
 8001e8e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001e90:	4b34      	ldr	r3, [pc, #208]	@ (8001f64 <HAL_UART_MspInit+0x144>)
 8001e92:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001e94:	f003 0304 	and.w	r3, r3, #4
 8001e98:	613b      	str	r3, [r7, #16]
 8001e9a:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PC4     ------> USART1_TX
    PC5     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8001e9c:	2330      	movs	r3, #48	@ 0x30
 8001e9e:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ea0:	2302      	movs	r3, #2
 8001ea2:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ea4:	2300      	movs	r3, #0
 8001ea6:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ea8:	2300      	movs	r3, #0
 8001eaa:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001eac:	2307      	movs	r3, #7
 8001eae:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001eb0:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8001eb4:	4619      	mov	r1, r3
 8001eb6:	482c      	ldr	r0, [pc, #176]	@ (8001f68 <HAL_UART_MspInit+0x148>)
 8001eb8:	f000 fe00 	bl	8002abc <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001ebc:	2200      	movs	r2, #0
 8001ebe:	2100      	movs	r1, #0
 8001ec0:	2025      	movs	r0, #37	@ 0x25
 8001ec2:	f000 fca6 	bl	8002812 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001ec6:	2025      	movs	r0, #37	@ 0x25
 8001ec8:	f000 fcbd 	bl	8002846 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001ecc:	e043      	b.n	8001f56 <HAL_UART_MspInit+0x136>
  else if(huart->Instance==USART3)
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	4a26      	ldr	r2, [pc, #152]	@ (8001f6c <HAL_UART_MspInit+0x14c>)
 8001ed4:	4293      	cmp	r3, r2
 8001ed6:	d13e      	bne.n	8001f56 <HAL_UART_MspInit+0x136>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001ed8:	2304      	movs	r3, #4
 8001eda:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8001edc:	2300      	movs	r3, #0
 8001ede:	627b      	str	r3, [r7, #36]	@ 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001ee0:	f107 0318 	add.w	r3, r7, #24
 8001ee4:	4618      	mov	r0, r3
 8001ee6:	f002 fb4d 	bl	8004584 <HAL_RCCEx_PeriphCLKConfig>
 8001eea:	4603      	mov	r3, r0
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	d001      	beq.n	8001ef4 <HAL_UART_MspInit+0xd4>
      Error_Handler();
 8001ef0:	f7ff feb0 	bl	8001c54 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8001ef4:	4b1b      	ldr	r3, [pc, #108]	@ (8001f64 <HAL_UART_MspInit+0x144>)
 8001ef6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001ef8:	4a1a      	ldr	r2, [pc, #104]	@ (8001f64 <HAL_UART_MspInit+0x144>)
 8001efa:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001efe:	6593      	str	r3, [r2, #88]	@ 0x58
 8001f00:	4b18      	ldr	r3, [pc, #96]	@ (8001f64 <HAL_UART_MspInit+0x144>)
 8001f02:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f04:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001f08:	60fb      	str	r3, [r7, #12]
 8001f0a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f0c:	4b15      	ldr	r3, [pc, #84]	@ (8001f64 <HAL_UART_MspInit+0x144>)
 8001f0e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001f10:	4a14      	ldr	r2, [pc, #80]	@ (8001f64 <HAL_UART_MspInit+0x144>)
 8001f12:	f043 0302 	orr.w	r3, r3, #2
 8001f16:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001f18:	4b12      	ldr	r3, [pc, #72]	@ (8001f64 <HAL_UART_MspInit+0x144>)
 8001f1a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001f1c:	f003 0302 	and.w	r3, r3, #2
 8001f20:	60bb      	str	r3, [r7, #8]
 8001f22:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001f24:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8001f28:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f2a:	2302      	movs	r3, #2
 8001f2c:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f2e:	2300      	movs	r3, #0
 8001f30:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f32:	2300      	movs	r3, #0
 8001f34:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001f36:	2307      	movs	r3, #7
 8001f38:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f3a:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8001f3e:	4619      	mov	r1, r3
 8001f40:	480b      	ldr	r0, [pc, #44]	@ (8001f70 <HAL_UART_MspInit+0x150>)
 8001f42:	f000 fdbb 	bl	8002abc <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8001f46:	2200      	movs	r2, #0
 8001f48:	2100      	movs	r1, #0
 8001f4a:	2027      	movs	r0, #39	@ 0x27
 8001f4c:	f000 fc61 	bl	8002812 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8001f50:	2027      	movs	r0, #39	@ 0x27
 8001f52:	f000 fc78 	bl	8002846 <HAL_NVIC_EnableIRQ>
}
 8001f56:	bf00      	nop
 8001f58:	3780      	adds	r7, #128	@ 0x80
 8001f5a:	46bd      	mov	sp, r7
 8001f5c:	bd80      	pop	{r7, pc}
 8001f5e:	bf00      	nop
 8001f60:	40013800 	.word	0x40013800
 8001f64:	40021000 	.word	0x40021000
 8001f68:	48000800 	.word	0x48000800
 8001f6c:	40004800 	.word	0x40004800
 8001f70:	48000400 	.word	0x48000400

08001f74 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001f74:	b480      	push	{r7}
 8001f76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001f78:	bf00      	nop
 8001f7a:	e7fd      	b.n	8001f78 <NMI_Handler+0x4>

08001f7c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001f7c:	b480      	push	{r7}
 8001f7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001f80:	bf00      	nop
 8001f82:	e7fd      	b.n	8001f80 <HardFault_Handler+0x4>

08001f84 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001f84:	b480      	push	{r7}
 8001f86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001f88:	bf00      	nop
 8001f8a:	e7fd      	b.n	8001f88 <MemManage_Handler+0x4>

08001f8c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001f8c:	b480      	push	{r7}
 8001f8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001f90:	bf00      	nop
 8001f92:	e7fd      	b.n	8001f90 <BusFault_Handler+0x4>

08001f94 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001f94:	b480      	push	{r7}
 8001f96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001f98:	bf00      	nop
 8001f9a:	e7fd      	b.n	8001f98 <UsageFault_Handler+0x4>

08001f9c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001f9c:	b480      	push	{r7}
 8001f9e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001fa0:	bf00      	nop
 8001fa2:	46bd      	mov	sp, r7
 8001fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa8:	4770      	bx	lr

08001faa <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001faa:	b480      	push	{r7}
 8001fac:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001fae:	bf00      	nop
 8001fb0:	46bd      	mov	sp, r7
 8001fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb6:	4770      	bx	lr

08001fb8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001fb8:	b480      	push	{r7}
 8001fba:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001fbc:	bf00      	nop
 8001fbe:	46bd      	mov	sp, r7
 8001fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc4:	4770      	bx	lr

08001fc6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001fc6:	b580      	push	{r7, lr}
 8001fc8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001fca:	f000 fb07 	bl	80025dc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001fce:	bf00      	nop
 8001fd0:	bd80      	pop	{r7, pc}
	...

08001fd4 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 8001fd4:	b580      	push	{r7, lr}
 8001fd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001fd8:	4802      	ldr	r0, [pc, #8]	@ (8001fe4 <USART1_IRQHandler+0x10>)
 8001fda:	f002 fec7 	bl	8004d6c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001fde:	bf00      	nop
 8001fe0:	bd80      	pop	{r7, pc}
 8001fe2:	bf00      	nop
 8001fe4:	200003c4 	.word	0x200003c4

08001fe8 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt / USART3 wake-up interrupt through EXTI line 28.
  */
void USART3_IRQHandler(void)
{
 8001fe8:	b580      	push	{r7, lr}
 8001fea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8001fec:	4802      	ldr	r0, [pc, #8]	@ (8001ff8 <USART3_IRQHandler+0x10>)
 8001fee:	f002 febd 	bl	8004d6c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8001ff2:	bf00      	nop
 8001ff4:	bd80      	pop	{r7, pc}
 8001ff6:	bf00      	nop
 8001ff8:	20000458 	.word	0x20000458

08001ffc <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001ffc:	b580      	push	{r7, lr}
 8001ffe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  BSP_PB_IRQHandler(BUTTON_USER);
 8002000:	2000      	movs	r0, #0
 8002002:	f000 f9a9 	bl	8002358 <BSP_PB_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8002006:	bf00      	nop
 8002008:	bd80      	pop	{r7, pc}

0800200a <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800200a:	b480      	push	{r7}
 800200c:	af00      	add	r7, sp, #0
  return 1;
 800200e:	2301      	movs	r3, #1
}
 8002010:	4618      	mov	r0, r3
 8002012:	46bd      	mov	sp, r7
 8002014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002018:	4770      	bx	lr

0800201a <_kill>:

int _kill(int pid, int sig)
{
 800201a:	b580      	push	{r7, lr}
 800201c:	b082      	sub	sp, #8
 800201e:	af00      	add	r7, sp, #0
 8002020:	6078      	str	r0, [r7, #4]
 8002022:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002024:	f004 fee0 	bl	8006de8 <__errno>
 8002028:	4603      	mov	r3, r0
 800202a:	2216      	movs	r2, #22
 800202c:	601a      	str	r2, [r3, #0]
  return -1;
 800202e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002032:	4618      	mov	r0, r3
 8002034:	3708      	adds	r7, #8
 8002036:	46bd      	mov	sp, r7
 8002038:	bd80      	pop	{r7, pc}

0800203a <_exit>:

void _exit (int status)
{
 800203a:	b580      	push	{r7, lr}
 800203c:	b082      	sub	sp, #8
 800203e:	af00      	add	r7, sp, #0
 8002040:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002042:	f04f 31ff 	mov.w	r1, #4294967295
 8002046:	6878      	ldr	r0, [r7, #4]
 8002048:	f7ff ffe7 	bl	800201a <_kill>
  while (1) {}    /* Make sure we hang here */
 800204c:	bf00      	nop
 800204e:	e7fd      	b.n	800204c <_exit+0x12>

08002050 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002050:	b580      	push	{r7, lr}
 8002052:	b086      	sub	sp, #24
 8002054:	af00      	add	r7, sp, #0
 8002056:	60f8      	str	r0, [r7, #12]
 8002058:	60b9      	str	r1, [r7, #8]
 800205a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800205c:	2300      	movs	r3, #0
 800205e:	617b      	str	r3, [r7, #20]
 8002060:	e00a      	b.n	8002078 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002062:	f3af 8000 	nop.w
 8002066:	4601      	mov	r1, r0
 8002068:	68bb      	ldr	r3, [r7, #8]
 800206a:	1c5a      	adds	r2, r3, #1
 800206c:	60ba      	str	r2, [r7, #8]
 800206e:	b2ca      	uxtb	r2, r1
 8002070:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002072:	697b      	ldr	r3, [r7, #20]
 8002074:	3301      	adds	r3, #1
 8002076:	617b      	str	r3, [r7, #20]
 8002078:	697a      	ldr	r2, [r7, #20]
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	429a      	cmp	r2, r3
 800207e:	dbf0      	blt.n	8002062 <_read+0x12>
  }

  return len;
 8002080:	687b      	ldr	r3, [r7, #4]
}
 8002082:	4618      	mov	r0, r3
 8002084:	3718      	adds	r7, #24
 8002086:	46bd      	mov	sp, r7
 8002088:	bd80      	pop	{r7, pc}

0800208a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800208a:	b580      	push	{r7, lr}
 800208c:	b086      	sub	sp, #24
 800208e:	af00      	add	r7, sp, #0
 8002090:	60f8      	str	r0, [r7, #12]
 8002092:	60b9      	str	r1, [r7, #8]
 8002094:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002096:	2300      	movs	r3, #0
 8002098:	617b      	str	r3, [r7, #20]
 800209a:	e009      	b.n	80020b0 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800209c:	68bb      	ldr	r3, [r7, #8]
 800209e:	1c5a      	adds	r2, r3, #1
 80020a0:	60ba      	str	r2, [r7, #8]
 80020a2:	781b      	ldrb	r3, [r3, #0]
 80020a4:	4618      	mov	r0, r3
 80020a6:	f000 f9d7 	bl	8002458 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80020aa:	697b      	ldr	r3, [r7, #20]
 80020ac:	3301      	adds	r3, #1
 80020ae:	617b      	str	r3, [r7, #20]
 80020b0:	697a      	ldr	r2, [r7, #20]
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	429a      	cmp	r2, r3
 80020b6:	dbf1      	blt.n	800209c <_write+0x12>
  }
  return len;
 80020b8:	687b      	ldr	r3, [r7, #4]
}
 80020ba:	4618      	mov	r0, r3
 80020bc:	3718      	adds	r7, #24
 80020be:	46bd      	mov	sp, r7
 80020c0:	bd80      	pop	{r7, pc}

080020c2 <_close>:

int _close(int file)
{
 80020c2:	b480      	push	{r7}
 80020c4:	b083      	sub	sp, #12
 80020c6:	af00      	add	r7, sp, #0
 80020c8:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80020ca:	f04f 33ff 	mov.w	r3, #4294967295
}
 80020ce:	4618      	mov	r0, r3
 80020d0:	370c      	adds	r7, #12
 80020d2:	46bd      	mov	sp, r7
 80020d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d8:	4770      	bx	lr

080020da <_fstat>:


int _fstat(int file, struct stat *st)
{
 80020da:	b480      	push	{r7}
 80020dc:	b083      	sub	sp, #12
 80020de:	af00      	add	r7, sp, #0
 80020e0:	6078      	str	r0, [r7, #4]
 80020e2:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80020e4:	683b      	ldr	r3, [r7, #0]
 80020e6:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80020ea:	605a      	str	r2, [r3, #4]
  return 0;
 80020ec:	2300      	movs	r3, #0
}
 80020ee:	4618      	mov	r0, r3
 80020f0:	370c      	adds	r7, #12
 80020f2:	46bd      	mov	sp, r7
 80020f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f8:	4770      	bx	lr

080020fa <_isatty>:

int _isatty(int file)
{
 80020fa:	b480      	push	{r7}
 80020fc:	b083      	sub	sp, #12
 80020fe:	af00      	add	r7, sp, #0
 8002100:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002102:	2301      	movs	r3, #1
}
 8002104:	4618      	mov	r0, r3
 8002106:	370c      	adds	r7, #12
 8002108:	46bd      	mov	sp, r7
 800210a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800210e:	4770      	bx	lr

08002110 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002110:	b480      	push	{r7}
 8002112:	b085      	sub	sp, #20
 8002114:	af00      	add	r7, sp, #0
 8002116:	60f8      	str	r0, [r7, #12]
 8002118:	60b9      	str	r1, [r7, #8]
 800211a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800211c:	2300      	movs	r3, #0
}
 800211e:	4618      	mov	r0, r3
 8002120:	3714      	adds	r7, #20
 8002122:	46bd      	mov	sp, r7
 8002124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002128:	4770      	bx	lr
	...

0800212c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800212c:	b580      	push	{r7, lr}
 800212e:	b086      	sub	sp, #24
 8002130:	af00      	add	r7, sp, #0
 8002132:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002134:	4a14      	ldr	r2, [pc, #80]	@ (8002188 <_sbrk+0x5c>)
 8002136:	4b15      	ldr	r3, [pc, #84]	@ (800218c <_sbrk+0x60>)
 8002138:	1ad3      	subs	r3, r2, r3
 800213a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800213c:	697b      	ldr	r3, [r7, #20]
 800213e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002140:	4b13      	ldr	r3, [pc, #76]	@ (8002190 <_sbrk+0x64>)
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	2b00      	cmp	r3, #0
 8002146:	d102      	bne.n	800214e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002148:	4b11      	ldr	r3, [pc, #68]	@ (8002190 <_sbrk+0x64>)
 800214a:	4a12      	ldr	r2, [pc, #72]	@ (8002194 <_sbrk+0x68>)
 800214c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800214e:	4b10      	ldr	r3, [pc, #64]	@ (8002190 <_sbrk+0x64>)
 8002150:	681a      	ldr	r2, [r3, #0]
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	4413      	add	r3, r2
 8002156:	693a      	ldr	r2, [r7, #16]
 8002158:	429a      	cmp	r2, r3
 800215a:	d207      	bcs.n	800216c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800215c:	f004 fe44 	bl	8006de8 <__errno>
 8002160:	4603      	mov	r3, r0
 8002162:	220c      	movs	r2, #12
 8002164:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002166:	f04f 33ff 	mov.w	r3, #4294967295
 800216a:	e009      	b.n	8002180 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800216c:	4b08      	ldr	r3, [pc, #32]	@ (8002190 <_sbrk+0x64>)
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002172:	4b07      	ldr	r3, [pc, #28]	@ (8002190 <_sbrk+0x64>)
 8002174:	681a      	ldr	r2, [r3, #0]
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	4413      	add	r3, r2
 800217a:	4a05      	ldr	r2, [pc, #20]	@ (8002190 <_sbrk+0x64>)
 800217c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800217e:	68fb      	ldr	r3, [r7, #12]
}
 8002180:	4618      	mov	r0, r3
 8002182:	3718      	adds	r7, #24
 8002184:	46bd      	mov	sp, r7
 8002186:	bd80      	pop	{r7, pc}
 8002188:	20020000 	.word	0x20020000
 800218c:	00000400 	.word	0x00000400
 8002190:	200004ec 	.word	0x200004ec
 8002194:	200006e0 	.word	0x200006e0

08002198 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8002198:	b480      	push	{r7}
 800219a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 800219c:	4b06      	ldr	r3, [pc, #24]	@ (80021b8 <SystemInit+0x20>)
 800219e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80021a2:	4a05      	ldr	r2, [pc, #20]	@ (80021b8 <SystemInit+0x20>)
 80021a4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80021a8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80021ac:	bf00      	nop
 80021ae:	46bd      	mov	sp, r7
 80021b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b4:	4770      	bx	lr
 80021b6:	bf00      	nop
 80021b8:	e000ed00 	.word	0xe000ed00

080021bc <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80021bc:	480d      	ldr	r0, [pc, #52]	@ (80021f4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80021be:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 80021c0:	f7ff ffea 	bl	8002198 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80021c4:	480c      	ldr	r0, [pc, #48]	@ (80021f8 <LoopForever+0x6>)
  ldr r1, =_edata
 80021c6:	490d      	ldr	r1, [pc, #52]	@ (80021fc <LoopForever+0xa>)
  ldr r2, =_sidata
 80021c8:	4a0d      	ldr	r2, [pc, #52]	@ (8002200 <LoopForever+0xe>)
  movs r3, #0
 80021ca:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 80021cc:	e002      	b.n	80021d4 <LoopCopyDataInit>

080021ce <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80021ce:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80021d0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80021d2:	3304      	adds	r3, #4

080021d4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80021d4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80021d6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80021d8:	d3f9      	bcc.n	80021ce <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80021da:	4a0a      	ldr	r2, [pc, #40]	@ (8002204 <LoopForever+0x12>)
  ldr r4, =_ebss
 80021dc:	4c0a      	ldr	r4, [pc, #40]	@ (8002208 <LoopForever+0x16>)
  movs r3, #0
 80021de:	2300      	movs	r3, #0
  b LoopFillZerobss
 80021e0:	e001      	b.n	80021e6 <LoopFillZerobss>

080021e2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80021e2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80021e4:	3204      	adds	r2, #4

080021e6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80021e6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80021e8:	d3fb      	bcc.n	80021e2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80021ea:	f004 fe03 	bl	8006df4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80021ee:	f7ff fb11 	bl	8001814 <main>

080021f2 <LoopForever>:

LoopForever:
    b LoopForever
 80021f2:	e7fe      	b.n	80021f2 <LoopForever>
  ldr   r0, =_estack
 80021f4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80021f8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80021fc:	200001f0 	.word	0x200001f0
  ldr r2, =_sidata
 8002200:	0800947c 	.word	0x0800947c
  ldr r2, =_sbss
 8002204:	200001f0 	.word	0x200001f0
  ldr r4, =_ebss
 8002208:	200006e0 	.word	0x200006e0

0800220c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800220c:	e7fe      	b.n	800220c <ADC1_2_IRQHandler>
	...

08002210 <BSP_LED_Init>:
  *         This parameter can be one of following parameters:
  *           @arg  LED2
  * @retval BSP status
  */
int32_t BSP_LED_Init(Led_TypeDef Led)
{
 8002210:	b580      	push	{r7, lr}
 8002212:	b088      	sub	sp, #32
 8002214:	af00      	add	r7, sp, #0
 8002216:	4603      	mov	r3, r0
 8002218:	71fb      	strb	r3, [r7, #7]
  GPIO_InitTypeDef  gpio_init_structure;

  /* Enable the GPIO LED Clock */
  LED2_GPIO_CLK_ENABLE();
 800221a:	4b16      	ldr	r3, [pc, #88]	@ (8002274 <BSP_LED_Init+0x64>)
 800221c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800221e:	4a15      	ldr	r2, [pc, #84]	@ (8002274 <BSP_LED_Init+0x64>)
 8002220:	f043 0301 	orr.w	r3, r3, #1
 8002224:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002226:	4b13      	ldr	r3, [pc, #76]	@ (8002274 <BSP_LED_Init+0x64>)
 8002228:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800222a:	f003 0301 	and.w	r3, r3, #1
 800222e:	60bb      	str	r3, [r7, #8]
 8002230:	68bb      	ldr	r3, [r7, #8]

  /* Configure the GPIO_LED pin */
  gpio_init_structure.Pin   = LED_PIN[Led];
 8002232:	2320      	movs	r3, #32
 8002234:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Mode  = GPIO_MODE_OUTPUT_PP;
 8002236:	2301      	movs	r3, #1
 8002238:	613b      	str	r3, [r7, #16]
  gpio_init_structure.Pull  = GPIO_NOPULL;
 800223a:	2300      	movs	r3, #0
 800223c:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800223e:	2303      	movs	r3, #3
 8002240:	61bb      	str	r3, [r7, #24]

  HAL_GPIO_Init(LED_PORT[Led], &gpio_init_structure);
 8002242:	79fb      	ldrb	r3, [r7, #7]
 8002244:	4a0c      	ldr	r2, [pc, #48]	@ (8002278 <BSP_LED_Init+0x68>)
 8002246:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800224a:	f107 020c 	add.w	r2, r7, #12
 800224e:	4611      	mov	r1, r2
 8002250:	4618      	mov	r0, r3
 8002252:	f000 fc33 	bl	8002abc <HAL_GPIO_Init>
  HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_RESET);
 8002256:	79fb      	ldrb	r3, [r7, #7]
 8002258:	4a07      	ldr	r2, [pc, #28]	@ (8002278 <BSP_LED_Init+0x68>)
 800225a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800225e:	2120      	movs	r1, #32
 8002260:	2200      	movs	r2, #0
 8002262:	4618      	mov	r0, r3
 8002264:	f000 fdac 	bl	8002dc0 <HAL_GPIO_WritePin>

  return BSP_ERROR_NONE;
 8002268:	2300      	movs	r3, #0
}
 800226a:	4618      	mov	r0, r3
 800226c:	3720      	adds	r7, #32
 800226e:	46bd      	mov	sp, r7
 8002270:	bd80      	pop	{r7, pc}
 8002272:	bf00      	nop
 8002274:	40021000 	.word	0x40021000
 8002278:	2000000c 	.word	0x2000000c

0800227c <BSP_PB_Init>:
  *           @arg BUTTON_MODE_EXTI: Button will be connected to EXTI line
  *                                  with interrupt generation capability
  * @retval BSP status
  */
int32_t BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef ButtonMode)
{
 800227c:	b580      	push	{r7, lr}
 800227e:	b088      	sub	sp, #32
 8002280:	af00      	add	r7, sp, #0
 8002282:	4603      	mov	r3, r0
 8002284:	460a      	mov	r2, r1
 8002286:	71fb      	strb	r3, [r7, #7]
 8002288:	4613      	mov	r3, r2
 800228a:	71bb      	strb	r3, [r7, #6]
  static BSP_EXTI_LineCallback ButtonCallback[BUTTONn] = {BUTTON_USER_EXTI_Callback};
  static uint32_t BSP_BUTTON_PRIO [BUTTONn] = {BSP_BUTTON_USER_IT_PRIORITY};
  static const uint32_t BUTTON_EXTI_LINE[BUTTONn] = {USER_BUTTON_EXTI_LINE};

  /* Enable the BUTTON Clock */
  USER_BUTTON_GPIO_CLK_ENABLE();
 800228c:	4b2c      	ldr	r3, [pc, #176]	@ (8002340 <BSP_PB_Init+0xc4>)
 800228e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002290:	4a2b      	ldr	r2, [pc, #172]	@ (8002340 <BSP_PB_Init+0xc4>)
 8002292:	f043 0304 	orr.w	r3, r3, #4
 8002296:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002298:	4b29      	ldr	r3, [pc, #164]	@ (8002340 <BSP_PB_Init+0xc4>)
 800229a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800229c:	f003 0304 	and.w	r3, r3, #4
 80022a0:	60bb      	str	r3, [r7, #8]
 80022a2:	68bb      	ldr	r3, [r7, #8]

  gpio_init_structure.Pin = BUTTON_PIN[Button];
 80022a4:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80022a8:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Pull = GPIO_PULLDOWN;
 80022aa:	2302      	movs	r3, #2
 80022ac:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 80022ae:	2302      	movs	r3, #2
 80022b0:	61bb      	str	r3, [r7, #24]

  if(ButtonMode == BUTTON_MODE_GPIO)
 80022b2:	79bb      	ldrb	r3, [r7, #6]
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d10c      	bne.n	80022d2 <BSP_PB_Init+0x56>
  {
    /* Configure Button pin as input */
    gpio_init_structure.Mode = GPIO_MODE_INPUT;
 80022b8:	2300      	movs	r3, #0
 80022ba:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(BUTTON_PORT[Button], &gpio_init_structure);
 80022bc:	79fb      	ldrb	r3, [r7, #7]
 80022be:	4a21      	ldr	r2, [pc, #132]	@ (8002344 <BSP_PB_Init+0xc8>)
 80022c0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80022c4:	f107 020c 	add.w	r2, r7, #12
 80022c8:	4611      	mov	r1, r2
 80022ca:	4618      	mov	r0, r3
 80022cc:	f000 fbf6 	bl	8002abc <HAL_GPIO_Init>
 80022d0:	e031      	b.n	8002336 <BSP_PB_Init+0xba>
  }
  else /* (ButtonMode == BUTTON_MODE_EXTI) */
  {
    /* Configure Button pin as input with External interrupt */
    gpio_init_structure.Mode = GPIO_MODE_IT_RISING;
 80022d2:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80022d6:	613b      	str	r3, [r7, #16]

    HAL_GPIO_Init(BUTTON_PORT[Button], &gpio_init_structure);
 80022d8:	79fb      	ldrb	r3, [r7, #7]
 80022da:	4a1a      	ldr	r2, [pc, #104]	@ (8002344 <BSP_PB_Init+0xc8>)
 80022dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80022e0:	f107 020c 	add.w	r2, r7, #12
 80022e4:	4611      	mov	r1, r2
 80022e6:	4618      	mov	r0, r3
 80022e8:	f000 fbe8 	bl	8002abc <HAL_GPIO_Init>

    (void)HAL_EXTI_GetHandle(&hpb_exti[Button], BUTTON_EXTI_LINE[Button]);
 80022ec:	79fb      	ldrb	r3, [r7, #7]
 80022ee:	00db      	lsls	r3, r3, #3
 80022f0:	4a15      	ldr	r2, [pc, #84]	@ (8002348 <BSP_PB_Init+0xcc>)
 80022f2:	441a      	add	r2, r3
 80022f4:	79fb      	ldrb	r3, [r7, #7]
 80022f6:	4915      	ldr	r1, [pc, #84]	@ (800234c <BSP_PB_Init+0xd0>)
 80022f8:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80022fc:	4619      	mov	r1, r3
 80022fe:	4610      	mov	r0, r2
 8002300:	f000 fb98 	bl	8002a34 <HAL_EXTI_GetHandle>
    (void)HAL_EXTI_RegisterCallback(&hpb_exti[Button],  HAL_EXTI_COMMON_CB_ID, ButtonCallback[Button]);
 8002304:	79fb      	ldrb	r3, [r7, #7]
 8002306:	00db      	lsls	r3, r3, #3
 8002308:	4a0f      	ldr	r2, [pc, #60]	@ (8002348 <BSP_PB_Init+0xcc>)
 800230a:	1898      	adds	r0, r3, r2
 800230c:	79fb      	ldrb	r3, [r7, #7]
 800230e:	4a10      	ldr	r2, [pc, #64]	@ (8002350 <BSP_PB_Init+0xd4>)
 8002310:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002314:	461a      	mov	r2, r3
 8002316:	2100      	movs	r1, #0
 8002318:	f000 fb6f 	bl	80029fa <HAL_EXTI_RegisterCallback>

    /* Enable and set Button EXTI Interrupt to the lowest priority */
    HAL_NVIC_SetPriority((BUTTON_IRQn[Button]), BSP_BUTTON_PRIO[Button], 0x00);
 800231c:	2028      	movs	r0, #40	@ 0x28
 800231e:	79fb      	ldrb	r3, [r7, #7]
 8002320:	4a0c      	ldr	r2, [pc, #48]	@ (8002354 <BSP_PB_Init+0xd8>)
 8002322:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002326:	2200      	movs	r2, #0
 8002328:	4619      	mov	r1, r3
 800232a:	f000 fa72 	bl	8002812 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ((BUTTON_IRQn[Button]));
 800232e:	2328      	movs	r3, #40	@ 0x28
 8002330:	4618      	mov	r0, r3
 8002332:	f000 fa88 	bl	8002846 <HAL_NVIC_EnableIRQ>
  }

  return BSP_ERROR_NONE;
 8002336:	2300      	movs	r3, #0
}
 8002338:	4618      	mov	r0, r3
 800233a:	3720      	adds	r7, #32
 800233c:	46bd      	mov	sp, r7
 800233e:	bd80      	pop	{r7, pc}
 8002340:	40021000 	.word	0x40021000
 8002344:	20000010 	.word	0x20000010
 8002348:	200004f0 	.word	0x200004f0
 800234c:	08009078 	.word	0x08009078
 8002350:	20000018 	.word	0x20000018
 8002354:	2000001c 	.word	0x2000001c

08002358 <BSP_PB_IRQHandler>:
  * @brief  This function handles Push-Button interrupt requests.
  * @param  Button Specifies the pin connected EXTI line
  * @retval None
  */
void BSP_PB_IRQHandler(Button_TypeDef Button)
{
 8002358:	b580      	push	{r7, lr}
 800235a:	b082      	sub	sp, #8
 800235c:	af00      	add	r7, sp, #0
 800235e:	4603      	mov	r3, r0
 8002360:	71fb      	strb	r3, [r7, #7]
  HAL_EXTI_IRQHandler(&hpb_exti[Button]);
 8002362:	79fb      	ldrb	r3, [r7, #7]
 8002364:	00db      	lsls	r3, r3, #3
 8002366:	4a04      	ldr	r2, [pc, #16]	@ (8002378 <BSP_PB_IRQHandler+0x20>)
 8002368:	4413      	add	r3, r2
 800236a:	4618      	mov	r0, r3
 800236c:	f000 fb76 	bl	8002a5c <HAL_EXTI_IRQHandler>
}
 8002370:	bf00      	nop
 8002372:	3708      	adds	r7, #8
 8002374:	46bd      	mov	sp, r7
 8002376:	bd80      	pop	{r7, pc}
 8002378:	200004f0 	.word	0x200004f0

0800237c <BSP_PB_Callback>:
  * @brief  BSP Push Button callback
  * @param  Button Specifies the pin connected EXTI line
  * @retval None.
  */
__weak void BSP_PB_Callback(Button_TypeDef Button)
{
 800237c:	b480      	push	{r7}
 800237e:	b083      	sub	sp, #12
 8002380:	af00      	add	r7, sp, #0
 8002382:	4603      	mov	r3, r0
 8002384:	71fb      	strb	r3, [r7, #7]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Button);

  /* This function should be implemented by the user application.
     It is called into this driver when an event on Button is triggered. */
}
 8002386:	bf00      	nop
 8002388:	370c      	adds	r7, #12
 800238a:	46bd      	mov	sp, r7
 800238c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002390:	4770      	bx	lr
	...

08002394 <BSP_COM_Init>:
  * @param  COM_Init Pointer to a UART_HandleTypeDef structure that contains the
  *                  configuration information for the specified USART peripheral.
  * @retval BSP error code
  */
int32_t BSP_COM_Init(COM_TypeDef COM, COM_InitTypeDef *COM_Init)
{
 8002394:	b580      	push	{r7, lr}
 8002396:	b084      	sub	sp, #16
 8002398:	af00      	add	r7, sp, #0
 800239a:	4603      	mov	r3, r0
 800239c:	6039      	str	r1, [r7, #0]
 800239e:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 80023a0:	2300      	movs	r3, #0
 80023a2:	60fb      	str	r3, [r7, #12]

  if(COM > COMn)
 80023a4:	79fb      	ldrb	r3, [r7, #7]
 80023a6:	2b01      	cmp	r3, #1
 80023a8:	d903      	bls.n	80023b2 <BSP_COM_Init+0x1e>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 80023aa:	f06f 0301 	mvn.w	r3, #1
 80023ae:	60fb      	str	r3, [r7, #12]
 80023b0:	e018      	b.n	80023e4 <BSP_COM_Init+0x50>
  }
  else
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 0)
    /* Init the UART Msp */
    COM1_MspInit(&hcom_uart[COM]);
 80023b2:	79fb      	ldrb	r3, [r7, #7]
 80023b4:	2294      	movs	r2, #148	@ 0x94
 80023b6:	fb02 f303 	mul.w	r3, r2, r3
 80023ba:	4a0d      	ldr	r2, [pc, #52]	@ (80023f0 <BSP_COM_Init+0x5c>)
 80023bc:	4413      	add	r3, r2
 80023be:	4618      	mov	r0, r3
 80023c0:	f000 f86e 	bl	80024a0 <COM1_MspInit>
        return BSP_ERROR_MSP_FAILURE;
      }
    }
#endif

    if(MX_LPUART1_Init(&hcom_uart[COM], COM_Init) != HAL_OK)
 80023c4:	79fb      	ldrb	r3, [r7, #7]
 80023c6:	2294      	movs	r2, #148	@ 0x94
 80023c8:	fb02 f303 	mul.w	r3, r2, r3
 80023cc:	4a08      	ldr	r2, [pc, #32]	@ (80023f0 <BSP_COM_Init+0x5c>)
 80023ce:	4413      	add	r3, r2
 80023d0:	6839      	ldr	r1, [r7, #0]
 80023d2:	4618      	mov	r0, r3
 80023d4:	f000 f80e 	bl	80023f4 <MX_LPUART1_Init>
 80023d8:	4603      	mov	r3, r0
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d002      	beq.n	80023e4 <BSP_COM_Init+0x50>
    {
      return BSP_ERROR_PERIPH_FAILURE;
 80023de:	f06f 0303 	mvn.w	r3, #3
 80023e2:	e000      	b.n	80023e6 <BSP_COM_Init+0x52>
    }
  }

  return ret;
 80023e4:	68fb      	ldr	r3, [r7, #12]
}
 80023e6:	4618      	mov	r0, r3
 80023e8:	3710      	adds	r7, #16
 80023ea:	46bd      	mov	sp, r7
 80023ec:	bd80      	pop	{r7, pc}
 80023ee:	bf00      	nop
 80023f0:	200004f8 	.word	0x200004f8

080023f4 <MX_LPUART1_Init>:
  * @param  COM_Init Pointer to a UART_HandleTypeDef structure that contains the
  *                  configuration information for the specified USART peripheral.
  * @retval HAL error code
  */
__weak HAL_StatusTypeDef MX_LPUART1_Init(UART_HandleTypeDef *huart, MX_UART_InitTypeDef *COM_Init)
{
 80023f4:	b580      	push	{r7, lr}
 80023f6:	b082      	sub	sp, #8
 80023f8:	af00      	add	r7, sp, #0
 80023fa:	6078      	str	r0, [r7, #4]
 80023fc:	6039      	str	r1, [r7, #0]
  /* USART configuration */
 huart->Instance          = COM_USART[COM1];
 80023fe:	4b15      	ldr	r3, [pc, #84]	@ (8002454 <MX_LPUART1_Init+0x60>)
 8002400:	681a      	ldr	r2, [r3, #0]
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	601a      	str	r2, [r3, #0]
 huart->Init.BaudRate     = COM_Init->BaudRate;
 8002406:	683b      	ldr	r3, [r7, #0]
 8002408:	681a      	ldr	r2, [r3, #0]
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	605a      	str	r2, [r3, #4]
 huart->Init.Mode         = UART_MODE_TX_RX;
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	220c      	movs	r2, #12
 8002412:	615a      	str	r2, [r3, #20]
 huart->Init.Parity       = (uint32_t)COM_Init->Parity;
 8002414:	683b      	ldr	r3, [r7, #0]
 8002416:	895b      	ldrh	r3, [r3, #10]
 8002418:	461a      	mov	r2, r3
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	611a      	str	r2, [r3, #16]
 huart->Init.WordLength   = COM_Init->WordLength;
 800241e:	683b      	ldr	r3, [r7, #0]
 8002420:	685a      	ldr	r2, [r3, #4]
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	609a      	str	r2, [r3, #8]
 huart->Init.StopBits     = (uint32_t)COM_Init->StopBits;
 8002426:	683b      	ldr	r3, [r7, #0]
 8002428:	891b      	ldrh	r3, [r3, #8]
 800242a:	461a      	mov	r2, r3
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	60da      	str	r2, [r3, #12]
 huart->Init.HwFlowCtl    = (uint32_t)COM_Init->HwFlowCtl;
 8002430:	683b      	ldr	r3, [r7, #0]
 8002432:	899b      	ldrh	r3, [r3, #12]
 8002434:	461a      	mov	r2, r3
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	619a      	str	r2, [r3, #24]
 huart->Init.OverSampling = UART_OVERSAMPLING_8;
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8002440:	61da      	str	r2, [r3, #28]

 return HAL_UART_Init(huart);
 8002442:	6878      	ldr	r0, [r7, #4]
 8002444:	f002 faec 	bl	8004a20 <HAL_UART_Init>
 8002448:	4603      	mov	r3, r0
}
 800244a:	4618      	mov	r0, r3
 800244c:	3708      	adds	r7, #8
 800244e:	46bd      	mov	sp, r7
 8002450:	bd80      	pop	{r7, pc}
 8002452:	bf00      	nop
 8002454:	20000014 	.word	0x20000014

08002458 <__io_putchar>:

/**
  * @brief  Redirect console output to COM
  */
PUTCHAR_PROTOTYPE
{
 8002458:	b580      	push	{r7, lr}
 800245a:	b082      	sub	sp, #8
 800245c:	af00      	add	r7, sp, #0
 800245e:	6078      	str	r0, [r7, #4]
  (void) HAL_UART_Transmit(&hcom_uart [COM_ActiveLogPort], (uint8_t *) &ch, 1, COM_POLL_TIMEOUT);
 8002460:	4b09      	ldr	r3, [pc, #36]	@ (8002488 <__io_putchar+0x30>)
 8002462:	781b      	ldrb	r3, [r3, #0]
 8002464:	461a      	mov	r2, r3
 8002466:	2394      	movs	r3, #148	@ 0x94
 8002468:	fb02 f303 	mul.w	r3, r2, r3
 800246c:	4a07      	ldr	r2, [pc, #28]	@ (800248c <__io_putchar+0x34>)
 800246e:	1898      	adds	r0, r3, r2
 8002470:	1d39      	adds	r1, r7, #4
 8002472:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002476:	2201      	movs	r2, #1
 8002478:	f002 fb22 	bl	8004ac0 <HAL_UART_Transmit>
  return ch;
 800247c:	687b      	ldr	r3, [r7, #4]
}
 800247e:	4618      	mov	r0, r3
 8002480:	3708      	adds	r7, #8
 8002482:	46bd      	mov	sp, r7
 8002484:	bd80      	pop	{r7, pc}
 8002486:	bf00      	nop
 8002488:	2000058c 	.word	0x2000058c
 800248c:	200004f8 	.word	0x200004f8

08002490 <BUTTON_USER_EXTI_Callback>:
/**
  * @brief  Key EXTI line detection callbacks.
  * @retval BSP status
  */
static void BUTTON_USER_EXTI_Callback(void)
{
 8002490:	b580      	push	{r7, lr}
 8002492:	af00      	add	r7, sp, #0
  BSP_PB_Callback(BUTTON_USER);
 8002494:	2000      	movs	r0, #0
 8002496:	f7ff ff71 	bl	800237c <BSP_PB_Callback>
}
 800249a:	bf00      	nop
 800249c:	bd80      	pop	{r7, pc}
	...

080024a0 <COM1_MspInit>:
  * @brief  Initializes COM1 MSP.
  * @param  huart UART handle
  * @retval BSP status
  */
static void COM1_MspInit(UART_HandleTypeDef *huart)
{
 80024a0:	b580      	push	{r7, lr}
 80024a2:	b08a      	sub	sp, #40	@ 0x28
 80024a4:	af00      	add	r7, sp, #0
 80024a6:	6078      	str	r0, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);

  /* Enable GPIO clock */
  COM1_TX_GPIO_CLK_ENABLE();
 80024a8:	4b22      	ldr	r3, [pc, #136]	@ (8002534 <COM1_MspInit+0x94>)
 80024aa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80024ac:	4a21      	ldr	r2, [pc, #132]	@ (8002534 <COM1_MspInit+0x94>)
 80024ae:	f043 0301 	orr.w	r3, r3, #1
 80024b2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80024b4:	4b1f      	ldr	r3, [pc, #124]	@ (8002534 <COM1_MspInit+0x94>)
 80024b6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80024b8:	f003 0301 	and.w	r3, r3, #1
 80024bc:	613b      	str	r3, [r7, #16]
 80024be:	693b      	ldr	r3, [r7, #16]
  COM1_RX_GPIO_CLK_ENABLE();
 80024c0:	4b1c      	ldr	r3, [pc, #112]	@ (8002534 <COM1_MspInit+0x94>)
 80024c2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80024c4:	4a1b      	ldr	r2, [pc, #108]	@ (8002534 <COM1_MspInit+0x94>)
 80024c6:	f043 0301 	orr.w	r3, r3, #1
 80024ca:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80024cc:	4b19      	ldr	r3, [pc, #100]	@ (8002534 <COM1_MspInit+0x94>)
 80024ce:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80024d0:	f003 0301 	and.w	r3, r3, #1
 80024d4:	60fb      	str	r3, [r7, #12]
 80024d6:	68fb      	ldr	r3, [r7, #12]

  /* Enable USART clock */
  COM1_CLK_ENABLE();
 80024d8:	4b16      	ldr	r3, [pc, #88]	@ (8002534 <COM1_MspInit+0x94>)
 80024da:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80024dc:	4a15      	ldr	r2, [pc, #84]	@ (8002534 <COM1_MspInit+0x94>)
 80024de:	f043 0301 	orr.w	r3, r3, #1
 80024e2:	65d3      	str	r3, [r2, #92]	@ 0x5c
 80024e4:	4b13      	ldr	r3, [pc, #76]	@ (8002534 <COM1_MspInit+0x94>)
 80024e6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80024e8:	f003 0301 	and.w	r3, r3, #1
 80024ec:	60bb      	str	r3, [r7, #8]
 80024ee:	68bb      	ldr	r3, [r7, #8]

  /* Configure USART Tx as alternate function */
  gpio_init_structure.Pin       = COM1_TX_PIN;
 80024f0:	2304      	movs	r3, #4
 80024f2:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 80024f4:	2302      	movs	r3, #2
 80024f6:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Speed     = GPIO_SPEED_FREQ_HIGH;
 80024f8:	2302      	movs	r3, #2
 80024fa:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Pull      = GPIO_PULLUP;
 80024fc:	2301      	movs	r3, #1
 80024fe:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Alternate = COM1_TX_AF;
 8002500:	230c      	movs	r3, #12
 8002502:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(COM1_TX_GPIO_PORT, &gpio_init_structure);
 8002504:	f107 0314 	add.w	r3, r7, #20
 8002508:	4619      	mov	r1, r3
 800250a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800250e:	f000 fad5 	bl	8002abc <HAL_GPIO_Init>

  /* Configure USART Rx as alternate function */
  gpio_init_structure.Pin = COM1_RX_PIN;
 8002512:	2308      	movs	r3, #8
 8002514:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 8002516:	2302      	movs	r3, #2
 8002518:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Alternate = COM1_RX_AF;
 800251a:	230c      	movs	r3, #12
 800251c:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(COM1_RX_GPIO_PORT, &gpio_init_structure);
 800251e:	f107 0314 	add.w	r3, r7, #20
 8002522:	4619      	mov	r1, r3
 8002524:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002528:	f000 fac8 	bl	8002abc <HAL_GPIO_Init>
}
 800252c:	bf00      	nop
 800252e:	3728      	adds	r7, #40	@ 0x28
 8002530:	46bd      	mov	sp, r7
 8002532:	bd80      	pop	{r7, pc}
 8002534:	40021000 	.word	0x40021000

08002538 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002538:	b580      	push	{r7, lr}
 800253a:	b082      	sub	sp, #8
 800253c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800253e:	2300      	movs	r3, #0
 8002540:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002542:	2003      	movs	r0, #3
 8002544:	f000 f95a 	bl	80027fc <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002548:	2000      	movs	r0, #0
 800254a:	f000 f80d 	bl	8002568 <HAL_InitTick>
 800254e:	4603      	mov	r3, r0
 8002550:	2b00      	cmp	r3, #0
 8002552:	d002      	beq.n	800255a <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8002554:	2301      	movs	r3, #1
 8002556:	71fb      	strb	r3, [r7, #7]
 8002558:	e001      	b.n	800255e <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800255a:	f7ff fb81 	bl	8001c60 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800255e:	79fb      	ldrb	r3, [r7, #7]

}
 8002560:	4618      	mov	r0, r3
 8002562:	3708      	adds	r7, #8
 8002564:	46bd      	mov	sp, r7
 8002566:	bd80      	pop	{r7, pc}

08002568 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002568:	b580      	push	{r7, lr}
 800256a:	b084      	sub	sp, #16
 800256c:	af00      	add	r7, sp, #0
 800256e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002570:	2300      	movs	r3, #0
 8002572:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8002574:	4b16      	ldr	r3, [pc, #88]	@ (80025d0 <HAL_InitTick+0x68>)
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	2b00      	cmp	r3, #0
 800257a:	d022      	beq.n	80025c2 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 800257c:	4b15      	ldr	r3, [pc, #84]	@ (80025d4 <HAL_InitTick+0x6c>)
 800257e:	681a      	ldr	r2, [r3, #0]
 8002580:	4b13      	ldr	r3, [pc, #76]	@ (80025d0 <HAL_InitTick+0x68>)
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8002588:	fbb1 f3f3 	udiv	r3, r1, r3
 800258c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002590:	4618      	mov	r0, r3
 8002592:	f000 f966 	bl	8002862 <HAL_SYSTICK_Config>
 8002596:	4603      	mov	r3, r0
 8002598:	2b00      	cmp	r3, #0
 800259a:	d10f      	bne.n	80025bc <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	2b0f      	cmp	r3, #15
 80025a0:	d809      	bhi.n	80025b6 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80025a2:	2200      	movs	r2, #0
 80025a4:	6879      	ldr	r1, [r7, #4]
 80025a6:	f04f 30ff 	mov.w	r0, #4294967295
 80025aa:	f000 f932 	bl	8002812 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80025ae:	4a0a      	ldr	r2, [pc, #40]	@ (80025d8 <HAL_InitTick+0x70>)
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	6013      	str	r3, [r2, #0]
 80025b4:	e007      	b.n	80025c6 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 80025b6:	2301      	movs	r3, #1
 80025b8:	73fb      	strb	r3, [r7, #15]
 80025ba:	e004      	b.n	80025c6 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 80025bc:	2301      	movs	r3, #1
 80025be:	73fb      	strb	r3, [r7, #15]
 80025c0:	e001      	b.n	80025c6 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 80025c2:	2301      	movs	r3, #1
 80025c4:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80025c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80025c8:	4618      	mov	r0, r3
 80025ca:	3710      	adds	r7, #16
 80025cc:	46bd      	mov	sp, r7
 80025ce:	bd80      	pop	{r7, pc}
 80025d0:	20000024 	.word	0x20000024
 80025d4:	20000008 	.word	0x20000008
 80025d8:	20000020 	.word	0x20000020

080025dc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80025dc:	b480      	push	{r7}
 80025de:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80025e0:	4b05      	ldr	r3, [pc, #20]	@ (80025f8 <HAL_IncTick+0x1c>)
 80025e2:	681a      	ldr	r2, [r3, #0]
 80025e4:	4b05      	ldr	r3, [pc, #20]	@ (80025fc <HAL_IncTick+0x20>)
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	4413      	add	r3, r2
 80025ea:	4a03      	ldr	r2, [pc, #12]	@ (80025f8 <HAL_IncTick+0x1c>)
 80025ec:	6013      	str	r3, [r2, #0]
}
 80025ee:	bf00      	nop
 80025f0:	46bd      	mov	sp, r7
 80025f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025f6:	4770      	bx	lr
 80025f8:	20000590 	.word	0x20000590
 80025fc:	20000024 	.word	0x20000024

08002600 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002600:	b480      	push	{r7}
 8002602:	af00      	add	r7, sp, #0
  return uwTick;
 8002604:	4b03      	ldr	r3, [pc, #12]	@ (8002614 <HAL_GetTick+0x14>)
 8002606:	681b      	ldr	r3, [r3, #0]
}
 8002608:	4618      	mov	r0, r3
 800260a:	46bd      	mov	sp, r7
 800260c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002610:	4770      	bx	lr
 8002612:	bf00      	nop
 8002614:	20000590 	.word	0x20000590

08002618 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002618:	b580      	push	{r7, lr}
 800261a:	b084      	sub	sp, #16
 800261c:	af00      	add	r7, sp, #0
 800261e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002620:	f7ff ffee 	bl	8002600 <HAL_GetTick>
 8002624:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002630:	d004      	beq.n	800263c <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8002632:	4b09      	ldr	r3, [pc, #36]	@ (8002658 <HAL_Delay+0x40>)
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	68fa      	ldr	r2, [r7, #12]
 8002638:	4413      	add	r3, r2
 800263a:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800263c:	bf00      	nop
 800263e:	f7ff ffdf 	bl	8002600 <HAL_GetTick>
 8002642:	4602      	mov	r2, r0
 8002644:	68bb      	ldr	r3, [r7, #8]
 8002646:	1ad3      	subs	r3, r2, r3
 8002648:	68fa      	ldr	r2, [r7, #12]
 800264a:	429a      	cmp	r2, r3
 800264c:	d8f7      	bhi.n	800263e <HAL_Delay+0x26>
  {
  }
}
 800264e:	bf00      	nop
 8002650:	bf00      	nop
 8002652:	3710      	adds	r7, #16
 8002654:	46bd      	mov	sp, r7
 8002656:	bd80      	pop	{r7, pc}
 8002658:	20000024 	.word	0x20000024

0800265c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800265c:	b480      	push	{r7}
 800265e:	b085      	sub	sp, #20
 8002660:	af00      	add	r7, sp, #0
 8002662:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	f003 0307 	and.w	r3, r3, #7
 800266a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800266c:	4b0c      	ldr	r3, [pc, #48]	@ (80026a0 <__NVIC_SetPriorityGrouping+0x44>)
 800266e:	68db      	ldr	r3, [r3, #12]
 8002670:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002672:	68ba      	ldr	r2, [r7, #8]
 8002674:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002678:	4013      	ands	r3, r2
 800267a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002680:	68bb      	ldr	r3, [r7, #8]
 8002682:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002684:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002688:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800268c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800268e:	4a04      	ldr	r2, [pc, #16]	@ (80026a0 <__NVIC_SetPriorityGrouping+0x44>)
 8002690:	68bb      	ldr	r3, [r7, #8]
 8002692:	60d3      	str	r3, [r2, #12]
}
 8002694:	bf00      	nop
 8002696:	3714      	adds	r7, #20
 8002698:	46bd      	mov	sp, r7
 800269a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800269e:	4770      	bx	lr
 80026a0:	e000ed00 	.word	0xe000ed00

080026a4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80026a4:	b480      	push	{r7}
 80026a6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80026a8:	4b04      	ldr	r3, [pc, #16]	@ (80026bc <__NVIC_GetPriorityGrouping+0x18>)
 80026aa:	68db      	ldr	r3, [r3, #12]
 80026ac:	0a1b      	lsrs	r3, r3, #8
 80026ae:	f003 0307 	and.w	r3, r3, #7
}
 80026b2:	4618      	mov	r0, r3
 80026b4:	46bd      	mov	sp, r7
 80026b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ba:	4770      	bx	lr
 80026bc:	e000ed00 	.word	0xe000ed00

080026c0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80026c0:	b480      	push	{r7}
 80026c2:	b083      	sub	sp, #12
 80026c4:	af00      	add	r7, sp, #0
 80026c6:	4603      	mov	r3, r0
 80026c8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80026ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	db0b      	blt.n	80026ea <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80026d2:	79fb      	ldrb	r3, [r7, #7]
 80026d4:	f003 021f 	and.w	r2, r3, #31
 80026d8:	4907      	ldr	r1, [pc, #28]	@ (80026f8 <__NVIC_EnableIRQ+0x38>)
 80026da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026de:	095b      	lsrs	r3, r3, #5
 80026e0:	2001      	movs	r0, #1
 80026e2:	fa00 f202 	lsl.w	r2, r0, r2
 80026e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80026ea:	bf00      	nop
 80026ec:	370c      	adds	r7, #12
 80026ee:	46bd      	mov	sp, r7
 80026f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026f4:	4770      	bx	lr
 80026f6:	bf00      	nop
 80026f8:	e000e100 	.word	0xe000e100

080026fc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80026fc:	b480      	push	{r7}
 80026fe:	b083      	sub	sp, #12
 8002700:	af00      	add	r7, sp, #0
 8002702:	4603      	mov	r3, r0
 8002704:	6039      	str	r1, [r7, #0]
 8002706:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002708:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800270c:	2b00      	cmp	r3, #0
 800270e:	db0a      	blt.n	8002726 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002710:	683b      	ldr	r3, [r7, #0]
 8002712:	b2da      	uxtb	r2, r3
 8002714:	490c      	ldr	r1, [pc, #48]	@ (8002748 <__NVIC_SetPriority+0x4c>)
 8002716:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800271a:	0112      	lsls	r2, r2, #4
 800271c:	b2d2      	uxtb	r2, r2
 800271e:	440b      	add	r3, r1
 8002720:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002724:	e00a      	b.n	800273c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002726:	683b      	ldr	r3, [r7, #0]
 8002728:	b2da      	uxtb	r2, r3
 800272a:	4908      	ldr	r1, [pc, #32]	@ (800274c <__NVIC_SetPriority+0x50>)
 800272c:	79fb      	ldrb	r3, [r7, #7]
 800272e:	f003 030f 	and.w	r3, r3, #15
 8002732:	3b04      	subs	r3, #4
 8002734:	0112      	lsls	r2, r2, #4
 8002736:	b2d2      	uxtb	r2, r2
 8002738:	440b      	add	r3, r1
 800273a:	761a      	strb	r2, [r3, #24]
}
 800273c:	bf00      	nop
 800273e:	370c      	adds	r7, #12
 8002740:	46bd      	mov	sp, r7
 8002742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002746:	4770      	bx	lr
 8002748:	e000e100 	.word	0xe000e100
 800274c:	e000ed00 	.word	0xe000ed00

08002750 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002750:	b480      	push	{r7}
 8002752:	b089      	sub	sp, #36	@ 0x24
 8002754:	af00      	add	r7, sp, #0
 8002756:	60f8      	str	r0, [r7, #12]
 8002758:	60b9      	str	r1, [r7, #8]
 800275a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	f003 0307 	and.w	r3, r3, #7
 8002762:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002764:	69fb      	ldr	r3, [r7, #28]
 8002766:	f1c3 0307 	rsb	r3, r3, #7
 800276a:	2b04      	cmp	r3, #4
 800276c:	bf28      	it	cs
 800276e:	2304      	movcs	r3, #4
 8002770:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002772:	69fb      	ldr	r3, [r7, #28]
 8002774:	3304      	adds	r3, #4
 8002776:	2b06      	cmp	r3, #6
 8002778:	d902      	bls.n	8002780 <NVIC_EncodePriority+0x30>
 800277a:	69fb      	ldr	r3, [r7, #28]
 800277c:	3b03      	subs	r3, #3
 800277e:	e000      	b.n	8002782 <NVIC_EncodePriority+0x32>
 8002780:	2300      	movs	r3, #0
 8002782:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002784:	f04f 32ff 	mov.w	r2, #4294967295
 8002788:	69bb      	ldr	r3, [r7, #24]
 800278a:	fa02 f303 	lsl.w	r3, r2, r3
 800278e:	43da      	mvns	r2, r3
 8002790:	68bb      	ldr	r3, [r7, #8]
 8002792:	401a      	ands	r2, r3
 8002794:	697b      	ldr	r3, [r7, #20]
 8002796:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002798:	f04f 31ff 	mov.w	r1, #4294967295
 800279c:	697b      	ldr	r3, [r7, #20]
 800279e:	fa01 f303 	lsl.w	r3, r1, r3
 80027a2:	43d9      	mvns	r1, r3
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80027a8:	4313      	orrs	r3, r2
         );
}
 80027aa:	4618      	mov	r0, r3
 80027ac:	3724      	adds	r7, #36	@ 0x24
 80027ae:	46bd      	mov	sp, r7
 80027b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027b4:	4770      	bx	lr
	...

080027b8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80027b8:	b580      	push	{r7, lr}
 80027ba:	b082      	sub	sp, #8
 80027bc:	af00      	add	r7, sp, #0
 80027be:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	3b01      	subs	r3, #1
 80027c4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80027c8:	d301      	bcc.n	80027ce <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80027ca:	2301      	movs	r3, #1
 80027cc:	e00f      	b.n	80027ee <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80027ce:	4a0a      	ldr	r2, [pc, #40]	@ (80027f8 <SysTick_Config+0x40>)
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	3b01      	subs	r3, #1
 80027d4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80027d6:	210f      	movs	r1, #15
 80027d8:	f04f 30ff 	mov.w	r0, #4294967295
 80027dc:	f7ff ff8e 	bl	80026fc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80027e0:	4b05      	ldr	r3, [pc, #20]	@ (80027f8 <SysTick_Config+0x40>)
 80027e2:	2200      	movs	r2, #0
 80027e4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80027e6:	4b04      	ldr	r3, [pc, #16]	@ (80027f8 <SysTick_Config+0x40>)
 80027e8:	2207      	movs	r2, #7
 80027ea:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80027ec:	2300      	movs	r3, #0
}
 80027ee:	4618      	mov	r0, r3
 80027f0:	3708      	adds	r7, #8
 80027f2:	46bd      	mov	sp, r7
 80027f4:	bd80      	pop	{r7, pc}
 80027f6:	bf00      	nop
 80027f8:	e000e010 	.word	0xe000e010

080027fc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80027fc:	b580      	push	{r7, lr}
 80027fe:	b082      	sub	sp, #8
 8002800:	af00      	add	r7, sp, #0
 8002802:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002804:	6878      	ldr	r0, [r7, #4]
 8002806:	f7ff ff29 	bl	800265c <__NVIC_SetPriorityGrouping>
}
 800280a:	bf00      	nop
 800280c:	3708      	adds	r7, #8
 800280e:	46bd      	mov	sp, r7
 8002810:	bd80      	pop	{r7, pc}

08002812 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002812:	b580      	push	{r7, lr}
 8002814:	b086      	sub	sp, #24
 8002816:	af00      	add	r7, sp, #0
 8002818:	4603      	mov	r3, r0
 800281a:	60b9      	str	r1, [r7, #8]
 800281c:	607a      	str	r2, [r7, #4]
 800281e:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002820:	f7ff ff40 	bl	80026a4 <__NVIC_GetPriorityGrouping>
 8002824:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002826:	687a      	ldr	r2, [r7, #4]
 8002828:	68b9      	ldr	r1, [r7, #8]
 800282a:	6978      	ldr	r0, [r7, #20]
 800282c:	f7ff ff90 	bl	8002750 <NVIC_EncodePriority>
 8002830:	4602      	mov	r2, r0
 8002832:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002836:	4611      	mov	r1, r2
 8002838:	4618      	mov	r0, r3
 800283a:	f7ff ff5f 	bl	80026fc <__NVIC_SetPriority>
}
 800283e:	bf00      	nop
 8002840:	3718      	adds	r7, #24
 8002842:	46bd      	mov	sp, r7
 8002844:	bd80      	pop	{r7, pc}

08002846 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002846:	b580      	push	{r7, lr}
 8002848:	b082      	sub	sp, #8
 800284a:	af00      	add	r7, sp, #0
 800284c:	4603      	mov	r3, r0
 800284e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002850:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002854:	4618      	mov	r0, r3
 8002856:	f7ff ff33 	bl	80026c0 <__NVIC_EnableIRQ>
}
 800285a:	bf00      	nop
 800285c:	3708      	adds	r7, #8
 800285e:	46bd      	mov	sp, r7
 8002860:	bd80      	pop	{r7, pc}

08002862 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002862:	b580      	push	{r7, lr}
 8002864:	b082      	sub	sp, #8
 8002866:	af00      	add	r7, sp, #0
 8002868:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800286a:	6878      	ldr	r0, [r7, #4]
 800286c:	f7ff ffa4 	bl	80027b8 <SysTick_Config>
 8002870:	4603      	mov	r3, r0
}
 8002872:	4618      	mov	r0, r3
 8002874:	3708      	adds	r7, #8
 8002876:	46bd      	mov	sp, r7
 8002878:	bd80      	pop	{r7, pc}

0800287a <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800287a:	b480      	push	{r7}
 800287c:	b085      	sub	sp, #20
 800287e:	af00      	add	r7, sp, #0
 8002880:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002882:	2300      	movs	r3, #0
 8002884:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800288c:	b2db      	uxtb	r3, r3
 800288e:	2b02      	cmp	r3, #2
 8002890:	d005      	beq.n	800289e <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	2204      	movs	r2, #4
 8002896:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8002898:	2301      	movs	r3, #1
 800289a:	73fb      	strb	r3, [r7, #15]
 800289c:	e037      	b.n	800290e <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	681a      	ldr	r2, [r3, #0]
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	f022 020e 	bic.w	r2, r2, #14
 80028ac:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80028b2:	681a      	ldr	r2, [r3, #0]
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80028b8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80028bc:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	681a      	ldr	r2, [r3, #0]
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	f022 0201 	bic.w	r2, r2, #1
 80028cc:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80028d2:	f003 021f 	and.w	r2, r3, #31
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028da:	2101      	movs	r1, #1
 80028dc:	fa01 f202 	lsl.w	r2, r1, r2
 80028e0:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80028e6:	687a      	ldr	r2, [r7, #4]
 80028e8:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80028ea:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d00c      	beq.n	800290e <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80028f8:	681a      	ldr	r2, [r3, #0]
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80028fe:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002902:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002908:	687a      	ldr	r2, [r7, #4]
 800290a:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 800290c:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	2201      	movs	r2, #1
 8002912:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	2200      	movs	r2, #0
 800291a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return status;
 800291e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002920:	4618      	mov	r0, r3
 8002922:	3714      	adds	r7, #20
 8002924:	46bd      	mov	sp, r7
 8002926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800292a:	4770      	bx	lr

0800292c <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800292c:	b580      	push	{r7, lr}
 800292e:	b084      	sub	sp, #16
 8002930:	af00      	add	r7, sp, #0
 8002932:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002934:	2300      	movs	r3, #0
 8002936:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800293e:	b2db      	uxtb	r3, r3
 8002940:	2b02      	cmp	r3, #2
 8002942:	d00d      	beq.n	8002960 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	2204      	movs	r2, #4
 8002948:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	2201      	movs	r2, #1
 800294e:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	2200      	movs	r2, #0
 8002956:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    status = HAL_ERROR;
 800295a:	2301      	movs	r3, #1
 800295c:	73fb      	strb	r3, [r7, #15]
 800295e:	e047      	b.n	80029f0 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	681a      	ldr	r2, [r3, #0]
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	f022 020e 	bic.w	r2, r2, #14
 800296e:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	681a      	ldr	r2, [r3, #0]
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	f022 0201 	bic.w	r2, r2, #1
 800297e:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002984:	681a      	ldr	r2, [r3, #0]
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800298a:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800298e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002994:	f003 021f 	and.w	r2, r3, #31
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800299c:	2101      	movs	r1, #1
 800299e:	fa01 f202 	lsl.w	r2, r1, r2
 80029a2:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80029a8:	687a      	ldr	r2, [r7, #4]
 80029aa:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80029ac:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d00c      	beq.n	80029d0 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80029ba:	681a      	ldr	r2, [r3, #0]
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80029c0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80029c4:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80029ca:	687a      	ldr	r2, [r7, #4]
 80029cc:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80029ce:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	2201      	movs	r2, #1
 80029d4:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	2200      	movs	r2, #0
 80029dc:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d003      	beq.n	80029f0 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80029ec:	6878      	ldr	r0, [r7, #4]
 80029ee:	4798      	blx	r3
    }
  }
  return status;
 80029f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80029f2:	4618      	mov	r0, r3
 80029f4:	3710      	adds	r7, #16
 80029f6:	46bd      	mov	sp, r7
 80029f8:	bd80      	pop	{r7, pc}

080029fa <HAL_EXTI_RegisterCallback>:
  *         This parameter can be one of @arg @ref EXTI_CallbackIDTypeDef values.
  * @param  pPendingCbfn function pointer to be stored as callback.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_RegisterCallback(EXTI_HandleTypeDef *hexti, EXTI_CallbackIDTypeDef CallbackID, void (*pPendingCbfn)(void))
{
 80029fa:	b480      	push	{r7}
 80029fc:	b087      	sub	sp, #28
 80029fe:	af00      	add	r7, sp, #0
 8002a00:	60f8      	str	r0, [r7, #12]
 8002a02:	460b      	mov	r3, r1
 8002a04:	607a      	str	r2, [r7, #4]
 8002a06:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 8002a08:	2300      	movs	r3, #0
 8002a0a:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_EXTI_CB(CallbackID));

  switch (CallbackID)
 8002a0c:	7afb      	ldrb	r3, [r7, #11]
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d103      	bne.n	8002a1a <HAL_EXTI_RegisterCallback+0x20>
  {
    /* set common callback */
    case  HAL_EXTI_COMMON_CB_ID:
      hexti->PendingCallback = pPendingCbfn;
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	687a      	ldr	r2, [r7, #4]
 8002a16:	605a      	str	r2, [r3, #4]
      break;
 8002a18:	e005      	b.n	8002a26 <HAL_EXTI_RegisterCallback+0x2c>

    default:
      hexti->PendingCallback = NULL;
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	2200      	movs	r2, #0
 8002a1e:	605a      	str	r2, [r3, #4]
      status = HAL_ERROR;
 8002a20:	2301      	movs	r3, #1
 8002a22:	75fb      	strb	r3, [r7, #23]
      break;
 8002a24:	bf00      	nop
  }

  return status;
 8002a26:	7dfb      	ldrb	r3, [r7, #23]
}
 8002a28:	4618      	mov	r0, r3
 8002a2a:	371c      	adds	r7, #28
 8002a2c:	46bd      	mov	sp, r7
 8002a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a32:	4770      	bx	lr

08002a34 <HAL_EXTI_GetHandle>:
  * @param  ExtiLine Exti line number.
  *         This parameter can be from 0 to @ref EXTI_LINE_NB.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_GetHandle(EXTI_HandleTypeDef *hexti, uint32_t ExtiLine)
{
 8002a34:	b480      	push	{r7}
 8002a36:	b083      	sub	sp, #12
 8002a38:	af00      	add	r7, sp, #0
 8002a3a:	6078      	str	r0, [r7, #4]
 8002a3c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(ExtiLine));

  /* Check null pointer */
  if (hexti == NULL)
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d101      	bne.n	8002a48 <HAL_EXTI_GetHandle+0x14>
  {
    return HAL_ERROR;
 8002a44:	2301      	movs	r3, #1
 8002a46:	e003      	b.n	8002a50 <HAL_EXTI_GetHandle+0x1c>
  }
  else
  {
    /* Store line number as handle private field */
    hexti->Line = ExtiLine;
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	683a      	ldr	r2, [r7, #0]
 8002a4c:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 8002a4e:	2300      	movs	r3, #0
  }
}
 8002a50:	4618      	mov	r0, r3
 8002a52:	370c      	adds	r7, #12
 8002a54:	46bd      	mov	sp, r7
 8002a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a5a:	4770      	bx	lr

08002a5c <HAL_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  hexti Exti handle.
  * @retval none.
  */
void HAL_EXTI_IRQHandler(EXTI_HandleTypeDef *hexti)
{
 8002a5c:	b580      	push	{r7, lr}
 8002a5e:	b086      	sub	sp, #24
 8002a60:	af00      	add	r7, sp, #0
 8002a62:	6078      	str	r0, [r7, #4]
  uint32_t regval;
  uint32_t maskline;
  uint32_t offset;

  /* Compute line register offset */
  offset = ((hexti->Line & EXTI_REG_MASK) >> EXTI_REG_SHIFT);
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	0c1b      	lsrs	r3, r3, #16
 8002a6a:	f003 0301 	and.w	r3, r3, #1
 8002a6e:	617b      	str	r3, [r7, #20]
  /* compute line mask */
  maskline = (1uL << (hexti->Line & EXTI_PIN_MASK));
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	f003 031f 	and.w	r3, r3, #31
 8002a78:	2201      	movs	r2, #1
 8002a7a:	fa02 f303 	lsl.w	r3, r2, r3
 8002a7e:	613b      	str	r3, [r7, #16]

  /* Get pending bit  */
  regaddr = (&EXTI->PR1 + (EXTI_CONFIG_OFFSET * offset));
 8002a80:	697b      	ldr	r3, [r7, #20]
 8002a82:	015a      	lsls	r2, r3, #5
 8002a84:	4b0c      	ldr	r3, [pc, #48]	@ (8002ab8 <HAL_EXTI_IRQHandler+0x5c>)
 8002a86:	4413      	add	r3, r2
 8002a88:	60fb      	str	r3, [r7, #12]
  regval = (*regaddr & maskline);
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	693a      	ldr	r2, [r7, #16]
 8002a90:	4013      	ands	r3, r2
 8002a92:	60bb      	str	r3, [r7, #8]

  if (regval != 0x00u)
 8002a94:	68bb      	ldr	r3, [r7, #8]
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d009      	beq.n	8002aae <HAL_EXTI_IRQHandler+0x52>
  {
    /* Clear pending bit */
    *regaddr = maskline;
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	693a      	ldr	r2, [r7, #16]
 8002a9e:	601a      	str	r2, [r3, #0]

    /* Call pending callback */
    if (hexti->PendingCallback != NULL)
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	685b      	ldr	r3, [r3, #4]
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d002      	beq.n	8002aae <HAL_EXTI_IRQHandler+0x52>
    {
      hexti->PendingCallback();
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	685b      	ldr	r3, [r3, #4]
 8002aac:	4798      	blx	r3
    }
  }
}
 8002aae:	bf00      	nop
 8002ab0:	3718      	adds	r7, #24
 8002ab2:	46bd      	mov	sp, r7
 8002ab4:	bd80      	pop	{r7, pc}
 8002ab6:	bf00      	nop
 8002ab8:	40010414 	.word	0x40010414

08002abc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002abc:	b480      	push	{r7}
 8002abe:	b087      	sub	sp, #28
 8002ac0:	af00      	add	r7, sp, #0
 8002ac2:	6078      	str	r0, [r7, #4]
 8002ac4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8002ac6:	2300      	movs	r3, #0
 8002ac8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8002aca:	e15a      	b.n	8002d82 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8002acc:	683b      	ldr	r3, [r7, #0]
 8002ace:	681a      	ldr	r2, [r3, #0]
 8002ad0:	2101      	movs	r1, #1
 8002ad2:	697b      	ldr	r3, [r7, #20]
 8002ad4:	fa01 f303 	lsl.w	r3, r1, r3
 8002ad8:	4013      	ands	r3, r2
 8002ada:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	f000 814c 	beq.w	8002d7c <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002ae4:	683b      	ldr	r3, [r7, #0]
 8002ae6:	685b      	ldr	r3, [r3, #4]
 8002ae8:	f003 0303 	and.w	r3, r3, #3
 8002aec:	2b01      	cmp	r3, #1
 8002aee:	d005      	beq.n	8002afc <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002af0:	683b      	ldr	r3, [r7, #0]
 8002af2:	685b      	ldr	r3, [r3, #4]
 8002af4:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002af8:	2b02      	cmp	r3, #2
 8002afa:	d130      	bne.n	8002b5e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	689b      	ldr	r3, [r3, #8]
 8002b00:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8002b02:	697b      	ldr	r3, [r7, #20]
 8002b04:	005b      	lsls	r3, r3, #1
 8002b06:	2203      	movs	r2, #3
 8002b08:	fa02 f303 	lsl.w	r3, r2, r3
 8002b0c:	43db      	mvns	r3, r3
 8002b0e:	693a      	ldr	r2, [r7, #16]
 8002b10:	4013      	ands	r3, r2
 8002b12:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002b14:	683b      	ldr	r3, [r7, #0]
 8002b16:	68da      	ldr	r2, [r3, #12]
 8002b18:	697b      	ldr	r3, [r7, #20]
 8002b1a:	005b      	lsls	r3, r3, #1
 8002b1c:	fa02 f303 	lsl.w	r3, r2, r3
 8002b20:	693a      	ldr	r2, [r7, #16]
 8002b22:	4313      	orrs	r3, r2
 8002b24:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	693a      	ldr	r2, [r7, #16]
 8002b2a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	685b      	ldr	r3, [r3, #4]
 8002b30:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002b32:	2201      	movs	r2, #1
 8002b34:	697b      	ldr	r3, [r7, #20]
 8002b36:	fa02 f303 	lsl.w	r3, r2, r3
 8002b3a:	43db      	mvns	r3, r3
 8002b3c:	693a      	ldr	r2, [r7, #16]
 8002b3e:	4013      	ands	r3, r2
 8002b40:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002b42:	683b      	ldr	r3, [r7, #0]
 8002b44:	685b      	ldr	r3, [r3, #4]
 8002b46:	091b      	lsrs	r3, r3, #4
 8002b48:	f003 0201 	and.w	r2, r3, #1
 8002b4c:	697b      	ldr	r3, [r7, #20]
 8002b4e:	fa02 f303 	lsl.w	r3, r2, r3
 8002b52:	693a      	ldr	r2, [r7, #16]
 8002b54:	4313      	orrs	r3, r2
 8002b56:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	693a      	ldr	r2, [r7, #16]
 8002b5c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002b5e:	683b      	ldr	r3, [r7, #0]
 8002b60:	685b      	ldr	r3, [r3, #4]
 8002b62:	f003 0303 	and.w	r3, r3, #3
 8002b66:	2b03      	cmp	r3, #3
 8002b68:	d017      	beq.n	8002b9a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	68db      	ldr	r3, [r3, #12]
 8002b6e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002b70:	697b      	ldr	r3, [r7, #20]
 8002b72:	005b      	lsls	r3, r3, #1
 8002b74:	2203      	movs	r2, #3
 8002b76:	fa02 f303 	lsl.w	r3, r2, r3
 8002b7a:	43db      	mvns	r3, r3
 8002b7c:	693a      	ldr	r2, [r7, #16]
 8002b7e:	4013      	ands	r3, r2
 8002b80:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002b82:	683b      	ldr	r3, [r7, #0]
 8002b84:	689a      	ldr	r2, [r3, #8]
 8002b86:	697b      	ldr	r3, [r7, #20]
 8002b88:	005b      	lsls	r3, r3, #1
 8002b8a:	fa02 f303 	lsl.w	r3, r2, r3
 8002b8e:	693a      	ldr	r2, [r7, #16]
 8002b90:	4313      	orrs	r3, r2
 8002b92:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	693a      	ldr	r2, [r7, #16]
 8002b98:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002b9a:	683b      	ldr	r3, [r7, #0]
 8002b9c:	685b      	ldr	r3, [r3, #4]
 8002b9e:	f003 0303 	and.w	r3, r3, #3
 8002ba2:	2b02      	cmp	r3, #2
 8002ba4:	d123      	bne.n	8002bee <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002ba6:	697b      	ldr	r3, [r7, #20]
 8002ba8:	08da      	lsrs	r2, r3, #3
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	3208      	adds	r2, #8
 8002bae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002bb2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8002bb4:	697b      	ldr	r3, [r7, #20]
 8002bb6:	f003 0307 	and.w	r3, r3, #7
 8002bba:	009b      	lsls	r3, r3, #2
 8002bbc:	220f      	movs	r2, #15
 8002bbe:	fa02 f303 	lsl.w	r3, r2, r3
 8002bc2:	43db      	mvns	r3, r3
 8002bc4:	693a      	ldr	r2, [r7, #16]
 8002bc6:	4013      	ands	r3, r2
 8002bc8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8002bca:	683b      	ldr	r3, [r7, #0]
 8002bcc:	691a      	ldr	r2, [r3, #16]
 8002bce:	697b      	ldr	r3, [r7, #20]
 8002bd0:	f003 0307 	and.w	r3, r3, #7
 8002bd4:	009b      	lsls	r3, r3, #2
 8002bd6:	fa02 f303 	lsl.w	r3, r2, r3
 8002bda:	693a      	ldr	r2, [r7, #16]
 8002bdc:	4313      	orrs	r3, r2
 8002bde:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8002be0:	697b      	ldr	r3, [r7, #20]
 8002be2:	08da      	lsrs	r2, r3, #3
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	3208      	adds	r2, #8
 8002be8:	6939      	ldr	r1, [r7, #16]
 8002bea:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002bf4:	697b      	ldr	r3, [r7, #20]
 8002bf6:	005b      	lsls	r3, r3, #1
 8002bf8:	2203      	movs	r2, #3
 8002bfa:	fa02 f303 	lsl.w	r3, r2, r3
 8002bfe:	43db      	mvns	r3, r3
 8002c00:	693a      	ldr	r2, [r7, #16]
 8002c02:	4013      	ands	r3, r2
 8002c04:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002c06:	683b      	ldr	r3, [r7, #0]
 8002c08:	685b      	ldr	r3, [r3, #4]
 8002c0a:	f003 0203 	and.w	r2, r3, #3
 8002c0e:	697b      	ldr	r3, [r7, #20]
 8002c10:	005b      	lsls	r3, r3, #1
 8002c12:	fa02 f303 	lsl.w	r3, r2, r3
 8002c16:	693a      	ldr	r2, [r7, #16]
 8002c18:	4313      	orrs	r3, r2
 8002c1a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	693a      	ldr	r2, [r7, #16]
 8002c20:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002c22:	683b      	ldr	r3, [r7, #0]
 8002c24:	685b      	ldr	r3, [r3, #4]
 8002c26:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	f000 80a6 	beq.w	8002d7c <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002c30:	4b5b      	ldr	r3, [pc, #364]	@ (8002da0 <HAL_GPIO_Init+0x2e4>)
 8002c32:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002c34:	4a5a      	ldr	r2, [pc, #360]	@ (8002da0 <HAL_GPIO_Init+0x2e4>)
 8002c36:	f043 0301 	orr.w	r3, r3, #1
 8002c3a:	6613      	str	r3, [r2, #96]	@ 0x60
 8002c3c:	4b58      	ldr	r3, [pc, #352]	@ (8002da0 <HAL_GPIO_Init+0x2e4>)
 8002c3e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002c40:	f003 0301 	and.w	r3, r3, #1
 8002c44:	60bb      	str	r3, [r7, #8]
 8002c46:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002c48:	4a56      	ldr	r2, [pc, #344]	@ (8002da4 <HAL_GPIO_Init+0x2e8>)
 8002c4a:	697b      	ldr	r3, [r7, #20]
 8002c4c:	089b      	lsrs	r3, r3, #2
 8002c4e:	3302      	adds	r3, #2
 8002c50:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002c54:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8002c56:	697b      	ldr	r3, [r7, #20]
 8002c58:	f003 0303 	and.w	r3, r3, #3
 8002c5c:	009b      	lsls	r3, r3, #2
 8002c5e:	220f      	movs	r2, #15
 8002c60:	fa02 f303 	lsl.w	r3, r2, r3
 8002c64:	43db      	mvns	r3, r3
 8002c66:	693a      	ldr	r2, [r7, #16]
 8002c68:	4013      	ands	r3, r2
 8002c6a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8002c72:	d01f      	beq.n	8002cb4 <HAL_GPIO_Init+0x1f8>
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	4a4c      	ldr	r2, [pc, #304]	@ (8002da8 <HAL_GPIO_Init+0x2ec>)
 8002c78:	4293      	cmp	r3, r2
 8002c7a:	d019      	beq.n	8002cb0 <HAL_GPIO_Init+0x1f4>
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	4a4b      	ldr	r2, [pc, #300]	@ (8002dac <HAL_GPIO_Init+0x2f0>)
 8002c80:	4293      	cmp	r3, r2
 8002c82:	d013      	beq.n	8002cac <HAL_GPIO_Init+0x1f0>
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	4a4a      	ldr	r2, [pc, #296]	@ (8002db0 <HAL_GPIO_Init+0x2f4>)
 8002c88:	4293      	cmp	r3, r2
 8002c8a:	d00d      	beq.n	8002ca8 <HAL_GPIO_Init+0x1ec>
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	4a49      	ldr	r2, [pc, #292]	@ (8002db4 <HAL_GPIO_Init+0x2f8>)
 8002c90:	4293      	cmp	r3, r2
 8002c92:	d007      	beq.n	8002ca4 <HAL_GPIO_Init+0x1e8>
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	4a48      	ldr	r2, [pc, #288]	@ (8002db8 <HAL_GPIO_Init+0x2fc>)
 8002c98:	4293      	cmp	r3, r2
 8002c9a:	d101      	bne.n	8002ca0 <HAL_GPIO_Init+0x1e4>
 8002c9c:	2305      	movs	r3, #5
 8002c9e:	e00a      	b.n	8002cb6 <HAL_GPIO_Init+0x1fa>
 8002ca0:	2306      	movs	r3, #6
 8002ca2:	e008      	b.n	8002cb6 <HAL_GPIO_Init+0x1fa>
 8002ca4:	2304      	movs	r3, #4
 8002ca6:	e006      	b.n	8002cb6 <HAL_GPIO_Init+0x1fa>
 8002ca8:	2303      	movs	r3, #3
 8002caa:	e004      	b.n	8002cb6 <HAL_GPIO_Init+0x1fa>
 8002cac:	2302      	movs	r3, #2
 8002cae:	e002      	b.n	8002cb6 <HAL_GPIO_Init+0x1fa>
 8002cb0:	2301      	movs	r3, #1
 8002cb2:	e000      	b.n	8002cb6 <HAL_GPIO_Init+0x1fa>
 8002cb4:	2300      	movs	r3, #0
 8002cb6:	697a      	ldr	r2, [r7, #20]
 8002cb8:	f002 0203 	and.w	r2, r2, #3
 8002cbc:	0092      	lsls	r2, r2, #2
 8002cbe:	4093      	lsls	r3, r2
 8002cc0:	693a      	ldr	r2, [r7, #16]
 8002cc2:	4313      	orrs	r3, r2
 8002cc4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002cc6:	4937      	ldr	r1, [pc, #220]	@ (8002da4 <HAL_GPIO_Init+0x2e8>)
 8002cc8:	697b      	ldr	r3, [r7, #20]
 8002cca:	089b      	lsrs	r3, r3, #2
 8002ccc:	3302      	adds	r3, #2
 8002cce:	693a      	ldr	r2, [r7, #16]
 8002cd0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002cd4:	4b39      	ldr	r3, [pc, #228]	@ (8002dbc <HAL_GPIO_Init+0x300>)
 8002cd6:	689b      	ldr	r3, [r3, #8]
 8002cd8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	43db      	mvns	r3, r3
 8002cde:	693a      	ldr	r2, [r7, #16]
 8002ce0:	4013      	ands	r3, r2
 8002ce2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002ce4:	683b      	ldr	r3, [r7, #0]
 8002ce6:	685b      	ldr	r3, [r3, #4]
 8002ce8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d003      	beq.n	8002cf8 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8002cf0:	693a      	ldr	r2, [r7, #16]
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	4313      	orrs	r3, r2
 8002cf6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002cf8:	4a30      	ldr	r2, [pc, #192]	@ (8002dbc <HAL_GPIO_Init+0x300>)
 8002cfa:	693b      	ldr	r3, [r7, #16]
 8002cfc:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002cfe:	4b2f      	ldr	r3, [pc, #188]	@ (8002dbc <HAL_GPIO_Init+0x300>)
 8002d00:	68db      	ldr	r3, [r3, #12]
 8002d02:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	43db      	mvns	r3, r3
 8002d08:	693a      	ldr	r2, [r7, #16]
 8002d0a:	4013      	ands	r3, r2
 8002d0c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002d0e:	683b      	ldr	r3, [r7, #0]
 8002d10:	685b      	ldr	r3, [r3, #4]
 8002d12:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d003      	beq.n	8002d22 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8002d1a:	693a      	ldr	r2, [r7, #16]
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	4313      	orrs	r3, r2
 8002d20:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002d22:	4a26      	ldr	r2, [pc, #152]	@ (8002dbc <HAL_GPIO_Init+0x300>)
 8002d24:	693b      	ldr	r3, [r7, #16]
 8002d26:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8002d28:	4b24      	ldr	r3, [pc, #144]	@ (8002dbc <HAL_GPIO_Init+0x300>)
 8002d2a:	685b      	ldr	r3, [r3, #4]
 8002d2c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	43db      	mvns	r3, r3
 8002d32:	693a      	ldr	r2, [r7, #16]
 8002d34:	4013      	ands	r3, r2
 8002d36:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002d38:	683b      	ldr	r3, [r7, #0]
 8002d3a:	685b      	ldr	r3, [r3, #4]
 8002d3c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d003      	beq.n	8002d4c <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8002d44:	693a      	ldr	r2, [r7, #16]
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	4313      	orrs	r3, r2
 8002d4a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002d4c:	4a1b      	ldr	r2, [pc, #108]	@ (8002dbc <HAL_GPIO_Init+0x300>)
 8002d4e:	693b      	ldr	r3, [r7, #16]
 8002d50:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8002d52:	4b1a      	ldr	r3, [pc, #104]	@ (8002dbc <HAL_GPIO_Init+0x300>)
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	43db      	mvns	r3, r3
 8002d5c:	693a      	ldr	r2, [r7, #16]
 8002d5e:	4013      	ands	r3, r2
 8002d60:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002d62:	683b      	ldr	r3, [r7, #0]
 8002d64:	685b      	ldr	r3, [r3, #4]
 8002d66:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d003      	beq.n	8002d76 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8002d6e:	693a      	ldr	r2, [r7, #16]
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	4313      	orrs	r3, r2
 8002d74:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002d76:	4a11      	ldr	r2, [pc, #68]	@ (8002dbc <HAL_GPIO_Init+0x300>)
 8002d78:	693b      	ldr	r3, [r7, #16]
 8002d7a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002d7c:	697b      	ldr	r3, [r7, #20]
 8002d7e:	3301      	adds	r3, #1
 8002d80:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8002d82:	683b      	ldr	r3, [r7, #0]
 8002d84:	681a      	ldr	r2, [r3, #0]
 8002d86:	697b      	ldr	r3, [r7, #20]
 8002d88:	fa22 f303 	lsr.w	r3, r2, r3
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	f47f ae9d 	bne.w	8002acc <HAL_GPIO_Init+0x10>
  }
}
 8002d92:	bf00      	nop
 8002d94:	bf00      	nop
 8002d96:	371c      	adds	r7, #28
 8002d98:	46bd      	mov	sp, r7
 8002d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d9e:	4770      	bx	lr
 8002da0:	40021000 	.word	0x40021000
 8002da4:	40010000 	.word	0x40010000
 8002da8:	48000400 	.word	0x48000400
 8002dac:	48000800 	.word	0x48000800
 8002db0:	48000c00 	.word	0x48000c00
 8002db4:	48001000 	.word	0x48001000
 8002db8:	48001400 	.word	0x48001400
 8002dbc:	40010400 	.word	0x40010400

08002dc0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002dc0:	b480      	push	{r7}
 8002dc2:	b083      	sub	sp, #12
 8002dc4:	af00      	add	r7, sp, #0
 8002dc6:	6078      	str	r0, [r7, #4]
 8002dc8:	460b      	mov	r3, r1
 8002dca:	807b      	strh	r3, [r7, #2]
 8002dcc:	4613      	mov	r3, r2
 8002dce:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002dd0:	787b      	ldrb	r3, [r7, #1]
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d003      	beq.n	8002dde <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002dd6:	887a      	ldrh	r2, [r7, #2]
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002ddc:	e002      	b.n	8002de4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002dde:	887a      	ldrh	r2, [r7, #2]
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8002de4:	bf00      	nop
 8002de6:	370c      	adds	r7, #12
 8002de8:	46bd      	mov	sp, r7
 8002dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dee:	4770      	bx	lr

08002df0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002df0:	b580      	push	{r7, lr}
 8002df2:	b082      	sub	sp, #8
 8002df4:	af00      	add	r7, sp, #0
 8002df6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d101      	bne.n	8002e02 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002dfe:	2301      	movs	r3, #1
 8002e00:	e08d      	b.n	8002f1e <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002e08:	b2db      	uxtb	r3, r3
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d106      	bne.n	8002e1c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	2200      	movs	r2, #0
 8002e12:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002e16:	6878      	ldr	r0, [r7, #4]
 8002e18:	f7fe ff46 	bl	8001ca8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	2224      	movs	r2, #36	@ 0x24
 8002e20:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	681a      	ldr	r2, [r3, #0]
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	f022 0201 	bic.w	r2, r2, #1
 8002e32:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	685a      	ldr	r2, [r3, #4]
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002e40:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	689a      	ldr	r2, [r3, #8]
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002e50:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	68db      	ldr	r3, [r3, #12]
 8002e56:	2b01      	cmp	r3, #1
 8002e58:	d107      	bne.n	8002e6a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	689a      	ldr	r2, [r3, #8]
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002e66:	609a      	str	r2, [r3, #8]
 8002e68:	e006      	b.n	8002e78 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	689a      	ldr	r2, [r3, #8]
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8002e76:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	68db      	ldr	r3, [r3, #12]
 8002e7c:	2b02      	cmp	r3, #2
 8002e7e:	d108      	bne.n	8002e92 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	685a      	ldr	r2, [r3, #4]
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002e8e:	605a      	str	r2, [r3, #4]
 8002e90:	e007      	b.n	8002ea2 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	685a      	ldr	r2, [r3, #4]
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002ea0:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	685b      	ldr	r3, [r3, #4]
 8002ea8:	687a      	ldr	r2, [r7, #4]
 8002eaa:	6812      	ldr	r2, [r2, #0]
 8002eac:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002eb0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002eb4:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	68da      	ldr	r2, [r3, #12]
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002ec4:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	691a      	ldr	r2, [r3, #16]
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	695b      	ldr	r3, [r3, #20]
 8002ece:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	699b      	ldr	r3, [r3, #24]
 8002ed6:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	430a      	orrs	r2, r1
 8002ede:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	69d9      	ldr	r1, [r3, #28]
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	6a1a      	ldr	r2, [r3, #32]
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	430a      	orrs	r2, r1
 8002eee:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	681a      	ldr	r2, [r3, #0]
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	f042 0201 	orr.w	r2, r2, #1
 8002efe:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	2200      	movs	r2, #0
 8002f04:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	2220      	movs	r2, #32
 8002f0a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	2200      	movs	r2, #0
 8002f12:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	2200      	movs	r2, #0
 8002f18:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8002f1c:	2300      	movs	r3, #0
}
 8002f1e:	4618      	mov	r0, r3
 8002f20:	3708      	adds	r7, #8
 8002f22:	46bd      	mov	sp, r7
 8002f24:	bd80      	pop	{r7, pc}
	...

08002f28 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8002f28:	b580      	push	{r7, lr}
 8002f2a:	b088      	sub	sp, #32
 8002f2c:	af02      	add	r7, sp, #8
 8002f2e:	60f8      	str	r0, [r7, #12]
 8002f30:	607a      	str	r2, [r7, #4]
 8002f32:	461a      	mov	r2, r3
 8002f34:	460b      	mov	r3, r1
 8002f36:	817b      	strh	r3, [r7, #10]
 8002f38:	4613      	mov	r3, r2
 8002f3a:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002f42:	b2db      	uxtb	r3, r3
 8002f44:	2b20      	cmp	r3, #32
 8002f46:	f040 80fd 	bne.w	8003144 <HAL_I2C_Master_Transmit+0x21c>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002f50:	2b01      	cmp	r3, #1
 8002f52:	d101      	bne.n	8002f58 <HAL_I2C_Master_Transmit+0x30>
 8002f54:	2302      	movs	r3, #2
 8002f56:	e0f6      	b.n	8003146 <HAL_I2C_Master_Transmit+0x21e>
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	2201      	movs	r2, #1
 8002f5c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002f60:	f7ff fb4e 	bl	8002600 <HAL_GetTick>
 8002f64:	6138      	str	r0, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002f66:	693b      	ldr	r3, [r7, #16]
 8002f68:	9300      	str	r3, [sp, #0]
 8002f6a:	2319      	movs	r3, #25
 8002f6c:	2201      	movs	r2, #1
 8002f6e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8002f72:	68f8      	ldr	r0, [r7, #12]
 8002f74:	f000 fa0a 	bl	800338c <I2C_WaitOnFlagUntilTimeout>
 8002f78:	4603      	mov	r3, r0
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d001      	beq.n	8002f82 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8002f7e:	2301      	movs	r3, #1
 8002f80:	e0e1      	b.n	8003146 <HAL_I2C_Master_Transmit+0x21e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	2221      	movs	r2, #33	@ 0x21
 8002f86:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	2210      	movs	r2, #16
 8002f8e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	2200      	movs	r2, #0
 8002f96:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	687a      	ldr	r2, [r7, #4]
 8002f9c:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	893a      	ldrh	r2, [r7, #8]
 8002fa2:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	2200      	movs	r2, #0
 8002fa8:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002fae:	b29b      	uxth	r3, r3
 8002fb0:	2bff      	cmp	r3, #255	@ 0xff
 8002fb2:	d906      	bls.n	8002fc2 <HAL_I2C_Master_Transmit+0x9a>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	22ff      	movs	r2, #255	@ 0xff
 8002fb8:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 8002fba:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002fbe:	617b      	str	r3, [r7, #20]
 8002fc0:	e007      	b.n	8002fd2 <HAL_I2C_Master_Transmit+0xaa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002fc6:	b29a      	uxth	r2, r3
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 8002fcc:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002fd0:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d024      	beq.n	8003024 <HAL_I2C_Master_Transmit+0xfc>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002fde:	781a      	ldrb	r2, [r3, #0]
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002fea:	1c5a      	adds	r2, r3, #1
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002ff4:	b29b      	uxth	r3, r3
 8002ff6:	3b01      	subs	r3, #1
 8002ff8:	b29a      	uxth	r2, r3
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003002:	3b01      	subs	r3, #1
 8003004:	b29a      	uxth	r2, r3
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800300e:	b2db      	uxtb	r3, r3
 8003010:	3301      	adds	r3, #1
 8003012:	b2da      	uxtb	r2, r3
 8003014:	8979      	ldrh	r1, [r7, #10]
 8003016:	4b4e      	ldr	r3, [pc, #312]	@ (8003150 <HAL_I2C_Master_Transmit+0x228>)
 8003018:	9300      	str	r3, [sp, #0]
 800301a:	697b      	ldr	r3, [r7, #20]
 800301c:	68f8      	ldr	r0, [r7, #12]
 800301e:	f000 fc05 	bl	800382c <I2C_TransferConfig>
 8003022:	e066      	b.n	80030f2 <HAL_I2C_Master_Transmit+0x1ca>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003028:	b2da      	uxtb	r2, r3
 800302a:	8979      	ldrh	r1, [r7, #10]
 800302c:	4b48      	ldr	r3, [pc, #288]	@ (8003150 <HAL_I2C_Master_Transmit+0x228>)
 800302e:	9300      	str	r3, [sp, #0]
 8003030:	697b      	ldr	r3, [r7, #20]
 8003032:	68f8      	ldr	r0, [r7, #12]
 8003034:	f000 fbfa 	bl	800382c <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8003038:	e05b      	b.n	80030f2 <HAL_I2C_Master_Transmit+0x1ca>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800303a:	693a      	ldr	r2, [r7, #16]
 800303c:	6a39      	ldr	r1, [r7, #32]
 800303e:	68f8      	ldr	r0, [r7, #12]
 8003040:	f000 f9fd 	bl	800343e <I2C_WaitOnTXISFlagUntilTimeout>
 8003044:	4603      	mov	r3, r0
 8003046:	2b00      	cmp	r3, #0
 8003048:	d001      	beq.n	800304e <HAL_I2C_Master_Transmit+0x126>
      {
        return HAL_ERROR;
 800304a:	2301      	movs	r3, #1
 800304c:	e07b      	b.n	8003146 <HAL_I2C_Master_Transmit+0x21e>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003052:	781a      	ldrb	r2, [r3, #0]
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800305e:	1c5a      	adds	r2, r3, #1
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003068:	b29b      	uxth	r3, r3
 800306a:	3b01      	subs	r3, #1
 800306c:	b29a      	uxth	r2, r3
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003076:	3b01      	subs	r3, #1
 8003078:	b29a      	uxth	r2, r3
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003082:	b29b      	uxth	r3, r3
 8003084:	2b00      	cmp	r3, #0
 8003086:	d034      	beq.n	80030f2 <HAL_I2C_Master_Transmit+0x1ca>
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800308c:	2b00      	cmp	r3, #0
 800308e:	d130      	bne.n	80030f2 <HAL_I2C_Master_Transmit+0x1ca>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003090:	693b      	ldr	r3, [r7, #16]
 8003092:	9300      	str	r3, [sp, #0]
 8003094:	6a3b      	ldr	r3, [r7, #32]
 8003096:	2200      	movs	r2, #0
 8003098:	2180      	movs	r1, #128	@ 0x80
 800309a:	68f8      	ldr	r0, [r7, #12]
 800309c:	f000 f976 	bl	800338c <I2C_WaitOnFlagUntilTimeout>
 80030a0:	4603      	mov	r3, r0
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d001      	beq.n	80030aa <HAL_I2C_Master_Transmit+0x182>
        {
          return HAL_ERROR;
 80030a6:	2301      	movs	r3, #1
 80030a8:	e04d      	b.n	8003146 <HAL_I2C_Master_Transmit+0x21e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80030ae:	b29b      	uxth	r3, r3
 80030b0:	2bff      	cmp	r3, #255	@ 0xff
 80030b2:	d90e      	bls.n	80030d2 <HAL_I2C_Master_Transmit+0x1aa>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	22ff      	movs	r2, #255	@ 0xff
 80030b8:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80030be:	b2da      	uxtb	r2, r3
 80030c0:	8979      	ldrh	r1, [r7, #10]
 80030c2:	2300      	movs	r3, #0
 80030c4:	9300      	str	r3, [sp, #0]
 80030c6:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80030ca:	68f8      	ldr	r0, [r7, #12]
 80030cc:	f000 fbae 	bl	800382c <I2C_TransferConfig>
 80030d0:	e00f      	b.n	80030f2 <HAL_I2C_Master_Transmit+0x1ca>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80030d6:	b29a      	uxth	r2, r3
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80030e0:	b2da      	uxtb	r2, r3
 80030e2:	8979      	ldrh	r1, [r7, #10]
 80030e4:	2300      	movs	r3, #0
 80030e6:	9300      	str	r3, [sp, #0]
 80030e8:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80030ec:	68f8      	ldr	r0, [r7, #12]
 80030ee:	f000 fb9d 	bl	800382c <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80030f6:	b29b      	uxth	r3, r3
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d19e      	bne.n	800303a <HAL_I2C_Master_Transmit+0x112>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80030fc:	693a      	ldr	r2, [r7, #16]
 80030fe:	6a39      	ldr	r1, [r7, #32]
 8003100:	68f8      	ldr	r0, [r7, #12]
 8003102:	f000 f9e3 	bl	80034cc <I2C_WaitOnSTOPFlagUntilTimeout>
 8003106:	4603      	mov	r3, r0
 8003108:	2b00      	cmp	r3, #0
 800310a:	d001      	beq.n	8003110 <HAL_I2C_Master_Transmit+0x1e8>
    {
      return HAL_ERROR;
 800310c:	2301      	movs	r3, #1
 800310e:	e01a      	b.n	8003146 <HAL_I2C_Master_Transmit+0x21e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	2220      	movs	r2, #32
 8003116:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	6859      	ldr	r1, [r3, #4]
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	681a      	ldr	r2, [r3, #0]
 8003122:	4b0c      	ldr	r3, [pc, #48]	@ (8003154 <HAL_I2C_Master_Transmit+0x22c>)
 8003124:	400b      	ands	r3, r1
 8003126:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	2220      	movs	r2, #32
 800312c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	2200      	movs	r2, #0
 8003134:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	2200      	movs	r2, #0
 800313c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003140:	2300      	movs	r3, #0
 8003142:	e000      	b.n	8003146 <HAL_I2C_Master_Transmit+0x21e>
  }
  else
  {
    return HAL_BUSY;
 8003144:	2302      	movs	r3, #2
  }
}
 8003146:	4618      	mov	r0, r3
 8003148:	3718      	adds	r7, #24
 800314a:	46bd      	mov	sp, r7
 800314c:	bd80      	pop	{r7, pc}
 800314e:	bf00      	nop
 8003150:	80002000 	.word	0x80002000
 8003154:	fe00e800 	.word	0xfe00e800

08003158 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8003158:	b580      	push	{r7, lr}
 800315a:	b088      	sub	sp, #32
 800315c:	af02      	add	r7, sp, #8
 800315e:	60f8      	str	r0, [r7, #12]
 8003160:	607a      	str	r2, [r7, #4]
 8003162:	461a      	mov	r2, r3
 8003164:	460b      	mov	r3, r1
 8003166:	817b      	strh	r3, [r7, #10]
 8003168:	4613      	mov	r3, r2
 800316a:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003172:	b2db      	uxtb	r3, r3
 8003174:	2b20      	cmp	r3, #32
 8003176:	f040 80db 	bne.w	8003330 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003180:	2b01      	cmp	r3, #1
 8003182:	d101      	bne.n	8003188 <HAL_I2C_Master_Receive+0x30>
 8003184:	2302      	movs	r3, #2
 8003186:	e0d4      	b.n	8003332 <HAL_I2C_Master_Receive+0x1da>
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	2201      	movs	r2, #1
 800318c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003190:	f7ff fa36 	bl	8002600 <HAL_GetTick>
 8003194:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003196:	697b      	ldr	r3, [r7, #20]
 8003198:	9300      	str	r3, [sp, #0]
 800319a:	2319      	movs	r3, #25
 800319c:	2201      	movs	r2, #1
 800319e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80031a2:	68f8      	ldr	r0, [r7, #12]
 80031a4:	f000 f8f2 	bl	800338c <I2C_WaitOnFlagUntilTimeout>
 80031a8:	4603      	mov	r3, r0
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d001      	beq.n	80031b2 <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 80031ae:	2301      	movs	r3, #1
 80031b0:	e0bf      	b.n	8003332 <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	2222      	movs	r2, #34	@ 0x22
 80031b6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	2210      	movs	r2, #16
 80031be:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	2200      	movs	r2, #0
 80031c6:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	687a      	ldr	r2, [r7, #4]
 80031cc:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	893a      	ldrh	r2, [r7, #8]
 80031d2:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	2200      	movs	r2, #0
 80031d8:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80031de:	b29b      	uxth	r3, r3
 80031e0:	2bff      	cmp	r3, #255	@ 0xff
 80031e2:	d90e      	bls.n	8003202 <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	22ff      	movs	r2, #255	@ 0xff
 80031e8:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80031ee:	b2da      	uxtb	r2, r3
 80031f0:	8979      	ldrh	r1, [r7, #10]
 80031f2:	4b52      	ldr	r3, [pc, #328]	@ (800333c <HAL_I2C_Master_Receive+0x1e4>)
 80031f4:	9300      	str	r3, [sp, #0]
 80031f6:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80031fa:	68f8      	ldr	r0, [r7, #12]
 80031fc:	f000 fb16 	bl	800382c <I2C_TransferConfig>
 8003200:	e06d      	b.n	80032de <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003206:	b29a      	uxth	r2, r3
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003210:	b2da      	uxtb	r2, r3
 8003212:	8979      	ldrh	r1, [r7, #10]
 8003214:	4b49      	ldr	r3, [pc, #292]	@ (800333c <HAL_I2C_Master_Receive+0x1e4>)
 8003216:	9300      	str	r3, [sp, #0]
 8003218:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800321c:	68f8      	ldr	r0, [r7, #12]
 800321e:	f000 fb05 	bl	800382c <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8003222:	e05c      	b.n	80032de <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003224:	697a      	ldr	r2, [r7, #20]
 8003226:	6a39      	ldr	r1, [r7, #32]
 8003228:	68f8      	ldr	r0, [r7, #12]
 800322a:	f000 f993 	bl	8003554 <I2C_WaitOnRXNEFlagUntilTimeout>
 800322e:	4603      	mov	r3, r0
 8003230:	2b00      	cmp	r3, #0
 8003232:	d001      	beq.n	8003238 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8003234:	2301      	movs	r3, #1
 8003236:	e07c      	b.n	8003332 <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003242:	b2d2      	uxtb	r2, r2
 8003244:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800324a:	1c5a      	adds	r2, r3, #1
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003254:	3b01      	subs	r3, #1
 8003256:	b29a      	uxth	r2, r3
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003260:	b29b      	uxth	r3, r3
 8003262:	3b01      	subs	r3, #1
 8003264:	b29a      	uxth	r2, r3
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800326e:	b29b      	uxth	r3, r3
 8003270:	2b00      	cmp	r3, #0
 8003272:	d034      	beq.n	80032de <HAL_I2C_Master_Receive+0x186>
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003278:	2b00      	cmp	r3, #0
 800327a:	d130      	bne.n	80032de <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800327c:	697b      	ldr	r3, [r7, #20]
 800327e:	9300      	str	r3, [sp, #0]
 8003280:	6a3b      	ldr	r3, [r7, #32]
 8003282:	2200      	movs	r2, #0
 8003284:	2180      	movs	r1, #128	@ 0x80
 8003286:	68f8      	ldr	r0, [r7, #12]
 8003288:	f000 f880 	bl	800338c <I2C_WaitOnFlagUntilTimeout>
 800328c:	4603      	mov	r3, r0
 800328e:	2b00      	cmp	r3, #0
 8003290:	d001      	beq.n	8003296 <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 8003292:	2301      	movs	r3, #1
 8003294:	e04d      	b.n	8003332 <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800329a:	b29b      	uxth	r3, r3
 800329c:	2bff      	cmp	r3, #255	@ 0xff
 800329e:	d90e      	bls.n	80032be <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	22ff      	movs	r2, #255	@ 0xff
 80032a4:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80032aa:	b2da      	uxtb	r2, r3
 80032ac:	8979      	ldrh	r1, [r7, #10]
 80032ae:	2300      	movs	r3, #0
 80032b0:	9300      	str	r3, [sp, #0]
 80032b2:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80032b6:	68f8      	ldr	r0, [r7, #12]
 80032b8:	f000 fab8 	bl	800382c <I2C_TransferConfig>
 80032bc:	e00f      	b.n	80032de <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80032c2:	b29a      	uxth	r2, r3
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80032cc:	b2da      	uxtb	r2, r3
 80032ce:	8979      	ldrh	r1, [r7, #10]
 80032d0:	2300      	movs	r3, #0
 80032d2:	9300      	str	r3, [sp, #0]
 80032d4:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80032d8:	68f8      	ldr	r0, [r7, #12]
 80032da:	f000 faa7 	bl	800382c <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80032e2:	b29b      	uxth	r3, r3
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d19d      	bne.n	8003224 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80032e8:	697a      	ldr	r2, [r7, #20]
 80032ea:	6a39      	ldr	r1, [r7, #32]
 80032ec:	68f8      	ldr	r0, [r7, #12]
 80032ee:	f000 f8ed 	bl	80034cc <I2C_WaitOnSTOPFlagUntilTimeout>
 80032f2:	4603      	mov	r3, r0
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	d001      	beq.n	80032fc <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 80032f8:	2301      	movs	r3, #1
 80032fa:	e01a      	b.n	8003332 <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	2220      	movs	r2, #32
 8003302:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	6859      	ldr	r1, [r3, #4]
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	681a      	ldr	r2, [r3, #0]
 800330e:	4b0c      	ldr	r3, [pc, #48]	@ (8003340 <HAL_I2C_Master_Receive+0x1e8>)
 8003310:	400b      	ands	r3, r1
 8003312:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	2220      	movs	r2, #32
 8003318:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	2200      	movs	r2, #0
 8003320:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	2200      	movs	r2, #0
 8003328:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800332c:	2300      	movs	r3, #0
 800332e:	e000      	b.n	8003332 <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8003330:	2302      	movs	r3, #2
  }
}
 8003332:	4618      	mov	r0, r3
 8003334:	3718      	adds	r7, #24
 8003336:	46bd      	mov	sp, r7
 8003338:	bd80      	pop	{r7, pc}
 800333a:	bf00      	nop
 800333c:	80002400 	.word	0x80002400
 8003340:	fe00e800 	.word	0xfe00e800

08003344 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8003344:	b480      	push	{r7}
 8003346:	b083      	sub	sp, #12
 8003348:	af00      	add	r7, sp, #0
 800334a:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	699b      	ldr	r3, [r3, #24]
 8003352:	f003 0302 	and.w	r3, r3, #2
 8003356:	2b02      	cmp	r3, #2
 8003358:	d103      	bne.n	8003362 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	2200      	movs	r2, #0
 8003360:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	699b      	ldr	r3, [r3, #24]
 8003368:	f003 0301 	and.w	r3, r3, #1
 800336c:	2b01      	cmp	r3, #1
 800336e:	d007      	beq.n	8003380 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	699a      	ldr	r2, [r3, #24]
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	f042 0201 	orr.w	r2, r2, #1
 800337e:	619a      	str	r2, [r3, #24]
  }
}
 8003380:	bf00      	nop
 8003382:	370c      	adds	r7, #12
 8003384:	46bd      	mov	sp, r7
 8003386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800338a:	4770      	bx	lr

0800338c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800338c:	b580      	push	{r7, lr}
 800338e:	b084      	sub	sp, #16
 8003390:	af00      	add	r7, sp, #0
 8003392:	60f8      	str	r0, [r7, #12]
 8003394:	60b9      	str	r1, [r7, #8]
 8003396:	603b      	str	r3, [r7, #0]
 8003398:	4613      	mov	r3, r2
 800339a:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800339c:	e03b      	b.n	8003416 <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800339e:	69ba      	ldr	r2, [r7, #24]
 80033a0:	6839      	ldr	r1, [r7, #0]
 80033a2:	68f8      	ldr	r0, [r7, #12]
 80033a4:	f000 f962 	bl	800366c <I2C_IsErrorOccurred>
 80033a8:	4603      	mov	r3, r0
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d001      	beq.n	80033b2 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 80033ae:	2301      	movs	r3, #1
 80033b0:	e041      	b.n	8003436 <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80033b2:	683b      	ldr	r3, [r7, #0]
 80033b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80033b8:	d02d      	beq.n	8003416 <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80033ba:	f7ff f921 	bl	8002600 <HAL_GetTick>
 80033be:	4602      	mov	r2, r0
 80033c0:	69bb      	ldr	r3, [r7, #24]
 80033c2:	1ad3      	subs	r3, r2, r3
 80033c4:	683a      	ldr	r2, [r7, #0]
 80033c6:	429a      	cmp	r2, r3
 80033c8:	d302      	bcc.n	80033d0 <I2C_WaitOnFlagUntilTimeout+0x44>
 80033ca:	683b      	ldr	r3, [r7, #0]
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d122      	bne.n	8003416 <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	699a      	ldr	r2, [r3, #24]
 80033d6:	68bb      	ldr	r3, [r7, #8]
 80033d8:	4013      	ands	r3, r2
 80033da:	68ba      	ldr	r2, [r7, #8]
 80033dc:	429a      	cmp	r2, r3
 80033de:	bf0c      	ite	eq
 80033e0:	2301      	moveq	r3, #1
 80033e2:	2300      	movne	r3, #0
 80033e4:	b2db      	uxtb	r3, r3
 80033e6:	461a      	mov	r2, r3
 80033e8:	79fb      	ldrb	r3, [r7, #7]
 80033ea:	429a      	cmp	r2, r3
 80033ec:	d113      	bne.n	8003416 <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80033f2:	f043 0220 	orr.w	r2, r3, #32
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	2220      	movs	r2, #32
 80033fe:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	2200      	movs	r2, #0
 8003406:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	2200      	movs	r2, #0
 800340e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 8003412:	2301      	movs	r3, #1
 8003414:	e00f      	b.n	8003436 <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	699a      	ldr	r2, [r3, #24]
 800341c:	68bb      	ldr	r3, [r7, #8]
 800341e:	4013      	ands	r3, r2
 8003420:	68ba      	ldr	r2, [r7, #8]
 8003422:	429a      	cmp	r2, r3
 8003424:	bf0c      	ite	eq
 8003426:	2301      	moveq	r3, #1
 8003428:	2300      	movne	r3, #0
 800342a:	b2db      	uxtb	r3, r3
 800342c:	461a      	mov	r2, r3
 800342e:	79fb      	ldrb	r3, [r7, #7]
 8003430:	429a      	cmp	r2, r3
 8003432:	d0b4      	beq.n	800339e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003434:	2300      	movs	r3, #0
}
 8003436:	4618      	mov	r0, r3
 8003438:	3710      	adds	r7, #16
 800343a:	46bd      	mov	sp, r7
 800343c:	bd80      	pop	{r7, pc}

0800343e <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800343e:	b580      	push	{r7, lr}
 8003440:	b084      	sub	sp, #16
 8003442:	af00      	add	r7, sp, #0
 8003444:	60f8      	str	r0, [r7, #12]
 8003446:	60b9      	str	r1, [r7, #8]
 8003448:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800344a:	e033      	b.n	80034b4 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800344c:	687a      	ldr	r2, [r7, #4]
 800344e:	68b9      	ldr	r1, [r7, #8]
 8003450:	68f8      	ldr	r0, [r7, #12]
 8003452:	f000 f90b 	bl	800366c <I2C_IsErrorOccurred>
 8003456:	4603      	mov	r3, r0
 8003458:	2b00      	cmp	r3, #0
 800345a:	d001      	beq.n	8003460 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800345c:	2301      	movs	r3, #1
 800345e:	e031      	b.n	80034c4 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003460:	68bb      	ldr	r3, [r7, #8]
 8003462:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003466:	d025      	beq.n	80034b4 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003468:	f7ff f8ca 	bl	8002600 <HAL_GetTick>
 800346c:	4602      	mov	r2, r0
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	1ad3      	subs	r3, r2, r3
 8003472:	68ba      	ldr	r2, [r7, #8]
 8003474:	429a      	cmp	r2, r3
 8003476:	d302      	bcc.n	800347e <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8003478:	68bb      	ldr	r3, [r7, #8]
 800347a:	2b00      	cmp	r3, #0
 800347c:	d11a      	bne.n	80034b4 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	699b      	ldr	r3, [r3, #24]
 8003484:	f003 0302 	and.w	r3, r3, #2
 8003488:	2b02      	cmp	r3, #2
 800348a:	d013      	beq.n	80034b4 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003490:	f043 0220 	orr.w	r2, r3, #32
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	2220      	movs	r2, #32
 800349c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	2200      	movs	r2, #0
 80034a4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	2200      	movs	r2, #0
 80034ac:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80034b0:	2301      	movs	r3, #1
 80034b2:	e007      	b.n	80034c4 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	699b      	ldr	r3, [r3, #24]
 80034ba:	f003 0302 	and.w	r3, r3, #2
 80034be:	2b02      	cmp	r3, #2
 80034c0:	d1c4      	bne.n	800344c <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80034c2:	2300      	movs	r3, #0
}
 80034c4:	4618      	mov	r0, r3
 80034c6:	3710      	adds	r7, #16
 80034c8:	46bd      	mov	sp, r7
 80034ca:	bd80      	pop	{r7, pc}

080034cc <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80034cc:	b580      	push	{r7, lr}
 80034ce:	b084      	sub	sp, #16
 80034d0:	af00      	add	r7, sp, #0
 80034d2:	60f8      	str	r0, [r7, #12]
 80034d4:	60b9      	str	r1, [r7, #8]
 80034d6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80034d8:	e02f      	b.n	800353a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80034da:	687a      	ldr	r2, [r7, #4]
 80034dc:	68b9      	ldr	r1, [r7, #8]
 80034de:	68f8      	ldr	r0, [r7, #12]
 80034e0:	f000 f8c4 	bl	800366c <I2C_IsErrorOccurred>
 80034e4:	4603      	mov	r3, r0
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d001      	beq.n	80034ee <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80034ea:	2301      	movs	r3, #1
 80034ec:	e02d      	b.n	800354a <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80034ee:	f7ff f887 	bl	8002600 <HAL_GetTick>
 80034f2:	4602      	mov	r2, r0
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	1ad3      	subs	r3, r2, r3
 80034f8:	68ba      	ldr	r2, [r7, #8]
 80034fa:	429a      	cmp	r2, r3
 80034fc:	d302      	bcc.n	8003504 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80034fe:	68bb      	ldr	r3, [r7, #8]
 8003500:	2b00      	cmp	r3, #0
 8003502:	d11a      	bne.n	800353a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	699b      	ldr	r3, [r3, #24]
 800350a:	f003 0320 	and.w	r3, r3, #32
 800350e:	2b20      	cmp	r3, #32
 8003510:	d013      	beq.n	800353a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003516:	f043 0220 	orr.w	r2, r3, #32
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	2220      	movs	r2, #32
 8003522:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	2200      	movs	r2, #0
 800352a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	2200      	movs	r2, #0
 8003532:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8003536:	2301      	movs	r3, #1
 8003538:	e007      	b.n	800354a <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	699b      	ldr	r3, [r3, #24]
 8003540:	f003 0320 	and.w	r3, r3, #32
 8003544:	2b20      	cmp	r3, #32
 8003546:	d1c8      	bne.n	80034da <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003548:	2300      	movs	r3, #0
}
 800354a:	4618      	mov	r0, r3
 800354c:	3710      	adds	r7, #16
 800354e:	46bd      	mov	sp, r7
 8003550:	bd80      	pop	{r7, pc}
	...

08003554 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003554:	b580      	push	{r7, lr}
 8003556:	b086      	sub	sp, #24
 8003558:	af00      	add	r7, sp, #0
 800355a:	60f8      	str	r0, [r7, #12]
 800355c:	60b9      	str	r1, [r7, #8]
 800355e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003560:	2300      	movs	r3, #0
 8003562:	75fb      	strb	r3, [r7, #23]

  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 8003564:	e071      	b.n	800364a <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003566:	687a      	ldr	r2, [r7, #4]
 8003568:	68b9      	ldr	r1, [r7, #8]
 800356a:	68f8      	ldr	r0, [r7, #12]
 800356c:	f000 f87e 	bl	800366c <I2C_IsErrorOccurred>
 8003570:	4603      	mov	r3, r0
 8003572:	2b00      	cmp	r3, #0
 8003574:	d001      	beq.n	800357a <I2C_WaitOnRXNEFlagUntilTimeout+0x26>
    {
      status = HAL_ERROR;
 8003576:	2301      	movs	r3, #1
 8003578:	75fb      	strb	r3, [r7, #23]
    }

    /* Check if a STOPF is detected */
    if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET) && (status == HAL_OK))
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	699b      	ldr	r3, [r3, #24]
 8003580:	f003 0320 	and.w	r3, r3, #32
 8003584:	2b20      	cmp	r3, #32
 8003586:	d13b      	bne.n	8003600 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
 8003588:	7dfb      	ldrb	r3, [r7, #23]
 800358a:	2b00      	cmp	r3, #0
 800358c:	d138      	bne.n	8003600 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	699b      	ldr	r3, [r3, #24]
 8003594:	f003 0304 	and.w	r3, r3, #4
 8003598:	2b04      	cmp	r3, #4
 800359a:	d105      	bne.n	80035a8 <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d001      	beq.n	80035a8 <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        status = HAL_OK;
 80035a4:	2300      	movs	r3, #0
 80035a6:	75fb      	strb	r3, [r7, #23]
      }

      /* Check a no-acknowledge have been detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	699b      	ldr	r3, [r3, #24]
 80035ae:	f003 0310 	and.w	r3, r3, #16
 80035b2:	2b10      	cmp	r3, #16
 80035b4:	d121      	bne.n	80035fa <I2C_WaitOnRXNEFlagUntilTimeout+0xa6>
      {
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	2210      	movs	r2, #16
 80035bc:	61da      	str	r2, [r3, #28]
        hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	2204      	movs	r2, #4
 80035c2:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	2220      	movs	r2, #32
 80035ca:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	6859      	ldr	r1, [r3, #4]
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	681a      	ldr	r2, [r3, #0]
 80035d6:	4b24      	ldr	r3, [pc, #144]	@ (8003668 <I2C_WaitOnRXNEFlagUntilTimeout+0x114>)
 80035d8:	400b      	ands	r3, r1
 80035da:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	2220      	movs	r2, #32
 80035e0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	2200      	movs	r2, #0
 80035e8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	2200      	movs	r2, #0
 80035f0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        status = HAL_ERROR;
 80035f4:	2301      	movs	r3, #1
 80035f6:	75fb      	strb	r3, [r7, #23]
 80035f8:	e002      	b.n	8003600 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
      }
      else
      {
        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	2200      	movs	r2, #0
 80035fe:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }

    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U)) && (status == HAL_OK))
 8003600:	f7fe fffe 	bl	8002600 <HAL_GetTick>
 8003604:	4602      	mov	r2, r0
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	1ad3      	subs	r3, r2, r3
 800360a:	68ba      	ldr	r2, [r7, #8]
 800360c:	429a      	cmp	r2, r3
 800360e:	d302      	bcc.n	8003616 <I2C_WaitOnRXNEFlagUntilTimeout+0xc2>
 8003610:	68bb      	ldr	r3, [r7, #8]
 8003612:	2b00      	cmp	r3, #0
 8003614:	d119      	bne.n	800364a <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
 8003616:	7dfb      	ldrb	r3, [r7, #23]
 8003618:	2b00      	cmp	r3, #0
 800361a:	d116      	bne.n	800364a <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	699b      	ldr	r3, [r3, #24]
 8003622:	f003 0304 	and.w	r3, r3, #4
 8003626:	2b04      	cmp	r3, #4
 8003628:	d00f      	beq.n	800364a <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800362e:	f043 0220 	orr.w	r2, r3, #32
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	2220      	movs	r2, #32
 800363a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	2200      	movs	r2, #0
 8003642:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        status = HAL_ERROR;
 8003646:	2301      	movs	r3, #1
 8003648:	75fb      	strb	r3, [r7, #23]
  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	699b      	ldr	r3, [r3, #24]
 8003650:	f003 0304 	and.w	r3, r3, #4
 8003654:	2b04      	cmp	r3, #4
 8003656:	d002      	beq.n	800365e <I2C_WaitOnRXNEFlagUntilTimeout+0x10a>
 8003658:	7dfb      	ldrb	r3, [r7, #23]
 800365a:	2b00      	cmp	r3, #0
 800365c:	d083      	beq.n	8003566 <I2C_WaitOnRXNEFlagUntilTimeout+0x12>
      }
    }
  }
  return status;
 800365e:	7dfb      	ldrb	r3, [r7, #23]
}
 8003660:	4618      	mov	r0, r3
 8003662:	3718      	adds	r7, #24
 8003664:	46bd      	mov	sp, r7
 8003666:	bd80      	pop	{r7, pc}
 8003668:	fe00e800 	.word	0xfe00e800

0800366c <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800366c:	b580      	push	{r7, lr}
 800366e:	b08a      	sub	sp, #40	@ 0x28
 8003670:	af00      	add	r7, sp, #0
 8003672:	60f8      	str	r0, [r7, #12]
 8003674:	60b9      	str	r1, [r7, #8]
 8003676:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003678:	2300      	movs	r3, #0
 800367a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	699b      	ldr	r3, [r3, #24]
 8003684:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8003686:	2300      	movs	r3, #0
 8003688:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800368e:	69bb      	ldr	r3, [r7, #24]
 8003690:	f003 0310 	and.w	r3, r3, #16
 8003694:	2b00      	cmp	r3, #0
 8003696:	d068      	beq.n	800376a <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	2210      	movs	r2, #16
 800369e:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80036a0:	e049      	b.n	8003736 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80036a2:	68bb      	ldr	r3, [r7, #8]
 80036a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80036a8:	d045      	beq.n	8003736 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80036aa:	f7fe ffa9 	bl	8002600 <HAL_GetTick>
 80036ae:	4602      	mov	r2, r0
 80036b0:	69fb      	ldr	r3, [r7, #28]
 80036b2:	1ad3      	subs	r3, r2, r3
 80036b4:	68ba      	ldr	r2, [r7, #8]
 80036b6:	429a      	cmp	r2, r3
 80036b8:	d302      	bcc.n	80036c0 <I2C_IsErrorOccurred+0x54>
 80036ba:	68bb      	ldr	r3, [r7, #8]
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d13a      	bne.n	8003736 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	685b      	ldr	r3, [r3, #4]
 80036c6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80036ca:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80036d2:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	699b      	ldr	r3, [r3, #24]
 80036da:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80036de:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80036e2:	d121      	bne.n	8003728 <I2C_IsErrorOccurred+0xbc>
 80036e4:	697b      	ldr	r3, [r7, #20]
 80036e6:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80036ea:	d01d      	beq.n	8003728 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 80036ec:	7cfb      	ldrb	r3, [r7, #19]
 80036ee:	2b20      	cmp	r3, #32
 80036f0:	d01a      	beq.n	8003728 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	685a      	ldr	r2, [r3, #4]
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003700:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8003702:	f7fe ff7d 	bl	8002600 <HAL_GetTick>
 8003706:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003708:	e00e      	b.n	8003728 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800370a:	f7fe ff79 	bl	8002600 <HAL_GetTick>
 800370e:	4602      	mov	r2, r0
 8003710:	69fb      	ldr	r3, [r7, #28]
 8003712:	1ad3      	subs	r3, r2, r3
 8003714:	2b19      	cmp	r3, #25
 8003716:	d907      	bls.n	8003728 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8003718:	6a3b      	ldr	r3, [r7, #32]
 800371a:	f043 0320 	orr.w	r3, r3, #32
 800371e:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8003720:	2301      	movs	r3, #1
 8003722:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 8003726:	e006      	b.n	8003736 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	699b      	ldr	r3, [r3, #24]
 800372e:	f003 0320 	and.w	r3, r3, #32
 8003732:	2b20      	cmp	r3, #32
 8003734:	d1e9      	bne.n	800370a <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	699b      	ldr	r3, [r3, #24]
 800373c:	f003 0320 	and.w	r3, r3, #32
 8003740:	2b20      	cmp	r3, #32
 8003742:	d003      	beq.n	800374c <I2C_IsErrorOccurred+0xe0>
 8003744:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003748:	2b00      	cmp	r3, #0
 800374a:	d0aa      	beq.n	80036a2 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 800374c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003750:	2b00      	cmp	r3, #0
 8003752:	d103      	bne.n	800375c <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	2220      	movs	r2, #32
 800375a:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 800375c:	6a3b      	ldr	r3, [r7, #32]
 800375e:	f043 0304 	orr.w	r3, r3, #4
 8003762:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8003764:	2301      	movs	r3, #1
 8003766:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	699b      	ldr	r3, [r3, #24]
 8003770:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8003772:	69bb      	ldr	r3, [r7, #24]
 8003774:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003778:	2b00      	cmp	r3, #0
 800377a:	d00b      	beq.n	8003794 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 800377c:	6a3b      	ldr	r3, [r7, #32]
 800377e:	f043 0301 	orr.w	r3, r3, #1
 8003782:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800378c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800378e:	2301      	movs	r3, #1
 8003790:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8003794:	69bb      	ldr	r3, [r7, #24]
 8003796:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800379a:	2b00      	cmp	r3, #0
 800379c:	d00b      	beq.n	80037b6 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800379e:	6a3b      	ldr	r3, [r7, #32]
 80037a0:	f043 0308 	orr.w	r3, r3, #8
 80037a4:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80037ae:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80037b0:	2301      	movs	r3, #1
 80037b2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80037b6:	69bb      	ldr	r3, [r7, #24]
 80037b8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d00b      	beq.n	80037d8 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80037c0:	6a3b      	ldr	r3, [r7, #32]
 80037c2:	f043 0302 	orr.w	r3, r3, #2
 80037c6:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80037d0:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80037d2:	2301      	movs	r3, #1
 80037d4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 80037d8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d01c      	beq.n	800381a <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80037e0:	68f8      	ldr	r0, [r7, #12]
 80037e2:	f7ff fdaf 	bl	8003344 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	6859      	ldr	r1, [r3, #4]
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	681a      	ldr	r2, [r3, #0]
 80037f0:	4b0d      	ldr	r3, [pc, #52]	@ (8003828 <I2C_IsErrorOccurred+0x1bc>)
 80037f2:	400b      	ands	r3, r1
 80037f4:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80037fa:	6a3b      	ldr	r3, [r7, #32]
 80037fc:	431a      	orrs	r2, r3
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	2220      	movs	r2, #32
 8003806:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	2200      	movs	r2, #0
 800380e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	2200      	movs	r2, #0
 8003816:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 800381a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 800381e:	4618      	mov	r0, r3
 8003820:	3728      	adds	r7, #40	@ 0x28
 8003822:	46bd      	mov	sp, r7
 8003824:	bd80      	pop	{r7, pc}
 8003826:	bf00      	nop
 8003828:	fe00e800 	.word	0xfe00e800

0800382c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800382c:	b480      	push	{r7}
 800382e:	b087      	sub	sp, #28
 8003830:	af00      	add	r7, sp, #0
 8003832:	60f8      	str	r0, [r7, #12]
 8003834:	607b      	str	r3, [r7, #4]
 8003836:	460b      	mov	r3, r1
 8003838:	817b      	strh	r3, [r7, #10]
 800383a:	4613      	mov	r3, r2
 800383c:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800383e:	897b      	ldrh	r3, [r7, #10]
 8003840:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003844:	7a7b      	ldrb	r3, [r7, #9]
 8003846:	041b      	lsls	r3, r3, #16
 8003848:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800384c:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003852:	6a3b      	ldr	r3, [r7, #32]
 8003854:	4313      	orrs	r3, r2
 8003856:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800385a:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	685a      	ldr	r2, [r3, #4]
 8003862:	6a3b      	ldr	r3, [r7, #32]
 8003864:	0d5b      	lsrs	r3, r3, #21
 8003866:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 800386a:	4b08      	ldr	r3, [pc, #32]	@ (800388c <I2C_TransferConfig+0x60>)
 800386c:	430b      	orrs	r3, r1
 800386e:	43db      	mvns	r3, r3
 8003870:	ea02 0103 	and.w	r1, r2, r3
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	697a      	ldr	r2, [r7, #20]
 800387a:	430a      	orrs	r2, r1
 800387c:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800387e:	bf00      	nop
 8003880:	371c      	adds	r7, #28
 8003882:	46bd      	mov	sp, r7
 8003884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003888:	4770      	bx	lr
 800388a:	bf00      	nop
 800388c:	03ff63ff 	.word	0x03ff63ff

08003890 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003890:	b480      	push	{r7}
 8003892:	b083      	sub	sp, #12
 8003894:	af00      	add	r7, sp, #0
 8003896:	6078      	str	r0, [r7, #4]
 8003898:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80038a0:	b2db      	uxtb	r3, r3
 80038a2:	2b20      	cmp	r3, #32
 80038a4:	d138      	bne.n	8003918 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80038ac:	2b01      	cmp	r3, #1
 80038ae:	d101      	bne.n	80038b4 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80038b0:	2302      	movs	r3, #2
 80038b2:	e032      	b.n	800391a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	2201      	movs	r2, #1
 80038b8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	2224      	movs	r2, #36	@ 0x24
 80038c0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	681a      	ldr	r2, [r3, #0]
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	f022 0201 	bic.w	r2, r2, #1
 80038d2:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	681a      	ldr	r2, [r3, #0]
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80038e2:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	6819      	ldr	r1, [r3, #0]
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	683a      	ldr	r2, [r7, #0]
 80038f0:	430a      	orrs	r2, r1
 80038f2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	681a      	ldr	r2, [r3, #0]
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	f042 0201 	orr.w	r2, r2, #1
 8003902:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	2220      	movs	r2, #32
 8003908:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	2200      	movs	r2, #0
 8003910:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003914:	2300      	movs	r3, #0
 8003916:	e000      	b.n	800391a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003918:	2302      	movs	r3, #2
  }
}
 800391a:	4618      	mov	r0, r3
 800391c:	370c      	adds	r7, #12
 800391e:	46bd      	mov	sp, r7
 8003920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003924:	4770      	bx	lr

08003926 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003926:	b480      	push	{r7}
 8003928:	b085      	sub	sp, #20
 800392a:	af00      	add	r7, sp, #0
 800392c:	6078      	str	r0, [r7, #4]
 800392e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003936:	b2db      	uxtb	r3, r3
 8003938:	2b20      	cmp	r3, #32
 800393a:	d139      	bne.n	80039b0 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003942:	2b01      	cmp	r3, #1
 8003944:	d101      	bne.n	800394a <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003946:	2302      	movs	r3, #2
 8003948:	e033      	b.n	80039b2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	2201      	movs	r2, #1
 800394e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	2224      	movs	r2, #36	@ 0x24
 8003956:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	681a      	ldr	r2, [r3, #0]
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	f022 0201 	bic.w	r2, r2, #1
 8003968:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8003978:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800397a:	683b      	ldr	r3, [r7, #0]
 800397c:	021b      	lsls	r3, r3, #8
 800397e:	68fa      	ldr	r2, [r7, #12]
 8003980:	4313      	orrs	r3, r2
 8003982:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	68fa      	ldr	r2, [r7, #12]
 800398a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	681a      	ldr	r2, [r3, #0]
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	f042 0201 	orr.w	r2, r2, #1
 800399a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	2220      	movs	r2, #32
 80039a0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	2200      	movs	r2, #0
 80039a8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80039ac:	2300      	movs	r3, #0
 80039ae:	e000      	b.n	80039b2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80039b0:	2302      	movs	r3, #2
  }
}
 80039b2:	4618      	mov	r0, r3
 80039b4:	3714      	adds	r7, #20
 80039b6:	46bd      	mov	sp, r7
 80039b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039bc:	4770      	bx	lr
	...

080039c0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80039c0:	b480      	push	{r7}
 80039c2:	b085      	sub	sp, #20
 80039c4:	af00      	add	r7, sp, #0
 80039c6:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d141      	bne.n	8003a52 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80039ce:	4b4b      	ldr	r3, [pc, #300]	@ (8003afc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80039d6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80039da:	d131      	bne.n	8003a40 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80039dc:	4b47      	ldr	r3, [pc, #284]	@ (8003afc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80039de:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80039e2:	4a46      	ldr	r2, [pc, #280]	@ (8003afc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80039e4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80039e8:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80039ec:	4b43      	ldr	r3, [pc, #268]	@ (8003afc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80039f4:	4a41      	ldr	r2, [pc, #260]	@ (8003afc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80039f6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80039fa:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80039fc:	4b40      	ldr	r3, [pc, #256]	@ (8003b00 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	2232      	movs	r2, #50	@ 0x32
 8003a02:	fb02 f303 	mul.w	r3, r2, r3
 8003a06:	4a3f      	ldr	r2, [pc, #252]	@ (8003b04 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003a08:	fba2 2303 	umull	r2, r3, r2, r3
 8003a0c:	0c9b      	lsrs	r3, r3, #18
 8003a0e:	3301      	adds	r3, #1
 8003a10:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003a12:	e002      	b.n	8003a1a <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	3b01      	subs	r3, #1
 8003a18:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003a1a:	4b38      	ldr	r3, [pc, #224]	@ (8003afc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003a1c:	695b      	ldr	r3, [r3, #20]
 8003a1e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003a22:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003a26:	d102      	bne.n	8003a2e <HAL_PWREx_ControlVoltageScaling+0x6e>
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d1f2      	bne.n	8003a14 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003a2e:	4b33      	ldr	r3, [pc, #204]	@ (8003afc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003a30:	695b      	ldr	r3, [r3, #20]
 8003a32:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003a36:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003a3a:	d158      	bne.n	8003aee <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003a3c:	2303      	movs	r3, #3
 8003a3e:	e057      	b.n	8003af0 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003a40:	4b2e      	ldr	r3, [pc, #184]	@ (8003afc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003a42:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003a46:	4a2d      	ldr	r2, [pc, #180]	@ (8003afc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003a48:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003a4c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8003a50:	e04d      	b.n	8003aee <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003a58:	d141      	bne.n	8003ade <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003a5a:	4b28      	ldr	r3, [pc, #160]	@ (8003afc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8003a62:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003a66:	d131      	bne.n	8003acc <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003a68:	4b24      	ldr	r3, [pc, #144]	@ (8003afc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003a6a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003a6e:	4a23      	ldr	r2, [pc, #140]	@ (8003afc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003a70:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003a74:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003a78:	4b20      	ldr	r3, [pc, #128]	@ (8003afc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8003a80:	4a1e      	ldr	r2, [pc, #120]	@ (8003afc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003a82:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003a86:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003a88:	4b1d      	ldr	r3, [pc, #116]	@ (8003b00 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	2232      	movs	r2, #50	@ 0x32
 8003a8e:	fb02 f303 	mul.w	r3, r2, r3
 8003a92:	4a1c      	ldr	r2, [pc, #112]	@ (8003b04 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003a94:	fba2 2303 	umull	r2, r3, r2, r3
 8003a98:	0c9b      	lsrs	r3, r3, #18
 8003a9a:	3301      	adds	r3, #1
 8003a9c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003a9e:	e002      	b.n	8003aa6 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	3b01      	subs	r3, #1
 8003aa4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003aa6:	4b15      	ldr	r3, [pc, #84]	@ (8003afc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003aa8:	695b      	ldr	r3, [r3, #20]
 8003aaa:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003aae:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003ab2:	d102      	bne.n	8003aba <HAL_PWREx_ControlVoltageScaling+0xfa>
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d1f2      	bne.n	8003aa0 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003aba:	4b10      	ldr	r3, [pc, #64]	@ (8003afc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003abc:	695b      	ldr	r3, [r3, #20]
 8003abe:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003ac2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003ac6:	d112      	bne.n	8003aee <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003ac8:	2303      	movs	r3, #3
 8003aca:	e011      	b.n	8003af0 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003acc:	4b0b      	ldr	r3, [pc, #44]	@ (8003afc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003ace:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003ad2:	4a0a      	ldr	r2, [pc, #40]	@ (8003afc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003ad4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003ad8:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8003adc:	e007      	b.n	8003aee <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003ade:	4b07      	ldr	r3, [pc, #28]	@ (8003afc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8003ae6:	4a05      	ldr	r2, [pc, #20]	@ (8003afc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003ae8:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003aec:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8003aee:	2300      	movs	r3, #0
}
 8003af0:	4618      	mov	r0, r3
 8003af2:	3714      	adds	r7, #20
 8003af4:	46bd      	mov	sp, r7
 8003af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003afa:	4770      	bx	lr
 8003afc:	40007000 	.word	0x40007000
 8003b00:	20000008 	.word	0x20000008
 8003b04:	431bde83 	.word	0x431bde83

08003b08 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8003b08:	b480      	push	{r7}
 8003b0a:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8003b0c:	4b05      	ldr	r3, [pc, #20]	@ (8003b24 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8003b0e:	689b      	ldr	r3, [r3, #8]
 8003b10:	4a04      	ldr	r2, [pc, #16]	@ (8003b24 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8003b12:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003b16:	6093      	str	r3, [r2, #8]
}
 8003b18:	bf00      	nop
 8003b1a:	46bd      	mov	sp, r7
 8003b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b20:	4770      	bx	lr
 8003b22:	bf00      	nop
 8003b24:	40007000 	.word	0x40007000

08003b28 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003b28:	b580      	push	{r7, lr}
 8003b2a:	b088      	sub	sp, #32
 8003b2c:	af00      	add	r7, sp, #0
 8003b2e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d101      	bne.n	8003b3a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003b36:	2301      	movs	r3, #1
 8003b38:	e2fe      	b.n	8004138 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	f003 0301 	and.w	r3, r3, #1
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d075      	beq.n	8003c32 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003b46:	4b97      	ldr	r3, [pc, #604]	@ (8003da4 <HAL_RCC_OscConfig+0x27c>)
 8003b48:	689b      	ldr	r3, [r3, #8]
 8003b4a:	f003 030c 	and.w	r3, r3, #12
 8003b4e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003b50:	4b94      	ldr	r3, [pc, #592]	@ (8003da4 <HAL_RCC_OscConfig+0x27c>)
 8003b52:	68db      	ldr	r3, [r3, #12]
 8003b54:	f003 0303 	and.w	r3, r3, #3
 8003b58:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8003b5a:	69bb      	ldr	r3, [r7, #24]
 8003b5c:	2b0c      	cmp	r3, #12
 8003b5e:	d102      	bne.n	8003b66 <HAL_RCC_OscConfig+0x3e>
 8003b60:	697b      	ldr	r3, [r7, #20]
 8003b62:	2b03      	cmp	r3, #3
 8003b64:	d002      	beq.n	8003b6c <HAL_RCC_OscConfig+0x44>
 8003b66:	69bb      	ldr	r3, [r7, #24]
 8003b68:	2b08      	cmp	r3, #8
 8003b6a:	d10b      	bne.n	8003b84 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003b6c:	4b8d      	ldr	r3, [pc, #564]	@ (8003da4 <HAL_RCC_OscConfig+0x27c>)
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	d05b      	beq.n	8003c30 <HAL_RCC_OscConfig+0x108>
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	685b      	ldr	r3, [r3, #4]
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d157      	bne.n	8003c30 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003b80:	2301      	movs	r3, #1
 8003b82:	e2d9      	b.n	8004138 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	685b      	ldr	r3, [r3, #4]
 8003b88:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003b8c:	d106      	bne.n	8003b9c <HAL_RCC_OscConfig+0x74>
 8003b8e:	4b85      	ldr	r3, [pc, #532]	@ (8003da4 <HAL_RCC_OscConfig+0x27c>)
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	4a84      	ldr	r2, [pc, #528]	@ (8003da4 <HAL_RCC_OscConfig+0x27c>)
 8003b94:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003b98:	6013      	str	r3, [r2, #0]
 8003b9a:	e01d      	b.n	8003bd8 <HAL_RCC_OscConfig+0xb0>
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	685b      	ldr	r3, [r3, #4]
 8003ba0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003ba4:	d10c      	bne.n	8003bc0 <HAL_RCC_OscConfig+0x98>
 8003ba6:	4b7f      	ldr	r3, [pc, #508]	@ (8003da4 <HAL_RCC_OscConfig+0x27c>)
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	4a7e      	ldr	r2, [pc, #504]	@ (8003da4 <HAL_RCC_OscConfig+0x27c>)
 8003bac:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003bb0:	6013      	str	r3, [r2, #0]
 8003bb2:	4b7c      	ldr	r3, [pc, #496]	@ (8003da4 <HAL_RCC_OscConfig+0x27c>)
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	4a7b      	ldr	r2, [pc, #492]	@ (8003da4 <HAL_RCC_OscConfig+0x27c>)
 8003bb8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003bbc:	6013      	str	r3, [r2, #0]
 8003bbe:	e00b      	b.n	8003bd8 <HAL_RCC_OscConfig+0xb0>
 8003bc0:	4b78      	ldr	r3, [pc, #480]	@ (8003da4 <HAL_RCC_OscConfig+0x27c>)
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	4a77      	ldr	r2, [pc, #476]	@ (8003da4 <HAL_RCC_OscConfig+0x27c>)
 8003bc6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003bca:	6013      	str	r3, [r2, #0]
 8003bcc:	4b75      	ldr	r3, [pc, #468]	@ (8003da4 <HAL_RCC_OscConfig+0x27c>)
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	4a74      	ldr	r2, [pc, #464]	@ (8003da4 <HAL_RCC_OscConfig+0x27c>)
 8003bd2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003bd6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	685b      	ldr	r3, [r3, #4]
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	d013      	beq.n	8003c08 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003be0:	f7fe fd0e 	bl	8002600 <HAL_GetTick>
 8003be4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003be6:	e008      	b.n	8003bfa <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003be8:	f7fe fd0a 	bl	8002600 <HAL_GetTick>
 8003bec:	4602      	mov	r2, r0
 8003bee:	693b      	ldr	r3, [r7, #16]
 8003bf0:	1ad3      	subs	r3, r2, r3
 8003bf2:	2b64      	cmp	r3, #100	@ 0x64
 8003bf4:	d901      	bls.n	8003bfa <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003bf6:	2303      	movs	r3, #3
 8003bf8:	e29e      	b.n	8004138 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003bfa:	4b6a      	ldr	r3, [pc, #424]	@ (8003da4 <HAL_RCC_OscConfig+0x27c>)
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d0f0      	beq.n	8003be8 <HAL_RCC_OscConfig+0xc0>
 8003c06:	e014      	b.n	8003c32 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c08:	f7fe fcfa 	bl	8002600 <HAL_GetTick>
 8003c0c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003c0e:	e008      	b.n	8003c22 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003c10:	f7fe fcf6 	bl	8002600 <HAL_GetTick>
 8003c14:	4602      	mov	r2, r0
 8003c16:	693b      	ldr	r3, [r7, #16]
 8003c18:	1ad3      	subs	r3, r2, r3
 8003c1a:	2b64      	cmp	r3, #100	@ 0x64
 8003c1c:	d901      	bls.n	8003c22 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003c1e:	2303      	movs	r3, #3
 8003c20:	e28a      	b.n	8004138 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003c22:	4b60      	ldr	r3, [pc, #384]	@ (8003da4 <HAL_RCC_OscConfig+0x27c>)
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d1f0      	bne.n	8003c10 <HAL_RCC_OscConfig+0xe8>
 8003c2e:	e000      	b.n	8003c32 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003c30:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	f003 0302 	and.w	r3, r3, #2
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d075      	beq.n	8003d2a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003c3e:	4b59      	ldr	r3, [pc, #356]	@ (8003da4 <HAL_RCC_OscConfig+0x27c>)
 8003c40:	689b      	ldr	r3, [r3, #8]
 8003c42:	f003 030c 	and.w	r3, r3, #12
 8003c46:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003c48:	4b56      	ldr	r3, [pc, #344]	@ (8003da4 <HAL_RCC_OscConfig+0x27c>)
 8003c4a:	68db      	ldr	r3, [r3, #12]
 8003c4c:	f003 0303 	and.w	r3, r3, #3
 8003c50:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8003c52:	69bb      	ldr	r3, [r7, #24]
 8003c54:	2b0c      	cmp	r3, #12
 8003c56:	d102      	bne.n	8003c5e <HAL_RCC_OscConfig+0x136>
 8003c58:	697b      	ldr	r3, [r7, #20]
 8003c5a:	2b02      	cmp	r3, #2
 8003c5c:	d002      	beq.n	8003c64 <HAL_RCC_OscConfig+0x13c>
 8003c5e:	69bb      	ldr	r3, [r7, #24]
 8003c60:	2b04      	cmp	r3, #4
 8003c62:	d11f      	bne.n	8003ca4 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003c64:	4b4f      	ldr	r3, [pc, #316]	@ (8003da4 <HAL_RCC_OscConfig+0x27c>)
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	d005      	beq.n	8003c7c <HAL_RCC_OscConfig+0x154>
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	68db      	ldr	r3, [r3, #12]
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	d101      	bne.n	8003c7c <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8003c78:	2301      	movs	r3, #1
 8003c7a:	e25d      	b.n	8004138 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003c7c:	4b49      	ldr	r3, [pc, #292]	@ (8003da4 <HAL_RCC_OscConfig+0x27c>)
 8003c7e:	685b      	ldr	r3, [r3, #4]
 8003c80:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	691b      	ldr	r3, [r3, #16]
 8003c88:	061b      	lsls	r3, r3, #24
 8003c8a:	4946      	ldr	r1, [pc, #280]	@ (8003da4 <HAL_RCC_OscConfig+0x27c>)
 8003c8c:	4313      	orrs	r3, r2
 8003c8e:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8003c90:	4b45      	ldr	r3, [pc, #276]	@ (8003da8 <HAL_RCC_OscConfig+0x280>)
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	4618      	mov	r0, r3
 8003c96:	f7fe fc67 	bl	8002568 <HAL_InitTick>
 8003c9a:	4603      	mov	r3, r0
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	d043      	beq.n	8003d28 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8003ca0:	2301      	movs	r3, #1
 8003ca2:	e249      	b.n	8004138 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	68db      	ldr	r3, [r3, #12]
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	d023      	beq.n	8003cf4 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003cac:	4b3d      	ldr	r3, [pc, #244]	@ (8003da4 <HAL_RCC_OscConfig+0x27c>)
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	4a3c      	ldr	r2, [pc, #240]	@ (8003da4 <HAL_RCC_OscConfig+0x27c>)
 8003cb2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003cb6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003cb8:	f7fe fca2 	bl	8002600 <HAL_GetTick>
 8003cbc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003cbe:	e008      	b.n	8003cd2 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003cc0:	f7fe fc9e 	bl	8002600 <HAL_GetTick>
 8003cc4:	4602      	mov	r2, r0
 8003cc6:	693b      	ldr	r3, [r7, #16]
 8003cc8:	1ad3      	subs	r3, r2, r3
 8003cca:	2b02      	cmp	r3, #2
 8003ccc:	d901      	bls.n	8003cd2 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8003cce:	2303      	movs	r3, #3
 8003cd0:	e232      	b.n	8004138 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003cd2:	4b34      	ldr	r3, [pc, #208]	@ (8003da4 <HAL_RCC_OscConfig+0x27c>)
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d0f0      	beq.n	8003cc0 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003cde:	4b31      	ldr	r3, [pc, #196]	@ (8003da4 <HAL_RCC_OscConfig+0x27c>)
 8003ce0:	685b      	ldr	r3, [r3, #4]
 8003ce2:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	691b      	ldr	r3, [r3, #16]
 8003cea:	061b      	lsls	r3, r3, #24
 8003cec:	492d      	ldr	r1, [pc, #180]	@ (8003da4 <HAL_RCC_OscConfig+0x27c>)
 8003cee:	4313      	orrs	r3, r2
 8003cf0:	604b      	str	r3, [r1, #4]
 8003cf2:	e01a      	b.n	8003d2a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003cf4:	4b2b      	ldr	r3, [pc, #172]	@ (8003da4 <HAL_RCC_OscConfig+0x27c>)
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	4a2a      	ldr	r2, [pc, #168]	@ (8003da4 <HAL_RCC_OscConfig+0x27c>)
 8003cfa:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003cfe:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d00:	f7fe fc7e 	bl	8002600 <HAL_GetTick>
 8003d04:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003d06:	e008      	b.n	8003d1a <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003d08:	f7fe fc7a 	bl	8002600 <HAL_GetTick>
 8003d0c:	4602      	mov	r2, r0
 8003d0e:	693b      	ldr	r3, [r7, #16]
 8003d10:	1ad3      	subs	r3, r2, r3
 8003d12:	2b02      	cmp	r3, #2
 8003d14:	d901      	bls.n	8003d1a <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8003d16:	2303      	movs	r3, #3
 8003d18:	e20e      	b.n	8004138 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003d1a:	4b22      	ldr	r3, [pc, #136]	@ (8003da4 <HAL_RCC_OscConfig+0x27c>)
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d1f0      	bne.n	8003d08 <HAL_RCC_OscConfig+0x1e0>
 8003d26:	e000      	b.n	8003d2a <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003d28:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	f003 0308 	and.w	r3, r3, #8
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d041      	beq.n	8003dba <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	695b      	ldr	r3, [r3, #20]
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d01c      	beq.n	8003d78 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003d3e:	4b19      	ldr	r3, [pc, #100]	@ (8003da4 <HAL_RCC_OscConfig+0x27c>)
 8003d40:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003d44:	4a17      	ldr	r2, [pc, #92]	@ (8003da4 <HAL_RCC_OscConfig+0x27c>)
 8003d46:	f043 0301 	orr.w	r3, r3, #1
 8003d4a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d4e:	f7fe fc57 	bl	8002600 <HAL_GetTick>
 8003d52:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003d54:	e008      	b.n	8003d68 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003d56:	f7fe fc53 	bl	8002600 <HAL_GetTick>
 8003d5a:	4602      	mov	r2, r0
 8003d5c:	693b      	ldr	r3, [r7, #16]
 8003d5e:	1ad3      	subs	r3, r2, r3
 8003d60:	2b02      	cmp	r3, #2
 8003d62:	d901      	bls.n	8003d68 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003d64:	2303      	movs	r3, #3
 8003d66:	e1e7      	b.n	8004138 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003d68:	4b0e      	ldr	r3, [pc, #56]	@ (8003da4 <HAL_RCC_OscConfig+0x27c>)
 8003d6a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003d6e:	f003 0302 	and.w	r3, r3, #2
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d0ef      	beq.n	8003d56 <HAL_RCC_OscConfig+0x22e>
 8003d76:	e020      	b.n	8003dba <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003d78:	4b0a      	ldr	r3, [pc, #40]	@ (8003da4 <HAL_RCC_OscConfig+0x27c>)
 8003d7a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003d7e:	4a09      	ldr	r2, [pc, #36]	@ (8003da4 <HAL_RCC_OscConfig+0x27c>)
 8003d80:	f023 0301 	bic.w	r3, r3, #1
 8003d84:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d88:	f7fe fc3a 	bl	8002600 <HAL_GetTick>
 8003d8c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003d8e:	e00d      	b.n	8003dac <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003d90:	f7fe fc36 	bl	8002600 <HAL_GetTick>
 8003d94:	4602      	mov	r2, r0
 8003d96:	693b      	ldr	r3, [r7, #16]
 8003d98:	1ad3      	subs	r3, r2, r3
 8003d9a:	2b02      	cmp	r3, #2
 8003d9c:	d906      	bls.n	8003dac <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8003d9e:	2303      	movs	r3, #3
 8003da0:	e1ca      	b.n	8004138 <HAL_RCC_OscConfig+0x610>
 8003da2:	bf00      	nop
 8003da4:	40021000 	.word	0x40021000
 8003da8:	20000020 	.word	0x20000020
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003dac:	4b8c      	ldr	r3, [pc, #560]	@ (8003fe0 <HAL_RCC_OscConfig+0x4b8>)
 8003dae:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003db2:	f003 0302 	and.w	r3, r3, #2
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d1ea      	bne.n	8003d90 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	f003 0304 	and.w	r3, r3, #4
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	f000 80a6 	beq.w	8003f14 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003dc8:	2300      	movs	r3, #0
 8003dca:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003dcc:	4b84      	ldr	r3, [pc, #528]	@ (8003fe0 <HAL_RCC_OscConfig+0x4b8>)
 8003dce:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003dd0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	d101      	bne.n	8003ddc <HAL_RCC_OscConfig+0x2b4>
 8003dd8:	2301      	movs	r3, #1
 8003dda:	e000      	b.n	8003dde <HAL_RCC_OscConfig+0x2b6>
 8003ddc:	2300      	movs	r3, #0
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d00d      	beq.n	8003dfe <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003de2:	4b7f      	ldr	r3, [pc, #508]	@ (8003fe0 <HAL_RCC_OscConfig+0x4b8>)
 8003de4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003de6:	4a7e      	ldr	r2, [pc, #504]	@ (8003fe0 <HAL_RCC_OscConfig+0x4b8>)
 8003de8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003dec:	6593      	str	r3, [r2, #88]	@ 0x58
 8003dee:	4b7c      	ldr	r3, [pc, #496]	@ (8003fe0 <HAL_RCC_OscConfig+0x4b8>)
 8003df0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003df2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003df6:	60fb      	str	r3, [r7, #12]
 8003df8:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8003dfa:	2301      	movs	r3, #1
 8003dfc:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003dfe:	4b79      	ldr	r3, [pc, #484]	@ (8003fe4 <HAL_RCC_OscConfig+0x4bc>)
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d118      	bne.n	8003e3c <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003e0a:	4b76      	ldr	r3, [pc, #472]	@ (8003fe4 <HAL_RCC_OscConfig+0x4bc>)
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	4a75      	ldr	r2, [pc, #468]	@ (8003fe4 <HAL_RCC_OscConfig+0x4bc>)
 8003e10:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003e14:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003e16:	f7fe fbf3 	bl	8002600 <HAL_GetTick>
 8003e1a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003e1c:	e008      	b.n	8003e30 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003e1e:	f7fe fbef 	bl	8002600 <HAL_GetTick>
 8003e22:	4602      	mov	r2, r0
 8003e24:	693b      	ldr	r3, [r7, #16]
 8003e26:	1ad3      	subs	r3, r2, r3
 8003e28:	2b02      	cmp	r3, #2
 8003e2a:	d901      	bls.n	8003e30 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8003e2c:	2303      	movs	r3, #3
 8003e2e:	e183      	b.n	8004138 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003e30:	4b6c      	ldr	r3, [pc, #432]	@ (8003fe4 <HAL_RCC_OscConfig+0x4bc>)
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	d0f0      	beq.n	8003e1e <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	689b      	ldr	r3, [r3, #8]
 8003e40:	2b01      	cmp	r3, #1
 8003e42:	d108      	bne.n	8003e56 <HAL_RCC_OscConfig+0x32e>
 8003e44:	4b66      	ldr	r3, [pc, #408]	@ (8003fe0 <HAL_RCC_OscConfig+0x4b8>)
 8003e46:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003e4a:	4a65      	ldr	r2, [pc, #404]	@ (8003fe0 <HAL_RCC_OscConfig+0x4b8>)
 8003e4c:	f043 0301 	orr.w	r3, r3, #1
 8003e50:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003e54:	e024      	b.n	8003ea0 <HAL_RCC_OscConfig+0x378>
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	689b      	ldr	r3, [r3, #8]
 8003e5a:	2b05      	cmp	r3, #5
 8003e5c:	d110      	bne.n	8003e80 <HAL_RCC_OscConfig+0x358>
 8003e5e:	4b60      	ldr	r3, [pc, #384]	@ (8003fe0 <HAL_RCC_OscConfig+0x4b8>)
 8003e60:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003e64:	4a5e      	ldr	r2, [pc, #376]	@ (8003fe0 <HAL_RCC_OscConfig+0x4b8>)
 8003e66:	f043 0304 	orr.w	r3, r3, #4
 8003e6a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003e6e:	4b5c      	ldr	r3, [pc, #368]	@ (8003fe0 <HAL_RCC_OscConfig+0x4b8>)
 8003e70:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003e74:	4a5a      	ldr	r2, [pc, #360]	@ (8003fe0 <HAL_RCC_OscConfig+0x4b8>)
 8003e76:	f043 0301 	orr.w	r3, r3, #1
 8003e7a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003e7e:	e00f      	b.n	8003ea0 <HAL_RCC_OscConfig+0x378>
 8003e80:	4b57      	ldr	r3, [pc, #348]	@ (8003fe0 <HAL_RCC_OscConfig+0x4b8>)
 8003e82:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003e86:	4a56      	ldr	r2, [pc, #344]	@ (8003fe0 <HAL_RCC_OscConfig+0x4b8>)
 8003e88:	f023 0301 	bic.w	r3, r3, #1
 8003e8c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003e90:	4b53      	ldr	r3, [pc, #332]	@ (8003fe0 <HAL_RCC_OscConfig+0x4b8>)
 8003e92:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003e96:	4a52      	ldr	r2, [pc, #328]	@ (8003fe0 <HAL_RCC_OscConfig+0x4b8>)
 8003e98:	f023 0304 	bic.w	r3, r3, #4
 8003e9c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	689b      	ldr	r3, [r3, #8]
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	d016      	beq.n	8003ed6 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ea8:	f7fe fbaa 	bl	8002600 <HAL_GetTick>
 8003eac:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003eae:	e00a      	b.n	8003ec6 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003eb0:	f7fe fba6 	bl	8002600 <HAL_GetTick>
 8003eb4:	4602      	mov	r2, r0
 8003eb6:	693b      	ldr	r3, [r7, #16]
 8003eb8:	1ad3      	subs	r3, r2, r3
 8003eba:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003ebe:	4293      	cmp	r3, r2
 8003ec0:	d901      	bls.n	8003ec6 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8003ec2:	2303      	movs	r3, #3
 8003ec4:	e138      	b.n	8004138 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003ec6:	4b46      	ldr	r3, [pc, #280]	@ (8003fe0 <HAL_RCC_OscConfig+0x4b8>)
 8003ec8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003ecc:	f003 0302 	and.w	r3, r3, #2
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d0ed      	beq.n	8003eb0 <HAL_RCC_OscConfig+0x388>
 8003ed4:	e015      	b.n	8003f02 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ed6:	f7fe fb93 	bl	8002600 <HAL_GetTick>
 8003eda:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003edc:	e00a      	b.n	8003ef4 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003ede:	f7fe fb8f 	bl	8002600 <HAL_GetTick>
 8003ee2:	4602      	mov	r2, r0
 8003ee4:	693b      	ldr	r3, [r7, #16]
 8003ee6:	1ad3      	subs	r3, r2, r3
 8003ee8:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003eec:	4293      	cmp	r3, r2
 8003eee:	d901      	bls.n	8003ef4 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8003ef0:	2303      	movs	r3, #3
 8003ef2:	e121      	b.n	8004138 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003ef4:	4b3a      	ldr	r3, [pc, #232]	@ (8003fe0 <HAL_RCC_OscConfig+0x4b8>)
 8003ef6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003efa:	f003 0302 	and.w	r3, r3, #2
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d1ed      	bne.n	8003ede <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003f02:	7ffb      	ldrb	r3, [r7, #31]
 8003f04:	2b01      	cmp	r3, #1
 8003f06:	d105      	bne.n	8003f14 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003f08:	4b35      	ldr	r3, [pc, #212]	@ (8003fe0 <HAL_RCC_OscConfig+0x4b8>)
 8003f0a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003f0c:	4a34      	ldr	r2, [pc, #208]	@ (8003fe0 <HAL_RCC_OscConfig+0x4b8>)
 8003f0e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003f12:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	f003 0320 	and.w	r3, r3, #32
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	d03c      	beq.n	8003f9a <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	699b      	ldr	r3, [r3, #24]
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	d01c      	beq.n	8003f62 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003f28:	4b2d      	ldr	r3, [pc, #180]	@ (8003fe0 <HAL_RCC_OscConfig+0x4b8>)
 8003f2a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003f2e:	4a2c      	ldr	r2, [pc, #176]	@ (8003fe0 <HAL_RCC_OscConfig+0x4b8>)
 8003f30:	f043 0301 	orr.w	r3, r3, #1
 8003f34:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f38:	f7fe fb62 	bl	8002600 <HAL_GetTick>
 8003f3c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003f3e:	e008      	b.n	8003f52 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003f40:	f7fe fb5e 	bl	8002600 <HAL_GetTick>
 8003f44:	4602      	mov	r2, r0
 8003f46:	693b      	ldr	r3, [r7, #16]
 8003f48:	1ad3      	subs	r3, r2, r3
 8003f4a:	2b02      	cmp	r3, #2
 8003f4c:	d901      	bls.n	8003f52 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8003f4e:	2303      	movs	r3, #3
 8003f50:	e0f2      	b.n	8004138 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003f52:	4b23      	ldr	r3, [pc, #140]	@ (8003fe0 <HAL_RCC_OscConfig+0x4b8>)
 8003f54:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003f58:	f003 0302 	and.w	r3, r3, #2
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	d0ef      	beq.n	8003f40 <HAL_RCC_OscConfig+0x418>
 8003f60:	e01b      	b.n	8003f9a <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003f62:	4b1f      	ldr	r3, [pc, #124]	@ (8003fe0 <HAL_RCC_OscConfig+0x4b8>)
 8003f64:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003f68:	4a1d      	ldr	r2, [pc, #116]	@ (8003fe0 <HAL_RCC_OscConfig+0x4b8>)
 8003f6a:	f023 0301 	bic.w	r3, r3, #1
 8003f6e:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f72:	f7fe fb45 	bl	8002600 <HAL_GetTick>
 8003f76:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003f78:	e008      	b.n	8003f8c <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003f7a:	f7fe fb41 	bl	8002600 <HAL_GetTick>
 8003f7e:	4602      	mov	r2, r0
 8003f80:	693b      	ldr	r3, [r7, #16]
 8003f82:	1ad3      	subs	r3, r2, r3
 8003f84:	2b02      	cmp	r3, #2
 8003f86:	d901      	bls.n	8003f8c <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8003f88:	2303      	movs	r3, #3
 8003f8a:	e0d5      	b.n	8004138 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003f8c:	4b14      	ldr	r3, [pc, #80]	@ (8003fe0 <HAL_RCC_OscConfig+0x4b8>)
 8003f8e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003f92:	f003 0302 	and.w	r3, r3, #2
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d1ef      	bne.n	8003f7a <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	69db      	ldr	r3, [r3, #28]
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	f000 80c9 	beq.w	8004136 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003fa4:	4b0e      	ldr	r3, [pc, #56]	@ (8003fe0 <HAL_RCC_OscConfig+0x4b8>)
 8003fa6:	689b      	ldr	r3, [r3, #8]
 8003fa8:	f003 030c 	and.w	r3, r3, #12
 8003fac:	2b0c      	cmp	r3, #12
 8003fae:	f000 8083 	beq.w	80040b8 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	69db      	ldr	r3, [r3, #28]
 8003fb6:	2b02      	cmp	r3, #2
 8003fb8:	d15e      	bne.n	8004078 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003fba:	4b09      	ldr	r3, [pc, #36]	@ (8003fe0 <HAL_RCC_OscConfig+0x4b8>)
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	4a08      	ldr	r2, [pc, #32]	@ (8003fe0 <HAL_RCC_OscConfig+0x4b8>)
 8003fc0:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003fc4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003fc6:	f7fe fb1b 	bl	8002600 <HAL_GetTick>
 8003fca:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003fcc:	e00c      	b.n	8003fe8 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003fce:	f7fe fb17 	bl	8002600 <HAL_GetTick>
 8003fd2:	4602      	mov	r2, r0
 8003fd4:	693b      	ldr	r3, [r7, #16]
 8003fd6:	1ad3      	subs	r3, r2, r3
 8003fd8:	2b02      	cmp	r3, #2
 8003fda:	d905      	bls.n	8003fe8 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8003fdc:	2303      	movs	r3, #3
 8003fde:	e0ab      	b.n	8004138 <HAL_RCC_OscConfig+0x610>
 8003fe0:	40021000 	.word	0x40021000
 8003fe4:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003fe8:	4b55      	ldr	r3, [pc, #340]	@ (8004140 <HAL_RCC_OscConfig+0x618>)
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	d1ec      	bne.n	8003fce <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003ff4:	4b52      	ldr	r3, [pc, #328]	@ (8004140 <HAL_RCC_OscConfig+0x618>)
 8003ff6:	68da      	ldr	r2, [r3, #12]
 8003ff8:	4b52      	ldr	r3, [pc, #328]	@ (8004144 <HAL_RCC_OscConfig+0x61c>)
 8003ffa:	4013      	ands	r3, r2
 8003ffc:	687a      	ldr	r2, [r7, #4]
 8003ffe:	6a11      	ldr	r1, [r2, #32]
 8004000:	687a      	ldr	r2, [r7, #4]
 8004002:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8004004:	3a01      	subs	r2, #1
 8004006:	0112      	lsls	r2, r2, #4
 8004008:	4311      	orrs	r1, r2
 800400a:	687a      	ldr	r2, [r7, #4]
 800400c:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 800400e:	0212      	lsls	r2, r2, #8
 8004010:	4311      	orrs	r1, r2
 8004012:	687a      	ldr	r2, [r7, #4]
 8004014:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8004016:	0852      	lsrs	r2, r2, #1
 8004018:	3a01      	subs	r2, #1
 800401a:	0552      	lsls	r2, r2, #21
 800401c:	4311      	orrs	r1, r2
 800401e:	687a      	ldr	r2, [r7, #4]
 8004020:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8004022:	0852      	lsrs	r2, r2, #1
 8004024:	3a01      	subs	r2, #1
 8004026:	0652      	lsls	r2, r2, #25
 8004028:	4311      	orrs	r1, r2
 800402a:	687a      	ldr	r2, [r7, #4]
 800402c:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800402e:	06d2      	lsls	r2, r2, #27
 8004030:	430a      	orrs	r2, r1
 8004032:	4943      	ldr	r1, [pc, #268]	@ (8004140 <HAL_RCC_OscConfig+0x618>)
 8004034:	4313      	orrs	r3, r2
 8004036:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004038:	4b41      	ldr	r3, [pc, #260]	@ (8004140 <HAL_RCC_OscConfig+0x618>)
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	4a40      	ldr	r2, [pc, #256]	@ (8004140 <HAL_RCC_OscConfig+0x618>)
 800403e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004042:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004044:	4b3e      	ldr	r3, [pc, #248]	@ (8004140 <HAL_RCC_OscConfig+0x618>)
 8004046:	68db      	ldr	r3, [r3, #12]
 8004048:	4a3d      	ldr	r2, [pc, #244]	@ (8004140 <HAL_RCC_OscConfig+0x618>)
 800404a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800404e:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004050:	f7fe fad6 	bl	8002600 <HAL_GetTick>
 8004054:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004056:	e008      	b.n	800406a <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004058:	f7fe fad2 	bl	8002600 <HAL_GetTick>
 800405c:	4602      	mov	r2, r0
 800405e:	693b      	ldr	r3, [r7, #16]
 8004060:	1ad3      	subs	r3, r2, r3
 8004062:	2b02      	cmp	r3, #2
 8004064:	d901      	bls.n	800406a <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8004066:	2303      	movs	r3, #3
 8004068:	e066      	b.n	8004138 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800406a:	4b35      	ldr	r3, [pc, #212]	@ (8004140 <HAL_RCC_OscConfig+0x618>)
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004072:	2b00      	cmp	r3, #0
 8004074:	d0f0      	beq.n	8004058 <HAL_RCC_OscConfig+0x530>
 8004076:	e05e      	b.n	8004136 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004078:	4b31      	ldr	r3, [pc, #196]	@ (8004140 <HAL_RCC_OscConfig+0x618>)
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	4a30      	ldr	r2, [pc, #192]	@ (8004140 <HAL_RCC_OscConfig+0x618>)
 800407e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004082:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004084:	f7fe fabc 	bl	8002600 <HAL_GetTick>
 8004088:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800408a:	e008      	b.n	800409e <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800408c:	f7fe fab8 	bl	8002600 <HAL_GetTick>
 8004090:	4602      	mov	r2, r0
 8004092:	693b      	ldr	r3, [r7, #16]
 8004094:	1ad3      	subs	r3, r2, r3
 8004096:	2b02      	cmp	r3, #2
 8004098:	d901      	bls.n	800409e <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 800409a:	2303      	movs	r3, #3
 800409c:	e04c      	b.n	8004138 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800409e:	4b28      	ldr	r3, [pc, #160]	@ (8004140 <HAL_RCC_OscConfig+0x618>)
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d1f0      	bne.n	800408c <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 80040aa:	4b25      	ldr	r3, [pc, #148]	@ (8004140 <HAL_RCC_OscConfig+0x618>)
 80040ac:	68da      	ldr	r2, [r3, #12]
 80040ae:	4924      	ldr	r1, [pc, #144]	@ (8004140 <HAL_RCC_OscConfig+0x618>)
 80040b0:	4b25      	ldr	r3, [pc, #148]	@ (8004148 <HAL_RCC_OscConfig+0x620>)
 80040b2:	4013      	ands	r3, r2
 80040b4:	60cb      	str	r3, [r1, #12]
 80040b6:	e03e      	b.n	8004136 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	69db      	ldr	r3, [r3, #28]
 80040bc:	2b01      	cmp	r3, #1
 80040be:	d101      	bne.n	80040c4 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 80040c0:	2301      	movs	r3, #1
 80040c2:	e039      	b.n	8004138 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 80040c4:	4b1e      	ldr	r3, [pc, #120]	@ (8004140 <HAL_RCC_OscConfig+0x618>)
 80040c6:	68db      	ldr	r3, [r3, #12]
 80040c8:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80040ca:	697b      	ldr	r3, [r7, #20]
 80040cc:	f003 0203 	and.w	r2, r3, #3
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	6a1b      	ldr	r3, [r3, #32]
 80040d4:	429a      	cmp	r2, r3
 80040d6:	d12c      	bne.n	8004132 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80040d8:	697b      	ldr	r3, [r7, #20]
 80040da:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040e2:	3b01      	subs	r3, #1
 80040e4:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80040e6:	429a      	cmp	r2, r3
 80040e8:	d123      	bne.n	8004132 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80040ea:	697b      	ldr	r3, [r7, #20]
 80040ec:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80040f4:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80040f6:	429a      	cmp	r2, r3
 80040f8:	d11b      	bne.n	8004132 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80040fa:	697b      	ldr	r3, [r7, #20]
 80040fc:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004104:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8004106:	429a      	cmp	r2, r3
 8004108:	d113      	bne.n	8004132 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800410a:	697b      	ldr	r3, [r7, #20]
 800410c:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004114:	085b      	lsrs	r3, r3, #1
 8004116:	3b01      	subs	r3, #1
 8004118:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800411a:	429a      	cmp	r2, r3
 800411c:	d109      	bne.n	8004132 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800411e:	697b      	ldr	r3, [r7, #20]
 8004120:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004128:	085b      	lsrs	r3, r3, #1
 800412a:	3b01      	subs	r3, #1
 800412c:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800412e:	429a      	cmp	r2, r3
 8004130:	d001      	beq.n	8004136 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8004132:	2301      	movs	r3, #1
 8004134:	e000      	b.n	8004138 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8004136:	2300      	movs	r3, #0
}
 8004138:	4618      	mov	r0, r3
 800413a:	3720      	adds	r7, #32
 800413c:	46bd      	mov	sp, r7
 800413e:	bd80      	pop	{r7, pc}
 8004140:	40021000 	.word	0x40021000
 8004144:	019f800c 	.word	0x019f800c
 8004148:	feeefffc 	.word	0xfeeefffc

0800414c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800414c:	b580      	push	{r7, lr}
 800414e:	b086      	sub	sp, #24
 8004150:	af00      	add	r7, sp, #0
 8004152:	6078      	str	r0, [r7, #4]
 8004154:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8004156:	2300      	movs	r3, #0
 8004158:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	2b00      	cmp	r3, #0
 800415e:	d101      	bne.n	8004164 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004160:	2301      	movs	r3, #1
 8004162:	e11e      	b.n	80043a2 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004164:	4b91      	ldr	r3, [pc, #580]	@ (80043ac <HAL_RCC_ClockConfig+0x260>)
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	f003 030f 	and.w	r3, r3, #15
 800416c:	683a      	ldr	r2, [r7, #0]
 800416e:	429a      	cmp	r2, r3
 8004170:	d910      	bls.n	8004194 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004172:	4b8e      	ldr	r3, [pc, #568]	@ (80043ac <HAL_RCC_ClockConfig+0x260>)
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	f023 020f 	bic.w	r2, r3, #15
 800417a:	498c      	ldr	r1, [pc, #560]	@ (80043ac <HAL_RCC_ClockConfig+0x260>)
 800417c:	683b      	ldr	r3, [r7, #0]
 800417e:	4313      	orrs	r3, r2
 8004180:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004182:	4b8a      	ldr	r3, [pc, #552]	@ (80043ac <HAL_RCC_ClockConfig+0x260>)
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	f003 030f 	and.w	r3, r3, #15
 800418a:	683a      	ldr	r2, [r7, #0]
 800418c:	429a      	cmp	r2, r3
 800418e:	d001      	beq.n	8004194 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004190:	2301      	movs	r3, #1
 8004192:	e106      	b.n	80043a2 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	f003 0301 	and.w	r3, r3, #1
 800419c:	2b00      	cmp	r3, #0
 800419e:	d073      	beq.n	8004288 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	685b      	ldr	r3, [r3, #4]
 80041a4:	2b03      	cmp	r3, #3
 80041a6:	d129      	bne.n	80041fc <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80041a8:	4b81      	ldr	r3, [pc, #516]	@ (80043b0 <HAL_RCC_ClockConfig+0x264>)
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	d101      	bne.n	80041b8 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 80041b4:	2301      	movs	r3, #1
 80041b6:	e0f4      	b.n	80043a2 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 80041b8:	f000 f99e 	bl	80044f8 <RCC_GetSysClockFreqFromPLLSource>
 80041bc:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 80041be:	693b      	ldr	r3, [r7, #16]
 80041c0:	4a7c      	ldr	r2, [pc, #496]	@ (80043b4 <HAL_RCC_ClockConfig+0x268>)
 80041c2:	4293      	cmp	r3, r2
 80041c4:	d93f      	bls.n	8004246 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80041c6:	4b7a      	ldr	r3, [pc, #488]	@ (80043b0 <HAL_RCC_ClockConfig+0x264>)
 80041c8:	689b      	ldr	r3, [r3, #8]
 80041ca:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d009      	beq.n	80041e6 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d033      	beq.n	8004246 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d12f      	bne.n	8004246 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80041e6:	4b72      	ldr	r3, [pc, #456]	@ (80043b0 <HAL_RCC_ClockConfig+0x264>)
 80041e8:	689b      	ldr	r3, [r3, #8]
 80041ea:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80041ee:	4a70      	ldr	r2, [pc, #448]	@ (80043b0 <HAL_RCC_ClockConfig+0x264>)
 80041f0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80041f4:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80041f6:	2380      	movs	r3, #128	@ 0x80
 80041f8:	617b      	str	r3, [r7, #20]
 80041fa:	e024      	b.n	8004246 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	685b      	ldr	r3, [r3, #4]
 8004200:	2b02      	cmp	r3, #2
 8004202:	d107      	bne.n	8004214 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004204:	4b6a      	ldr	r3, [pc, #424]	@ (80043b0 <HAL_RCC_ClockConfig+0x264>)
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800420c:	2b00      	cmp	r3, #0
 800420e:	d109      	bne.n	8004224 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8004210:	2301      	movs	r3, #1
 8004212:	e0c6      	b.n	80043a2 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004214:	4b66      	ldr	r3, [pc, #408]	@ (80043b0 <HAL_RCC_ClockConfig+0x264>)
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800421c:	2b00      	cmp	r3, #0
 800421e:	d101      	bne.n	8004224 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8004220:	2301      	movs	r3, #1
 8004222:	e0be      	b.n	80043a2 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8004224:	f000 f8ce 	bl	80043c4 <HAL_RCC_GetSysClockFreq>
 8004228:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 800422a:	693b      	ldr	r3, [r7, #16]
 800422c:	4a61      	ldr	r2, [pc, #388]	@ (80043b4 <HAL_RCC_ClockConfig+0x268>)
 800422e:	4293      	cmp	r3, r2
 8004230:	d909      	bls.n	8004246 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8004232:	4b5f      	ldr	r3, [pc, #380]	@ (80043b0 <HAL_RCC_ClockConfig+0x264>)
 8004234:	689b      	ldr	r3, [r3, #8]
 8004236:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800423a:	4a5d      	ldr	r2, [pc, #372]	@ (80043b0 <HAL_RCC_ClockConfig+0x264>)
 800423c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004240:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8004242:	2380      	movs	r3, #128	@ 0x80
 8004244:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004246:	4b5a      	ldr	r3, [pc, #360]	@ (80043b0 <HAL_RCC_ClockConfig+0x264>)
 8004248:	689b      	ldr	r3, [r3, #8]
 800424a:	f023 0203 	bic.w	r2, r3, #3
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	685b      	ldr	r3, [r3, #4]
 8004252:	4957      	ldr	r1, [pc, #348]	@ (80043b0 <HAL_RCC_ClockConfig+0x264>)
 8004254:	4313      	orrs	r3, r2
 8004256:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004258:	f7fe f9d2 	bl	8002600 <HAL_GetTick>
 800425c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800425e:	e00a      	b.n	8004276 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004260:	f7fe f9ce 	bl	8002600 <HAL_GetTick>
 8004264:	4602      	mov	r2, r0
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	1ad3      	subs	r3, r2, r3
 800426a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800426e:	4293      	cmp	r3, r2
 8004270:	d901      	bls.n	8004276 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8004272:	2303      	movs	r3, #3
 8004274:	e095      	b.n	80043a2 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004276:	4b4e      	ldr	r3, [pc, #312]	@ (80043b0 <HAL_RCC_ClockConfig+0x264>)
 8004278:	689b      	ldr	r3, [r3, #8]
 800427a:	f003 020c 	and.w	r2, r3, #12
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	685b      	ldr	r3, [r3, #4]
 8004282:	009b      	lsls	r3, r3, #2
 8004284:	429a      	cmp	r2, r3
 8004286:	d1eb      	bne.n	8004260 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	f003 0302 	and.w	r3, r3, #2
 8004290:	2b00      	cmp	r3, #0
 8004292:	d023      	beq.n	80042dc <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	f003 0304 	and.w	r3, r3, #4
 800429c:	2b00      	cmp	r3, #0
 800429e:	d005      	beq.n	80042ac <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80042a0:	4b43      	ldr	r3, [pc, #268]	@ (80043b0 <HAL_RCC_ClockConfig+0x264>)
 80042a2:	689b      	ldr	r3, [r3, #8]
 80042a4:	4a42      	ldr	r2, [pc, #264]	@ (80043b0 <HAL_RCC_ClockConfig+0x264>)
 80042a6:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80042aa:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	f003 0308 	and.w	r3, r3, #8
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	d007      	beq.n	80042c8 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 80042b8:	4b3d      	ldr	r3, [pc, #244]	@ (80043b0 <HAL_RCC_ClockConfig+0x264>)
 80042ba:	689b      	ldr	r3, [r3, #8]
 80042bc:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80042c0:	4a3b      	ldr	r2, [pc, #236]	@ (80043b0 <HAL_RCC_ClockConfig+0x264>)
 80042c2:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80042c6:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80042c8:	4b39      	ldr	r3, [pc, #228]	@ (80043b0 <HAL_RCC_ClockConfig+0x264>)
 80042ca:	689b      	ldr	r3, [r3, #8]
 80042cc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	689b      	ldr	r3, [r3, #8]
 80042d4:	4936      	ldr	r1, [pc, #216]	@ (80043b0 <HAL_RCC_ClockConfig+0x264>)
 80042d6:	4313      	orrs	r3, r2
 80042d8:	608b      	str	r3, [r1, #8]
 80042da:	e008      	b.n	80042ee <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 80042dc:	697b      	ldr	r3, [r7, #20]
 80042de:	2b80      	cmp	r3, #128	@ 0x80
 80042e0:	d105      	bne.n	80042ee <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80042e2:	4b33      	ldr	r3, [pc, #204]	@ (80043b0 <HAL_RCC_ClockConfig+0x264>)
 80042e4:	689b      	ldr	r3, [r3, #8]
 80042e6:	4a32      	ldr	r2, [pc, #200]	@ (80043b0 <HAL_RCC_ClockConfig+0x264>)
 80042e8:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80042ec:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80042ee:	4b2f      	ldr	r3, [pc, #188]	@ (80043ac <HAL_RCC_ClockConfig+0x260>)
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	f003 030f 	and.w	r3, r3, #15
 80042f6:	683a      	ldr	r2, [r7, #0]
 80042f8:	429a      	cmp	r2, r3
 80042fa:	d21d      	bcs.n	8004338 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80042fc:	4b2b      	ldr	r3, [pc, #172]	@ (80043ac <HAL_RCC_ClockConfig+0x260>)
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	f023 020f 	bic.w	r2, r3, #15
 8004304:	4929      	ldr	r1, [pc, #164]	@ (80043ac <HAL_RCC_ClockConfig+0x260>)
 8004306:	683b      	ldr	r3, [r7, #0]
 8004308:	4313      	orrs	r3, r2
 800430a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800430c:	f7fe f978 	bl	8002600 <HAL_GetTick>
 8004310:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004312:	e00a      	b.n	800432a <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004314:	f7fe f974 	bl	8002600 <HAL_GetTick>
 8004318:	4602      	mov	r2, r0
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	1ad3      	subs	r3, r2, r3
 800431e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004322:	4293      	cmp	r3, r2
 8004324:	d901      	bls.n	800432a <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8004326:	2303      	movs	r3, #3
 8004328:	e03b      	b.n	80043a2 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800432a:	4b20      	ldr	r3, [pc, #128]	@ (80043ac <HAL_RCC_ClockConfig+0x260>)
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	f003 030f 	and.w	r3, r3, #15
 8004332:	683a      	ldr	r2, [r7, #0]
 8004334:	429a      	cmp	r2, r3
 8004336:	d1ed      	bne.n	8004314 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	f003 0304 	and.w	r3, r3, #4
 8004340:	2b00      	cmp	r3, #0
 8004342:	d008      	beq.n	8004356 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004344:	4b1a      	ldr	r3, [pc, #104]	@ (80043b0 <HAL_RCC_ClockConfig+0x264>)
 8004346:	689b      	ldr	r3, [r3, #8]
 8004348:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	68db      	ldr	r3, [r3, #12]
 8004350:	4917      	ldr	r1, [pc, #92]	@ (80043b0 <HAL_RCC_ClockConfig+0x264>)
 8004352:	4313      	orrs	r3, r2
 8004354:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	f003 0308 	and.w	r3, r3, #8
 800435e:	2b00      	cmp	r3, #0
 8004360:	d009      	beq.n	8004376 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004362:	4b13      	ldr	r3, [pc, #76]	@ (80043b0 <HAL_RCC_ClockConfig+0x264>)
 8004364:	689b      	ldr	r3, [r3, #8]
 8004366:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	691b      	ldr	r3, [r3, #16]
 800436e:	00db      	lsls	r3, r3, #3
 8004370:	490f      	ldr	r1, [pc, #60]	@ (80043b0 <HAL_RCC_ClockConfig+0x264>)
 8004372:	4313      	orrs	r3, r2
 8004374:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004376:	f000 f825 	bl	80043c4 <HAL_RCC_GetSysClockFreq>
 800437a:	4602      	mov	r2, r0
 800437c:	4b0c      	ldr	r3, [pc, #48]	@ (80043b0 <HAL_RCC_ClockConfig+0x264>)
 800437e:	689b      	ldr	r3, [r3, #8]
 8004380:	091b      	lsrs	r3, r3, #4
 8004382:	f003 030f 	and.w	r3, r3, #15
 8004386:	490c      	ldr	r1, [pc, #48]	@ (80043b8 <HAL_RCC_ClockConfig+0x26c>)
 8004388:	5ccb      	ldrb	r3, [r1, r3]
 800438a:	f003 031f 	and.w	r3, r3, #31
 800438e:	fa22 f303 	lsr.w	r3, r2, r3
 8004392:	4a0a      	ldr	r2, [pc, #40]	@ (80043bc <HAL_RCC_ClockConfig+0x270>)
 8004394:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8004396:	4b0a      	ldr	r3, [pc, #40]	@ (80043c0 <HAL_RCC_ClockConfig+0x274>)
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	4618      	mov	r0, r3
 800439c:	f7fe f8e4 	bl	8002568 <HAL_InitTick>
 80043a0:	4603      	mov	r3, r0
}
 80043a2:	4618      	mov	r0, r3
 80043a4:	3718      	adds	r7, #24
 80043a6:	46bd      	mov	sp, r7
 80043a8:	bd80      	pop	{r7, pc}
 80043aa:	bf00      	nop
 80043ac:	40022000 	.word	0x40022000
 80043b0:	40021000 	.word	0x40021000
 80043b4:	04c4b400 	.word	0x04c4b400
 80043b8:	08009060 	.word	0x08009060
 80043bc:	20000008 	.word	0x20000008
 80043c0:	20000020 	.word	0x20000020

080043c4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80043c4:	b480      	push	{r7}
 80043c6:	b087      	sub	sp, #28
 80043c8:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80043ca:	4b2c      	ldr	r3, [pc, #176]	@ (800447c <HAL_RCC_GetSysClockFreq+0xb8>)
 80043cc:	689b      	ldr	r3, [r3, #8]
 80043ce:	f003 030c 	and.w	r3, r3, #12
 80043d2:	2b04      	cmp	r3, #4
 80043d4:	d102      	bne.n	80043dc <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80043d6:	4b2a      	ldr	r3, [pc, #168]	@ (8004480 <HAL_RCC_GetSysClockFreq+0xbc>)
 80043d8:	613b      	str	r3, [r7, #16]
 80043da:	e047      	b.n	800446c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80043dc:	4b27      	ldr	r3, [pc, #156]	@ (800447c <HAL_RCC_GetSysClockFreq+0xb8>)
 80043de:	689b      	ldr	r3, [r3, #8]
 80043e0:	f003 030c 	and.w	r3, r3, #12
 80043e4:	2b08      	cmp	r3, #8
 80043e6:	d102      	bne.n	80043ee <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80043e8:	4b26      	ldr	r3, [pc, #152]	@ (8004484 <HAL_RCC_GetSysClockFreq+0xc0>)
 80043ea:	613b      	str	r3, [r7, #16]
 80043ec:	e03e      	b.n	800446c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 80043ee:	4b23      	ldr	r3, [pc, #140]	@ (800447c <HAL_RCC_GetSysClockFreq+0xb8>)
 80043f0:	689b      	ldr	r3, [r3, #8]
 80043f2:	f003 030c 	and.w	r3, r3, #12
 80043f6:	2b0c      	cmp	r3, #12
 80043f8:	d136      	bne.n	8004468 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80043fa:	4b20      	ldr	r3, [pc, #128]	@ (800447c <HAL_RCC_GetSysClockFreq+0xb8>)
 80043fc:	68db      	ldr	r3, [r3, #12]
 80043fe:	f003 0303 	and.w	r3, r3, #3
 8004402:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004404:	4b1d      	ldr	r3, [pc, #116]	@ (800447c <HAL_RCC_GetSysClockFreq+0xb8>)
 8004406:	68db      	ldr	r3, [r3, #12]
 8004408:	091b      	lsrs	r3, r3, #4
 800440a:	f003 030f 	and.w	r3, r3, #15
 800440e:	3301      	adds	r3, #1
 8004410:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	2b03      	cmp	r3, #3
 8004416:	d10c      	bne.n	8004432 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004418:	4a1a      	ldr	r2, [pc, #104]	@ (8004484 <HAL_RCC_GetSysClockFreq+0xc0>)
 800441a:	68bb      	ldr	r3, [r7, #8]
 800441c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004420:	4a16      	ldr	r2, [pc, #88]	@ (800447c <HAL_RCC_GetSysClockFreq+0xb8>)
 8004422:	68d2      	ldr	r2, [r2, #12]
 8004424:	0a12      	lsrs	r2, r2, #8
 8004426:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800442a:	fb02 f303 	mul.w	r3, r2, r3
 800442e:	617b      	str	r3, [r7, #20]
      break;
 8004430:	e00c      	b.n	800444c <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004432:	4a13      	ldr	r2, [pc, #76]	@ (8004480 <HAL_RCC_GetSysClockFreq+0xbc>)
 8004434:	68bb      	ldr	r3, [r7, #8]
 8004436:	fbb2 f3f3 	udiv	r3, r2, r3
 800443a:	4a10      	ldr	r2, [pc, #64]	@ (800447c <HAL_RCC_GetSysClockFreq+0xb8>)
 800443c:	68d2      	ldr	r2, [r2, #12]
 800443e:	0a12      	lsrs	r2, r2, #8
 8004440:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8004444:	fb02 f303 	mul.w	r3, r2, r3
 8004448:	617b      	str	r3, [r7, #20]
      break;
 800444a:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800444c:	4b0b      	ldr	r3, [pc, #44]	@ (800447c <HAL_RCC_GetSysClockFreq+0xb8>)
 800444e:	68db      	ldr	r3, [r3, #12]
 8004450:	0e5b      	lsrs	r3, r3, #25
 8004452:	f003 0303 	and.w	r3, r3, #3
 8004456:	3301      	adds	r3, #1
 8004458:	005b      	lsls	r3, r3, #1
 800445a:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 800445c:	697a      	ldr	r2, [r7, #20]
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	fbb2 f3f3 	udiv	r3, r2, r3
 8004464:	613b      	str	r3, [r7, #16]
 8004466:	e001      	b.n	800446c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8004468:	2300      	movs	r3, #0
 800446a:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 800446c:	693b      	ldr	r3, [r7, #16]
}
 800446e:	4618      	mov	r0, r3
 8004470:	371c      	adds	r7, #28
 8004472:	46bd      	mov	sp, r7
 8004474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004478:	4770      	bx	lr
 800447a:	bf00      	nop
 800447c:	40021000 	.word	0x40021000
 8004480:	00f42400 	.word	0x00f42400
 8004484:	016e3600 	.word	0x016e3600

08004488 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004488:	b480      	push	{r7}
 800448a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800448c:	4b03      	ldr	r3, [pc, #12]	@ (800449c <HAL_RCC_GetHCLKFreq+0x14>)
 800448e:	681b      	ldr	r3, [r3, #0]
}
 8004490:	4618      	mov	r0, r3
 8004492:	46bd      	mov	sp, r7
 8004494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004498:	4770      	bx	lr
 800449a:	bf00      	nop
 800449c:	20000008 	.word	0x20000008

080044a0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80044a0:	b580      	push	{r7, lr}
 80044a2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80044a4:	f7ff fff0 	bl	8004488 <HAL_RCC_GetHCLKFreq>
 80044a8:	4602      	mov	r2, r0
 80044aa:	4b06      	ldr	r3, [pc, #24]	@ (80044c4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80044ac:	689b      	ldr	r3, [r3, #8]
 80044ae:	0a1b      	lsrs	r3, r3, #8
 80044b0:	f003 0307 	and.w	r3, r3, #7
 80044b4:	4904      	ldr	r1, [pc, #16]	@ (80044c8 <HAL_RCC_GetPCLK1Freq+0x28>)
 80044b6:	5ccb      	ldrb	r3, [r1, r3]
 80044b8:	f003 031f 	and.w	r3, r3, #31
 80044bc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80044c0:	4618      	mov	r0, r3
 80044c2:	bd80      	pop	{r7, pc}
 80044c4:	40021000 	.word	0x40021000
 80044c8:	08009070 	.word	0x08009070

080044cc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80044cc:	b580      	push	{r7, lr}
 80044ce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80044d0:	f7ff ffda 	bl	8004488 <HAL_RCC_GetHCLKFreq>
 80044d4:	4602      	mov	r2, r0
 80044d6:	4b06      	ldr	r3, [pc, #24]	@ (80044f0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80044d8:	689b      	ldr	r3, [r3, #8]
 80044da:	0adb      	lsrs	r3, r3, #11
 80044dc:	f003 0307 	and.w	r3, r3, #7
 80044e0:	4904      	ldr	r1, [pc, #16]	@ (80044f4 <HAL_RCC_GetPCLK2Freq+0x28>)
 80044e2:	5ccb      	ldrb	r3, [r1, r3]
 80044e4:	f003 031f 	and.w	r3, r3, #31
 80044e8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80044ec:	4618      	mov	r0, r3
 80044ee:	bd80      	pop	{r7, pc}
 80044f0:	40021000 	.word	0x40021000
 80044f4:	08009070 	.word	0x08009070

080044f8 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 80044f8:	b480      	push	{r7}
 80044fa:	b087      	sub	sp, #28
 80044fc:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80044fe:	4b1e      	ldr	r3, [pc, #120]	@ (8004578 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004500:	68db      	ldr	r3, [r3, #12]
 8004502:	f003 0303 	and.w	r3, r3, #3
 8004506:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004508:	4b1b      	ldr	r3, [pc, #108]	@ (8004578 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800450a:	68db      	ldr	r3, [r3, #12]
 800450c:	091b      	lsrs	r3, r3, #4
 800450e:	f003 030f 	and.w	r3, r3, #15
 8004512:	3301      	adds	r3, #1
 8004514:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8004516:	693b      	ldr	r3, [r7, #16]
 8004518:	2b03      	cmp	r3, #3
 800451a:	d10c      	bne.n	8004536 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800451c:	4a17      	ldr	r2, [pc, #92]	@ (800457c <RCC_GetSysClockFreqFromPLLSource+0x84>)
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	fbb2 f3f3 	udiv	r3, r2, r3
 8004524:	4a14      	ldr	r2, [pc, #80]	@ (8004578 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004526:	68d2      	ldr	r2, [r2, #12]
 8004528:	0a12      	lsrs	r2, r2, #8
 800452a:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800452e:	fb02 f303 	mul.w	r3, r2, r3
 8004532:	617b      	str	r3, [r7, #20]
    break;
 8004534:	e00c      	b.n	8004550 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004536:	4a12      	ldr	r2, [pc, #72]	@ (8004580 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	fbb2 f3f3 	udiv	r3, r2, r3
 800453e:	4a0e      	ldr	r2, [pc, #56]	@ (8004578 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004540:	68d2      	ldr	r2, [r2, #12]
 8004542:	0a12      	lsrs	r2, r2, #8
 8004544:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8004548:	fb02 f303 	mul.w	r3, r2, r3
 800454c:	617b      	str	r3, [r7, #20]
    break;
 800454e:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004550:	4b09      	ldr	r3, [pc, #36]	@ (8004578 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004552:	68db      	ldr	r3, [r3, #12]
 8004554:	0e5b      	lsrs	r3, r3, #25
 8004556:	f003 0303 	and.w	r3, r3, #3
 800455a:	3301      	adds	r3, #1
 800455c:	005b      	lsls	r3, r3, #1
 800455e:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8004560:	697a      	ldr	r2, [r7, #20]
 8004562:	68bb      	ldr	r3, [r7, #8]
 8004564:	fbb2 f3f3 	udiv	r3, r2, r3
 8004568:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 800456a:	687b      	ldr	r3, [r7, #4]
}
 800456c:	4618      	mov	r0, r3
 800456e:	371c      	adds	r7, #28
 8004570:	46bd      	mov	sp, r7
 8004572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004576:	4770      	bx	lr
 8004578:	40021000 	.word	0x40021000
 800457c:	016e3600 	.word	0x016e3600
 8004580:	00f42400 	.word	0x00f42400

08004584 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004584:	b580      	push	{r7, lr}
 8004586:	b086      	sub	sp, #24
 8004588:	af00      	add	r7, sp, #0
 800458a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800458c:	2300      	movs	r3, #0
 800458e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004590:	2300      	movs	r3, #0
 8004592:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800459c:	2b00      	cmp	r3, #0
 800459e:	f000 8098 	beq.w	80046d2 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80045a2:	2300      	movs	r3, #0
 80045a4:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80045a6:	4b43      	ldr	r3, [pc, #268]	@ (80046b4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80045a8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80045aa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d10d      	bne.n	80045ce <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80045b2:	4b40      	ldr	r3, [pc, #256]	@ (80046b4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80045b4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80045b6:	4a3f      	ldr	r2, [pc, #252]	@ (80046b4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80045b8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80045bc:	6593      	str	r3, [r2, #88]	@ 0x58
 80045be:	4b3d      	ldr	r3, [pc, #244]	@ (80046b4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80045c0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80045c2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80045c6:	60bb      	str	r3, [r7, #8]
 80045c8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80045ca:	2301      	movs	r3, #1
 80045cc:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80045ce:	4b3a      	ldr	r3, [pc, #232]	@ (80046b8 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	4a39      	ldr	r2, [pc, #228]	@ (80046b8 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80045d4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80045d8:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80045da:	f7fe f811 	bl	8002600 <HAL_GetTick>
 80045de:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80045e0:	e009      	b.n	80045f6 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80045e2:	f7fe f80d 	bl	8002600 <HAL_GetTick>
 80045e6:	4602      	mov	r2, r0
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	1ad3      	subs	r3, r2, r3
 80045ec:	2b02      	cmp	r3, #2
 80045ee:	d902      	bls.n	80045f6 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 80045f0:	2303      	movs	r3, #3
 80045f2:	74fb      	strb	r3, [r7, #19]
        break;
 80045f4:	e005      	b.n	8004602 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80045f6:	4b30      	ldr	r3, [pc, #192]	@ (80046b8 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80045fe:	2b00      	cmp	r3, #0
 8004600:	d0ef      	beq.n	80045e2 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8004602:	7cfb      	ldrb	r3, [r7, #19]
 8004604:	2b00      	cmp	r3, #0
 8004606:	d159      	bne.n	80046bc <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004608:	4b2a      	ldr	r3, [pc, #168]	@ (80046b4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800460a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800460e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004612:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004614:	697b      	ldr	r3, [r7, #20]
 8004616:	2b00      	cmp	r3, #0
 8004618:	d01e      	beq.n	8004658 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800461e:	697a      	ldr	r2, [r7, #20]
 8004620:	429a      	cmp	r2, r3
 8004622:	d019      	beq.n	8004658 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004624:	4b23      	ldr	r3, [pc, #140]	@ (80046b4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004626:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800462a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800462e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004630:	4b20      	ldr	r3, [pc, #128]	@ (80046b4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004632:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004636:	4a1f      	ldr	r2, [pc, #124]	@ (80046b4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004638:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800463c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004640:	4b1c      	ldr	r3, [pc, #112]	@ (80046b4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004642:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004646:	4a1b      	ldr	r2, [pc, #108]	@ (80046b4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004648:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800464c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004650:	4a18      	ldr	r2, [pc, #96]	@ (80046b4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004652:	697b      	ldr	r3, [r7, #20]
 8004654:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004658:	697b      	ldr	r3, [r7, #20]
 800465a:	f003 0301 	and.w	r3, r3, #1
 800465e:	2b00      	cmp	r3, #0
 8004660:	d016      	beq.n	8004690 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004662:	f7fd ffcd 	bl	8002600 <HAL_GetTick>
 8004666:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004668:	e00b      	b.n	8004682 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800466a:	f7fd ffc9 	bl	8002600 <HAL_GetTick>
 800466e:	4602      	mov	r2, r0
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	1ad3      	subs	r3, r2, r3
 8004674:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004678:	4293      	cmp	r3, r2
 800467a:	d902      	bls.n	8004682 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 800467c:	2303      	movs	r3, #3
 800467e:	74fb      	strb	r3, [r7, #19]
            break;
 8004680:	e006      	b.n	8004690 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004682:	4b0c      	ldr	r3, [pc, #48]	@ (80046b4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004684:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004688:	f003 0302 	and.w	r3, r3, #2
 800468c:	2b00      	cmp	r3, #0
 800468e:	d0ec      	beq.n	800466a <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8004690:	7cfb      	ldrb	r3, [r7, #19]
 8004692:	2b00      	cmp	r3, #0
 8004694:	d10b      	bne.n	80046ae <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004696:	4b07      	ldr	r3, [pc, #28]	@ (80046b4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004698:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800469c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80046a4:	4903      	ldr	r1, [pc, #12]	@ (80046b4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80046a6:	4313      	orrs	r3, r2
 80046a8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 80046ac:	e008      	b.n	80046c0 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80046ae:	7cfb      	ldrb	r3, [r7, #19]
 80046b0:	74bb      	strb	r3, [r7, #18]
 80046b2:	e005      	b.n	80046c0 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 80046b4:	40021000 	.word	0x40021000
 80046b8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80046bc:	7cfb      	ldrb	r3, [r7, #19]
 80046be:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80046c0:	7c7b      	ldrb	r3, [r7, #17]
 80046c2:	2b01      	cmp	r3, #1
 80046c4:	d105      	bne.n	80046d2 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80046c6:	4ba7      	ldr	r3, [pc, #668]	@ (8004964 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80046c8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80046ca:	4aa6      	ldr	r2, [pc, #664]	@ (8004964 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80046cc:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80046d0:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	f003 0301 	and.w	r3, r3, #1
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d00a      	beq.n	80046f4 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80046de:	4ba1      	ldr	r3, [pc, #644]	@ (8004964 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80046e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80046e4:	f023 0203 	bic.w	r2, r3, #3
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	685b      	ldr	r3, [r3, #4]
 80046ec:	499d      	ldr	r1, [pc, #628]	@ (8004964 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80046ee:	4313      	orrs	r3, r2
 80046f0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	f003 0302 	and.w	r3, r3, #2
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	d00a      	beq.n	8004716 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004700:	4b98      	ldr	r3, [pc, #608]	@ (8004964 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004702:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004706:	f023 020c 	bic.w	r2, r3, #12
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	689b      	ldr	r3, [r3, #8]
 800470e:	4995      	ldr	r1, [pc, #596]	@ (8004964 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004710:	4313      	orrs	r3, r2
 8004712:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	f003 0304 	and.w	r3, r3, #4
 800471e:	2b00      	cmp	r3, #0
 8004720:	d00a      	beq.n	8004738 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004722:	4b90      	ldr	r3, [pc, #576]	@ (8004964 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004724:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004728:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	68db      	ldr	r3, [r3, #12]
 8004730:	498c      	ldr	r1, [pc, #560]	@ (8004964 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004732:	4313      	orrs	r3, r2
 8004734:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	f003 0308 	and.w	r3, r3, #8
 8004740:	2b00      	cmp	r3, #0
 8004742:	d00a      	beq.n	800475a <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004744:	4b87      	ldr	r3, [pc, #540]	@ (8004964 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004746:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800474a:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	691b      	ldr	r3, [r3, #16]
 8004752:	4984      	ldr	r1, [pc, #528]	@ (8004964 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004754:	4313      	orrs	r3, r2
 8004756:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	f003 0310 	and.w	r3, r3, #16
 8004762:	2b00      	cmp	r3, #0
 8004764:	d00a      	beq.n	800477c <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004766:	4b7f      	ldr	r3, [pc, #508]	@ (8004964 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004768:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800476c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	695b      	ldr	r3, [r3, #20]
 8004774:	497b      	ldr	r1, [pc, #492]	@ (8004964 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004776:	4313      	orrs	r3, r2
 8004778:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	f003 0320 	and.w	r3, r3, #32
 8004784:	2b00      	cmp	r3, #0
 8004786:	d00a      	beq.n	800479e <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004788:	4b76      	ldr	r3, [pc, #472]	@ (8004964 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800478a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800478e:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	699b      	ldr	r3, [r3, #24]
 8004796:	4973      	ldr	r1, [pc, #460]	@ (8004964 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004798:	4313      	orrs	r3, r2
 800479a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d00a      	beq.n	80047c0 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80047aa:	4b6e      	ldr	r3, [pc, #440]	@ (8004964 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80047ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80047b0:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	69db      	ldr	r3, [r3, #28]
 80047b8:	496a      	ldr	r1, [pc, #424]	@ (8004964 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80047ba:	4313      	orrs	r3, r2
 80047bc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	d00a      	beq.n	80047e2 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80047cc:	4b65      	ldr	r3, [pc, #404]	@ (8004964 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80047ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80047d2:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	6a1b      	ldr	r3, [r3, #32]
 80047da:	4962      	ldr	r1, [pc, #392]	@ (8004964 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80047dc:	4313      	orrs	r3, r2
 80047de:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	d00a      	beq.n	8004804 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80047ee:	4b5d      	ldr	r3, [pc, #372]	@ (8004964 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80047f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80047f4:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80047fc:	4959      	ldr	r1, [pc, #356]	@ (8004964 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80047fe:	4313      	orrs	r3, r2
 8004800:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* I2C3 */
#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800480c:	2b00      	cmp	r3, #0
 800480e:	d00a      	beq.n	8004826 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004810:	4b54      	ldr	r3, [pc, #336]	@ (8004964 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004812:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004816:	f023 0203 	bic.w	r2, r3, #3
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800481e:	4951      	ldr	r1, [pc, #324]	@ (8004964 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004820:	4313      	orrs	r3, r2
 8004822:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800482e:	2b00      	cmp	r3, #0
 8004830:	d00a      	beq.n	8004848 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004832:	4b4c      	ldr	r3, [pc, #304]	@ (8004964 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004834:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004838:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004840:	4948      	ldr	r1, [pc, #288]	@ (8004964 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004842:	4313      	orrs	r3, r2
 8004844:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004850:	2b00      	cmp	r3, #0
 8004852:	d015      	beq.n	8004880 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004854:	4b43      	ldr	r3, [pc, #268]	@ (8004964 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004856:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800485a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004862:	4940      	ldr	r1, [pc, #256]	@ (8004964 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004864:	4313      	orrs	r3, r2
 8004866:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800486e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004872:	d105      	bne.n	8004880 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004874:	4b3b      	ldr	r3, [pc, #236]	@ (8004964 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004876:	68db      	ldr	r3, [r3, #12]
 8004878:	4a3a      	ldr	r2, [pc, #232]	@ (8004964 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800487a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800487e:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004888:	2b00      	cmp	r3, #0
 800488a:	d015      	beq.n	80048b8 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800488c:	4b35      	ldr	r3, [pc, #212]	@ (8004964 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800488e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004892:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800489a:	4932      	ldr	r1, [pc, #200]	@ (8004964 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800489c:	4313      	orrs	r3, r2
 800489e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80048a6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80048aa:	d105      	bne.n	80048b8 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80048ac:	4b2d      	ldr	r3, [pc, #180]	@ (8004964 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80048ae:	68db      	ldr	r3, [r3, #12]
 80048b0:	4a2c      	ldr	r2, [pc, #176]	@ (8004964 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80048b2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80048b6:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80048c0:	2b00      	cmp	r3, #0
 80048c2:	d015      	beq.n	80048f0 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80048c4:	4b27      	ldr	r3, [pc, #156]	@ (8004964 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80048c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80048ca:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80048d2:	4924      	ldr	r1, [pc, #144]	@ (8004964 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80048d4:	4313      	orrs	r3, r2
 80048d6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80048de:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80048e2:	d105      	bne.n	80048f0 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80048e4:	4b1f      	ldr	r3, [pc, #124]	@ (8004964 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80048e6:	68db      	ldr	r3, [r3, #12]
 80048e8:	4a1e      	ldr	r2, [pc, #120]	@ (8004964 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80048ea:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80048ee:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80048f8:	2b00      	cmp	r3, #0
 80048fa:	d015      	beq.n	8004928 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80048fc:	4b19      	ldr	r3, [pc, #100]	@ (8004964 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80048fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004902:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800490a:	4916      	ldr	r1, [pc, #88]	@ (8004964 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800490c:	4313      	orrs	r3, r2
 800490e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004916:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800491a:	d105      	bne.n	8004928 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800491c:	4b11      	ldr	r3, [pc, #68]	@ (8004964 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800491e:	68db      	ldr	r3, [r3, #12]
 8004920:	4a10      	ldr	r2, [pc, #64]	@ (8004964 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004922:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004926:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004930:	2b00      	cmp	r3, #0
 8004932:	d019      	beq.n	8004968 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004934:	4b0b      	ldr	r3, [pc, #44]	@ (8004964 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004936:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800493a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004942:	4908      	ldr	r1, [pc, #32]	@ (8004964 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004944:	4313      	orrs	r3, r2
 8004946:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800494e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004952:	d109      	bne.n	8004968 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004954:	4b03      	ldr	r3, [pc, #12]	@ (8004964 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004956:	68db      	ldr	r3, [r3, #12]
 8004958:	4a02      	ldr	r2, [pc, #8]	@ (8004964 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800495a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800495e:	60d3      	str	r3, [r2, #12]
 8004960:	e002      	b.n	8004968 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8004962:	bf00      	nop
 8004964:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004970:	2b00      	cmp	r3, #0
 8004972:	d015      	beq.n	80049a0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8004974:	4b29      	ldr	r3, [pc, #164]	@ (8004a1c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004976:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800497a:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004982:	4926      	ldr	r1, [pc, #152]	@ (8004a1c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004984:	4313      	orrs	r3, r2
 8004986:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800498e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004992:	d105      	bne.n	80049a0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8004994:	4b21      	ldr	r3, [pc, #132]	@ (8004a1c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004996:	68db      	ldr	r3, [r3, #12]
 8004998:	4a20      	ldr	r2, [pc, #128]	@ (8004a1c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800499a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800499e:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	d015      	beq.n	80049d8 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 80049ac:	4b1b      	ldr	r3, [pc, #108]	@ (8004a1c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80049ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80049b2:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80049ba:	4918      	ldr	r1, [pc, #96]	@ (8004a1c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80049bc:	4313      	orrs	r3, r2
 80049be:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80049c6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80049ca:	d105      	bne.n	80049d8 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80049cc:	4b13      	ldr	r3, [pc, #76]	@ (8004a1c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80049ce:	68db      	ldr	r3, [r3, #12]
 80049d0:	4a12      	ldr	r2, [pc, #72]	@ (8004a1c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80049d2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80049d6:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	d015      	beq.n	8004a10 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80049e4:	4b0d      	ldr	r3, [pc, #52]	@ (8004a1c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80049e6:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80049ea:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80049f2:	490a      	ldr	r1, [pc, #40]	@ (8004a1c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80049f4:	4313      	orrs	r3, r2
 80049f6:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80049fe:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004a02:	d105      	bne.n	8004a10 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004a04:	4b05      	ldr	r3, [pc, #20]	@ (8004a1c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004a06:	68db      	ldr	r3, [r3, #12]
 8004a08:	4a04      	ldr	r2, [pc, #16]	@ (8004a1c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004a0a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004a0e:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8004a10:	7cbb      	ldrb	r3, [r7, #18]
}
 8004a12:	4618      	mov	r0, r3
 8004a14:	3718      	adds	r7, #24
 8004a16:	46bd      	mov	sp, r7
 8004a18:	bd80      	pop	{r7, pc}
 8004a1a:	bf00      	nop
 8004a1c:	40021000 	.word	0x40021000

08004a20 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004a20:	b580      	push	{r7, lr}
 8004a22:	b082      	sub	sp, #8
 8004a24:	af00      	add	r7, sp, #0
 8004a26:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d101      	bne.n	8004a32 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004a2e:	2301      	movs	r3, #1
 8004a30:	e042      	b.n	8004ab8 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	d106      	bne.n	8004a4a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	2200      	movs	r2, #0
 8004a40:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004a44:	6878      	ldr	r0, [r7, #4]
 8004a46:	f7fd f9eb 	bl	8001e20 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	2224      	movs	r2, #36	@ 0x24
 8004a4e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	681a      	ldr	r2, [r3, #0]
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	f022 0201 	bic.w	r2, r2, #1
 8004a60:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d002      	beq.n	8004a70 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8004a6a:	6878      	ldr	r0, [r7, #4]
 8004a6c:	f000 ffdc 	bl	8005a28 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004a70:	6878      	ldr	r0, [r7, #4]
 8004a72:	f000 fcdd 	bl	8005430 <UART_SetConfig>
 8004a76:	4603      	mov	r3, r0
 8004a78:	2b01      	cmp	r3, #1
 8004a7a:	d101      	bne.n	8004a80 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8004a7c:	2301      	movs	r3, #1
 8004a7e:	e01b      	b.n	8004ab8 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	685a      	ldr	r2, [r3, #4]
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004a8e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	689a      	ldr	r2, [r3, #8]
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004a9e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	681a      	ldr	r2, [r3, #0]
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	f042 0201 	orr.w	r2, r2, #1
 8004aae:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004ab0:	6878      	ldr	r0, [r7, #4]
 8004ab2:	f001 f85b 	bl	8005b6c <UART_CheckIdleState>
 8004ab6:	4603      	mov	r3, r0
}
 8004ab8:	4618      	mov	r0, r3
 8004aba:	3708      	adds	r7, #8
 8004abc:	46bd      	mov	sp, r7
 8004abe:	bd80      	pop	{r7, pc}

08004ac0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004ac0:	b580      	push	{r7, lr}
 8004ac2:	b08a      	sub	sp, #40	@ 0x28
 8004ac4:	af02      	add	r7, sp, #8
 8004ac6:	60f8      	str	r0, [r7, #12]
 8004ac8:	60b9      	str	r1, [r7, #8]
 8004aca:	603b      	str	r3, [r7, #0]
 8004acc:	4613      	mov	r3, r2
 8004ace:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004ad6:	2b20      	cmp	r3, #32
 8004ad8:	d17b      	bne.n	8004bd2 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8004ada:	68bb      	ldr	r3, [r7, #8]
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	d002      	beq.n	8004ae6 <HAL_UART_Transmit+0x26>
 8004ae0:	88fb      	ldrh	r3, [r7, #6]
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	d101      	bne.n	8004aea <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8004ae6:	2301      	movs	r3, #1
 8004ae8:	e074      	b.n	8004bd4 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	2200      	movs	r2, #0
 8004aee:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	2221      	movs	r2, #33	@ 0x21
 8004af6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004afa:	f7fd fd81 	bl	8002600 <HAL_GetTick>
 8004afe:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	88fa      	ldrh	r2, [r7, #6]
 8004b04:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	88fa      	ldrh	r2, [r7, #6]
 8004b0c:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	689b      	ldr	r3, [r3, #8]
 8004b14:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004b18:	d108      	bne.n	8004b2c <HAL_UART_Transmit+0x6c>
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	691b      	ldr	r3, [r3, #16]
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	d104      	bne.n	8004b2c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8004b22:	2300      	movs	r3, #0
 8004b24:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004b26:	68bb      	ldr	r3, [r7, #8]
 8004b28:	61bb      	str	r3, [r7, #24]
 8004b2a:	e003      	b.n	8004b34 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8004b2c:	68bb      	ldr	r3, [r7, #8]
 8004b2e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004b30:	2300      	movs	r3, #0
 8004b32:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004b34:	e030      	b.n	8004b98 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004b36:	683b      	ldr	r3, [r7, #0]
 8004b38:	9300      	str	r3, [sp, #0]
 8004b3a:	697b      	ldr	r3, [r7, #20]
 8004b3c:	2200      	movs	r2, #0
 8004b3e:	2180      	movs	r1, #128	@ 0x80
 8004b40:	68f8      	ldr	r0, [r7, #12]
 8004b42:	f001 f8bd 	bl	8005cc0 <UART_WaitOnFlagUntilTimeout>
 8004b46:	4603      	mov	r3, r0
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	d005      	beq.n	8004b58 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	2220      	movs	r2, #32
 8004b50:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8004b54:	2303      	movs	r3, #3
 8004b56:	e03d      	b.n	8004bd4 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8004b58:	69fb      	ldr	r3, [r7, #28]
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	d10b      	bne.n	8004b76 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004b5e:	69bb      	ldr	r3, [r7, #24]
 8004b60:	881b      	ldrh	r3, [r3, #0]
 8004b62:	461a      	mov	r2, r3
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004b6c:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8004b6e:	69bb      	ldr	r3, [r7, #24]
 8004b70:	3302      	adds	r3, #2
 8004b72:	61bb      	str	r3, [r7, #24]
 8004b74:	e007      	b.n	8004b86 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004b76:	69fb      	ldr	r3, [r7, #28]
 8004b78:	781a      	ldrb	r2, [r3, #0]
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8004b80:	69fb      	ldr	r3, [r7, #28]
 8004b82:	3301      	adds	r3, #1
 8004b84:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8004b8c:	b29b      	uxth	r3, r3
 8004b8e:	3b01      	subs	r3, #1
 8004b90:	b29a      	uxth	r2, r3
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8004b9e:	b29b      	uxth	r3, r3
 8004ba0:	2b00      	cmp	r3, #0
 8004ba2:	d1c8      	bne.n	8004b36 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004ba4:	683b      	ldr	r3, [r7, #0]
 8004ba6:	9300      	str	r3, [sp, #0]
 8004ba8:	697b      	ldr	r3, [r7, #20]
 8004baa:	2200      	movs	r2, #0
 8004bac:	2140      	movs	r1, #64	@ 0x40
 8004bae:	68f8      	ldr	r0, [r7, #12]
 8004bb0:	f001 f886 	bl	8005cc0 <UART_WaitOnFlagUntilTimeout>
 8004bb4:	4603      	mov	r3, r0
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	d005      	beq.n	8004bc6 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	2220      	movs	r2, #32
 8004bbe:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 8004bc2:	2303      	movs	r3, #3
 8004bc4:	e006      	b.n	8004bd4 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	2220      	movs	r2, #32
 8004bca:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8004bce:	2300      	movs	r3, #0
 8004bd0:	e000      	b.n	8004bd4 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8004bd2:	2302      	movs	r3, #2
  }
}
 8004bd4:	4618      	mov	r0, r3
 8004bd6:	3720      	adds	r7, #32
 8004bd8:	46bd      	mov	sp, r7
 8004bda:	bd80      	pop	{r7, pc}

08004bdc <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004bdc:	b580      	push	{r7, lr}
 8004bde:	b08a      	sub	sp, #40	@ 0x28
 8004be0:	af02      	add	r7, sp, #8
 8004be2:	60f8      	str	r0, [r7, #12]
 8004be4:	60b9      	str	r1, [r7, #8]
 8004be6:	603b      	str	r3, [r7, #0]
 8004be8:	4613      	mov	r3, r2
 8004bea:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004bf2:	2b20      	cmp	r3, #32
 8004bf4:	f040 80b5 	bne.w	8004d62 <HAL_UART_Receive+0x186>
  {
    if ((pData == NULL) || (Size == 0U))
 8004bf8:	68bb      	ldr	r3, [r7, #8]
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	d002      	beq.n	8004c04 <HAL_UART_Receive+0x28>
 8004bfe:	88fb      	ldrh	r3, [r7, #6]
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	d101      	bne.n	8004c08 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 8004c04:	2301      	movs	r3, #1
 8004c06:	e0ad      	b.n	8004d64 <HAL_UART_Receive+0x188>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	2200      	movs	r2, #0
 8004c0c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	2222      	movs	r2, #34	@ 0x22
 8004c14:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	2200      	movs	r2, #0
 8004c1c:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004c1e:	f7fd fcef 	bl	8002600 <HAL_GetTick>
 8004c22:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	88fa      	ldrh	r2, [r7, #6]
 8004c28:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
    huart->RxXferCount = Size;
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	88fa      	ldrh	r2, [r7, #6]
 8004c30:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	689b      	ldr	r3, [r3, #8]
 8004c38:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004c3c:	d10e      	bne.n	8004c5c <HAL_UART_Receive+0x80>
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	691b      	ldr	r3, [r3, #16]
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	d105      	bne.n	8004c52 <HAL_UART_Receive+0x76>
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	f240 12ff 	movw	r2, #511	@ 0x1ff
 8004c4c:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8004c50:	e02d      	b.n	8004cae <HAL_UART_Receive+0xd2>
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	22ff      	movs	r2, #255	@ 0xff
 8004c56:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8004c5a:	e028      	b.n	8004cae <HAL_UART_Receive+0xd2>
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	689b      	ldr	r3, [r3, #8]
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	d10d      	bne.n	8004c80 <HAL_UART_Receive+0xa4>
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	691b      	ldr	r3, [r3, #16]
 8004c68:	2b00      	cmp	r3, #0
 8004c6a:	d104      	bne.n	8004c76 <HAL_UART_Receive+0x9a>
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	22ff      	movs	r2, #255	@ 0xff
 8004c70:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8004c74:	e01b      	b.n	8004cae <HAL_UART_Receive+0xd2>
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	227f      	movs	r2, #127	@ 0x7f
 8004c7a:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8004c7e:	e016      	b.n	8004cae <HAL_UART_Receive+0xd2>
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	689b      	ldr	r3, [r3, #8]
 8004c84:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004c88:	d10d      	bne.n	8004ca6 <HAL_UART_Receive+0xca>
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	691b      	ldr	r3, [r3, #16]
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	d104      	bne.n	8004c9c <HAL_UART_Receive+0xc0>
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	227f      	movs	r2, #127	@ 0x7f
 8004c96:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8004c9a:	e008      	b.n	8004cae <HAL_UART_Receive+0xd2>
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	223f      	movs	r2, #63	@ 0x3f
 8004ca0:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8004ca4:	e003      	b.n	8004cae <HAL_UART_Receive+0xd2>
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	2200      	movs	r2, #0
 8004caa:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
    uhMask = huart->Mask;
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8004cb4:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	689b      	ldr	r3, [r3, #8]
 8004cba:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004cbe:	d108      	bne.n	8004cd2 <HAL_UART_Receive+0xf6>
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	691b      	ldr	r3, [r3, #16]
 8004cc4:	2b00      	cmp	r3, #0
 8004cc6:	d104      	bne.n	8004cd2 <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 8004cc8:	2300      	movs	r3, #0
 8004cca:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8004ccc:	68bb      	ldr	r3, [r7, #8]
 8004cce:	61bb      	str	r3, [r7, #24]
 8004cd0:	e003      	b.n	8004cda <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 8004cd2:	68bb      	ldr	r3, [r7, #8]
 8004cd4:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004cd6:	2300      	movs	r3, #0
 8004cd8:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8004cda:	e036      	b.n	8004d4a <HAL_UART_Receive+0x16e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8004cdc:	683b      	ldr	r3, [r7, #0]
 8004cde:	9300      	str	r3, [sp, #0]
 8004ce0:	697b      	ldr	r3, [r7, #20]
 8004ce2:	2200      	movs	r2, #0
 8004ce4:	2120      	movs	r1, #32
 8004ce6:	68f8      	ldr	r0, [r7, #12]
 8004ce8:	f000 ffea 	bl	8005cc0 <UART_WaitOnFlagUntilTimeout>
 8004cec:	4603      	mov	r3, r0
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	d005      	beq.n	8004cfe <HAL_UART_Receive+0x122>
      {
        huart->RxState = HAL_UART_STATE_READY;
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	2220      	movs	r2, #32
 8004cf6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        return HAL_TIMEOUT;
 8004cfa:	2303      	movs	r3, #3
 8004cfc:	e032      	b.n	8004d64 <HAL_UART_Receive+0x188>
      }
      if (pdata8bits == NULL)
 8004cfe:	69fb      	ldr	r3, [r7, #28]
 8004d00:	2b00      	cmp	r3, #0
 8004d02:	d10c      	bne.n	8004d1e <HAL_UART_Receive+0x142>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d0a:	b29a      	uxth	r2, r3
 8004d0c:	8a7b      	ldrh	r3, [r7, #18]
 8004d0e:	4013      	ands	r3, r2
 8004d10:	b29a      	uxth	r2, r3
 8004d12:	69bb      	ldr	r3, [r7, #24]
 8004d14:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8004d16:	69bb      	ldr	r3, [r7, #24]
 8004d18:	3302      	adds	r3, #2
 8004d1a:	61bb      	str	r3, [r7, #24]
 8004d1c:	e00c      	b.n	8004d38 <HAL_UART_Receive+0x15c>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d24:	b2da      	uxtb	r2, r3
 8004d26:	8a7b      	ldrh	r3, [r7, #18]
 8004d28:	b2db      	uxtb	r3, r3
 8004d2a:	4013      	ands	r3, r2
 8004d2c:	b2da      	uxtb	r2, r3
 8004d2e:	69fb      	ldr	r3, [r7, #28]
 8004d30:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8004d32:	69fb      	ldr	r3, [r7, #28]
 8004d34:	3301      	adds	r3, #1
 8004d36:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8004d3e:	b29b      	uxth	r3, r3
 8004d40:	3b01      	subs	r3, #1
 8004d42:	b29a      	uxth	r2, r3
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    while (huart->RxXferCount > 0U)
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8004d50:	b29b      	uxth	r3, r3
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	d1c2      	bne.n	8004cdc <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	2220      	movs	r2, #32
 8004d5a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    return HAL_OK;
 8004d5e:	2300      	movs	r3, #0
 8004d60:	e000      	b.n	8004d64 <HAL_UART_Receive+0x188>
  }
  else
  {
    return HAL_BUSY;
 8004d62:	2302      	movs	r3, #2
  }
}
 8004d64:	4618      	mov	r0, r3
 8004d66:	3720      	adds	r7, #32
 8004d68:	46bd      	mov	sp, r7
 8004d6a:	bd80      	pop	{r7, pc}

08004d6c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004d6c:	b580      	push	{r7, lr}
 8004d6e:	b0ba      	sub	sp, #232	@ 0xe8
 8004d70:	af00      	add	r7, sp, #0
 8004d72:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	69db      	ldr	r3, [r3, #28]
 8004d7a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	689b      	ldr	r3, [r3, #8]
 8004d8e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8004d92:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8004d96:	f640 030f 	movw	r3, #2063	@ 0x80f
 8004d9a:	4013      	ands	r3, r2
 8004d9c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8004da0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004da4:	2b00      	cmp	r3, #0
 8004da6:	d11b      	bne.n	8004de0 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8004da8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004dac:	f003 0320 	and.w	r3, r3, #32
 8004db0:	2b00      	cmp	r3, #0
 8004db2:	d015      	beq.n	8004de0 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8004db4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004db8:	f003 0320 	and.w	r3, r3, #32
 8004dbc:	2b00      	cmp	r3, #0
 8004dbe:	d105      	bne.n	8004dcc <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8004dc0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004dc4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004dc8:	2b00      	cmp	r3, #0
 8004dca:	d009      	beq.n	8004de0 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004dd0:	2b00      	cmp	r3, #0
 8004dd2:	f000 8300 	beq.w	80053d6 <HAL_UART_IRQHandler+0x66a>
      {
        huart->RxISR(huart);
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004dda:	6878      	ldr	r0, [r7, #4]
 8004ddc:	4798      	blx	r3
      }
      return;
 8004dde:	e2fa      	b.n	80053d6 <HAL_UART_IRQHandler+0x66a>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8004de0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004de4:	2b00      	cmp	r3, #0
 8004de6:	f000 8123 	beq.w	8005030 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8004dea:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8004dee:	4b8d      	ldr	r3, [pc, #564]	@ (8005024 <HAL_UART_IRQHandler+0x2b8>)
 8004df0:	4013      	ands	r3, r2
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	d106      	bne.n	8004e04 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8004df6:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8004dfa:	4b8b      	ldr	r3, [pc, #556]	@ (8005028 <HAL_UART_IRQHandler+0x2bc>)
 8004dfc:	4013      	ands	r3, r2
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	f000 8116 	beq.w	8005030 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8004e04:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004e08:	f003 0301 	and.w	r3, r3, #1
 8004e0c:	2b00      	cmp	r3, #0
 8004e0e:	d011      	beq.n	8004e34 <HAL_UART_IRQHandler+0xc8>
 8004e10:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004e14:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004e18:	2b00      	cmp	r3, #0
 8004e1a:	d00b      	beq.n	8004e34 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	2201      	movs	r2, #1
 8004e22:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004e2a:	f043 0201 	orr.w	r2, r3, #1
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004e34:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004e38:	f003 0302 	and.w	r3, r3, #2
 8004e3c:	2b00      	cmp	r3, #0
 8004e3e:	d011      	beq.n	8004e64 <HAL_UART_IRQHandler+0xf8>
 8004e40:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004e44:	f003 0301 	and.w	r3, r3, #1
 8004e48:	2b00      	cmp	r3, #0
 8004e4a:	d00b      	beq.n	8004e64 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	2202      	movs	r2, #2
 8004e52:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004e5a:	f043 0204 	orr.w	r2, r3, #4
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004e64:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004e68:	f003 0304 	and.w	r3, r3, #4
 8004e6c:	2b00      	cmp	r3, #0
 8004e6e:	d011      	beq.n	8004e94 <HAL_UART_IRQHandler+0x128>
 8004e70:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004e74:	f003 0301 	and.w	r3, r3, #1
 8004e78:	2b00      	cmp	r3, #0
 8004e7a:	d00b      	beq.n	8004e94 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	2204      	movs	r2, #4
 8004e82:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004e8a:	f043 0202 	orr.w	r2, r3, #2
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8004e94:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004e98:	f003 0308 	and.w	r3, r3, #8
 8004e9c:	2b00      	cmp	r3, #0
 8004e9e:	d017      	beq.n	8004ed0 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8004ea0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004ea4:	f003 0320 	and.w	r3, r3, #32
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	d105      	bne.n	8004eb8 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8004eac:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8004eb0:	4b5c      	ldr	r3, [pc, #368]	@ (8005024 <HAL_UART_IRQHandler+0x2b8>)
 8004eb2:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8004eb4:	2b00      	cmp	r3, #0
 8004eb6:	d00b      	beq.n	8004ed0 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	2208      	movs	r2, #8
 8004ebe:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004ec6:	f043 0208 	orr.w	r2, r3, #8
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8004ed0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004ed4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	d012      	beq.n	8004f02 <HAL_UART_IRQHandler+0x196>
 8004edc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004ee0:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8004ee4:	2b00      	cmp	r3, #0
 8004ee6:	d00c      	beq.n	8004f02 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8004ef0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004ef8:	f043 0220 	orr.w	r2, r3, #32
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004f08:	2b00      	cmp	r3, #0
 8004f0a:	f000 8266 	beq.w	80053da <HAL_UART_IRQHandler+0x66e>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8004f0e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004f12:	f003 0320 	and.w	r3, r3, #32
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	d013      	beq.n	8004f42 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8004f1a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004f1e:	f003 0320 	and.w	r3, r3, #32
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	d105      	bne.n	8004f32 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8004f26:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004f2a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	d007      	beq.n	8004f42 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004f36:	2b00      	cmp	r3, #0
 8004f38:	d003      	beq.n	8004f42 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004f3e:	6878      	ldr	r0, [r7, #4]
 8004f40:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004f48:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	689b      	ldr	r3, [r3, #8]
 8004f52:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004f56:	2b40      	cmp	r3, #64	@ 0x40
 8004f58:	d005      	beq.n	8004f66 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8004f5a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004f5e:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	d054      	beq.n	8005010 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004f66:	6878      	ldr	r0, [r7, #4]
 8004f68:	f000 ff17 	bl	8005d9a <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	689b      	ldr	r3, [r3, #8]
 8004f72:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004f76:	2b40      	cmp	r3, #64	@ 0x40
 8004f78:	d146      	bne.n	8005008 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	3308      	adds	r3, #8
 8004f80:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f84:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8004f88:	e853 3f00 	ldrex	r3, [r3]
 8004f8c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8004f90:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8004f94:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004f98:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	3308      	adds	r3, #8
 8004fa2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8004fa6:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8004faa:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004fae:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8004fb2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8004fb6:	e841 2300 	strex	r3, r2, [r1]
 8004fba:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8004fbe:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	d1d9      	bne.n	8004f7a <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004fcc:	2b00      	cmp	r3, #0
 8004fce:	d017      	beq.n	8005000 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004fd6:	4a15      	ldr	r2, [pc, #84]	@ (800502c <HAL_UART_IRQHandler+0x2c0>)
 8004fd8:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004fe0:	4618      	mov	r0, r3
 8004fe2:	f7fd fca3 	bl	800292c <HAL_DMA_Abort_IT>
 8004fe6:	4603      	mov	r3, r0
 8004fe8:	2b00      	cmp	r3, #0
 8004fea:	d019      	beq.n	8005020 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004ff2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004ff4:	687a      	ldr	r2, [r7, #4]
 8004ff6:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 8004ffa:	4610      	mov	r0, r2
 8004ffc:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004ffe:	e00f      	b.n	8005020 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005000:	6878      	ldr	r0, [r7, #4]
 8005002:	f000 f9ff 	bl	8005404 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005006:	e00b      	b.n	8005020 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005008:	6878      	ldr	r0, [r7, #4]
 800500a:	f000 f9fb 	bl	8005404 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800500e:	e007      	b.n	8005020 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005010:	6878      	ldr	r0, [r7, #4]
 8005012:	f000 f9f7 	bl	8005404 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	2200      	movs	r2, #0
 800501a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 800501e:	e1dc      	b.n	80053da <HAL_UART_IRQHandler+0x66e>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005020:	bf00      	nop
    return;
 8005022:	e1da      	b.n	80053da <HAL_UART_IRQHandler+0x66e>
 8005024:	10000001 	.word	0x10000001
 8005028:	04000120 	.word	0x04000120
 800502c:	08005e67 	.word	0x08005e67

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005034:	2b01      	cmp	r3, #1
 8005036:	f040 8170 	bne.w	800531a <HAL_UART_IRQHandler+0x5ae>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800503a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800503e:	f003 0310 	and.w	r3, r3, #16
 8005042:	2b00      	cmp	r3, #0
 8005044:	f000 8169 	beq.w	800531a <HAL_UART_IRQHandler+0x5ae>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8005048:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800504c:	f003 0310 	and.w	r3, r3, #16
 8005050:	2b00      	cmp	r3, #0
 8005052:	f000 8162 	beq.w	800531a <HAL_UART_IRQHandler+0x5ae>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	2210      	movs	r2, #16
 800505c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	689b      	ldr	r3, [r3, #8]
 8005064:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005068:	2b40      	cmp	r3, #64	@ 0x40
 800506a:	f040 80d8 	bne.w	800521e <HAL_UART_IRQHandler+0x4b2>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	685b      	ldr	r3, [r3, #4]
 8005078:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800507c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8005080:	2b00      	cmp	r3, #0
 8005082:	f000 80af 	beq.w	80051e4 <HAL_UART_IRQHandler+0x478>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800508c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8005090:	429a      	cmp	r2, r3
 8005092:	f080 80a7 	bcs.w	80051e4 <HAL_UART_IRQHandler+0x478>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800509c:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	f003 0320 	and.w	r3, r3, #32
 80050ae:	2b00      	cmp	r3, #0
 80050b0:	f040 8087 	bne.w	80051c2 <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050bc:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80050c0:	e853 3f00 	ldrex	r3, [r3]
 80050c4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80050c8:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80050cc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80050d0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	461a      	mov	r2, r3
 80050da:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80050de:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80050e2:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050e6:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80050ea:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80050ee:	e841 2300 	strex	r3, r2, [r1]
 80050f2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80050f6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	d1da      	bne.n	80050b4 <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	3308      	adds	r3, #8
 8005104:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005106:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005108:	e853 3f00 	ldrex	r3, [r3]
 800510c:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800510e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005110:	f023 0301 	bic.w	r3, r3, #1
 8005114:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	3308      	adds	r3, #8
 800511e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8005122:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8005126:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005128:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800512a:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800512e:	e841 2300 	strex	r3, r2, [r1]
 8005132:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8005134:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005136:	2b00      	cmp	r3, #0
 8005138:	d1e1      	bne.n	80050fe <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	3308      	adds	r3, #8
 8005140:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005142:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005144:	e853 3f00 	ldrex	r3, [r3]
 8005148:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800514a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800514c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005150:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	3308      	adds	r3, #8
 800515a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800515e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8005160:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005162:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8005164:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8005166:	e841 2300 	strex	r3, r2, [r1]
 800516a:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800516c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800516e:	2b00      	cmp	r3, #0
 8005170:	d1e3      	bne.n	800513a <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	2220      	movs	r2, #32
 8005176:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	2200      	movs	r2, #0
 800517e:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005186:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005188:	e853 3f00 	ldrex	r3, [r3]
 800518c:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800518e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005190:	f023 0310 	bic.w	r3, r3, #16
 8005194:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	461a      	mov	r2, r3
 800519e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80051a2:	65bb      	str	r3, [r7, #88]	@ 0x58
 80051a4:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051a6:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80051a8:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80051aa:	e841 2300 	strex	r3, r2, [r1]
 80051ae:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80051b0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80051b2:	2b00      	cmp	r3, #0
 80051b4:	d1e4      	bne.n	8005180 <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80051bc:	4618      	mov	r0, r3
 80051be:	f7fd fb5c 	bl	800287a <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	2202      	movs	r2, #2
 80051c6:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80051d4:	b29b      	uxth	r3, r3
 80051d6:	1ad3      	subs	r3, r2, r3
 80051d8:	b29b      	uxth	r3, r3
 80051da:	4619      	mov	r1, r3
 80051dc:	6878      	ldr	r0, [r7, #4]
 80051de:	f000 f91b 	bl	8005418 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 80051e2:	e0fc      	b.n	80053de <HAL_UART_IRQHandler+0x672>
        if (nb_remaining_rx_data == huart->RxXferSize)
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80051ea:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80051ee:	429a      	cmp	r2, r3
 80051f0:	f040 80f5 	bne.w	80053de <HAL_UART_IRQHandler+0x672>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	f003 0320 	and.w	r3, r3, #32
 8005202:	2b20      	cmp	r3, #32
 8005204:	f040 80eb 	bne.w	80053de <HAL_UART_IRQHandler+0x672>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	2202      	movs	r2, #2
 800520c:	671a      	str	r2, [r3, #112]	@ 0x70
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8005214:	4619      	mov	r1, r3
 8005216:	6878      	ldr	r0, [r7, #4]
 8005218:	f000 f8fe 	bl	8005418 <HAL_UARTEx_RxEventCallback>
      return;
 800521c:	e0df      	b.n	80053de <HAL_UART_IRQHandler+0x672>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800522a:	b29b      	uxth	r3, r3
 800522c:	1ad3      	subs	r3, r2, r3
 800522e:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8005238:	b29b      	uxth	r3, r3
 800523a:	2b00      	cmp	r3, #0
 800523c:	f000 80d1 	beq.w	80053e2 <HAL_UART_IRQHandler+0x676>
          && (nb_rx_data > 0U))
 8005240:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8005244:	2b00      	cmp	r3, #0
 8005246:	f000 80cc 	beq.w	80053e2 <HAL_UART_IRQHandler+0x676>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005250:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005252:	e853 3f00 	ldrex	r3, [r3]
 8005256:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005258:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800525a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800525e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	461a      	mov	r2, r3
 8005268:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800526c:	647b      	str	r3, [r7, #68]	@ 0x44
 800526e:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005270:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005272:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005274:	e841 2300 	strex	r3, r2, [r1]
 8005278:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800527a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800527c:	2b00      	cmp	r3, #0
 800527e:	d1e4      	bne.n	800524a <HAL_UART_IRQHandler+0x4de>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	3308      	adds	r3, #8
 8005286:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005288:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800528a:	e853 3f00 	ldrex	r3, [r3]
 800528e:	623b      	str	r3, [r7, #32]
   return(result);
 8005290:	6a3b      	ldr	r3, [r7, #32]
 8005292:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005296:	f023 0301 	bic.w	r3, r3, #1
 800529a:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	3308      	adds	r3, #8
 80052a4:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80052a8:	633a      	str	r2, [r7, #48]	@ 0x30
 80052aa:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052ac:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80052ae:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80052b0:	e841 2300 	strex	r3, r2, [r1]
 80052b4:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80052b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80052b8:	2b00      	cmp	r3, #0
 80052ba:	d1e1      	bne.n	8005280 <HAL_UART_IRQHandler+0x514>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	2220      	movs	r2, #32
 80052c0:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	2200      	movs	r2, #0
 80052c8:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	2200      	movs	r2, #0
 80052ce:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052d6:	693b      	ldr	r3, [r7, #16]
 80052d8:	e853 3f00 	ldrex	r3, [r3]
 80052dc:	60fb      	str	r3, [r7, #12]
   return(result);
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	f023 0310 	bic.w	r3, r3, #16
 80052e4:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	461a      	mov	r2, r3
 80052ee:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80052f2:	61fb      	str	r3, [r7, #28]
 80052f4:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052f6:	69b9      	ldr	r1, [r7, #24]
 80052f8:	69fa      	ldr	r2, [r7, #28]
 80052fa:	e841 2300 	strex	r3, r2, [r1]
 80052fe:	617b      	str	r3, [r7, #20]
   return(result);
 8005300:	697b      	ldr	r3, [r7, #20]
 8005302:	2b00      	cmp	r3, #0
 8005304:	d1e4      	bne.n	80052d0 <HAL_UART_IRQHandler+0x564>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	2202      	movs	r2, #2
 800530a:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800530c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8005310:	4619      	mov	r1, r3
 8005312:	6878      	ldr	r0, [r7, #4]
 8005314:	f000 f880 	bl	8005418 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005318:	e063      	b.n	80053e2 <HAL_UART_IRQHandler+0x676>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800531a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800531e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005322:	2b00      	cmp	r3, #0
 8005324:	d00e      	beq.n	8005344 <HAL_UART_IRQHandler+0x5d8>
 8005326:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800532a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800532e:	2b00      	cmp	r3, #0
 8005330:	d008      	beq.n	8005344 <HAL_UART_IRQHandler+0x5d8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800533a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800533c:	6878      	ldr	r0, [r7, #4]
 800533e:	f000 fdcf 	bl	8005ee0 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005342:	e051      	b.n	80053e8 <HAL_UART_IRQHandler+0x67c>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8005344:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005348:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800534c:	2b00      	cmp	r3, #0
 800534e:	d014      	beq.n	800537a <HAL_UART_IRQHandler+0x60e>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8005350:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005354:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005358:	2b00      	cmp	r3, #0
 800535a:	d105      	bne.n	8005368 <HAL_UART_IRQHandler+0x5fc>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800535c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005360:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005364:	2b00      	cmp	r3, #0
 8005366:	d008      	beq.n	800537a <HAL_UART_IRQHandler+0x60e>
  {
    if (huart->TxISR != NULL)
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800536c:	2b00      	cmp	r3, #0
 800536e:	d03a      	beq.n	80053e6 <HAL_UART_IRQHandler+0x67a>
    {
      huart->TxISR(huart);
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005374:	6878      	ldr	r0, [r7, #4]
 8005376:	4798      	blx	r3
    }
    return;
 8005378:	e035      	b.n	80053e6 <HAL_UART_IRQHandler+0x67a>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800537a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800537e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005382:	2b00      	cmp	r3, #0
 8005384:	d009      	beq.n	800539a <HAL_UART_IRQHandler+0x62e>
 8005386:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800538a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800538e:	2b00      	cmp	r3, #0
 8005390:	d003      	beq.n	800539a <HAL_UART_IRQHandler+0x62e>
  {
    UART_EndTransmit_IT(huart);
 8005392:	6878      	ldr	r0, [r7, #4]
 8005394:	f000 fd79 	bl	8005e8a <UART_EndTransmit_IT>
    return;
 8005398:	e026      	b.n	80053e8 <HAL_UART_IRQHandler+0x67c>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800539a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800539e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80053a2:	2b00      	cmp	r3, #0
 80053a4:	d009      	beq.n	80053ba <HAL_UART_IRQHandler+0x64e>
 80053a6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80053aa:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 80053ae:	2b00      	cmp	r3, #0
 80053b0:	d003      	beq.n	80053ba <HAL_UART_IRQHandler+0x64e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 80053b2:	6878      	ldr	r0, [r7, #4]
 80053b4:	f000 fda8 	bl	8005f08 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80053b8:	e016      	b.n	80053e8 <HAL_UART_IRQHandler+0x67c>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 80053ba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80053be:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80053c2:	2b00      	cmp	r3, #0
 80053c4:	d010      	beq.n	80053e8 <HAL_UART_IRQHandler+0x67c>
 80053c6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80053ca:	2b00      	cmp	r3, #0
 80053cc:	da0c      	bge.n	80053e8 <HAL_UART_IRQHandler+0x67c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 80053ce:	6878      	ldr	r0, [r7, #4]
 80053d0:	f000 fd90 	bl	8005ef4 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80053d4:	e008      	b.n	80053e8 <HAL_UART_IRQHandler+0x67c>
      return;
 80053d6:	bf00      	nop
 80053d8:	e006      	b.n	80053e8 <HAL_UART_IRQHandler+0x67c>
    return;
 80053da:	bf00      	nop
 80053dc:	e004      	b.n	80053e8 <HAL_UART_IRQHandler+0x67c>
      return;
 80053de:	bf00      	nop
 80053e0:	e002      	b.n	80053e8 <HAL_UART_IRQHandler+0x67c>
      return;
 80053e2:	bf00      	nop
 80053e4:	e000      	b.n	80053e8 <HAL_UART_IRQHandler+0x67c>
    return;
 80053e6:	bf00      	nop
  }
}
 80053e8:	37e8      	adds	r7, #232	@ 0xe8
 80053ea:	46bd      	mov	sp, r7
 80053ec:	bd80      	pop	{r7, pc}
 80053ee:	bf00      	nop

080053f0 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80053f0:	b480      	push	{r7}
 80053f2:	b083      	sub	sp, #12
 80053f4:	af00      	add	r7, sp, #0
 80053f6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80053f8:	bf00      	nop
 80053fa:	370c      	adds	r7, #12
 80053fc:	46bd      	mov	sp, r7
 80053fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005402:	4770      	bx	lr

08005404 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005404:	b480      	push	{r7}
 8005406:	b083      	sub	sp, #12
 8005408:	af00      	add	r7, sp, #0
 800540a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800540c:	bf00      	nop
 800540e:	370c      	adds	r7, #12
 8005410:	46bd      	mov	sp, r7
 8005412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005416:	4770      	bx	lr

08005418 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005418:	b480      	push	{r7}
 800541a:	b083      	sub	sp, #12
 800541c:	af00      	add	r7, sp, #0
 800541e:	6078      	str	r0, [r7, #4]
 8005420:	460b      	mov	r3, r1
 8005422:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005424:	bf00      	nop
 8005426:	370c      	adds	r7, #12
 8005428:	46bd      	mov	sp, r7
 800542a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800542e:	4770      	bx	lr

08005430 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005430:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005434:	b08c      	sub	sp, #48	@ 0x30
 8005436:	af00      	add	r7, sp, #0
 8005438:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800543a:	2300      	movs	r3, #0
 800543c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005440:	697b      	ldr	r3, [r7, #20]
 8005442:	689a      	ldr	r2, [r3, #8]
 8005444:	697b      	ldr	r3, [r7, #20]
 8005446:	691b      	ldr	r3, [r3, #16]
 8005448:	431a      	orrs	r2, r3
 800544a:	697b      	ldr	r3, [r7, #20]
 800544c:	695b      	ldr	r3, [r3, #20]
 800544e:	431a      	orrs	r2, r3
 8005450:	697b      	ldr	r3, [r7, #20]
 8005452:	69db      	ldr	r3, [r3, #28]
 8005454:	4313      	orrs	r3, r2
 8005456:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005458:	697b      	ldr	r3, [r7, #20]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	681a      	ldr	r2, [r3, #0]
 800545e:	4baa      	ldr	r3, [pc, #680]	@ (8005708 <UART_SetConfig+0x2d8>)
 8005460:	4013      	ands	r3, r2
 8005462:	697a      	ldr	r2, [r7, #20]
 8005464:	6812      	ldr	r2, [r2, #0]
 8005466:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005468:	430b      	orrs	r3, r1
 800546a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800546c:	697b      	ldr	r3, [r7, #20]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	685b      	ldr	r3, [r3, #4]
 8005472:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8005476:	697b      	ldr	r3, [r7, #20]
 8005478:	68da      	ldr	r2, [r3, #12]
 800547a:	697b      	ldr	r3, [r7, #20]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	430a      	orrs	r2, r1
 8005480:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005482:	697b      	ldr	r3, [r7, #20]
 8005484:	699b      	ldr	r3, [r3, #24]
 8005486:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005488:	697b      	ldr	r3, [r7, #20]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	4a9f      	ldr	r2, [pc, #636]	@ (800570c <UART_SetConfig+0x2dc>)
 800548e:	4293      	cmp	r3, r2
 8005490:	d004      	beq.n	800549c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005492:	697b      	ldr	r3, [r7, #20]
 8005494:	6a1b      	ldr	r3, [r3, #32]
 8005496:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005498:	4313      	orrs	r3, r2
 800549a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800549c:	697b      	ldr	r3, [r7, #20]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	689b      	ldr	r3, [r3, #8]
 80054a2:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 80054a6:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 80054aa:	697a      	ldr	r2, [r7, #20]
 80054ac:	6812      	ldr	r2, [r2, #0]
 80054ae:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80054b0:	430b      	orrs	r3, r1
 80054b2:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80054b4:	697b      	ldr	r3, [r7, #20]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80054ba:	f023 010f 	bic.w	r1, r3, #15
 80054be:	697b      	ldr	r3, [r7, #20]
 80054c0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80054c2:	697b      	ldr	r3, [r7, #20]
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	430a      	orrs	r2, r1
 80054c8:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80054ca:	697b      	ldr	r3, [r7, #20]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	4a90      	ldr	r2, [pc, #576]	@ (8005710 <UART_SetConfig+0x2e0>)
 80054d0:	4293      	cmp	r3, r2
 80054d2:	d125      	bne.n	8005520 <UART_SetConfig+0xf0>
 80054d4:	4b8f      	ldr	r3, [pc, #572]	@ (8005714 <UART_SetConfig+0x2e4>)
 80054d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80054da:	f003 0303 	and.w	r3, r3, #3
 80054de:	2b03      	cmp	r3, #3
 80054e0:	d81a      	bhi.n	8005518 <UART_SetConfig+0xe8>
 80054e2:	a201      	add	r2, pc, #4	@ (adr r2, 80054e8 <UART_SetConfig+0xb8>)
 80054e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80054e8:	080054f9 	.word	0x080054f9
 80054ec:	08005509 	.word	0x08005509
 80054f0:	08005501 	.word	0x08005501
 80054f4:	08005511 	.word	0x08005511
 80054f8:	2301      	movs	r3, #1
 80054fa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80054fe:	e116      	b.n	800572e <UART_SetConfig+0x2fe>
 8005500:	2302      	movs	r3, #2
 8005502:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005506:	e112      	b.n	800572e <UART_SetConfig+0x2fe>
 8005508:	2304      	movs	r3, #4
 800550a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800550e:	e10e      	b.n	800572e <UART_SetConfig+0x2fe>
 8005510:	2308      	movs	r3, #8
 8005512:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005516:	e10a      	b.n	800572e <UART_SetConfig+0x2fe>
 8005518:	2310      	movs	r3, #16
 800551a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800551e:	e106      	b.n	800572e <UART_SetConfig+0x2fe>
 8005520:	697b      	ldr	r3, [r7, #20]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	4a7c      	ldr	r2, [pc, #496]	@ (8005718 <UART_SetConfig+0x2e8>)
 8005526:	4293      	cmp	r3, r2
 8005528:	d138      	bne.n	800559c <UART_SetConfig+0x16c>
 800552a:	4b7a      	ldr	r3, [pc, #488]	@ (8005714 <UART_SetConfig+0x2e4>)
 800552c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005530:	f003 030c 	and.w	r3, r3, #12
 8005534:	2b0c      	cmp	r3, #12
 8005536:	d82d      	bhi.n	8005594 <UART_SetConfig+0x164>
 8005538:	a201      	add	r2, pc, #4	@ (adr r2, 8005540 <UART_SetConfig+0x110>)
 800553a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800553e:	bf00      	nop
 8005540:	08005575 	.word	0x08005575
 8005544:	08005595 	.word	0x08005595
 8005548:	08005595 	.word	0x08005595
 800554c:	08005595 	.word	0x08005595
 8005550:	08005585 	.word	0x08005585
 8005554:	08005595 	.word	0x08005595
 8005558:	08005595 	.word	0x08005595
 800555c:	08005595 	.word	0x08005595
 8005560:	0800557d 	.word	0x0800557d
 8005564:	08005595 	.word	0x08005595
 8005568:	08005595 	.word	0x08005595
 800556c:	08005595 	.word	0x08005595
 8005570:	0800558d 	.word	0x0800558d
 8005574:	2300      	movs	r3, #0
 8005576:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800557a:	e0d8      	b.n	800572e <UART_SetConfig+0x2fe>
 800557c:	2302      	movs	r3, #2
 800557e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005582:	e0d4      	b.n	800572e <UART_SetConfig+0x2fe>
 8005584:	2304      	movs	r3, #4
 8005586:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800558a:	e0d0      	b.n	800572e <UART_SetConfig+0x2fe>
 800558c:	2308      	movs	r3, #8
 800558e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005592:	e0cc      	b.n	800572e <UART_SetConfig+0x2fe>
 8005594:	2310      	movs	r3, #16
 8005596:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800559a:	e0c8      	b.n	800572e <UART_SetConfig+0x2fe>
 800559c:	697b      	ldr	r3, [r7, #20]
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	4a5e      	ldr	r2, [pc, #376]	@ (800571c <UART_SetConfig+0x2ec>)
 80055a2:	4293      	cmp	r3, r2
 80055a4:	d125      	bne.n	80055f2 <UART_SetConfig+0x1c2>
 80055a6:	4b5b      	ldr	r3, [pc, #364]	@ (8005714 <UART_SetConfig+0x2e4>)
 80055a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80055ac:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80055b0:	2b30      	cmp	r3, #48	@ 0x30
 80055b2:	d016      	beq.n	80055e2 <UART_SetConfig+0x1b2>
 80055b4:	2b30      	cmp	r3, #48	@ 0x30
 80055b6:	d818      	bhi.n	80055ea <UART_SetConfig+0x1ba>
 80055b8:	2b20      	cmp	r3, #32
 80055ba:	d00a      	beq.n	80055d2 <UART_SetConfig+0x1a2>
 80055bc:	2b20      	cmp	r3, #32
 80055be:	d814      	bhi.n	80055ea <UART_SetConfig+0x1ba>
 80055c0:	2b00      	cmp	r3, #0
 80055c2:	d002      	beq.n	80055ca <UART_SetConfig+0x19a>
 80055c4:	2b10      	cmp	r3, #16
 80055c6:	d008      	beq.n	80055da <UART_SetConfig+0x1aa>
 80055c8:	e00f      	b.n	80055ea <UART_SetConfig+0x1ba>
 80055ca:	2300      	movs	r3, #0
 80055cc:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80055d0:	e0ad      	b.n	800572e <UART_SetConfig+0x2fe>
 80055d2:	2302      	movs	r3, #2
 80055d4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80055d8:	e0a9      	b.n	800572e <UART_SetConfig+0x2fe>
 80055da:	2304      	movs	r3, #4
 80055dc:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80055e0:	e0a5      	b.n	800572e <UART_SetConfig+0x2fe>
 80055e2:	2308      	movs	r3, #8
 80055e4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80055e8:	e0a1      	b.n	800572e <UART_SetConfig+0x2fe>
 80055ea:	2310      	movs	r3, #16
 80055ec:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80055f0:	e09d      	b.n	800572e <UART_SetConfig+0x2fe>
 80055f2:	697b      	ldr	r3, [r7, #20]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	4a4a      	ldr	r2, [pc, #296]	@ (8005720 <UART_SetConfig+0x2f0>)
 80055f8:	4293      	cmp	r3, r2
 80055fa:	d125      	bne.n	8005648 <UART_SetConfig+0x218>
 80055fc:	4b45      	ldr	r3, [pc, #276]	@ (8005714 <UART_SetConfig+0x2e4>)
 80055fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005602:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8005606:	2bc0      	cmp	r3, #192	@ 0xc0
 8005608:	d016      	beq.n	8005638 <UART_SetConfig+0x208>
 800560a:	2bc0      	cmp	r3, #192	@ 0xc0
 800560c:	d818      	bhi.n	8005640 <UART_SetConfig+0x210>
 800560e:	2b80      	cmp	r3, #128	@ 0x80
 8005610:	d00a      	beq.n	8005628 <UART_SetConfig+0x1f8>
 8005612:	2b80      	cmp	r3, #128	@ 0x80
 8005614:	d814      	bhi.n	8005640 <UART_SetConfig+0x210>
 8005616:	2b00      	cmp	r3, #0
 8005618:	d002      	beq.n	8005620 <UART_SetConfig+0x1f0>
 800561a:	2b40      	cmp	r3, #64	@ 0x40
 800561c:	d008      	beq.n	8005630 <UART_SetConfig+0x200>
 800561e:	e00f      	b.n	8005640 <UART_SetConfig+0x210>
 8005620:	2300      	movs	r3, #0
 8005622:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005626:	e082      	b.n	800572e <UART_SetConfig+0x2fe>
 8005628:	2302      	movs	r3, #2
 800562a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800562e:	e07e      	b.n	800572e <UART_SetConfig+0x2fe>
 8005630:	2304      	movs	r3, #4
 8005632:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005636:	e07a      	b.n	800572e <UART_SetConfig+0x2fe>
 8005638:	2308      	movs	r3, #8
 800563a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800563e:	e076      	b.n	800572e <UART_SetConfig+0x2fe>
 8005640:	2310      	movs	r3, #16
 8005642:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005646:	e072      	b.n	800572e <UART_SetConfig+0x2fe>
 8005648:	697b      	ldr	r3, [r7, #20]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	4a35      	ldr	r2, [pc, #212]	@ (8005724 <UART_SetConfig+0x2f4>)
 800564e:	4293      	cmp	r3, r2
 8005650:	d12a      	bne.n	80056a8 <UART_SetConfig+0x278>
 8005652:	4b30      	ldr	r3, [pc, #192]	@ (8005714 <UART_SetConfig+0x2e4>)
 8005654:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005658:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800565c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005660:	d01a      	beq.n	8005698 <UART_SetConfig+0x268>
 8005662:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005666:	d81b      	bhi.n	80056a0 <UART_SetConfig+0x270>
 8005668:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800566c:	d00c      	beq.n	8005688 <UART_SetConfig+0x258>
 800566e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005672:	d815      	bhi.n	80056a0 <UART_SetConfig+0x270>
 8005674:	2b00      	cmp	r3, #0
 8005676:	d003      	beq.n	8005680 <UART_SetConfig+0x250>
 8005678:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800567c:	d008      	beq.n	8005690 <UART_SetConfig+0x260>
 800567e:	e00f      	b.n	80056a0 <UART_SetConfig+0x270>
 8005680:	2300      	movs	r3, #0
 8005682:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005686:	e052      	b.n	800572e <UART_SetConfig+0x2fe>
 8005688:	2302      	movs	r3, #2
 800568a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800568e:	e04e      	b.n	800572e <UART_SetConfig+0x2fe>
 8005690:	2304      	movs	r3, #4
 8005692:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005696:	e04a      	b.n	800572e <UART_SetConfig+0x2fe>
 8005698:	2308      	movs	r3, #8
 800569a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800569e:	e046      	b.n	800572e <UART_SetConfig+0x2fe>
 80056a0:	2310      	movs	r3, #16
 80056a2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80056a6:	e042      	b.n	800572e <UART_SetConfig+0x2fe>
 80056a8:	697b      	ldr	r3, [r7, #20]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	4a17      	ldr	r2, [pc, #92]	@ (800570c <UART_SetConfig+0x2dc>)
 80056ae:	4293      	cmp	r3, r2
 80056b0:	d13a      	bne.n	8005728 <UART_SetConfig+0x2f8>
 80056b2:	4b18      	ldr	r3, [pc, #96]	@ (8005714 <UART_SetConfig+0x2e4>)
 80056b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80056b8:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80056bc:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80056c0:	d01a      	beq.n	80056f8 <UART_SetConfig+0x2c8>
 80056c2:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80056c6:	d81b      	bhi.n	8005700 <UART_SetConfig+0x2d0>
 80056c8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80056cc:	d00c      	beq.n	80056e8 <UART_SetConfig+0x2b8>
 80056ce:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80056d2:	d815      	bhi.n	8005700 <UART_SetConfig+0x2d0>
 80056d4:	2b00      	cmp	r3, #0
 80056d6:	d003      	beq.n	80056e0 <UART_SetConfig+0x2b0>
 80056d8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80056dc:	d008      	beq.n	80056f0 <UART_SetConfig+0x2c0>
 80056de:	e00f      	b.n	8005700 <UART_SetConfig+0x2d0>
 80056e0:	2300      	movs	r3, #0
 80056e2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80056e6:	e022      	b.n	800572e <UART_SetConfig+0x2fe>
 80056e8:	2302      	movs	r3, #2
 80056ea:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80056ee:	e01e      	b.n	800572e <UART_SetConfig+0x2fe>
 80056f0:	2304      	movs	r3, #4
 80056f2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80056f6:	e01a      	b.n	800572e <UART_SetConfig+0x2fe>
 80056f8:	2308      	movs	r3, #8
 80056fa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80056fe:	e016      	b.n	800572e <UART_SetConfig+0x2fe>
 8005700:	2310      	movs	r3, #16
 8005702:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005706:	e012      	b.n	800572e <UART_SetConfig+0x2fe>
 8005708:	cfff69f3 	.word	0xcfff69f3
 800570c:	40008000 	.word	0x40008000
 8005710:	40013800 	.word	0x40013800
 8005714:	40021000 	.word	0x40021000
 8005718:	40004400 	.word	0x40004400
 800571c:	40004800 	.word	0x40004800
 8005720:	40004c00 	.word	0x40004c00
 8005724:	40005000 	.word	0x40005000
 8005728:	2310      	movs	r3, #16
 800572a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800572e:	697b      	ldr	r3, [r7, #20]
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	4aae      	ldr	r2, [pc, #696]	@ (80059ec <UART_SetConfig+0x5bc>)
 8005734:	4293      	cmp	r3, r2
 8005736:	f040 8097 	bne.w	8005868 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800573a:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800573e:	2b08      	cmp	r3, #8
 8005740:	d823      	bhi.n	800578a <UART_SetConfig+0x35a>
 8005742:	a201      	add	r2, pc, #4	@ (adr r2, 8005748 <UART_SetConfig+0x318>)
 8005744:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005748:	0800576d 	.word	0x0800576d
 800574c:	0800578b 	.word	0x0800578b
 8005750:	08005775 	.word	0x08005775
 8005754:	0800578b 	.word	0x0800578b
 8005758:	0800577b 	.word	0x0800577b
 800575c:	0800578b 	.word	0x0800578b
 8005760:	0800578b 	.word	0x0800578b
 8005764:	0800578b 	.word	0x0800578b
 8005768:	08005783 	.word	0x08005783
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800576c:	f7fe fe98 	bl	80044a0 <HAL_RCC_GetPCLK1Freq>
 8005770:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005772:	e010      	b.n	8005796 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005774:	4b9e      	ldr	r3, [pc, #632]	@ (80059f0 <UART_SetConfig+0x5c0>)
 8005776:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8005778:	e00d      	b.n	8005796 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800577a:	f7fe fe23 	bl	80043c4 <HAL_RCC_GetSysClockFreq>
 800577e:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005780:	e009      	b.n	8005796 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005782:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005786:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8005788:	e005      	b.n	8005796 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 800578a:	2300      	movs	r3, #0
 800578c:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800578e:	2301      	movs	r3, #1
 8005790:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8005794:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005796:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005798:	2b00      	cmp	r3, #0
 800579a:	f000 8130 	beq.w	80059fe <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800579e:	697b      	ldr	r3, [r7, #20]
 80057a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80057a2:	4a94      	ldr	r2, [pc, #592]	@ (80059f4 <UART_SetConfig+0x5c4>)
 80057a4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80057a8:	461a      	mov	r2, r3
 80057aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80057ac:	fbb3 f3f2 	udiv	r3, r3, r2
 80057b0:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80057b2:	697b      	ldr	r3, [r7, #20]
 80057b4:	685a      	ldr	r2, [r3, #4]
 80057b6:	4613      	mov	r3, r2
 80057b8:	005b      	lsls	r3, r3, #1
 80057ba:	4413      	add	r3, r2
 80057bc:	69ba      	ldr	r2, [r7, #24]
 80057be:	429a      	cmp	r2, r3
 80057c0:	d305      	bcc.n	80057ce <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80057c2:	697b      	ldr	r3, [r7, #20]
 80057c4:	685b      	ldr	r3, [r3, #4]
 80057c6:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80057c8:	69ba      	ldr	r2, [r7, #24]
 80057ca:	429a      	cmp	r2, r3
 80057cc:	d903      	bls.n	80057d6 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 80057ce:	2301      	movs	r3, #1
 80057d0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80057d4:	e113      	b.n	80059fe <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80057d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80057d8:	2200      	movs	r2, #0
 80057da:	60bb      	str	r3, [r7, #8]
 80057dc:	60fa      	str	r2, [r7, #12]
 80057de:	697b      	ldr	r3, [r7, #20]
 80057e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80057e2:	4a84      	ldr	r2, [pc, #528]	@ (80059f4 <UART_SetConfig+0x5c4>)
 80057e4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80057e8:	b29b      	uxth	r3, r3
 80057ea:	2200      	movs	r2, #0
 80057ec:	603b      	str	r3, [r7, #0]
 80057ee:	607a      	str	r2, [r7, #4]
 80057f0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80057f4:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80057f8:	f7fb fa0e 	bl	8000c18 <__aeabi_uldivmod>
 80057fc:	4602      	mov	r2, r0
 80057fe:	460b      	mov	r3, r1
 8005800:	4610      	mov	r0, r2
 8005802:	4619      	mov	r1, r3
 8005804:	f04f 0200 	mov.w	r2, #0
 8005808:	f04f 0300 	mov.w	r3, #0
 800580c:	020b      	lsls	r3, r1, #8
 800580e:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8005812:	0202      	lsls	r2, r0, #8
 8005814:	6979      	ldr	r1, [r7, #20]
 8005816:	6849      	ldr	r1, [r1, #4]
 8005818:	0849      	lsrs	r1, r1, #1
 800581a:	2000      	movs	r0, #0
 800581c:	460c      	mov	r4, r1
 800581e:	4605      	mov	r5, r0
 8005820:	eb12 0804 	adds.w	r8, r2, r4
 8005824:	eb43 0905 	adc.w	r9, r3, r5
 8005828:	697b      	ldr	r3, [r7, #20]
 800582a:	685b      	ldr	r3, [r3, #4]
 800582c:	2200      	movs	r2, #0
 800582e:	469a      	mov	sl, r3
 8005830:	4693      	mov	fp, r2
 8005832:	4652      	mov	r2, sl
 8005834:	465b      	mov	r3, fp
 8005836:	4640      	mov	r0, r8
 8005838:	4649      	mov	r1, r9
 800583a:	f7fb f9ed 	bl	8000c18 <__aeabi_uldivmod>
 800583e:	4602      	mov	r2, r0
 8005840:	460b      	mov	r3, r1
 8005842:	4613      	mov	r3, r2
 8005844:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005846:	6a3b      	ldr	r3, [r7, #32]
 8005848:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800584c:	d308      	bcc.n	8005860 <UART_SetConfig+0x430>
 800584e:	6a3b      	ldr	r3, [r7, #32]
 8005850:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005854:	d204      	bcs.n	8005860 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 8005856:	697b      	ldr	r3, [r7, #20]
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	6a3a      	ldr	r2, [r7, #32]
 800585c:	60da      	str	r2, [r3, #12]
 800585e:	e0ce      	b.n	80059fe <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8005860:	2301      	movs	r3, #1
 8005862:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8005866:	e0ca      	b.n	80059fe <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005868:	697b      	ldr	r3, [r7, #20]
 800586a:	69db      	ldr	r3, [r3, #28]
 800586c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005870:	d166      	bne.n	8005940 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 8005872:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8005876:	2b08      	cmp	r3, #8
 8005878:	d827      	bhi.n	80058ca <UART_SetConfig+0x49a>
 800587a:	a201      	add	r2, pc, #4	@ (adr r2, 8005880 <UART_SetConfig+0x450>)
 800587c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005880:	080058a5 	.word	0x080058a5
 8005884:	080058ad 	.word	0x080058ad
 8005888:	080058b5 	.word	0x080058b5
 800588c:	080058cb 	.word	0x080058cb
 8005890:	080058bb 	.word	0x080058bb
 8005894:	080058cb 	.word	0x080058cb
 8005898:	080058cb 	.word	0x080058cb
 800589c:	080058cb 	.word	0x080058cb
 80058a0:	080058c3 	.word	0x080058c3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80058a4:	f7fe fdfc 	bl	80044a0 <HAL_RCC_GetPCLK1Freq>
 80058a8:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80058aa:	e014      	b.n	80058d6 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80058ac:	f7fe fe0e 	bl	80044cc <HAL_RCC_GetPCLK2Freq>
 80058b0:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80058b2:	e010      	b.n	80058d6 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80058b4:	4b4e      	ldr	r3, [pc, #312]	@ (80059f0 <UART_SetConfig+0x5c0>)
 80058b6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80058b8:	e00d      	b.n	80058d6 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80058ba:	f7fe fd83 	bl	80043c4 <HAL_RCC_GetSysClockFreq>
 80058be:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80058c0:	e009      	b.n	80058d6 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80058c2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80058c6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80058c8:	e005      	b.n	80058d6 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 80058ca:	2300      	movs	r3, #0
 80058cc:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80058ce:	2301      	movs	r3, #1
 80058d0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80058d4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80058d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80058d8:	2b00      	cmp	r3, #0
 80058da:	f000 8090 	beq.w	80059fe <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80058de:	697b      	ldr	r3, [r7, #20]
 80058e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80058e2:	4a44      	ldr	r2, [pc, #272]	@ (80059f4 <UART_SetConfig+0x5c4>)
 80058e4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80058e8:	461a      	mov	r2, r3
 80058ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80058ec:	fbb3 f3f2 	udiv	r3, r3, r2
 80058f0:	005a      	lsls	r2, r3, #1
 80058f2:	697b      	ldr	r3, [r7, #20]
 80058f4:	685b      	ldr	r3, [r3, #4]
 80058f6:	085b      	lsrs	r3, r3, #1
 80058f8:	441a      	add	r2, r3
 80058fa:	697b      	ldr	r3, [r7, #20]
 80058fc:	685b      	ldr	r3, [r3, #4]
 80058fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8005902:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005904:	6a3b      	ldr	r3, [r7, #32]
 8005906:	2b0f      	cmp	r3, #15
 8005908:	d916      	bls.n	8005938 <UART_SetConfig+0x508>
 800590a:	6a3b      	ldr	r3, [r7, #32]
 800590c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005910:	d212      	bcs.n	8005938 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005912:	6a3b      	ldr	r3, [r7, #32]
 8005914:	b29b      	uxth	r3, r3
 8005916:	f023 030f 	bic.w	r3, r3, #15
 800591a:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800591c:	6a3b      	ldr	r3, [r7, #32]
 800591e:	085b      	lsrs	r3, r3, #1
 8005920:	b29b      	uxth	r3, r3
 8005922:	f003 0307 	and.w	r3, r3, #7
 8005926:	b29a      	uxth	r2, r3
 8005928:	8bfb      	ldrh	r3, [r7, #30]
 800592a:	4313      	orrs	r3, r2
 800592c:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800592e:	697b      	ldr	r3, [r7, #20]
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	8bfa      	ldrh	r2, [r7, #30]
 8005934:	60da      	str	r2, [r3, #12]
 8005936:	e062      	b.n	80059fe <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8005938:	2301      	movs	r3, #1
 800593a:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800593e:	e05e      	b.n	80059fe <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005940:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8005944:	2b08      	cmp	r3, #8
 8005946:	d828      	bhi.n	800599a <UART_SetConfig+0x56a>
 8005948:	a201      	add	r2, pc, #4	@ (adr r2, 8005950 <UART_SetConfig+0x520>)
 800594a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800594e:	bf00      	nop
 8005950:	08005975 	.word	0x08005975
 8005954:	0800597d 	.word	0x0800597d
 8005958:	08005985 	.word	0x08005985
 800595c:	0800599b 	.word	0x0800599b
 8005960:	0800598b 	.word	0x0800598b
 8005964:	0800599b 	.word	0x0800599b
 8005968:	0800599b 	.word	0x0800599b
 800596c:	0800599b 	.word	0x0800599b
 8005970:	08005993 	.word	0x08005993
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005974:	f7fe fd94 	bl	80044a0 <HAL_RCC_GetPCLK1Freq>
 8005978:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800597a:	e014      	b.n	80059a6 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800597c:	f7fe fda6 	bl	80044cc <HAL_RCC_GetPCLK2Freq>
 8005980:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005982:	e010      	b.n	80059a6 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005984:	4b1a      	ldr	r3, [pc, #104]	@ (80059f0 <UART_SetConfig+0x5c0>)
 8005986:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8005988:	e00d      	b.n	80059a6 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800598a:	f7fe fd1b 	bl	80043c4 <HAL_RCC_GetSysClockFreq>
 800598e:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005990:	e009      	b.n	80059a6 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005992:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005996:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8005998:	e005      	b.n	80059a6 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 800599a:	2300      	movs	r3, #0
 800599c:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800599e:	2301      	movs	r3, #1
 80059a0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80059a4:	bf00      	nop
    }

    if (pclk != 0U)
 80059a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80059a8:	2b00      	cmp	r3, #0
 80059aa:	d028      	beq.n	80059fe <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80059ac:	697b      	ldr	r3, [r7, #20]
 80059ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80059b0:	4a10      	ldr	r2, [pc, #64]	@ (80059f4 <UART_SetConfig+0x5c4>)
 80059b2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80059b6:	461a      	mov	r2, r3
 80059b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80059ba:	fbb3 f2f2 	udiv	r2, r3, r2
 80059be:	697b      	ldr	r3, [r7, #20]
 80059c0:	685b      	ldr	r3, [r3, #4]
 80059c2:	085b      	lsrs	r3, r3, #1
 80059c4:	441a      	add	r2, r3
 80059c6:	697b      	ldr	r3, [r7, #20]
 80059c8:	685b      	ldr	r3, [r3, #4]
 80059ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80059ce:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80059d0:	6a3b      	ldr	r3, [r7, #32]
 80059d2:	2b0f      	cmp	r3, #15
 80059d4:	d910      	bls.n	80059f8 <UART_SetConfig+0x5c8>
 80059d6:	6a3b      	ldr	r3, [r7, #32]
 80059d8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80059dc:	d20c      	bcs.n	80059f8 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80059de:	6a3b      	ldr	r3, [r7, #32]
 80059e0:	b29a      	uxth	r2, r3
 80059e2:	697b      	ldr	r3, [r7, #20]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	60da      	str	r2, [r3, #12]
 80059e8:	e009      	b.n	80059fe <UART_SetConfig+0x5ce>
 80059ea:	bf00      	nop
 80059ec:	40008000 	.word	0x40008000
 80059f0:	00f42400 	.word	0x00f42400
 80059f4:	0800907c 	.word	0x0800907c
      }
      else
      {
        ret = HAL_ERROR;
 80059f8:	2301      	movs	r3, #1
 80059fa:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80059fe:	697b      	ldr	r3, [r7, #20]
 8005a00:	2201      	movs	r2, #1
 8005a02:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8005a06:	697b      	ldr	r3, [r7, #20]
 8005a08:	2201      	movs	r2, #1
 8005a0a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005a0e:	697b      	ldr	r3, [r7, #20]
 8005a10:	2200      	movs	r2, #0
 8005a12:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8005a14:	697b      	ldr	r3, [r7, #20]
 8005a16:	2200      	movs	r2, #0
 8005a18:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8005a1a:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 8005a1e:	4618      	mov	r0, r3
 8005a20:	3730      	adds	r7, #48	@ 0x30
 8005a22:	46bd      	mov	sp, r7
 8005a24:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08005a28 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005a28:	b480      	push	{r7}
 8005a2a:	b083      	sub	sp, #12
 8005a2c:	af00      	add	r7, sp, #0
 8005a2e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005a34:	f003 0308 	and.w	r3, r3, #8
 8005a38:	2b00      	cmp	r3, #0
 8005a3a:	d00a      	beq.n	8005a52 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	685b      	ldr	r3, [r3, #4]
 8005a42:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	430a      	orrs	r2, r1
 8005a50:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005a56:	f003 0301 	and.w	r3, r3, #1
 8005a5a:	2b00      	cmp	r3, #0
 8005a5c:	d00a      	beq.n	8005a74 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	685b      	ldr	r3, [r3, #4]
 8005a64:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	430a      	orrs	r2, r1
 8005a72:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005a78:	f003 0302 	and.w	r3, r3, #2
 8005a7c:	2b00      	cmp	r3, #0
 8005a7e:	d00a      	beq.n	8005a96 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	685b      	ldr	r3, [r3, #4]
 8005a86:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	430a      	orrs	r2, r1
 8005a94:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005a9a:	f003 0304 	and.w	r3, r3, #4
 8005a9e:	2b00      	cmp	r3, #0
 8005aa0:	d00a      	beq.n	8005ab8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	685b      	ldr	r3, [r3, #4]
 8005aa8:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	430a      	orrs	r2, r1
 8005ab6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005abc:	f003 0310 	and.w	r3, r3, #16
 8005ac0:	2b00      	cmp	r3, #0
 8005ac2:	d00a      	beq.n	8005ada <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	689b      	ldr	r3, [r3, #8]
 8005aca:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	430a      	orrs	r2, r1
 8005ad8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005ade:	f003 0320 	and.w	r3, r3, #32
 8005ae2:	2b00      	cmp	r3, #0
 8005ae4:	d00a      	beq.n	8005afc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	689b      	ldr	r3, [r3, #8]
 8005aec:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	430a      	orrs	r2, r1
 8005afa:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005b00:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005b04:	2b00      	cmp	r3, #0
 8005b06:	d01a      	beq.n	8005b3e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	685b      	ldr	r3, [r3, #4]
 8005b0e:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	430a      	orrs	r2, r1
 8005b1c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005b22:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005b26:	d10a      	bne.n	8005b3e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	685b      	ldr	r3, [r3, #4]
 8005b2e:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	430a      	orrs	r2, r1
 8005b3c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005b42:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005b46:	2b00      	cmp	r3, #0
 8005b48:	d00a      	beq.n	8005b60 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	685b      	ldr	r3, [r3, #4]
 8005b50:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	430a      	orrs	r2, r1
 8005b5e:	605a      	str	r2, [r3, #4]
  }
}
 8005b60:	bf00      	nop
 8005b62:	370c      	adds	r7, #12
 8005b64:	46bd      	mov	sp, r7
 8005b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b6a:	4770      	bx	lr

08005b6c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005b6c:	b580      	push	{r7, lr}
 8005b6e:	b098      	sub	sp, #96	@ 0x60
 8005b70:	af02      	add	r7, sp, #8
 8005b72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	2200      	movs	r2, #0
 8005b78:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005b7c:	f7fc fd40 	bl	8002600 <HAL_GetTick>
 8005b80:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	f003 0308 	and.w	r3, r3, #8
 8005b8c:	2b08      	cmp	r3, #8
 8005b8e:	d12f      	bne.n	8005bf0 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005b90:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005b94:	9300      	str	r3, [sp, #0]
 8005b96:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005b98:	2200      	movs	r2, #0
 8005b9a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8005b9e:	6878      	ldr	r0, [r7, #4]
 8005ba0:	f000 f88e 	bl	8005cc0 <UART_WaitOnFlagUntilTimeout>
 8005ba4:	4603      	mov	r3, r0
 8005ba6:	2b00      	cmp	r3, #0
 8005ba8:	d022      	beq.n	8005bf0 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005bb0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005bb2:	e853 3f00 	ldrex	r3, [r3]
 8005bb6:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005bb8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005bba:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005bbe:	653b      	str	r3, [r7, #80]	@ 0x50
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	461a      	mov	r2, r3
 8005bc6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005bc8:	647b      	str	r3, [r7, #68]	@ 0x44
 8005bca:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005bcc:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005bce:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005bd0:	e841 2300 	strex	r3, r2, [r1]
 8005bd4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005bd6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005bd8:	2b00      	cmp	r3, #0
 8005bda:	d1e6      	bne.n	8005baa <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	2220      	movs	r2, #32
 8005be0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	2200      	movs	r2, #0
 8005be8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005bec:	2303      	movs	r3, #3
 8005bee:	e063      	b.n	8005cb8 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	f003 0304 	and.w	r3, r3, #4
 8005bfa:	2b04      	cmp	r3, #4
 8005bfc:	d149      	bne.n	8005c92 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005bfe:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005c02:	9300      	str	r3, [sp, #0]
 8005c04:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005c06:	2200      	movs	r2, #0
 8005c08:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8005c0c:	6878      	ldr	r0, [r7, #4]
 8005c0e:	f000 f857 	bl	8005cc0 <UART_WaitOnFlagUntilTimeout>
 8005c12:	4603      	mov	r3, r0
 8005c14:	2b00      	cmp	r3, #0
 8005c16:	d03c      	beq.n	8005c92 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c20:	e853 3f00 	ldrex	r3, [r3]
 8005c24:	623b      	str	r3, [r7, #32]
   return(result);
 8005c26:	6a3b      	ldr	r3, [r7, #32]
 8005c28:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005c2c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	461a      	mov	r2, r3
 8005c34:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005c36:	633b      	str	r3, [r7, #48]	@ 0x30
 8005c38:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c3a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005c3c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005c3e:	e841 2300 	strex	r3, r2, [r1]
 8005c42:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005c44:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005c46:	2b00      	cmp	r3, #0
 8005c48:	d1e6      	bne.n	8005c18 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	3308      	adds	r3, #8
 8005c50:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c52:	693b      	ldr	r3, [r7, #16]
 8005c54:	e853 3f00 	ldrex	r3, [r3]
 8005c58:	60fb      	str	r3, [r7, #12]
   return(result);
 8005c5a:	68fb      	ldr	r3, [r7, #12]
 8005c5c:	f023 0301 	bic.w	r3, r3, #1
 8005c60:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	3308      	adds	r3, #8
 8005c68:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005c6a:	61fa      	str	r2, [r7, #28]
 8005c6c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c6e:	69b9      	ldr	r1, [r7, #24]
 8005c70:	69fa      	ldr	r2, [r7, #28]
 8005c72:	e841 2300 	strex	r3, r2, [r1]
 8005c76:	617b      	str	r3, [r7, #20]
   return(result);
 8005c78:	697b      	ldr	r3, [r7, #20]
 8005c7a:	2b00      	cmp	r3, #0
 8005c7c:	d1e5      	bne.n	8005c4a <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	2220      	movs	r2, #32
 8005c82:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	2200      	movs	r2, #0
 8005c8a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005c8e:	2303      	movs	r3, #3
 8005c90:	e012      	b.n	8005cb8 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	2220      	movs	r2, #32
 8005c96:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	2220      	movs	r2, #32
 8005c9e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	2200      	movs	r2, #0
 8005ca6:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	2200      	movs	r2, #0
 8005cac:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	2200      	movs	r2, #0
 8005cb2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8005cb6:	2300      	movs	r3, #0
}
 8005cb8:	4618      	mov	r0, r3
 8005cba:	3758      	adds	r7, #88	@ 0x58
 8005cbc:	46bd      	mov	sp, r7
 8005cbe:	bd80      	pop	{r7, pc}

08005cc0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005cc0:	b580      	push	{r7, lr}
 8005cc2:	b084      	sub	sp, #16
 8005cc4:	af00      	add	r7, sp, #0
 8005cc6:	60f8      	str	r0, [r7, #12]
 8005cc8:	60b9      	str	r1, [r7, #8]
 8005cca:	603b      	str	r3, [r7, #0]
 8005ccc:	4613      	mov	r3, r2
 8005cce:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005cd0:	e04f      	b.n	8005d72 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005cd2:	69bb      	ldr	r3, [r7, #24]
 8005cd4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005cd8:	d04b      	beq.n	8005d72 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005cda:	f7fc fc91 	bl	8002600 <HAL_GetTick>
 8005cde:	4602      	mov	r2, r0
 8005ce0:	683b      	ldr	r3, [r7, #0]
 8005ce2:	1ad3      	subs	r3, r2, r3
 8005ce4:	69ba      	ldr	r2, [r7, #24]
 8005ce6:	429a      	cmp	r2, r3
 8005ce8:	d302      	bcc.n	8005cf0 <UART_WaitOnFlagUntilTimeout+0x30>
 8005cea:	69bb      	ldr	r3, [r7, #24]
 8005cec:	2b00      	cmp	r3, #0
 8005cee:	d101      	bne.n	8005cf4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005cf0:	2303      	movs	r3, #3
 8005cf2:	e04e      	b.n	8005d92 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005cf4:	68fb      	ldr	r3, [r7, #12]
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	f003 0304 	and.w	r3, r3, #4
 8005cfe:	2b00      	cmp	r3, #0
 8005d00:	d037      	beq.n	8005d72 <UART_WaitOnFlagUntilTimeout+0xb2>
 8005d02:	68bb      	ldr	r3, [r7, #8]
 8005d04:	2b80      	cmp	r3, #128	@ 0x80
 8005d06:	d034      	beq.n	8005d72 <UART_WaitOnFlagUntilTimeout+0xb2>
 8005d08:	68bb      	ldr	r3, [r7, #8]
 8005d0a:	2b40      	cmp	r3, #64	@ 0x40
 8005d0c:	d031      	beq.n	8005d72 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005d0e:	68fb      	ldr	r3, [r7, #12]
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	69db      	ldr	r3, [r3, #28]
 8005d14:	f003 0308 	and.w	r3, r3, #8
 8005d18:	2b08      	cmp	r3, #8
 8005d1a:	d110      	bne.n	8005d3e <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005d1c:	68fb      	ldr	r3, [r7, #12]
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	2208      	movs	r2, #8
 8005d22:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005d24:	68f8      	ldr	r0, [r7, #12]
 8005d26:	f000 f838 	bl	8005d9a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005d2a:	68fb      	ldr	r3, [r7, #12]
 8005d2c:	2208      	movs	r2, #8
 8005d2e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005d32:	68fb      	ldr	r3, [r7, #12]
 8005d34:	2200      	movs	r2, #0
 8005d36:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8005d3a:	2301      	movs	r3, #1
 8005d3c:	e029      	b.n	8005d92 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005d3e:	68fb      	ldr	r3, [r7, #12]
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	69db      	ldr	r3, [r3, #28]
 8005d44:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005d48:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005d4c:	d111      	bne.n	8005d72 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005d4e:	68fb      	ldr	r3, [r7, #12]
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8005d56:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005d58:	68f8      	ldr	r0, [r7, #12]
 8005d5a:	f000 f81e 	bl	8005d9a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005d5e:	68fb      	ldr	r3, [r7, #12]
 8005d60:	2220      	movs	r2, #32
 8005d62:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005d66:	68fb      	ldr	r3, [r7, #12]
 8005d68:	2200      	movs	r2, #0
 8005d6a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8005d6e:	2303      	movs	r3, #3
 8005d70:	e00f      	b.n	8005d92 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005d72:	68fb      	ldr	r3, [r7, #12]
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	69da      	ldr	r2, [r3, #28]
 8005d78:	68bb      	ldr	r3, [r7, #8]
 8005d7a:	4013      	ands	r3, r2
 8005d7c:	68ba      	ldr	r2, [r7, #8]
 8005d7e:	429a      	cmp	r2, r3
 8005d80:	bf0c      	ite	eq
 8005d82:	2301      	moveq	r3, #1
 8005d84:	2300      	movne	r3, #0
 8005d86:	b2db      	uxtb	r3, r3
 8005d88:	461a      	mov	r2, r3
 8005d8a:	79fb      	ldrb	r3, [r7, #7]
 8005d8c:	429a      	cmp	r2, r3
 8005d8e:	d0a0      	beq.n	8005cd2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005d90:	2300      	movs	r3, #0
}
 8005d92:	4618      	mov	r0, r3
 8005d94:	3710      	adds	r7, #16
 8005d96:	46bd      	mov	sp, r7
 8005d98:	bd80      	pop	{r7, pc}

08005d9a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005d9a:	b480      	push	{r7}
 8005d9c:	b095      	sub	sp, #84	@ 0x54
 8005d9e:	af00      	add	r7, sp, #0
 8005da0:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005da8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005daa:	e853 3f00 	ldrex	r3, [r3]
 8005dae:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005db0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005db2:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005db6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	461a      	mov	r2, r3
 8005dbe:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005dc0:	643b      	str	r3, [r7, #64]	@ 0x40
 8005dc2:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005dc4:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005dc6:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005dc8:	e841 2300 	strex	r3, r2, [r1]
 8005dcc:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005dce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005dd0:	2b00      	cmp	r3, #0
 8005dd2:	d1e6      	bne.n	8005da2 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	3308      	adds	r3, #8
 8005dda:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ddc:	6a3b      	ldr	r3, [r7, #32]
 8005dde:	e853 3f00 	ldrex	r3, [r3]
 8005de2:	61fb      	str	r3, [r7, #28]
   return(result);
 8005de4:	69fb      	ldr	r3, [r7, #28]
 8005de6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005dea:	f023 0301 	bic.w	r3, r3, #1
 8005dee:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	3308      	adds	r3, #8
 8005df6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005df8:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005dfa:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005dfc:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005dfe:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005e00:	e841 2300 	strex	r3, r2, [r1]
 8005e04:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005e06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e08:	2b00      	cmp	r3, #0
 8005e0a:	d1e3      	bne.n	8005dd4 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005e10:	2b01      	cmp	r3, #1
 8005e12:	d118      	bne.n	8005e46 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e1a:	68fb      	ldr	r3, [r7, #12]
 8005e1c:	e853 3f00 	ldrex	r3, [r3]
 8005e20:	60bb      	str	r3, [r7, #8]
   return(result);
 8005e22:	68bb      	ldr	r3, [r7, #8]
 8005e24:	f023 0310 	bic.w	r3, r3, #16
 8005e28:	647b      	str	r3, [r7, #68]	@ 0x44
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	461a      	mov	r2, r3
 8005e30:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005e32:	61bb      	str	r3, [r7, #24]
 8005e34:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e36:	6979      	ldr	r1, [r7, #20]
 8005e38:	69ba      	ldr	r2, [r7, #24]
 8005e3a:	e841 2300 	strex	r3, r2, [r1]
 8005e3e:	613b      	str	r3, [r7, #16]
   return(result);
 8005e40:	693b      	ldr	r3, [r7, #16]
 8005e42:	2b00      	cmp	r3, #0
 8005e44:	d1e6      	bne.n	8005e14 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	2220      	movs	r2, #32
 8005e4a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	2200      	movs	r2, #0
 8005e52:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	2200      	movs	r2, #0
 8005e58:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8005e5a:	bf00      	nop
 8005e5c:	3754      	adds	r7, #84	@ 0x54
 8005e5e:	46bd      	mov	sp, r7
 8005e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e64:	4770      	bx	lr

08005e66 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005e66:	b580      	push	{r7, lr}
 8005e68:	b084      	sub	sp, #16
 8005e6a:	af00      	add	r7, sp, #0
 8005e6c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005e72:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8005e74:	68fb      	ldr	r3, [r7, #12]
 8005e76:	2200      	movs	r2, #0
 8005e78:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005e7c:	68f8      	ldr	r0, [r7, #12]
 8005e7e:	f7ff fac1 	bl	8005404 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005e82:	bf00      	nop
 8005e84:	3710      	adds	r7, #16
 8005e86:	46bd      	mov	sp, r7
 8005e88:	bd80      	pop	{r7, pc}

08005e8a <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005e8a:	b580      	push	{r7, lr}
 8005e8c:	b088      	sub	sp, #32
 8005e8e:	af00      	add	r7, sp, #0
 8005e90:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e98:	68fb      	ldr	r3, [r7, #12]
 8005e9a:	e853 3f00 	ldrex	r3, [r3]
 8005e9e:	60bb      	str	r3, [r7, #8]
   return(result);
 8005ea0:	68bb      	ldr	r3, [r7, #8]
 8005ea2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005ea6:	61fb      	str	r3, [r7, #28]
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	461a      	mov	r2, r3
 8005eae:	69fb      	ldr	r3, [r7, #28]
 8005eb0:	61bb      	str	r3, [r7, #24]
 8005eb2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005eb4:	6979      	ldr	r1, [r7, #20]
 8005eb6:	69ba      	ldr	r2, [r7, #24]
 8005eb8:	e841 2300 	strex	r3, r2, [r1]
 8005ebc:	613b      	str	r3, [r7, #16]
   return(result);
 8005ebe:	693b      	ldr	r3, [r7, #16]
 8005ec0:	2b00      	cmp	r3, #0
 8005ec2:	d1e6      	bne.n	8005e92 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	2220      	movs	r2, #32
 8005ec8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	2200      	movs	r2, #0
 8005ed0:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005ed2:	6878      	ldr	r0, [r7, #4]
 8005ed4:	f7ff fa8c 	bl	80053f0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005ed8:	bf00      	nop
 8005eda:	3720      	adds	r7, #32
 8005edc:	46bd      	mov	sp, r7
 8005ede:	bd80      	pop	{r7, pc}

08005ee0 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8005ee0:	b480      	push	{r7}
 8005ee2:	b083      	sub	sp, #12
 8005ee4:	af00      	add	r7, sp, #0
 8005ee6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8005ee8:	bf00      	nop
 8005eea:	370c      	adds	r7, #12
 8005eec:	46bd      	mov	sp, r7
 8005eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ef2:	4770      	bx	lr

08005ef4 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8005ef4:	b480      	push	{r7}
 8005ef6:	b083      	sub	sp, #12
 8005ef8:	af00      	add	r7, sp, #0
 8005efa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8005efc:	bf00      	nop
 8005efe:	370c      	adds	r7, #12
 8005f00:	46bd      	mov	sp, r7
 8005f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f06:	4770      	bx	lr

08005f08 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8005f08:	b480      	push	{r7}
 8005f0a:	b083      	sub	sp, #12
 8005f0c:	af00      	add	r7, sp, #0
 8005f0e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8005f10:	bf00      	nop
 8005f12:	370c      	adds	r7, #12
 8005f14:	46bd      	mov	sp, r7
 8005f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f1a:	4770      	bx	lr

08005f1c <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8005f1c:	b480      	push	{r7}
 8005f1e:	b085      	sub	sp, #20
 8005f20:	af00      	add	r7, sp, #0
 8005f22:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8005f2a:	2b01      	cmp	r3, #1
 8005f2c:	d101      	bne.n	8005f32 <HAL_UARTEx_DisableFifoMode+0x16>
 8005f2e:	2302      	movs	r3, #2
 8005f30:	e027      	b.n	8005f82 <HAL_UARTEx_DisableFifoMode+0x66>
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	2201      	movs	r2, #1
 8005f36:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	2224      	movs	r2, #36	@ 0x24
 8005f3e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	681a      	ldr	r2, [r3, #0]
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	f022 0201 	bic.w	r2, r2, #1
 8005f58:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8005f5a:	68fb      	ldr	r3, [r7, #12]
 8005f5c:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8005f60:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	2200      	movs	r2, #0
 8005f66:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	68fa      	ldr	r2, [r7, #12]
 8005f6e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	2220      	movs	r2, #32
 8005f74:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	2200      	movs	r2, #0
 8005f7c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8005f80:	2300      	movs	r3, #0
}
 8005f82:	4618      	mov	r0, r3
 8005f84:	3714      	adds	r7, #20
 8005f86:	46bd      	mov	sp, r7
 8005f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f8c:	4770      	bx	lr

08005f8e <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005f8e:	b580      	push	{r7, lr}
 8005f90:	b084      	sub	sp, #16
 8005f92:	af00      	add	r7, sp, #0
 8005f94:	6078      	str	r0, [r7, #4]
 8005f96:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8005f9e:	2b01      	cmp	r3, #1
 8005fa0:	d101      	bne.n	8005fa6 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8005fa2:	2302      	movs	r3, #2
 8005fa4:	e02d      	b.n	8006002 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	2201      	movs	r2, #1
 8005faa:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	2224      	movs	r2, #36	@ 0x24
 8005fb2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	681a      	ldr	r2, [r3, #0]
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	f022 0201 	bic.w	r2, r2, #1
 8005fcc:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	689b      	ldr	r3, [r3, #8]
 8005fd4:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	683a      	ldr	r2, [r7, #0]
 8005fde:	430a      	orrs	r2, r1
 8005fe0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005fe2:	6878      	ldr	r0, [r7, #4]
 8005fe4:	f000 f850 	bl	8006088 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	68fa      	ldr	r2, [r7, #12]
 8005fee:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	2220      	movs	r2, #32
 8005ff4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	2200      	movs	r2, #0
 8005ffc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8006000:	2300      	movs	r3, #0
}
 8006002:	4618      	mov	r0, r3
 8006004:	3710      	adds	r7, #16
 8006006:	46bd      	mov	sp, r7
 8006008:	bd80      	pop	{r7, pc}

0800600a <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800600a:	b580      	push	{r7, lr}
 800600c:	b084      	sub	sp, #16
 800600e:	af00      	add	r7, sp, #0
 8006010:	6078      	str	r0, [r7, #4]
 8006012:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800601a:	2b01      	cmp	r3, #1
 800601c:	d101      	bne.n	8006022 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800601e:	2302      	movs	r3, #2
 8006020:	e02d      	b.n	800607e <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	2201      	movs	r2, #1
 8006026:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	2224      	movs	r2, #36	@ 0x24
 800602e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	681a      	ldr	r2, [r3, #0]
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	f022 0201 	bic.w	r2, r2, #1
 8006048:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	689b      	ldr	r3, [r3, #8]
 8006050:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	683a      	ldr	r2, [r7, #0]
 800605a:	430a      	orrs	r2, r1
 800605c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800605e:	6878      	ldr	r0, [r7, #4]
 8006060:	f000 f812 	bl	8006088 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	68fa      	ldr	r2, [r7, #12]
 800606a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	2220      	movs	r2, #32
 8006070:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	2200      	movs	r2, #0
 8006078:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800607c:	2300      	movs	r3, #0
}
 800607e:	4618      	mov	r0, r3
 8006080:	3710      	adds	r7, #16
 8006082:	46bd      	mov	sp, r7
 8006084:	bd80      	pop	{r7, pc}
	...

08006088 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8006088:	b480      	push	{r7}
 800608a:	b085      	sub	sp, #20
 800608c:	af00      	add	r7, sp, #0
 800608e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006094:	2b00      	cmp	r3, #0
 8006096:	d108      	bne.n	80060aa <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	2201      	movs	r2, #1
 800609c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	2201      	movs	r2, #1
 80060a4:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80060a8:	e031      	b.n	800610e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80060aa:	2308      	movs	r3, #8
 80060ac:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80060ae:	2308      	movs	r3, #8
 80060b0:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	689b      	ldr	r3, [r3, #8]
 80060b8:	0e5b      	lsrs	r3, r3, #25
 80060ba:	b2db      	uxtb	r3, r3
 80060bc:	f003 0307 	and.w	r3, r3, #7
 80060c0:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	689b      	ldr	r3, [r3, #8]
 80060c8:	0f5b      	lsrs	r3, r3, #29
 80060ca:	b2db      	uxtb	r3, r3
 80060cc:	f003 0307 	and.w	r3, r3, #7
 80060d0:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80060d2:	7bbb      	ldrb	r3, [r7, #14]
 80060d4:	7b3a      	ldrb	r2, [r7, #12]
 80060d6:	4911      	ldr	r1, [pc, #68]	@ (800611c <UARTEx_SetNbDataToProcess+0x94>)
 80060d8:	5c8a      	ldrb	r2, [r1, r2]
 80060da:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80060de:	7b3a      	ldrb	r2, [r7, #12]
 80060e0:	490f      	ldr	r1, [pc, #60]	@ (8006120 <UARTEx_SetNbDataToProcess+0x98>)
 80060e2:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80060e4:	fb93 f3f2 	sdiv	r3, r3, r2
 80060e8:	b29a      	uxth	r2, r3
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80060f0:	7bfb      	ldrb	r3, [r7, #15]
 80060f2:	7b7a      	ldrb	r2, [r7, #13]
 80060f4:	4909      	ldr	r1, [pc, #36]	@ (800611c <UARTEx_SetNbDataToProcess+0x94>)
 80060f6:	5c8a      	ldrb	r2, [r1, r2]
 80060f8:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80060fc:	7b7a      	ldrb	r2, [r7, #13]
 80060fe:	4908      	ldr	r1, [pc, #32]	@ (8006120 <UARTEx_SetNbDataToProcess+0x98>)
 8006100:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006102:	fb93 f3f2 	sdiv	r3, r3, r2
 8006106:	b29a      	uxth	r2, r3
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800610e:	bf00      	nop
 8006110:	3714      	adds	r7, #20
 8006112:	46bd      	mov	sp, r7
 8006114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006118:	4770      	bx	lr
 800611a:	bf00      	nop
 800611c:	08009094 	.word	0x08009094
 8006120:	0800909c 	.word	0x0800909c

08006124 <__cvt>:
 8006124:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006128:	ec57 6b10 	vmov	r6, r7, d0
 800612c:	2f00      	cmp	r7, #0
 800612e:	460c      	mov	r4, r1
 8006130:	4619      	mov	r1, r3
 8006132:	463b      	mov	r3, r7
 8006134:	bfbb      	ittet	lt
 8006136:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800613a:	461f      	movlt	r7, r3
 800613c:	2300      	movge	r3, #0
 800613e:	232d      	movlt	r3, #45	@ 0x2d
 8006140:	700b      	strb	r3, [r1, #0]
 8006142:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006144:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8006148:	4691      	mov	r9, r2
 800614a:	f023 0820 	bic.w	r8, r3, #32
 800614e:	bfbc      	itt	lt
 8006150:	4632      	movlt	r2, r6
 8006152:	4616      	movlt	r6, r2
 8006154:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8006158:	d005      	beq.n	8006166 <__cvt+0x42>
 800615a:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800615e:	d100      	bne.n	8006162 <__cvt+0x3e>
 8006160:	3401      	adds	r4, #1
 8006162:	2102      	movs	r1, #2
 8006164:	e000      	b.n	8006168 <__cvt+0x44>
 8006166:	2103      	movs	r1, #3
 8006168:	ab03      	add	r3, sp, #12
 800616a:	9301      	str	r3, [sp, #4]
 800616c:	ab02      	add	r3, sp, #8
 800616e:	9300      	str	r3, [sp, #0]
 8006170:	ec47 6b10 	vmov	d0, r6, r7
 8006174:	4653      	mov	r3, sl
 8006176:	4622      	mov	r2, r4
 8006178:	f000 ff0a 	bl	8006f90 <_dtoa_r>
 800617c:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8006180:	4605      	mov	r5, r0
 8006182:	d119      	bne.n	80061b8 <__cvt+0x94>
 8006184:	f019 0f01 	tst.w	r9, #1
 8006188:	d00e      	beq.n	80061a8 <__cvt+0x84>
 800618a:	eb00 0904 	add.w	r9, r0, r4
 800618e:	2200      	movs	r2, #0
 8006190:	2300      	movs	r3, #0
 8006192:	4630      	mov	r0, r6
 8006194:	4639      	mov	r1, r7
 8006196:	f7fa fccf 	bl	8000b38 <__aeabi_dcmpeq>
 800619a:	b108      	cbz	r0, 80061a0 <__cvt+0x7c>
 800619c:	f8cd 900c 	str.w	r9, [sp, #12]
 80061a0:	2230      	movs	r2, #48	@ 0x30
 80061a2:	9b03      	ldr	r3, [sp, #12]
 80061a4:	454b      	cmp	r3, r9
 80061a6:	d31e      	bcc.n	80061e6 <__cvt+0xc2>
 80061a8:	9b03      	ldr	r3, [sp, #12]
 80061aa:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80061ac:	1b5b      	subs	r3, r3, r5
 80061ae:	4628      	mov	r0, r5
 80061b0:	6013      	str	r3, [r2, #0]
 80061b2:	b004      	add	sp, #16
 80061b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80061b8:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80061bc:	eb00 0904 	add.w	r9, r0, r4
 80061c0:	d1e5      	bne.n	800618e <__cvt+0x6a>
 80061c2:	7803      	ldrb	r3, [r0, #0]
 80061c4:	2b30      	cmp	r3, #48	@ 0x30
 80061c6:	d10a      	bne.n	80061de <__cvt+0xba>
 80061c8:	2200      	movs	r2, #0
 80061ca:	2300      	movs	r3, #0
 80061cc:	4630      	mov	r0, r6
 80061ce:	4639      	mov	r1, r7
 80061d0:	f7fa fcb2 	bl	8000b38 <__aeabi_dcmpeq>
 80061d4:	b918      	cbnz	r0, 80061de <__cvt+0xba>
 80061d6:	f1c4 0401 	rsb	r4, r4, #1
 80061da:	f8ca 4000 	str.w	r4, [sl]
 80061de:	f8da 3000 	ldr.w	r3, [sl]
 80061e2:	4499      	add	r9, r3
 80061e4:	e7d3      	b.n	800618e <__cvt+0x6a>
 80061e6:	1c59      	adds	r1, r3, #1
 80061e8:	9103      	str	r1, [sp, #12]
 80061ea:	701a      	strb	r2, [r3, #0]
 80061ec:	e7d9      	b.n	80061a2 <__cvt+0x7e>

080061ee <__exponent>:
 80061ee:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80061f0:	2900      	cmp	r1, #0
 80061f2:	bfba      	itte	lt
 80061f4:	4249      	neglt	r1, r1
 80061f6:	232d      	movlt	r3, #45	@ 0x2d
 80061f8:	232b      	movge	r3, #43	@ 0x2b
 80061fa:	2909      	cmp	r1, #9
 80061fc:	7002      	strb	r2, [r0, #0]
 80061fe:	7043      	strb	r3, [r0, #1]
 8006200:	dd29      	ble.n	8006256 <__exponent+0x68>
 8006202:	f10d 0307 	add.w	r3, sp, #7
 8006206:	461d      	mov	r5, r3
 8006208:	270a      	movs	r7, #10
 800620a:	461a      	mov	r2, r3
 800620c:	fbb1 f6f7 	udiv	r6, r1, r7
 8006210:	fb07 1416 	mls	r4, r7, r6, r1
 8006214:	3430      	adds	r4, #48	@ 0x30
 8006216:	f802 4c01 	strb.w	r4, [r2, #-1]
 800621a:	460c      	mov	r4, r1
 800621c:	2c63      	cmp	r4, #99	@ 0x63
 800621e:	f103 33ff 	add.w	r3, r3, #4294967295
 8006222:	4631      	mov	r1, r6
 8006224:	dcf1      	bgt.n	800620a <__exponent+0x1c>
 8006226:	3130      	adds	r1, #48	@ 0x30
 8006228:	1e94      	subs	r4, r2, #2
 800622a:	f803 1c01 	strb.w	r1, [r3, #-1]
 800622e:	1c41      	adds	r1, r0, #1
 8006230:	4623      	mov	r3, r4
 8006232:	42ab      	cmp	r3, r5
 8006234:	d30a      	bcc.n	800624c <__exponent+0x5e>
 8006236:	f10d 0309 	add.w	r3, sp, #9
 800623a:	1a9b      	subs	r3, r3, r2
 800623c:	42ac      	cmp	r4, r5
 800623e:	bf88      	it	hi
 8006240:	2300      	movhi	r3, #0
 8006242:	3302      	adds	r3, #2
 8006244:	4403      	add	r3, r0
 8006246:	1a18      	subs	r0, r3, r0
 8006248:	b003      	add	sp, #12
 800624a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800624c:	f813 6b01 	ldrb.w	r6, [r3], #1
 8006250:	f801 6f01 	strb.w	r6, [r1, #1]!
 8006254:	e7ed      	b.n	8006232 <__exponent+0x44>
 8006256:	2330      	movs	r3, #48	@ 0x30
 8006258:	3130      	adds	r1, #48	@ 0x30
 800625a:	7083      	strb	r3, [r0, #2]
 800625c:	70c1      	strb	r1, [r0, #3]
 800625e:	1d03      	adds	r3, r0, #4
 8006260:	e7f1      	b.n	8006246 <__exponent+0x58>
	...

08006264 <_printf_float>:
 8006264:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006268:	b08d      	sub	sp, #52	@ 0x34
 800626a:	460c      	mov	r4, r1
 800626c:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8006270:	4616      	mov	r6, r2
 8006272:	461f      	mov	r7, r3
 8006274:	4605      	mov	r5, r0
 8006276:	f000 fd6d 	bl	8006d54 <_localeconv_r>
 800627a:	6803      	ldr	r3, [r0, #0]
 800627c:	9304      	str	r3, [sp, #16]
 800627e:	4618      	mov	r0, r3
 8006280:	f7fa f82e 	bl	80002e0 <strlen>
 8006284:	2300      	movs	r3, #0
 8006286:	930a      	str	r3, [sp, #40]	@ 0x28
 8006288:	f8d8 3000 	ldr.w	r3, [r8]
 800628c:	9005      	str	r0, [sp, #20]
 800628e:	3307      	adds	r3, #7
 8006290:	f023 0307 	bic.w	r3, r3, #7
 8006294:	f103 0208 	add.w	r2, r3, #8
 8006298:	f894 a018 	ldrb.w	sl, [r4, #24]
 800629c:	f8d4 b000 	ldr.w	fp, [r4]
 80062a0:	f8c8 2000 	str.w	r2, [r8]
 80062a4:	e9d3 8900 	ldrd	r8, r9, [r3]
 80062a8:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 80062ac:	9307      	str	r3, [sp, #28]
 80062ae:	f8cd 8018 	str.w	r8, [sp, #24]
 80062b2:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 80062b6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80062ba:	4b9c      	ldr	r3, [pc, #624]	@ (800652c <_printf_float+0x2c8>)
 80062bc:	f04f 32ff 	mov.w	r2, #4294967295
 80062c0:	f7fa fc6c 	bl	8000b9c <__aeabi_dcmpun>
 80062c4:	bb70      	cbnz	r0, 8006324 <_printf_float+0xc0>
 80062c6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80062ca:	4b98      	ldr	r3, [pc, #608]	@ (800652c <_printf_float+0x2c8>)
 80062cc:	f04f 32ff 	mov.w	r2, #4294967295
 80062d0:	f7fa fc46 	bl	8000b60 <__aeabi_dcmple>
 80062d4:	bb30      	cbnz	r0, 8006324 <_printf_float+0xc0>
 80062d6:	2200      	movs	r2, #0
 80062d8:	2300      	movs	r3, #0
 80062da:	4640      	mov	r0, r8
 80062dc:	4649      	mov	r1, r9
 80062de:	f7fa fc35 	bl	8000b4c <__aeabi_dcmplt>
 80062e2:	b110      	cbz	r0, 80062ea <_printf_float+0x86>
 80062e4:	232d      	movs	r3, #45	@ 0x2d
 80062e6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80062ea:	4a91      	ldr	r2, [pc, #580]	@ (8006530 <_printf_float+0x2cc>)
 80062ec:	4b91      	ldr	r3, [pc, #580]	@ (8006534 <_printf_float+0x2d0>)
 80062ee:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 80062f2:	bf94      	ite	ls
 80062f4:	4690      	movls	r8, r2
 80062f6:	4698      	movhi	r8, r3
 80062f8:	2303      	movs	r3, #3
 80062fa:	6123      	str	r3, [r4, #16]
 80062fc:	f02b 0304 	bic.w	r3, fp, #4
 8006300:	6023      	str	r3, [r4, #0]
 8006302:	f04f 0900 	mov.w	r9, #0
 8006306:	9700      	str	r7, [sp, #0]
 8006308:	4633      	mov	r3, r6
 800630a:	aa0b      	add	r2, sp, #44	@ 0x2c
 800630c:	4621      	mov	r1, r4
 800630e:	4628      	mov	r0, r5
 8006310:	f000 f9d2 	bl	80066b8 <_printf_common>
 8006314:	3001      	adds	r0, #1
 8006316:	f040 808d 	bne.w	8006434 <_printf_float+0x1d0>
 800631a:	f04f 30ff 	mov.w	r0, #4294967295
 800631e:	b00d      	add	sp, #52	@ 0x34
 8006320:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006324:	4642      	mov	r2, r8
 8006326:	464b      	mov	r3, r9
 8006328:	4640      	mov	r0, r8
 800632a:	4649      	mov	r1, r9
 800632c:	f7fa fc36 	bl	8000b9c <__aeabi_dcmpun>
 8006330:	b140      	cbz	r0, 8006344 <_printf_float+0xe0>
 8006332:	464b      	mov	r3, r9
 8006334:	2b00      	cmp	r3, #0
 8006336:	bfbc      	itt	lt
 8006338:	232d      	movlt	r3, #45	@ 0x2d
 800633a:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800633e:	4a7e      	ldr	r2, [pc, #504]	@ (8006538 <_printf_float+0x2d4>)
 8006340:	4b7e      	ldr	r3, [pc, #504]	@ (800653c <_printf_float+0x2d8>)
 8006342:	e7d4      	b.n	80062ee <_printf_float+0x8a>
 8006344:	6863      	ldr	r3, [r4, #4]
 8006346:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800634a:	9206      	str	r2, [sp, #24]
 800634c:	1c5a      	adds	r2, r3, #1
 800634e:	d13b      	bne.n	80063c8 <_printf_float+0x164>
 8006350:	2306      	movs	r3, #6
 8006352:	6063      	str	r3, [r4, #4]
 8006354:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8006358:	2300      	movs	r3, #0
 800635a:	6022      	str	r2, [r4, #0]
 800635c:	9303      	str	r3, [sp, #12]
 800635e:	ab0a      	add	r3, sp, #40	@ 0x28
 8006360:	e9cd a301 	strd	sl, r3, [sp, #4]
 8006364:	ab09      	add	r3, sp, #36	@ 0x24
 8006366:	9300      	str	r3, [sp, #0]
 8006368:	6861      	ldr	r1, [r4, #4]
 800636a:	ec49 8b10 	vmov	d0, r8, r9
 800636e:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8006372:	4628      	mov	r0, r5
 8006374:	f7ff fed6 	bl	8006124 <__cvt>
 8006378:	9b06      	ldr	r3, [sp, #24]
 800637a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800637c:	2b47      	cmp	r3, #71	@ 0x47
 800637e:	4680      	mov	r8, r0
 8006380:	d129      	bne.n	80063d6 <_printf_float+0x172>
 8006382:	1cc8      	adds	r0, r1, #3
 8006384:	db02      	blt.n	800638c <_printf_float+0x128>
 8006386:	6863      	ldr	r3, [r4, #4]
 8006388:	4299      	cmp	r1, r3
 800638a:	dd41      	ble.n	8006410 <_printf_float+0x1ac>
 800638c:	f1aa 0a02 	sub.w	sl, sl, #2
 8006390:	fa5f fa8a 	uxtb.w	sl, sl
 8006394:	3901      	subs	r1, #1
 8006396:	4652      	mov	r2, sl
 8006398:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800639c:	9109      	str	r1, [sp, #36]	@ 0x24
 800639e:	f7ff ff26 	bl	80061ee <__exponent>
 80063a2:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80063a4:	1813      	adds	r3, r2, r0
 80063a6:	2a01      	cmp	r2, #1
 80063a8:	4681      	mov	r9, r0
 80063aa:	6123      	str	r3, [r4, #16]
 80063ac:	dc02      	bgt.n	80063b4 <_printf_float+0x150>
 80063ae:	6822      	ldr	r2, [r4, #0]
 80063b0:	07d2      	lsls	r2, r2, #31
 80063b2:	d501      	bpl.n	80063b8 <_printf_float+0x154>
 80063b4:	3301      	adds	r3, #1
 80063b6:	6123      	str	r3, [r4, #16]
 80063b8:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 80063bc:	2b00      	cmp	r3, #0
 80063be:	d0a2      	beq.n	8006306 <_printf_float+0xa2>
 80063c0:	232d      	movs	r3, #45	@ 0x2d
 80063c2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80063c6:	e79e      	b.n	8006306 <_printf_float+0xa2>
 80063c8:	9a06      	ldr	r2, [sp, #24]
 80063ca:	2a47      	cmp	r2, #71	@ 0x47
 80063cc:	d1c2      	bne.n	8006354 <_printf_float+0xf0>
 80063ce:	2b00      	cmp	r3, #0
 80063d0:	d1c0      	bne.n	8006354 <_printf_float+0xf0>
 80063d2:	2301      	movs	r3, #1
 80063d4:	e7bd      	b.n	8006352 <_printf_float+0xee>
 80063d6:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80063da:	d9db      	bls.n	8006394 <_printf_float+0x130>
 80063dc:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 80063e0:	d118      	bne.n	8006414 <_printf_float+0x1b0>
 80063e2:	2900      	cmp	r1, #0
 80063e4:	6863      	ldr	r3, [r4, #4]
 80063e6:	dd0b      	ble.n	8006400 <_printf_float+0x19c>
 80063e8:	6121      	str	r1, [r4, #16]
 80063ea:	b913      	cbnz	r3, 80063f2 <_printf_float+0x18e>
 80063ec:	6822      	ldr	r2, [r4, #0]
 80063ee:	07d0      	lsls	r0, r2, #31
 80063f0:	d502      	bpl.n	80063f8 <_printf_float+0x194>
 80063f2:	3301      	adds	r3, #1
 80063f4:	440b      	add	r3, r1
 80063f6:	6123      	str	r3, [r4, #16]
 80063f8:	65a1      	str	r1, [r4, #88]	@ 0x58
 80063fa:	f04f 0900 	mov.w	r9, #0
 80063fe:	e7db      	b.n	80063b8 <_printf_float+0x154>
 8006400:	b913      	cbnz	r3, 8006408 <_printf_float+0x1a4>
 8006402:	6822      	ldr	r2, [r4, #0]
 8006404:	07d2      	lsls	r2, r2, #31
 8006406:	d501      	bpl.n	800640c <_printf_float+0x1a8>
 8006408:	3302      	adds	r3, #2
 800640a:	e7f4      	b.n	80063f6 <_printf_float+0x192>
 800640c:	2301      	movs	r3, #1
 800640e:	e7f2      	b.n	80063f6 <_printf_float+0x192>
 8006410:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8006414:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006416:	4299      	cmp	r1, r3
 8006418:	db05      	blt.n	8006426 <_printf_float+0x1c2>
 800641a:	6823      	ldr	r3, [r4, #0]
 800641c:	6121      	str	r1, [r4, #16]
 800641e:	07d8      	lsls	r0, r3, #31
 8006420:	d5ea      	bpl.n	80063f8 <_printf_float+0x194>
 8006422:	1c4b      	adds	r3, r1, #1
 8006424:	e7e7      	b.n	80063f6 <_printf_float+0x192>
 8006426:	2900      	cmp	r1, #0
 8006428:	bfd4      	ite	le
 800642a:	f1c1 0202 	rsble	r2, r1, #2
 800642e:	2201      	movgt	r2, #1
 8006430:	4413      	add	r3, r2
 8006432:	e7e0      	b.n	80063f6 <_printf_float+0x192>
 8006434:	6823      	ldr	r3, [r4, #0]
 8006436:	055a      	lsls	r2, r3, #21
 8006438:	d407      	bmi.n	800644a <_printf_float+0x1e6>
 800643a:	6923      	ldr	r3, [r4, #16]
 800643c:	4642      	mov	r2, r8
 800643e:	4631      	mov	r1, r6
 8006440:	4628      	mov	r0, r5
 8006442:	47b8      	blx	r7
 8006444:	3001      	adds	r0, #1
 8006446:	d12b      	bne.n	80064a0 <_printf_float+0x23c>
 8006448:	e767      	b.n	800631a <_printf_float+0xb6>
 800644a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800644e:	f240 80dd 	bls.w	800660c <_printf_float+0x3a8>
 8006452:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8006456:	2200      	movs	r2, #0
 8006458:	2300      	movs	r3, #0
 800645a:	f7fa fb6d 	bl	8000b38 <__aeabi_dcmpeq>
 800645e:	2800      	cmp	r0, #0
 8006460:	d033      	beq.n	80064ca <_printf_float+0x266>
 8006462:	4a37      	ldr	r2, [pc, #220]	@ (8006540 <_printf_float+0x2dc>)
 8006464:	2301      	movs	r3, #1
 8006466:	4631      	mov	r1, r6
 8006468:	4628      	mov	r0, r5
 800646a:	47b8      	blx	r7
 800646c:	3001      	adds	r0, #1
 800646e:	f43f af54 	beq.w	800631a <_printf_float+0xb6>
 8006472:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8006476:	4543      	cmp	r3, r8
 8006478:	db02      	blt.n	8006480 <_printf_float+0x21c>
 800647a:	6823      	ldr	r3, [r4, #0]
 800647c:	07d8      	lsls	r0, r3, #31
 800647e:	d50f      	bpl.n	80064a0 <_printf_float+0x23c>
 8006480:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006484:	4631      	mov	r1, r6
 8006486:	4628      	mov	r0, r5
 8006488:	47b8      	blx	r7
 800648a:	3001      	adds	r0, #1
 800648c:	f43f af45 	beq.w	800631a <_printf_float+0xb6>
 8006490:	f04f 0900 	mov.w	r9, #0
 8006494:	f108 38ff 	add.w	r8, r8, #4294967295
 8006498:	f104 0a1a 	add.w	sl, r4, #26
 800649c:	45c8      	cmp	r8, r9
 800649e:	dc09      	bgt.n	80064b4 <_printf_float+0x250>
 80064a0:	6823      	ldr	r3, [r4, #0]
 80064a2:	079b      	lsls	r3, r3, #30
 80064a4:	f100 8103 	bmi.w	80066ae <_printf_float+0x44a>
 80064a8:	68e0      	ldr	r0, [r4, #12]
 80064aa:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80064ac:	4298      	cmp	r0, r3
 80064ae:	bfb8      	it	lt
 80064b0:	4618      	movlt	r0, r3
 80064b2:	e734      	b.n	800631e <_printf_float+0xba>
 80064b4:	2301      	movs	r3, #1
 80064b6:	4652      	mov	r2, sl
 80064b8:	4631      	mov	r1, r6
 80064ba:	4628      	mov	r0, r5
 80064bc:	47b8      	blx	r7
 80064be:	3001      	adds	r0, #1
 80064c0:	f43f af2b 	beq.w	800631a <_printf_float+0xb6>
 80064c4:	f109 0901 	add.w	r9, r9, #1
 80064c8:	e7e8      	b.n	800649c <_printf_float+0x238>
 80064ca:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80064cc:	2b00      	cmp	r3, #0
 80064ce:	dc39      	bgt.n	8006544 <_printf_float+0x2e0>
 80064d0:	4a1b      	ldr	r2, [pc, #108]	@ (8006540 <_printf_float+0x2dc>)
 80064d2:	2301      	movs	r3, #1
 80064d4:	4631      	mov	r1, r6
 80064d6:	4628      	mov	r0, r5
 80064d8:	47b8      	blx	r7
 80064da:	3001      	adds	r0, #1
 80064dc:	f43f af1d 	beq.w	800631a <_printf_float+0xb6>
 80064e0:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 80064e4:	ea59 0303 	orrs.w	r3, r9, r3
 80064e8:	d102      	bne.n	80064f0 <_printf_float+0x28c>
 80064ea:	6823      	ldr	r3, [r4, #0]
 80064ec:	07d9      	lsls	r1, r3, #31
 80064ee:	d5d7      	bpl.n	80064a0 <_printf_float+0x23c>
 80064f0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80064f4:	4631      	mov	r1, r6
 80064f6:	4628      	mov	r0, r5
 80064f8:	47b8      	blx	r7
 80064fa:	3001      	adds	r0, #1
 80064fc:	f43f af0d 	beq.w	800631a <_printf_float+0xb6>
 8006500:	f04f 0a00 	mov.w	sl, #0
 8006504:	f104 0b1a 	add.w	fp, r4, #26
 8006508:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800650a:	425b      	negs	r3, r3
 800650c:	4553      	cmp	r3, sl
 800650e:	dc01      	bgt.n	8006514 <_printf_float+0x2b0>
 8006510:	464b      	mov	r3, r9
 8006512:	e793      	b.n	800643c <_printf_float+0x1d8>
 8006514:	2301      	movs	r3, #1
 8006516:	465a      	mov	r2, fp
 8006518:	4631      	mov	r1, r6
 800651a:	4628      	mov	r0, r5
 800651c:	47b8      	blx	r7
 800651e:	3001      	adds	r0, #1
 8006520:	f43f aefb 	beq.w	800631a <_printf_float+0xb6>
 8006524:	f10a 0a01 	add.w	sl, sl, #1
 8006528:	e7ee      	b.n	8006508 <_printf_float+0x2a4>
 800652a:	bf00      	nop
 800652c:	7fefffff 	.word	0x7fefffff
 8006530:	080090a4 	.word	0x080090a4
 8006534:	080090a8 	.word	0x080090a8
 8006538:	080090ac 	.word	0x080090ac
 800653c:	080090b0 	.word	0x080090b0
 8006540:	080090b4 	.word	0x080090b4
 8006544:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8006546:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800654a:	4553      	cmp	r3, sl
 800654c:	bfa8      	it	ge
 800654e:	4653      	movge	r3, sl
 8006550:	2b00      	cmp	r3, #0
 8006552:	4699      	mov	r9, r3
 8006554:	dc36      	bgt.n	80065c4 <_printf_float+0x360>
 8006556:	f04f 0b00 	mov.w	fp, #0
 800655a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800655e:	f104 021a 	add.w	r2, r4, #26
 8006562:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8006564:	9306      	str	r3, [sp, #24]
 8006566:	eba3 0309 	sub.w	r3, r3, r9
 800656a:	455b      	cmp	r3, fp
 800656c:	dc31      	bgt.n	80065d2 <_printf_float+0x36e>
 800656e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006570:	459a      	cmp	sl, r3
 8006572:	dc3a      	bgt.n	80065ea <_printf_float+0x386>
 8006574:	6823      	ldr	r3, [r4, #0]
 8006576:	07da      	lsls	r2, r3, #31
 8006578:	d437      	bmi.n	80065ea <_printf_float+0x386>
 800657a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800657c:	ebaa 0903 	sub.w	r9, sl, r3
 8006580:	9b06      	ldr	r3, [sp, #24]
 8006582:	ebaa 0303 	sub.w	r3, sl, r3
 8006586:	4599      	cmp	r9, r3
 8006588:	bfa8      	it	ge
 800658a:	4699      	movge	r9, r3
 800658c:	f1b9 0f00 	cmp.w	r9, #0
 8006590:	dc33      	bgt.n	80065fa <_printf_float+0x396>
 8006592:	f04f 0800 	mov.w	r8, #0
 8006596:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800659a:	f104 0b1a 	add.w	fp, r4, #26
 800659e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80065a0:	ebaa 0303 	sub.w	r3, sl, r3
 80065a4:	eba3 0309 	sub.w	r3, r3, r9
 80065a8:	4543      	cmp	r3, r8
 80065aa:	f77f af79 	ble.w	80064a0 <_printf_float+0x23c>
 80065ae:	2301      	movs	r3, #1
 80065b0:	465a      	mov	r2, fp
 80065b2:	4631      	mov	r1, r6
 80065b4:	4628      	mov	r0, r5
 80065b6:	47b8      	blx	r7
 80065b8:	3001      	adds	r0, #1
 80065ba:	f43f aeae 	beq.w	800631a <_printf_float+0xb6>
 80065be:	f108 0801 	add.w	r8, r8, #1
 80065c2:	e7ec      	b.n	800659e <_printf_float+0x33a>
 80065c4:	4642      	mov	r2, r8
 80065c6:	4631      	mov	r1, r6
 80065c8:	4628      	mov	r0, r5
 80065ca:	47b8      	blx	r7
 80065cc:	3001      	adds	r0, #1
 80065ce:	d1c2      	bne.n	8006556 <_printf_float+0x2f2>
 80065d0:	e6a3      	b.n	800631a <_printf_float+0xb6>
 80065d2:	2301      	movs	r3, #1
 80065d4:	4631      	mov	r1, r6
 80065d6:	4628      	mov	r0, r5
 80065d8:	9206      	str	r2, [sp, #24]
 80065da:	47b8      	blx	r7
 80065dc:	3001      	adds	r0, #1
 80065de:	f43f ae9c 	beq.w	800631a <_printf_float+0xb6>
 80065e2:	9a06      	ldr	r2, [sp, #24]
 80065e4:	f10b 0b01 	add.w	fp, fp, #1
 80065e8:	e7bb      	b.n	8006562 <_printf_float+0x2fe>
 80065ea:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80065ee:	4631      	mov	r1, r6
 80065f0:	4628      	mov	r0, r5
 80065f2:	47b8      	blx	r7
 80065f4:	3001      	adds	r0, #1
 80065f6:	d1c0      	bne.n	800657a <_printf_float+0x316>
 80065f8:	e68f      	b.n	800631a <_printf_float+0xb6>
 80065fa:	9a06      	ldr	r2, [sp, #24]
 80065fc:	464b      	mov	r3, r9
 80065fe:	4442      	add	r2, r8
 8006600:	4631      	mov	r1, r6
 8006602:	4628      	mov	r0, r5
 8006604:	47b8      	blx	r7
 8006606:	3001      	adds	r0, #1
 8006608:	d1c3      	bne.n	8006592 <_printf_float+0x32e>
 800660a:	e686      	b.n	800631a <_printf_float+0xb6>
 800660c:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8006610:	f1ba 0f01 	cmp.w	sl, #1
 8006614:	dc01      	bgt.n	800661a <_printf_float+0x3b6>
 8006616:	07db      	lsls	r3, r3, #31
 8006618:	d536      	bpl.n	8006688 <_printf_float+0x424>
 800661a:	2301      	movs	r3, #1
 800661c:	4642      	mov	r2, r8
 800661e:	4631      	mov	r1, r6
 8006620:	4628      	mov	r0, r5
 8006622:	47b8      	blx	r7
 8006624:	3001      	adds	r0, #1
 8006626:	f43f ae78 	beq.w	800631a <_printf_float+0xb6>
 800662a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800662e:	4631      	mov	r1, r6
 8006630:	4628      	mov	r0, r5
 8006632:	47b8      	blx	r7
 8006634:	3001      	adds	r0, #1
 8006636:	f43f ae70 	beq.w	800631a <_printf_float+0xb6>
 800663a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800663e:	2200      	movs	r2, #0
 8006640:	2300      	movs	r3, #0
 8006642:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006646:	f7fa fa77 	bl	8000b38 <__aeabi_dcmpeq>
 800664a:	b9c0      	cbnz	r0, 800667e <_printf_float+0x41a>
 800664c:	4653      	mov	r3, sl
 800664e:	f108 0201 	add.w	r2, r8, #1
 8006652:	4631      	mov	r1, r6
 8006654:	4628      	mov	r0, r5
 8006656:	47b8      	blx	r7
 8006658:	3001      	adds	r0, #1
 800665a:	d10c      	bne.n	8006676 <_printf_float+0x412>
 800665c:	e65d      	b.n	800631a <_printf_float+0xb6>
 800665e:	2301      	movs	r3, #1
 8006660:	465a      	mov	r2, fp
 8006662:	4631      	mov	r1, r6
 8006664:	4628      	mov	r0, r5
 8006666:	47b8      	blx	r7
 8006668:	3001      	adds	r0, #1
 800666a:	f43f ae56 	beq.w	800631a <_printf_float+0xb6>
 800666e:	f108 0801 	add.w	r8, r8, #1
 8006672:	45d0      	cmp	r8, sl
 8006674:	dbf3      	blt.n	800665e <_printf_float+0x3fa>
 8006676:	464b      	mov	r3, r9
 8006678:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800667c:	e6df      	b.n	800643e <_printf_float+0x1da>
 800667e:	f04f 0800 	mov.w	r8, #0
 8006682:	f104 0b1a 	add.w	fp, r4, #26
 8006686:	e7f4      	b.n	8006672 <_printf_float+0x40e>
 8006688:	2301      	movs	r3, #1
 800668a:	4642      	mov	r2, r8
 800668c:	e7e1      	b.n	8006652 <_printf_float+0x3ee>
 800668e:	2301      	movs	r3, #1
 8006690:	464a      	mov	r2, r9
 8006692:	4631      	mov	r1, r6
 8006694:	4628      	mov	r0, r5
 8006696:	47b8      	blx	r7
 8006698:	3001      	adds	r0, #1
 800669a:	f43f ae3e 	beq.w	800631a <_printf_float+0xb6>
 800669e:	f108 0801 	add.w	r8, r8, #1
 80066a2:	68e3      	ldr	r3, [r4, #12]
 80066a4:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80066a6:	1a5b      	subs	r3, r3, r1
 80066a8:	4543      	cmp	r3, r8
 80066aa:	dcf0      	bgt.n	800668e <_printf_float+0x42a>
 80066ac:	e6fc      	b.n	80064a8 <_printf_float+0x244>
 80066ae:	f04f 0800 	mov.w	r8, #0
 80066b2:	f104 0919 	add.w	r9, r4, #25
 80066b6:	e7f4      	b.n	80066a2 <_printf_float+0x43e>

080066b8 <_printf_common>:
 80066b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80066bc:	4616      	mov	r6, r2
 80066be:	4698      	mov	r8, r3
 80066c0:	688a      	ldr	r2, [r1, #8]
 80066c2:	690b      	ldr	r3, [r1, #16]
 80066c4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80066c8:	4293      	cmp	r3, r2
 80066ca:	bfb8      	it	lt
 80066cc:	4613      	movlt	r3, r2
 80066ce:	6033      	str	r3, [r6, #0]
 80066d0:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80066d4:	4607      	mov	r7, r0
 80066d6:	460c      	mov	r4, r1
 80066d8:	b10a      	cbz	r2, 80066de <_printf_common+0x26>
 80066da:	3301      	adds	r3, #1
 80066dc:	6033      	str	r3, [r6, #0]
 80066de:	6823      	ldr	r3, [r4, #0]
 80066e0:	0699      	lsls	r1, r3, #26
 80066e2:	bf42      	ittt	mi
 80066e4:	6833      	ldrmi	r3, [r6, #0]
 80066e6:	3302      	addmi	r3, #2
 80066e8:	6033      	strmi	r3, [r6, #0]
 80066ea:	6825      	ldr	r5, [r4, #0]
 80066ec:	f015 0506 	ands.w	r5, r5, #6
 80066f0:	d106      	bne.n	8006700 <_printf_common+0x48>
 80066f2:	f104 0a19 	add.w	sl, r4, #25
 80066f6:	68e3      	ldr	r3, [r4, #12]
 80066f8:	6832      	ldr	r2, [r6, #0]
 80066fa:	1a9b      	subs	r3, r3, r2
 80066fc:	42ab      	cmp	r3, r5
 80066fe:	dc26      	bgt.n	800674e <_printf_common+0x96>
 8006700:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8006704:	6822      	ldr	r2, [r4, #0]
 8006706:	3b00      	subs	r3, #0
 8006708:	bf18      	it	ne
 800670a:	2301      	movne	r3, #1
 800670c:	0692      	lsls	r2, r2, #26
 800670e:	d42b      	bmi.n	8006768 <_printf_common+0xb0>
 8006710:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8006714:	4641      	mov	r1, r8
 8006716:	4638      	mov	r0, r7
 8006718:	47c8      	blx	r9
 800671a:	3001      	adds	r0, #1
 800671c:	d01e      	beq.n	800675c <_printf_common+0xa4>
 800671e:	6823      	ldr	r3, [r4, #0]
 8006720:	6922      	ldr	r2, [r4, #16]
 8006722:	f003 0306 	and.w	r3, r3, #6
 8006726:	2b04      	cmp	r3, #4
 8006728:	bf02      	ittt	eq
 800672a:	68e5      	ldreq	r5, [r4, #12]
 800672c:	6833      	ldreq	r3, [r6, #0]
 800672e:	1aed      	subeq	r5, r5, r3
 8006730:	68a3      	ldr	r3, [r4, #8]
 8006732:	bf0c      	ite	eq
 8006734:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006738:	2500      	movne	r5, #0
 800673a:	4293      	cmp	r3, r2
 800673c:	bfc4      	itt	gt
 800673e:	1a9b      	subgt	r3, r3, r2
 8006740:	18ed      	addgt	r5, r5, r3
 8006742:	2600      	movs	r6, #0
 8006744:	341a      	adds	r4, #26
 8006746:	42b5      	cmp	r5, r6
 8006748:	d11a      	bne.n	8006780 <_printf_common+0xc8>
 800674a:	2000      	movs	r0, #0
 800674c:	e008      	b.n	8006760 <_printf_common+0xa8>
 800674e:	2301      	movs	r3, #1
 8006750:	4652      	mov	r2, sl
 8006752:	4641      	mov	r1, r8
 8006754:	4638      	mov	r0, r7
 8006756:	47c8      	blx	r9
 8006758:	3001      	adds	r0, #1
 800675a:	d103      	bne.n	8006764 <_printf_common+0xac>
 800675c:	f04f 30ff 	mov.w	r0, #4294967295
 8006760:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006764:	3501      	adds	r5, #1
 8006766:	e7c6      	b.n	80066f6 <_printf_common+0x3e>
 8006768:	18e1      	adds	r1, r4, r3
 800676a:	1c5a      	adds	r2, r3, #1
 800676c:	2030      	movs	r0, #48	@ 0x30
 800676e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8006772:	4422      	add	r2, r4
 8006774:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8006778:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800677c:	3302      	adds	r3, #2
 800677e:	e7c7      	b.n	8006710 <_printf_common+0x58>
 8006780:	2301      	movs	r3, #1
 8006782:	4622      	mov	r2, r4
 8006784:	4641      	mov	r1, r8
 8006786:	4638      	mov	r0, r7
 8006788:	47c8      	blx	r9
 800678a:	3001      	adds	r0, #1
 800678c:	d0e6      	beq.n	800675c <_printf_common+0xa4>
 800678e:	3601      	adds	r6, #1
 8006790:	e7d9      	b.n	8006746 <_printf_common+0x8e>
	...

08006794 <_printf_i>:
 8006794:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006798:	7e0f      	ldrb	r7, [r1, #24]
 800679a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800679c:	2f78      	cmp	r7, #120	@ 0x78
 800679e:	4691      	mov	r9, r2
 80067a0:	4680      	mov	r8, r0
 80067a2:	460c      	mov	r4, r1
 80067a4:	469a      	mov	sl, r3
 80067a6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80067aa:	d807      	bhi.n	80067bc <_printf_i+0x28>
 80067ac:	2f62      	cmp	r7, #98	@ 0x62
 80067ae:	d80a      	bhi.n	80067c6 <_printf_i+0x32>
 80067b0:	2f00      	cmp	r7, #0
 80067b2:	f000 80d2 	beq.w	800695a <_printf_i+0x1c6>
 80067b6:	2f58      	cmp	r7, #88	@ 0x58
 80067b8:	f000 80b9 	beq.w	800692e <_printf_i+0x19a>
 80067bc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80067c0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80067c4:	e03a      	b.n	800683c <_printf_i+0xa8>
 80067c6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80067ca:	2b15      	cmp	r3, #21
 80067cc:	d8f6      	bhi.n	80067bc <_printf_i+0x28>
 80067ce:	a101      	add	r1, pc, #4	@ (adr r1, 80067d4 <_printf_i+0x40>)
 80067d0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80067d4:	0800682d 	.word	0x0800682d
 80067d8:	08006841 	.word	0x08006841
 80067dc:	080067bd 	.word	0x080067bd
 80067e0:	080067bd 	.word	0x080067bd
 80067e4:	080067bd 	.word	0x080067bd
 80067e8:	080067bd 	.word	0x080067bd
 80067ec:	08006841 	.word	0x08006841
 80067f0:	080067bd 	.word	0x080067bd
 80067f4:	080067bd 	.word	0x080067bd
 80067f8:	080067bd 	.word	0x080067bd
 80067fc:	080067bd 	.word	0x080067bd
 8006800:	08006941 	.word	0x08006941
 8006804:	0800686b 	.word	0x0800686b
 8006808:	080068fb 	.word	0x080068fb
 800680c:	080067bd 	.word	0x080067bd
 8006810:	080067bd 	.word	0x080067bd
 8006814:	08006963 	.word	0x08006963
 8006818:	080067bd 	.word	0x080067bd
 800681c:	0800686b 	.word	0x0800686b
 8006820:	080067bd 	.word	0x080067bd
 8006824:	080067bd 	.word	0x080067bd
 8006828:	08006903 	.word	0x08006903
 800682c:	6833      	ldr	r3, [r6, #0]
 800682e:	1d1a      	adds	r2, r3, #4
 8006830:	681b      	ldr	r3, [r3, #0]
 8006832:	6032      	str	r2, [r6, #0]
 8006834:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006838:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800683c:	2301      	movs	r3, #1
 800683e:	e09d      	b.n	800697c <_printf_i+0x1e8>
 8006840:	6833      	ldr	r3, [r6, #0]
 8006842:	6820      	ldr	r0, [r4, #0]
 8006844:	1d19      	adds	r1, r3, #4
 8006846:	6031      	str	r1, [r6, #0]
 8006848:	0606      	lsls	r6, r0, #24
 800684a:	d501      	bpl.n	8006850 <_printf_i+0xbc>
 800684c:	681d      	ldr	r5, [r3, #0]
 800684e:	e003      	b.n	8006858 <_printf_i+0xc4>
 8006850:	0645      	lsls	r5, r0, #25
 8006852:	d5fb      	bpl.n	800684c <_printf_i+0xb8>
 8006854:	f9b3 5000 	ldrsh.w	r5, [r3]
 8006858:	2d00      	cmp	r5, #0
 800685a:	da03      	bge.n	8006864 <_printf_i+0xd0>
 800685c:	232d      	movs	r3, #45	@ 0x2d
 800685e:	426d      	negs	r5, r5
 8006860:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006864:	4859      	ldr	r0, [pc, #356]	@ (80069cc <_printf_i+0x238>)
 8006866:	230a      	movs	r3, #10
 8006868:	e011      	b.n	800688e <_printf_i+0xfa>
 800686a:	6821      	ldr	r1, [r4, #0]
 800686c:	6833      	ldr	r3, [r6, #0]
 800686e:	0608      	lsls	r0, r1, #24
 8006870:	f853 5b04 	ldr.w	r5, [r3], #4
 8006874:	d402      	bmi.n	800687c <_printf_i+0xe8>
 8006876:	0649      	lsls	r1, r1, #25
 8006878:	bf48      	it	mi
 800687a:	b2ad      	uxthmi	r5, r5
 800687c:	2f6f      	cmp	r7, #111	@ 0x6f
 800687e:	4853      	ldr	r0, [pc, #332]	@ (80069cc <_printf_i+0x238>)
 8006880:	6033      	str	r3, [r6, #0]
 8006882:	bf14      	ite	ne
 8006884:	230a      	movne	r3, #10
 8006886:	2308      	moveq	r3, #8
 8006888:	2100      	movs	r1, #0
 800688a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800688e:	6866      	ldr	r6, [r4, #4]
 8006890:	60a6      	str	r6, [r4, #8]
 8006892:	2e00      	cmp	r6, #0
 8006894:	bfa2      	ittt	ge
 8006896:	6821      	ldrge	r1, [r4, #0]
 8006898:	f021 0104 	bicge.w	r1, r1, #4
 800689c:	6021      	strge	r1, [r4, #0]
 800689e:	b90d      	cbnz	r5, 80068a4 <_printf_i+0x110>
 80068a0:	2e00      	cmp	r6, #0
 80068a2:	d04b      	beq.n	800693c <_printf_i+0x1a8>
 80068a4:	4616      	mov	r6, r2
 80068a6:	fbb5 f1f3 	udiv	r1, r5, r3
 80068aa:	fb03 5711 	mls	r7, r3, r1, r5
 80068ae:	5dc7      	ldrb	r7, [r0, r7]
 80068b0:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80068b4:	462f      	mov	r7, r5
 80068b6:	42bb      	cmp	r3, r7
 80068b8:	460d      	mov	r5, r1
 80068ba:	d9f4      	bls.n	80068a6 <_printf_i+0x112>
 80068bc:	2b08      	cmp	r3, #8
 80068be:	d10b      	bne.n	80068d8 <_printf_i+0x144>
 80068c0:	6823      	ldr	r3, [r4, #0]
 80068c2:	07df      	lsls	r7, r3, #31
 80068c4:	d508      	bpl.n	80068d8 <_printf_i+0x144>
 80068c6:	6923      	ldr	r3, [r4, #16]
 80068c8:	6861      	ldr	r1, [r4, #4]
 80068ca:	4299      	cmp	r1, r3
 80068cc:	bfde      	ittt	le
 80068ce:	2330      	movle	r3, #48	@ 0x30
 80068d0:	f806 3c01 	strble.w	r3, [r6, #-1]
 80068d4:	f106 36ff 	addle.w	r6, r6, #4294967295
 80068d8:	1b92      	subs	r2, r2, r6
 80068da:	6122      	str	r2, [r4, #16]
 80068dc:	f8cd a000 	str.w	sl, [sp]
 80068e0:	464b      	mov	r3, r9
 80068e2:	aa03      	add	r2, sp, #12
 80068e4:	4621      	mov	r1, r4
 80068e6:	4640      	mov	r0, r8
 80068e8:	f7ff fee6 	bl	80066b8 <_printf_common>
 80068ec:	3001      	adds	r0, #1
 80068ee:	d14a      	bne.n	8006986 <_printf_i+0x1f2>
 80068f0:	f04f 30ff 	mov.w	r0, #4294967295
 80068f4:	b004      	add	sp, #16
 80068f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80068fa:	6823      	ldr	r3, [r4, #0]
 80068fc:	f043 0320 	orr.w	r3, r3, #32
 8006900:	6023      	str	r3, [r4, #0]
 8006902:	4833      	ldr	r0, [pc, #204]	@ (80069d0 <_printf_i+0x23c>)
 8006904:	2778      	movs	r7, #120	@ 0x78
 8006906:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800690a:	6823      	ldr	r3, [r4, #0]
 800690c:	6831      	ldr	r1, [r6, #0]
 800690e:	061f      	lsls	r7, r3, #24
 8006910:	f851 5b04 	ldr.w	r5, [r1], #4
 8006914:	d402      	bmi.n	800691c <_printf_i+0x188>
 8006916:	065f      	lsls	r7, r3, #25
 8006918:	bf48      	it	mi
 800691a:	b2ad      	uxthmi	r5, r5
 800691c:	6031      	str	r1, [r6, #0]
 800691e:	07d9      	lsls	r1, r3, #31
 8006920:	bf44      	itt	mi
 8006922:	f043 0320 	orrmi.w	r3, r3, #32
 8006926:	6023      	strmi	r3, [r4, #0]
 8006928:	b11d      	cbz	r5, 8006932 <_printf_i+0x19e>
 800692a:	2310      	movs	r3, #16
 800692c:	e7ac      	b.n	8006888 <_printf_i+0xf4>
 800692e:	4827      	ldr	r0, [pc, #156]	@ (80069cc <_printf_i+0x238>)
 8006930:	e7e9      	b.n	8006906 <_printf_i+0x172>
 8006932:	6823      	ldr	r3, [r4, #0]
 8006934:	f023 0320 	bic.w	r3, r3, #32
 8006938:	6023      	str	r3, [r4, #0]
 800693a:	e7f6      	b.n	800692a <_printf_i+0x196>
 800693c:	4616      	mov	r6, r2
 800693e:	e7bd      	b.n	80068bc <_printf_i+0x128>
 8006940:	6833      	ldr	r3, [r6, #0]
 8006942:	6825      	ldr	r5, [r4, #0]
 8006944:	6961      	ldr	r1, [r4, #20]
 8006946:	1d18      	adds	r0, r3, #4
 8006948:	6030      	str	r0, [r6, #0]
 800694a:	062e      	lsls	r6, r5, #24
 800694c:	681b      	ldr	r3, [r3, #0]
 800694e:	d501      	bpl.n	8006954 <_printf_i+0x1c0>
 8006950:	6019      	str	r1, [r3, #0]
 8006952:	e002      	b.n	800695a <_printf_i+0x1c6>
 8006954:	0668      	lsls	r0, r5, #25
 8006956:	d5fb      	bpl.n	8006950 <_printf_i+0x1bc>
 8006958:	8019      	strh	r1, [r3, #0]
 800695a:	2300      	movs	r3, #0
 800695c:	6123      	str	r3, [r4, #16]
 800695e:	4616      	mov	r6, r2
 8006960:	e7bc      	b.n	80068dc <_printf_i+0x148>
 8006962:	6833      	ldr	r3, [r6, #0]
 8006964:	1d1a      	adds	r2, r3, #4
 8006966:	6032      	str	r2, [r6, #0]
 8006968:	681e      	ldr	r6, [r3, #0]
 800696a:	6862      	ldr	r2, [r4, #4]
 800696c:	2100      	movs	r1, #0
 800696e:	4630      	mov	r0, r6
 8006970:	f7f9 fc66 	bl	8000240 <memchr>
 8006974:	b108      	cbz	r0, 800697a <_printf_i+0x1e6>
 8006976:	1b80      	subs	r0, r0, r6
 8006978:	6060      	str	r0, [r4, #4]
 800697a:	6863      	ldr	r3, [r4, #4]
 800697c:	6123      	str	r3, [r4, #16]
 800697e:	2300      	movs	r3, #0
 8006980:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006984:	e7aa      	b.n	80068dc <_printf_i+0x148>
 8006986:	6923      	ldr	r3, [r4, #16]
 8006988:	4632      	mov	r2, r6
 800698a:	4649      	mov	r1, r9
 800698c:	4640      	mov	r0, r8
 800698e:	47d0      	blx	sl
 8006990:	3001      	adds	r0, #1
 8006992:	d0ad      	beq.n	80068f0 <_printf_i+0x15c>
 8006994:	6823      	ldr	r3, [r4, #0]
 8006996:	079b      	lsls	r3, r3, #30
 8006998:	d413      	bmi.n	80069c2 <_printf_i+0x22e>
 800699a:	68e0      	ldr	r0, [r4, #12]
 800699c:	9b03      	ldr	r3, [sp, #12]
 800699e:	4298      	cmp	r0, r3
 80069a0:	bfb8      	it	lt
 80069a2:	4618      	movlt	r0, r3
 80069a4:	e7a6      	b.n	80068f4 <_printf_i+0x160>
 80069a6:	2301      	movs	r3, #1
 80069a8:	4632      	mov	r2, r6
 80069aa:	4649      	mov	r1, r9
 80069ac:	4640      	mov	r0, r8
 80069ae:	47d0      	blx	sl
 80069b0:	3001      	adds	r0, #1
 80069b2:	d09d      	beq.n	80068f0 <_printf_i+0x15c>
 80069b4:	3501      	adds	r5, #1
 80069b6:	68e3      	ldr	r3, [r4, #12]
 80069b8:	9903      	ldr	r1, [sp, #12]
 80069ba:	1a5b      	subs	r3, r3, r1
 80069bc:	42ab      	cmp	r3, r5
 80069be:	dcf2      	bgt.n	80069a6 <_printf_i+0x212>
 80069c0:	e7eb      	b.n	800699a <_printf_i+0x206>
 80069c2:	2500      	movs	r5, #0
 80069c4:	f104 0619 	add.w	r6, r4, #25
 80069c8:	e7f5      	b.n	80069b6 <_printf_i+0x222>
 80069ca:	bf00      	nop
 80069cc:	080090b6 	.word	0x080090b6
 80069d0:	080090c7 	.word	0x080090c7

080069d4 <std>:
 80069d4:	2300      	movs	r3, #0
 80069d6:	b510      	push	{r4, lr}
 80069d8:	4604      	mov	r4, r0
 80069da:	e9c0 3300 	strd	r3, r3, [r0]
 80069de:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80069e2:	6083      	str	r3, [r0, #8]
 80069e4:	8181      	strh	r1, [r0, #12]
 80069e6:	6643      	str	r3, [r0, #100]	@ 0x64
 80069e8:	81c2      	strh	r2, [r0, #14]
 80069ea:	6183      	str	r3, [r0, #24]
 80069ec:	4619      	mov	r1, r3
 80069ee:	2208      	movs	r2, #8
 80069f0:	305c      	adds	r0, #92	@ 0x5c
 80069f2:	f000 f914 	bl	8006c1e <memset>
 80069f6:	4b0d      	ldr	r3, [pc, #52]	@ (8006a2c <std+0x58>)
 80069f8:	6263      	str	r3, [r4, #36]	@ 0x24
 80069fa:	4b0d      	ldr	r3, [pc, #52]	@ (8006a30 <std+0x5c>)
 80069fc:	62a3      	str	r3, [r4, #40]	@ 0x28
 80069fe:	4b0d      	ldr	r3, [pc, #52]	@ (8006a34 <std+0x60>)
 8006a00:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8006a02:	4b0d      	ldr	r3, [pc, #52]	@ (8006a38 <std+0x64>)
 8006a04:	6323      	str	r3, [r4, #48]	@ 0x30
 8006a06:	4b0d      	ldr	r3, [pc, #52]	@ (8006a3c <std+0x68>)
 8006a08:	6224      	str	r4, [r4, #32]
 8006a0a:	429c      	cmp	r4, r3
 8006a0c:	d006      	beq.n	8006a1c <std+0x48>
 8006a0e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8006a12:	4294      	cmp	r4, r2
 8006a14:	d002      	beq.n	8006a1c <std+0x48>
 8006a16:	33d0      	adds	r3, #208	@ 0xd0
 8006a18:	429c      	cmp	r4, r3
 8006a1a:	d105      	bne.n	8006a28 <std+0x54>
 8006a1c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8006a20:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006a24:	f000 ba0a 	b.w	8006e3c <__retarget_lock_init_recursive>
 8006a28:	bd10      	pop	{r4, pc}
 8006a2a:	bf00      	nop
 8006a2c:	08006b99 	.word	0x08006b99
 8006a30:	08006bbb 	.word	0x08006bbb
 8006a34:	08006bf3 	.word	0x08006bf3
 8006a38:	08006c17 	.word	0x08006c17
 8006a3c:	20000594 	.word	0x20000594

08006a40 <stdio_exit_handler>:
 8006a40:	4a02      	ldr	r2, [pc, #8]	@ (8006a4c <stdio_exit_handler+0xc>)
 8006a42:	4903      	ldr	r1, [pc, #12]	@ (8006a50 <stdio_exit_handler+0x10>)
 8006a44:	4803      	ldr	r0, [pc, #12]	@ (8006a54 <stdio_exit_handler+0x14>)
 8006a46:	f000 b869 	b.w	8006b1c <_fwalk_sglue>
 8006a4a:	bf00      	nop
 8006a4c:	20000028 	.word	0x20000028
 8006a50:	080087d5 	.word	0x080087d5
 8006a54:	20000038 	.word	0x20000038

08006a58 <cleanup_stdio>:
 8006a58:	6841      	ldr	r1, [r0, #4]
 8006a5a:	4b0c      	ldr	r3, [pc, #48]	@ (8006a8c <cleanup_stdio+0x34>)
 8006a5c:	4299      	cmp	r1, r3
 8006a5e:	b510      	push	{r4, lr}
 8006a60:	4604      	mov	r4, r0
 8006a62:	d001      	beq.n	8006a68 <cleanup_stdio+0x10>
 8006a64:	f001 feb6 	bl	80087d4 <_fflush_r>
 8006a68:	68a1      	ldr	r1, [r4, #8]
 8006a6a:	4b09      	ldr	r3, [pc, #36]	@ (8006a90 <cleanup_stdio+0x38>)
 8006a6c:	4299      	cmp	r1, r3
 8006a6e:	d002      	beq.n	8006a76 <cleanup_stdio+0x1e>
 8006a70:	4620      	mov	r0, r4
 8006a72:	f001 feaf 	bl	80087d4 <_fflush_r>
 8006a76:	68e1      	ldr	r1, [r4, #12]
 8006a78:	4b06      	ldr	r3, [pc, #24]	@ (8006a94 <cleanup_stdio+0x3c>)
 8006a7a:	4299      	cmp	r1, r3
 8006a7c:	d004      	beq.n	8006a88 <cleanup_stdio+0x30>
 8006a7e:	4620      	mov	r0, r4
 8006a80:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006a84:	f001 bea6 	b.w	80087d4 <_fflush_r>
 8006a88:	bd10      	pop	{r4, pc}
 8006a8a:	bf00      	nop
 8006a8c:	20000594 	.word	0x20000594
 8006a90:	200005fc 	.word	0x200005fc
 8006a94:	20000664 	.word	0x20000664

08006a98 <global_stdio_init.part.0>:
 8006a98:	b510      	push	{r4, lr}
 8006a9a:	4b0b      	ldr	r3, [pc, #44]	@ (8006ac8 <global_stdio_init.part.0+0x30>)
 8006a9c:	4c0b      	ldr	r4, [pc, #44]	@ (8006acc <global_stdio_init.part.0+0x34>)
 8006a9e:	4a0c      	ldr	r2, [pc, #48]	@ (8006ad0 <global_stdio_init.part.0+0x38>)
 8006aa0:	601a      	str	r2, [r3, #0]
 8006aa2:	4620      	mov	r0, r4
 8006aa4:	2200      	movs	r2, #0
 8006aa6:	2104      	movs	r1, #4
 8006aa8:	f7ff ff94 	bl	80069d4 <std>
 8006aac:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8006ab0:	2201      	movs	r2, #1
 8006ab2:	2109      	movs	r1, #9
 8006ab4:	f7ff ff8e 	bl	80069d4 <std>
 8006ab8:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8006abc:	2202      	movs	r2, #2
 8006abe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006ac2:	2112      	movs	r1, #18
 8006ac4:	f7ff bf86 	b.w	80069d4 <std>
 8006ac8:	200006cc 	.word	0x200006cc
 8006acc:	20000594 	.word	0x20000594
 8006ad0:	08006a41 	.word	0x08006a41

08006ad4 <__sfp_lock_acquire>:
 8006ad4:	4801      	ldr	r0, [pc, #4]	@ (8006adc <__sfp_lock_acquire+0x8>)
 8006ad6:	f000 b9b2 	b.w	8006e3e <__retarget_lock_acquire_recursive>
 8006ada:	bf00      	nop
 8006adc:	200006d5 	.word	0x200006d5

08006ae0 <__sfp_lock_release>:
 8006ae0:	4801      	ldr	r0, [pc, #4]	@ (8006ae8 <__sfp_lock_release+0x8>)
 8006ae2:	f000 b9ad 	b.w	8006e40 <__retarget_lock_release_recursive>
 8006ae6:	bf00      	nop
 8006ae8:	200006d5 	.word	0x200006d5

08006aec <__sinit>:
 8006aec:	b510      	push	{r4, lr}
 8006aee:	4604      	mov	r4, r0
 8006af0:	f7ff fff0 	bl	8006ad4 <__sfp_lock_acquire>
 8006af4:	6a23      	ldr	r3, [r4, #32]
 8006af6:	b11b      	cbz	r3, 8006b00 <__sinit+0x14>
 8006af8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006afc:	f7ff bff0 	b.w	8006ae0 <__sfp_lock_release>
 8006b00:	4b04      	ldr	r3, [pc, #16]	@ (8006b14 <__sinit+0x28>)
 8006b02:	6223      	str	r3, [r4, #32]
 8006b04:	4b04      	ldr	r3, [pc, #16]	@ (8006b18 <__sinit+0x2c>)
 8006b06:	681b      	ldr	r3, [r3, #0]
 8006b08:	2b00      	cmp	r3, #0
 8006b0a:	d1f5      	bne.n	8006af8 <__sinit+0xc>
 8006b0c:	f7ff ffc4 	bl	8006a98 <global_stdio_init.part.0>
 8006b10:	e7f2      	b.n	8006af8 <__sinit+0xc>
 8006b12:	bf00      	nop
 8006b14:	08006a59 	.word	0x08006a59
 8006b18:	200006cc 	.word	0x200006cc

08006b1c <_fwalk_sglue>:
 8006b1c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006b20:	4607      	mov	r7, r0
 8006b22:	4688      	mov	r8, r1
 8006b24:	4614      	mov	r4, r2
 8006b26:	2600      	movs	r6, #0
 8006b28:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006b2c:	f1b9 0901 	subs.w	r9, r9, #1
 8006b30:	d505      	bpl.n	8006b3e <_fwalk_sglue+0x22>
 8006b32:	6824      	ldr	r4, [r4, #0]
 8006b34:	2c00      	cmp	r4, #0
 8006b36:	d1f7      	bne.n	8006b28 <_fwalk_sglue+0xc>
 8006b38:	4630      	mov	r0, r6
 8006b3a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006b3e:	89ab      	ldrh	r3, [r5, #12]
 8006b40:	2b01      	cmp	r3, #1
 8006b42:	d907      	bls.n	8006b54 <_fwalk_sglue+0x38>
 8006b44:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006b48:	3301      	adds	r3, #1
 8006b4a:	d003      	beq.n	8006b54 <_fwalk_sglue+0x38>
 8006b4c:	4629      	mov	r1, r5
 8006b4e:	4638      	mov	r0, r7
 8006b50:	47c0      	blx	r8
 8006b52:	4306      	orrs	r6, r0
 8006b54:	3568      	adds	r5, #104	@ 0x68
 8006b56:	e7e9      	b.n	8006b2c <_fwalk_sglue+0x10>

08006b58 <siprintf>:
 8006b58:	b40e      	push	{r1, r2, r3}
 8006b5a:	b500      	push	{lr}
 8006b5c:	b09c      	sub	sp, #112	@ 0x70
 8006b5e:	ab1d      	add	r3, sp, #116	@ 0x74
 8006b60:	9002      	str	r0, [sp, #8]
 8006b62:	9006      	str	r0, [sp, #24]
 8006b64:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8006b68:	4809      	ldr	r0, [pc, #36]	@ (8006b90 <siprintf+0x38>)
 8006b6a:	9107      	str	r1, [sp, #28]
 8006b6c:	9104      	str	r1, [sp, #16]
 8006b6e:	4909      	ldr	r1, [pc, #36]	@ (8006b94 <siprintf+0x3c>)
 8006b70:	f853 2b04 	ldr.w	r2, [r3], #4
 8006b74:	9105      	str	r1, [sp, #20]
 8006b76:	6800      	ldr	r0, [r0, #0]
 8006b78:	9301      	str	r3, [sp, #4]
 8006b7a:	a902      	add	r1, sp, #8
 8006b7c:	f001 fcaa 	bl	80084d4 <_svfiprintf_r>
 8006b80:	9b02      	ldr	r3, [sp, #8]
 8006b82:	2200      	movs	r2, #0
 8006b84:	701a      	strb	r2, [r3, #0]
 8006b86:	b01c      	add	sp, #112	@ 0x70
 8006b88:	f85d eb04 	ldr.w	lr, [sp], #4
 8006b8c:	b003      	add	sp, #12
 8006b8e:	4770      	bx	lr
 8006b90:	20000034 	.word	0x20000034
 8006b94:	ffff0208 	.word	0xffff0208

08006b98 <__sread>:
 8006b98:	b510      	push	{r4, lr}
 8006b9a:	460c      	mov	r4, r1
 8006b9c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006ba0:	f000 f8fe 	bl	8006da0 <_read_r>
 8006ba4:	2800      	cmp	r0, #0
 8006ba6:	bfab      	itete	ge
 8006ba8:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8006baa:	89a3      	ldrhlt	r3, [r4, #12]
 8006bac:	181b      	addge	r3, r3, r0
 8006bae:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8006bb2:	bfac      	ite	ge
 8006bb4:	6563      	strge	r3, [r4, #84]	@ 0x54
 8006bb6:	81a3      	strhlt	r3, [r4, #12]
 8006bb8:	bd10      	pop	{r4, pc}

08006bba <__swrite>:
 8006bba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006bbe:	461f      	mov	r7, r3
 8006bc0:	898b      	ldrh	r3, [r1, #12]
 8006bc2:	05db      	lsls	r3, r3, #23
 8006bc4:	4605      	mov	r5, r0
 8006bc6:	460c      	mov	r4, r1
 8006bc8:	4616      	mov	r6, r2
 8006bca:	d505      	bpl.n	8006bd8 <__swrite+0x1e>
 8006bcc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006bd0:	2302      	movs	r3, #2
 8006bd2:	2200      	movs	r2, #0
 8006bd4:	f000 f8d2 	bl	8006d7c <_lseek_r>
 8006bd8:	89a3      	ldrh	r3, [r4, #12]
 8006bda:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006bde:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006be2:	81a3      	strh	r3, [r4, #12]
 8006be4:	4632      	mov	r2, r6
 8006be6:	463b      	mov	r3, r7
 8006be8:	4628      	mov	r0, r5
 8006bea:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006bee:	f000 b8e9 	b.w	8006dc4 <_write_r>

08006bf2 <__sseek>:
 8006bf2:	b510      	push	{r4, lr}
 8006bf4:	460c      	mov	r4, r1
 8006bf6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006bfa:	f000 f8bf 	bl	8006d7c <_lseek_r>
 8006bfe:	1c43      	adds	r3, r0, #1
 8006c00:	89a3      	ldrh	r3, [r4, #12]
 8006c02:	bf15      	itete	ne
 8006c04:	6560      	strne	r0, [r4, #84]	@ 0x54
 8006c06:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8006c0a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8006c0e:	81a3      	strheq	r3, [r4, #12]
 8006c10:	bf18      	it	ne
 8006c12:	81a3      	strhne	r3, [r4, #12]
 8006c14:	bd10      	pop	{r4, pc}

08006c16 <__sclose>:
 8006c16:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006c1a:	f000 b89f 	b.w	8006d5c <_close_r>

08006c1e <memset>:
 8006c1e:	4402      	add	r2, r0
 8006c20:	4603      	mov	r3, r0
 8006c22:	4293      	cmp	r3, r2
 8006c24:	d100      	bne.n	8006c28 <memset+0xa>
 8006c26:	4770      	bx	lr
 8006c28:	f803 1b01 	strb.w	r1, [r3], #1
 8006c2c:	e7f9      	b.n	8006c22 <memset+0x4>

08006c2e <strchr>:
 8006c2e:	b2c9      	uxtb	r1, r1
 8006c30:	4603      	mov	r3, r0
 8006c32:	4618      	mov	r0, r3
 8006c34:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006c38:	b112      	cbz	r2, 8006c40 <strchr+0x12>
 8006c3a:	428a      	cmp	r2, r1
 8006c3c:	d1f9      	bne.n	8006c32 <strchr+0x4>
 8006c3e:	4770      	bx	lr
 8006c40:	2900      	cmp	r1, #0
 8006c42:	bf18      	it	ne
 8006c44:	2000      	movne	r0, #0
 8006c46:	4770      	bx	lr

08006c48 <strncpy>:
 8006c48:	b510      	push	{r4, lr}
 8006c4a:	3901      	subs	r1, #1
 8006c4c:	4603      	mov	r3, r0
 8006c4e:	b132      	cbz	r2, 8006c5e <strncpy+0x16>
 8006c50:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8006c54:	f803 4b01 	strb.w	r4, [r3], #1
 8006c58:	3a01      	subs	r2, #1
 8006c5a:	2c00      	cmp	r4, #0
 8006c5c:	d1f7      	bne.n	8006c4e <strncpy+0x6>
 8006c5e:	441a      	add	r2, r3
 8006c60:	2100      	movs	r1, #0
 8006c62:	4293      	cmp	r3, r2
 8006c64:	d100      	bne.n	8006c68 <strncpy+0x20>
 8006c66:	bd10      	pop	{r4, pc}
 8006c68:	f803 1b01 	strb.w	r1, [r3], #1
 8006c6c:	e7f9      	b.n	8006c62 <strncpy+0x1a>
	...

08006c70 <strtok>:
 8006c70:	4b16      	ldr	r3, [pc, #88]	@ (8006ccc <strtok+0x5c>)
 8006c72:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006c76:	681f      	ldr	r7, [r3, #0]
 8006c78:	6c7c      	ldr	r4, [r7, #68]	@ 0x44
 8006c7a:	4605      	mov	r5, r0
 8006c7c:	460e      	mov	r6, r1
 8006c7e:	b9ec      	cbnz	r4, 8006cbc <strtok+0x4c>
 8006c80:	2050      	movs	r0, #80	@ 0x50
 8006c82:	f000 ff93 	bl	8007bac <malloc>
 8006c86:	4602      	mov	r2, r0
 8006c88:	6478      	str	r0, [r7, #68]	@ 0x44
 8006c8a:	b920      	cbnz	r0, 8006c96 <strtok+0x26>
 8006c8c:	4b10      	ldr	r3, [pc, #64]	@ (8006cd0 <strtok+0x60>)
 8006c8e:	4811      	ldr	r0, [pc, #68]	@ (8006cd4 <strtok+0x64>)
 8006c90:	215b      	movs	r1, #91	@ 0x5b
 8006c92:	f000 f8d7 	bl	8006e44 <__assert_func>
 8006c96:	e9c0 4400 	strd	r4, r4, [r0]
 8006c9a:	e9c0 4402 	strd	r4, r4, [r0, #8]
 8006c9e:	e9c0 4404 	strd	r4, r4, [r0, #16]
 8006ca2:	e9c0 440a 	strd	r4, r4, [r0, #40]	@ 0x28
 8006ca6:	e9c0 440c 	strd	r4, r4, [r0, #48]	@ 0x30
 8006caa:	e9c0 440e 	strd	r4, r4, [r0, #56]	@ 0x38
 8006cae:	e9c0 4410 	strd	r4, r4, [r0, #64]	@ 0x40
 8006cb2:	e9c0 4412 	strd	r4, r4, [r0, #72]	@ 0x48
 8006cb6:	6184      	str	r4, [r0, #24]
 8006cb8:	7704      	strb	r4, [r0, #28]
 8006cba:	6244      	str	r4, [r0, #36]	@ 0x24
 8006cbc:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006cbe:	4631      	mov	r1, r6
 8006cc0:	4628      	mov	r0, r5
 8006cc2:	2301      	movs	r3, #1
 8006cc4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006cc8:	f000 b806 	b.w	8006cd8 <__strtok_r>
 8006ccc:	20000034 	.word	0x20000034
 8006cd0:	080090d8 	.word	0x080090d8
 8006cd4:	080090ef 	.word	0x080090ef

08006cd8 <__strtok_r>:
 8006cd8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006cda:	4604      	mov	r4, r0
 8006cdc:	b908      	cbnz	r0, 8006ce2 <__strtok_r+0xa>
 8006cde:	6814      	ldr	r4, [r2, #0]
 8006ce0:	b144      	cbz	r4, 8006cf4 <__strtok_r+0x1c>
 8006ce2:	4620      	mov	r0, r4
 8006ce4:	f814 5b01 	ldrb.w	r5, [r4], #1
 8006ce8:	460f      	mov	r7, r1
 8006cea:	f817 6b01 	ldrb.w	r6, [r7], #1
 8006cee:	b91e      	cbnz	r6, 8006cf8 <__strtok_r+0x20>
 8006cf0:	b965      	cbnz	r5, 8006d0c <__strtok_r+0x34>
 8006cf2:	6015      	str	r5, [r2, #0]
 8006cf4:	2000      	movs	r0, #0
 8006cf6:	e005      	b.n	8006d04 <__strtok_r+0x2c>
 8006cf8:	42b5      	cmp	r5, r6
 8006cfa:	d1f6      	bne.n	8006cea <__strtok_r+0x12>
 8006cfc:	2b00      	cmp	r3, #0
 8006cfe:	d1f0      	bne.n	8006ce2 <__strtok_r+0xa>
 8006d00:	6014      	str	r4, [r2, #0]
 8006d02:	7003      	strb	r3, [r0, #0]
 8006d04:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006d06:	461c      	mov	r4, r3
 8006d08:	e00c      	b.n	8006d24 <__strtok_r+0x4c>
 8006d0a:	b915      	cbnz	r5, 8006d12 <__strtok_r+0x3a>
 8006d0c:	f814 3b01 	ldrb.w	r3, [r4], #1
 8006d10:	460e      	mov	r6, r1
 8006d12:	f816 5b01 	ldrb.w	r5, [r6], #1
 8006d16:	42ab      	cmp	r3, r5
 8006d18:	d1f7      	bne.n	8006d0a <__strtok_r+0x32>
 8006d1a:	2b00      	cmp	r3, #0
 8006d1c:	d0f3      	beq.n	8006d06 <__strtok_r+0x2e>
 8006d1e:	2300      	movs	r3, #0
 8006d20:	f804 3c01 	strb.w	r3, [r4, #-1]
 8006d24:	6014      	str	r4, [r2, #0]
 8006d26:	e7ed      	b.n	8006d04 <__strtok_r+0x2c>

08006d28 <strstr>:
 8006d28:	780a      	ldrb	r2, [r1, #0]
 8006d2a:	b570      	push	{r4, r5, r6, lr}
 8006d2c:	b96a      	cbnz	r2, 8006d4a <strstr+0x22>
 8006d2e:	bd70      	pop	{r4, r5, r6, pc}
 8006d30:	429a      	cmp	r2, r3
 8006d32:	d109      	bne.n	8006d48 <strstr+0x20>
 8006d34:	460c      	mov	r4, r1
 8006d36:	4605      	mov	r5, r0
 8006d38:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 8006d3c:	2b00      	cmp	r3, #0
 8006d3e:	d0f6      	beq.n	8006d2e <strstr+0x6>
 8006d40:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 8006d44:	429e      	cmp	r6, r3
 8006d46:	d0f7      	beq.n	8006d38 <strstr+0x10>
 8006d48:	3001      	adds	r0, #1
 8006d4a:	7803      	ldrb	r3, [r0, #0]
 8006d4c:	2b00      	cmp	r3, #0
 8006d4e:	d1ef      	bne.n	8006d30 <strstr+0x8>
 8006d50:	4618      	mov	r0, r3
 8006d52:	e7ec      	b.n	8006d2e <strstr+0x6>

08006d54 <_localeconv_r>:
 8006d54:	4800      	ldr	r0, [pc, #0]	@ (8006d58 <_localeconv_r+0x4>)
 8006d56:	4770      	bx	lr
 8006d58:	20000174 	.word	0x20000174

08006d5c <_close_r>:
 8006d5c:	b538      	push	{r3, r4, r5, lr}
 8006d5e:	4d06      	ldr	r5, [pc, #24]	@ (8006d78 <_close_r+0x1c>)
 8006d60:	2300      	movs	r3, #0
 8006d62:	4604      	mov	r4, r0
 8006d64:	4608      	mov	r0, r1
 8006d66:	602b      	str	r3, [r5, #0]
 8006d68:	f7fb f9ab 	bl	80020c2 <_close>
 8006d6c:	1c43      	adds	r3, r0, #1
 8006d6e:	d102      	bne.n	8006d76 <_close_r+0x1a>
 8006d70:	682b      	ldr	r3, [r5, #0]
 8006d72:	b103      	cbz	r3, 8006d76 <_close_r+0x1a>
 8006d74:	6023      	str	r3, [r4, #0]
 8006d76:	bd38      	pop	{r3, r4, r5, pc}
 8006d78:	200006d0 	.word	0x200006d0

08006d7c <_lseek_r>:
 8006d7c:	b538      	push	{r3, r4, r5, lr}
 8006d7e:	4d07      	ldr	r5, [pc, #28]	@ (8006d9c <_lseek_r+0x20>)
 8006d80:	4604      	mov	r4, r0
 8006d82:	4608      	mov	r0, r1
 8006d84:	4611      	mov	r1, r2
 8006d86:	2200      	movs	r2, #0
 8006d88:	602a      	str	r2, [r5, #0]
 8006d8a:	461a      	mov	r2, r3
 8006d8c:	f7fb f9c0 	bl	8002110 <_lseek>
 8006d90:	1c43      	adds	r3, r0, #1
 8006d92:	d102      	bne.n	8006d9a <_lseek_r+0x1e>
 8006d94:	682b      	ldr	r3, [r5, #0]
 8006d96:	b103      	cbz	r3, 8006d9a <_lseek_r+0x1e>
 8006d98:	6023      	str	r3, [r4, #0]
 8006d9a:	bd38      	pop	{r3, r4, r5, pc}
 8006d9c:	200006d0 	.word	0x200006d0

08006da0 <_read_r>:
 8006da0:	b538      	push	{r3, r4, r5, lr}
 8006da2:	4d07      	ldr	r5, [pc, #28]	@ (8006dc0 <_read_r+0x20>)
 8006da4:	4604      	mov	r4, r0
 8006da6:	4608      	mov	r0, r1
 8006da8:	4611      	mov	r1, r2
 8006daa:	2200      	movs	r2, #0
 8006dac:	602a      	str	r2, [r5, #0]
 8006dae:	461a      	mov	r2, r3
 8006db0:	f7fb f94e 	bl	8002050 <_read>
 8006db4:	1c43      	adds	r3, r0, #1
 8006db6:	d102      	bne.n	8006dbe <_read_r+0x1e>
 8006db8:	682b      	ldr	r3, [r5, #0]
 8006dba:	b103      	cbz	r3, 8006dbe <_read_r+0x1e>
 8006dbc:	6023      	str	r3, [r4, #0]
 8006dbe:	bd38      	pop	{r3, r4, r5, pc}
 8006dc0:	200006d0 	.word	0x200006d0

08006dc4 <_write_r>:
 8006dc4:	b538      	push	{r3, r4, r5, lr}
 8006dc6:	4d07      	ldr	r5, [pc, #28]	@ (8006de4 <_write_r+0x20>)
 8006dc8:	4604      	mov	r4, r0
 8006dca:	4608      	mov	r0, r1
 8006dcc:	4611      	mov	r1, r2
 8006dce:	2200      	movs	r2, #0
 8006dd0:	602a      	str	r2, [r5, #0]
 8006dd2:	461a      	mov	r2, r3
 8006dd4:	f7fb f959 	bl	800208a <_write>
 8006dd8:	1c43      	adds	r3, r0, #1
 8006dda:	d102      	bne.n	8006de2 <_write_r+0x1e>
 8006ddc:	682b      	ldr	r3, [r5, #0]
 8006dde:	b103      	cbz	r3, 8006de2 <_write_r+0x1e>
 8006de0:	6023      	str	r3, [r4, #0]
 8006de2:	bd38      	pop	{r3, r4, r5, pc}
 8006de4:	200006d0 	.word	0x200006d0

08006de8 <__errno>:
 8006de8:	4b01      	ldr	r3, [pc, #4]	@ (8006df0 <__errno+0x8>)
 8006dea:	6818      	ldr	r0, [r3, #0]
 8006dec:	4770      	bx	lr
 8006dee:	bf00      	nop
 8006df0:	20000034 	.word	0x20000034

08006df4 <__libc_init_array>:
 8006df4:	b570      	push	{r4, r5, r6, lr}
 8006df6:	4d0d      	ldr	r5, [pc, #52]	@ (8006e2c <__libc_init_array+0x38>)
 8006df8:	4c0d      	ldr	r4, [pc, #52]	@ (8006e30 <__libc_init_array+0x3c>)
 8006dfa:	1b64      	subs	r4, r4, r5
 8006dfc:	10a4      	asrs	r4, r4, #2
 8006dfe:	2600      	movs	r6, #0
 8006e00:	42a6      	cmp	r6, r4
 8006e02:	d109      	bne.n	8006e18 <__libc_init_array+0x24>
 8006e04:	4d0b      	ldr	r5, [pc, #44]	@ (8006e34 <__libc_init_array+0x40>)
 8006e06:	4c0c      	ldr	r4, [pc, #48]	@ (8006e38 <__libc_init_array+0x44>)
 8006e08:	f002 f864 	bl	8008ed4 <_init>
 8006e0c:	1b64      	subs	r4, r4, r5
 8006e0e:	10a4      	asrs	r4, r4, #2
 8006e10:	2600      	movs	r6, #0
 8006e12:	42a6      	cmp	r6, r4
 8006e14:	d105      	bne.n	8006e22 <__libc_init_array+0x2e>
 8006e16:	bd70      	pop	{r4, r5, r6, pc}
 8006e18:	f855 3b04 	ldr.w	r3, [r5], #4
 8006e1c:	4798      	blx	r3
 8006e1e:	3601      	adds	r6, #1
 8006e20:	e7ee      	b.n	8006e00 <__libc_init_array+0xc>
 8006e22:	f855 3b04 	ldr.w	r3, [r5], #4
 8006e26:	4798      	blx	r3
 8006e28:	3601      	adds	r6, #1
 8006e2a:	e7f2      	b.n	8006e12 <__libc_init_array+0x1e>
 8006e2c:	08009474 	.word	0x08009474
 8006e30:	08009474 	.word	0x08009474
 8006e34:	08009474 	.word	0x08009474
 8006e38:	08009478 	.word	0x08009478

08006e3c <__retarget_lock_init_recursive>:
 8006e3c:	4770      	bx	lr

08006e3e <__retarget_lock_acquire_recursive>:
 8006e3e:	4770      	bx	lr

08006e40 <__retarget_lock_release_recursive>:
 8006e40:	4770      	bx	lr
	...

08006e44 <__assert_func>:
 8006e44:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8006e46:	4614      	mov	r4, r2
 8006e48:	461a      	mov	r2, r3
 8006e4a:	4b09      	ldr	r3, [pc, #36]	@ (8006e70 <__assert_func+0x2c>)
 8006e4c:	681b      	ldr	r3, [r3, #0]
 8006e4e:	4605      	mov	r5, r0
 8006e50:	68d8      	ldr	r0, [r3, #12]
 8006e52:	b954      	cbnz	r4, 8006e6a <__assert_func+0x26>
 8006e54:	4b07      	ldr	r3, [pc, #28]	@ (8006e74 <__assert_func+0x30>)
 8006e56:	461c      	mov	r4, r3
 8006e58:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8006e5c:	9100      	str	r1, [sp, #0]
 8006e5e:	462b      	mov	r3, r5
 8006e60:	4905      	ldr	r1, [pc, #20]	@ (8006e78 <__assert_func+0x34>)
 8006e62:	f001 fcdf 	bl	8008824 <fiprintf>
 8006e66:	f001 fd27 	bl	80088b8 <abort>
 8006e6a:	4b04      	ldr	r3, [pc, #16]	@ (8006e7c <__assert_func+0x38>)
 8006e6c:	e7f4      	b.n	8006e58 <__assert_func+0x14>
 8006e6e:	bf00      	nop
 8006e70:	20000034 	.word	0x20000034
 8006e74:	08009184 	.word	0x08009184
 8006e78:	08009156 	.word	0x08009156
 8006e7c:	08009149 	.word	0x08009149

08006e80 <quorem>:
 8006e80:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006e84:	6903      	ldr	r3, [r0, #16]
 8006e86:	690c      	ldr	r4, [r1, #16]
 8006e88:	42a3      	cmp	r3, r4
 8006e8a:	4607      	mov	r7, r0
 8006e8c:	db7e      	blt.n	8006f8c <quorem+0x10c>
 8006e8e:	3c01      	subs	r4, #1
 8006e90:	f101 0814 	add.w	r8, r1, #20
 8006e94:	00a3      	lsls	r3, r4, #2
 8006e96:	f100 0514 	add.w	r5, r0, #20
 8006e9a:	9300      	str	r3, [sp, #0]
 8006e9c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006ea0:	9301      	str	r3, [sp, #4]
 8006ea2:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8006ea6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006eaa:	3301      	adds	r3, #1
 8006eac:	429a      	cmp	r2, r3
 8006eae:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8006eb2:	fbb2 f6f3 	udiv	r6, r2, r3
 8006eb6:	d32e      	bcc.n	8006f16 <quorem+0x96>
 8006eb8:	f04f 0a00 	mov.w	sl, #0
 8006ebc:	46c4      	mov	ip, r8
 8006ebe:	46ae      	mov	lr, r5
 8006ec0:	46d3      	mov	fp, sl
 8006ec2:	f85c 3b04 	ldr.w	r3, [ip], #4
 8006ec6:	b298      	uxth	r0, r3
 8006ec8:	fb06 a000 	mla	r0, r6, r0, sl
 8006ecc:	0c02      	lsrs	r2, r0, #16
 8006ece:	0c1b      	lsrs	r3, r3, #16
 8006ed0:	fb06 2303 	mla	r3, r6, r3, r2
 8006ed4:	f8de 2000 	ldr.w	r2, [lr]
 8006ed8:	b280      	uxth	r0, r0
 8006eda:	b292      	uxth	r2, r2
 8006edc:	1a12      	subs	r2, r2, r0
 8006ede:	445a      	add	r2, fp
 8006ee0:	f8de 0000 	ldr.w	r0, [lr]
 8006ee4:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8006ee8:	b29b      	uxth	r3, r3
 8006eea:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8006eee:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8006ef2:	b292      	uxth	r2, r2
 8006ef4:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8006ef8:	45e1      	cmp	r9, ip
 8006efa:	f84e 2b04 	str.w	r2, [lr], #4
 8006efe:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8006f02:	d2de      	bcs.n	8006ec2 <quorem+0x42>
 8006f04:	9b00      	ldr	r3, [sp, #0]
 8006f06:	58eb      	ldr	r3, [r5, r3]
 8006f08:	b92b      	cbnz	r3, 8006f16 <quorem+0x96>
 8006f0a:	9b01      	ldr	r3, [sp, #4]
 8006f0c:	3b04      	subs	r3, #4
 8006f0e:	429d      	cmp	r5, r3
 8006f10:	461a      	mov	r2, r3
 8006f12:	d32f      	bcc.n	8006f74 <quorem+0xf4>
 8006f14:	613c      	str	r4, [r7, #16]
 8006f16:	4638      	mov	r0, r7
 8006f18:	f001 f978 	bl	800820c <__mcmp>
 8006f1c:	2800      	cmp	r0, #0
 8006f1e:	db25      	blt.n	8006f6c <quorem+0xec>
 8006f20:	4629      	mov	r1, r5
 8006f22:	2000      	movs	r0, #0
 8006f24:	f858 2b04 	ldr.w	r2, [r8], #4
 8006f28:	f8d1 c000 	ldr.w	ip, [r1]
 8006f2c:	fa1f fe82 	uxth.w	lr, r2
 8006f30:	fa1f f38c 	uxth.w	r3, ip
 8006f34:	eba3 030e 	sub.w	r3, r3, lr
 8006f38:	4403      	add	r3, r0
 8006f3a:	0c12      	lsrs	r2, r2, #16
 8006f3c:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8006f40:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8006f44:	b29b      	uxth	r3, r3
 8006f46:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006f4a:	45c1      	cmp	r9, r8
 8006f4c:	f841 3b04 	str.w	r3, [r1], #4
 8006f50:	ea4f 4022 	mov.w	r0, r2, asr #16
 8006f54:	d2e6      	bcs.n	8006f24 <quorem+0xa4>
 8006f56:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006f5a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006f5e:	b922      	cbnz	r2, 8006f6a <quorem+0xea>
 8006f60:	3b04      	subs	r3, #4
 8006f62:	429d      	cmp	r5, r3
 8006f64:	461a      	mov	r2, r3
 8006f66:	d30b      	bcc.n	8006f80 <quorem+0x100>
 8006f68:	613c      	str	r4, [r7, #16]
 8006f6a:	3601      	adds	r6, #1
 8006f6c:	4630      	mov	r0, r6
 8006f6e:	b003      	add	sp, #12
 8006f70:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006f74:	6812      	ldr	r2, [r2, #0]
 8006f76:	3b04      	subs	r3, #4
 8006f78:	2a00      	cmp	r2, #0
 8006f7a:	d1cb      	bne.n	8006f14 <quorem+0x94>
 8006f7c:	3c01      	subs	r4, #1
 8006f7e:	e7c6      	b.n	8006f0e <quorem+0x8e>
 8006f80:	6812      	ldr	r2, [r2, #0]
 8006f82:	3b04      	subs	r3, #4
 8006f84:	2a00      	cmp	r2, #0
 8006f86:	d1ef      	bne.n	8006f68 <quorem+0xe8>
 8006f88:	3c01      	subs	r4, #1
 8006f8a:	e7ea      	b.n	8006f62 <quorem+0xe2>
 8006f8c:	2000      	movs	r0, #0
 8006f8e:	e7ee      	b.n	8006f6e <quorem+0xee>

08006f90 <_dtoa_r>:
 8006f90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006f94:	69c7      	ldr	r7, [r0, #28]
 8006f96:	b099      	sub	sp, #100	@ 0x64
 8006f98:	ed8d 0b02 	vstr	d0, [sp, #8]
 8006f9c:	ec55 4b10 	vmov	r4, r5, d0
 8006fa0:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 8006fa2:	9109      	str	r1, [sp, #36]	@ 0x24
 8006fa4:	4683      	mov	fp, r0
 8006fa6:	920e      	str	r2, [sp, #56]	@ 0x38
 8006fa8:	9313      	str	r3, [sp, #76]	@ 0x4c
 8006faa:	b97f      	cbnz	r7, 8006fcc <_dtoa_r+0x3c>
 8006fac:	2010      	movs	r0, #16
 8006fae:	f000 fdfd 	bl	8007bac <malloc>
 8006fb2:	4602      	mov	r2, r0
 8006fb4:	f8cb 001c 	str.w	r0, [fp, #28]
 8006fb8:	b920      	cbnz	r0, 8006fc4 <_dtoa_r+0x34>
 8006fba:	4ba7      	ldr	r3, [pc, #668]	@ (8007258 <_dtoa_r+0x2c8>)
 8006fbc:	21ef      	movs	r1, #239	@ 0xef
 8006fbe:	48a7      	ldr	r0, [pc, #668]	@ (800725c <_dtoa_r+0x2cc>)
 8006fc0:	f7ff ff40 	bl	8006e44 <__assert_func>
 8006fc4:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8006fc8:	6007      	str	r7, [r0, #0]
 8006fca:	60c7      	str	r7, [r0, #12]
 8006fcc:	f8db 301c 	ldr.w	r3, [fp, #28]
 8006fd0:	6819      	ldr	r1, [r3, #0]
 8006fd2:	b159      	cbz	r1, 8006fec <_dtoa_r+0x5c>
 8006fd4:	685a      	ldr	r2, [r3, #4]
 8006fd6:	604a      	str	r2, [r1, #4]
 8006fd8:	2301      	movs	r3, #1
 8006fda:	4093      	lsls	r3, r2
 8006fdc:	608b      	str	r3, [r1, #8]
 8006fde:	4658      	mov	r0, fp
 8006fe0:	f000 feda 	bl	8007d98 <_Bfree>
 8006fe4:	f8db 301c 	ldr.w	r3, [fp, #28]
 8006fe8:	2200      	movs	r2, #0
 8006fea:	601a      	str	r2, [r3, #0]
 8006fec:	1e2b      	subs	r3, r5, #0
 8006fee:	bfb9      	ittee	lt
 8006ff0:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8006ff4:	9303      	strlt	r3, [sp, #12]
 8006ff6:	2300      	movge	r3, #0
 8006ff8:	6033      	strge	r3, [r6, #0]
 8006ffa:	9f03      	ldr	r7, [sp, #12]
 8006ffc:	4b98      	ldr	r3, [pc, #608]	@ (8007260 <_dtoa_r+0x2d0>)
 8006ffe:	bfbc      	itt	lt
 8007000:	2201      	movlt	r2, #1
 8007002:	6032      	strlt	r2, [r6, #0]
 8007004:	43bb      	bics	r3, r7
 8007006:	d112      	bne.n	800702e <_dtoa_r+0x9e>
 8007008:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800700a:	f242 730f 	movw	r3, #9999	@ 0x270f
 800700e:	6013      	str	r3, [r2, #0]
 8007010:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8007014:	4323      	orrs	r3, r4
 8007016:	f000 854d 	beq.w	8007ab4 <_dtoa_r+0xb24>
 800701a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800701c:	f8df a254 	ldr.w	sl, [pc, #596]	@ 8007274 <_dtoa_r+0x2e4>
 8007020:	2b00      	cmp	r3, #0
 8007022:	f000 854f 	beq.w	8007ac4 <_dtoa_r+0xb34>
 8007026:	f10a 0303 	add.w	r3, sl, #3
 800702a:	f000 bd49 	b.w	8007ac0 <_dtoa_r+0xb30>
 800702e:	ed9d 7b02 	vldr	d7, [sp, #8]
 8007032:	2200      	movs	r2, #0
 8007034:	ec51 0b17 	vmov	r0, r1, d7
 8007038:	2300      	movs	r3, #0
 800703a:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 800703e:	f7f9 fd7b 	bl	8000b38 <__aeabi_dcmpeq>
 8007042:	4680      	mov	r8, r0
 8007044:	b158      	cbz	r0, 800705e <_dtoa_r+0xce>
 8007046:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8007048:	2301      	movs	r3, #1
 800704a:	6013      	str	r3, [r2, #0]
 800704c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800704e:	b113      	cbz	r3, 8007056 <_dtoa_r+0xc6>
 8007050:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8007052:	4b84      	ldr	r3, [pc, #528]	@ (8007264 <_dtoa_r+0x2d4>)
 8007054:	6013      	str	r3, [r2, #0]
 8007056:	f8df a220 	ldr.w	sl, [pc, #544]	@ 8007278 <_dtoa_r+0x2e8>
 800705a:	f000 bd33 	b.w	8007ac4 <_dtoa_r+0xb34>
 800705e:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8007062:	aa16      	add	r2, sp, #88	@ 0x58
 8007064:	a917      	add	r1, sp, #92	@ 0x5c
 8007066:	4658      	mov	r0, fp
 8007068:	f001 f980 	bl	800836c <__d2b>
 800706c:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8007070:	4681      	mov	r9, r0
 8007072:	2e00      	cmp	r6, #0
 8007074:	d077      	beq.n	8007166 <_dtoa_r+0x1d6>
 8007076:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8007078:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 800707c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007080:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007084:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8007088:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800708c:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8007090:	4619      	mov	r1, r3
 8007092:	2200      	movs	r2, #0
 8007094:	4b74      	ldr	r3, [pc, #464]	@ (8007268 <_dtoa_r+0x2d8>)
 8007096:	f7f9 f92f 	bl	80002f8 <__aeabi_dsub>
 800709a:	a369      	add	r3, pc, #420	@ (adr r3, 8007240 <_dtoa_r+0x2b0>)
 800709c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80070a0:	f7f9 fae2 	bl	8000668 <__aeabi_dmul>
 80070a4:	a368      	add	r3, pc, #416	@ (adr r3, 8007248 <_dtoa_r+0x2b8>)
 80070a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80070aa:	f7f9 f927 	bl	80002fc <__adddf3>
 80070ae:	4604      	mov	r4, r0
 80070b0:	4630      	mov	r0, r6
 80070b2:	460d      	mov	r5, r1
 80070b4:	f7f9 fa6e 	bl	8000594 <__aeabi_i2d>
 80070b8:	a365      	add	r3, pc, #404	@ (adr r3, 8007250 <_dtoa_r+0x2c0>)
 80070ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80070be:	f7f9 fad3 	bl	8000668 <__aeabi_dmul>
 80070c2:	4602      	mov	r2, r0
 80070c4:	460b      	mov	r3, r1
 80070c6:	4620      	mov	r0, r4
 80070c8:	4629      	mov	r1, r5
 80070ca:	f7f9 f917 	bl	80002fc <__adddf3>
 80070ce:	4604      	mov	r4, r0
 80070d0:	460d      	mov	r5, r1
 80070d2:	f7f9 fd79 	bl	8000bc8 <__aeabi_d2iz>
 80070d6:	2200      	movs	r2, #0
 80070d8:	4607      	mov	r7, r0
 80070da:	2300      	movs	r3, #0
 80070dc:	4620      	mov	r0, r4
 80070de:	4629      	mov	r1, r5
 80070e0:	f7f9 fd34 	bl	8000b4c <__aeabi_dcmplt>
 80070e4:	b140      	cbz	r0, 80070f8 <_dtoa_r+0x168>
 80070e6:	4638      	mov	r0, r7
 80070e8:	f7f9 fa54 	bl	8000594 <__aeabi_i2d>
 80070ec:	4622      	mov	r2, r4
 80070ee:	462b      	mov	r3, r5
 80070f0:	f7f9 fd22 	bl	8000b38 <__aeabi_dcmpeq>
 80070f4:	b900      	cbnz	r0, 80070f8 <_dtoa_r+0x168>
 80070f6:	3f01      	subs	r7, #1
 80070f8:	2f16      	cmp	r7, #22
 80070fa:	d851      	bhi.n	80071a0 <_dtoa_r+0x210>
 80070fc:	4b5b      	ldr	r3, [pc, #364]	@ (800726c <_dtoa_r+0x2dc>)
 80070fe:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8007102:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007106:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800710a:	f7f9 fd1f 	bl	8000b4c <__aeabi_dcmplt>
 800710e:	2800      	cmp	r0, #0
 8007110:	d048      	beq.n	80071a4 <_dtoa_r+0x214>
 8007112:	3f01      	subs	r7, #1
 8007114:	2300      	movs	r3, #0
 8007116:	9312      	str	r3, [sp, #72]	@ 0x48
 8007118:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800711a:	1b9b      	subs	r3, r3, r6
 800711c:	1e5a      	subs	r2, r3, #1
 800711e:	bf44      	itt	mi
 8007120:	f1c3 0801 	rsbmi	r8, r3, #1
 8007124:	2300      	movmi	r3, #0
 8007126:	9208      	str	r2, [sp, #32]
 8007128:	bf54      	ite	pl
 800712a:	f04f 0800 	movpl.w	r8, #0
 800712e:	9308      	strmi	r3, [sp, #32]
 8007130:	2f00      	cmp	r7, #0
 8007132:	db39      	blt.n	80071a8 <_dtoa_r+0x218>
 8007134:	9b08      	ldr	r3, [sp, #32]
 8007136:	970f      	str	r7, [sp, #60]	@ 0x3c
 8007138:	443b      	add	r3, r7
 800713a:	9308      	str	r3, [sp, #32]
 800713c:	2300      	movs	r3, #0
 800713e:	930a      	str	r3, [sp, #40]	@ 0x28
 8007140:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007142:	2b09      	cmp	r3, #9
 8007144:	d864      	bhi.n	8007210 <_dtoa_r+0x280>
 8007146:	2b05      	cmp	r3, #5
 8007148:	bfc4      	itt	gt
 800714a:	3b04      	subgt	r3, #4
 800714c:	9309      	strgt	r3, [sp, #36]	@ 0x24
 800714e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007150:	f1a3 0302 	sub.w	r3, r3, #2
 8007154:	bfcc      	ite	gt
 8007156:	2400      	movgt	r4, #0
 8007158:	2401      	movle	r4, #1
 800715a:	2b03      	cmp	r3, #3
 800715c:	d863      	bhi.n	8007226 <_dtoa_r+0x296>
 800715e:	e8df f003 	tbb	[pc, r3]
 8007162:	372a      	.short	0x372a
 8007164:	5535      	.short	0x5535
 8007166:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 800716a:	441e      	add	r6, r3
 800716c:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8007170:	2b20      	cmp	r3, #32
 8007172:	bfc1      	itttt	gt
 8007174:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8007178:	409f      	lslgt	r7, r3
 800717a:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800717e:	fa24 f303 	lsrgt.w	r3, r4, r3
 8007182:	bfd6      	itet	le
 8007184:	f1c3 0320 	rsble	r3, r3, #32
 8007188:	ea47 0003 	orrgt.w	r0, r7, r3
 800718c:	fa04 f003 	lslle.w	r0, r4, r3
 8007190:	f7f9 f9f0 	bl	8000574 <__aeabi_ui2d>
 8007194:	2201      	movs	r2, #1
 8007196:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800719a:	3e01      	subs	r6, #1
 800719c:	9214      	str	r2, [sp, #80]	@ 0x50
 800719e:	e777      	b.n	8007090 <_dtoa_r+0x100>
 80071a0:	2301      	movs	r3, #1
 80071a2:	e7b8      	b.n	8007116 <_dtoa_r+0x186>
 80071a4:	9012      	str	r0, [sp, #72]	@ 0x48
 80071a6:	e7b7      	b.n	8007118 <_dtoa_r+0x188>
 80071a8:	427b      	negs	r3, r7
 80071aa:	930a      	str	r3, [sp, #40]	@ 0x28
 80071ac:	2300      	movs	r3, #0
 80071ae:	eba8 0807 	sub.w	r8, r8, r7
 80071b2:	930f      	str	r3, [sp, #60]	@ 0x3c
 80071b4:	e7c4      	b.n	8007140 <_dtoa_r+0x1b0>
 80071b6:	2300      	movs	r3, #0
 80071b8:	930b      	str	r3, [sp, #44]	@ 0x2c
 80071ba:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80071bc:	2b00      	cmp	r3, #0
 80071be:	dc35      	bgt.n	800722c <_dtoa_r+0x29c>
 80071c0:	2301      	movs	r3, #1
 80071c2:	9300      	str	r3, [sp, #0]
 80071c4:	9307      	str	r3, [sp, #28]
 80071c6:	461a      	mov	r2, r3
 80071c8:	920e      	str	r2, [sp, #56]	@ 0x38
 80071ca:	e00b      	b.n	80071e4 <_dtoa_r+0x254>
 80071cc:	2301      	movs	r3, #1
 80071ce:	e7f3      	b.n	80071b8 <_dtoa_r+0x228>
 80071d0:	2300      	movs	r3, #0
 80071d2:	930b      	str	r3, [sp, #44]	@ 0x2c
 80071d4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80071d6:	18fb      	adds	r3, r7, r3
 80071d8:	9300      	str	r3, [sp, #0]
 80071da:	3301      	adds	r3, #1
 80071dc:	2b01      	cmp	r3, #1
 80071de:	9307      	str	r3, [sp, #28]
 80071e0:	bfb8      	it	lt
 80071e2:	2301      	movlt	r3, #1
 80071e4:	f8db 001c 	ldr.w	r0, [fp, #28]
 80071e8:	2100      	movs	r1, #0
 80071ea:	2204      	movs	r2, #4
 80071ec:	f102 0514 	add.w	r5, r2, #20
 80071f0:	429d      	cmp	r5, r3
 80071f2:	d91f      	bls.n	8007234 <_dtoa_r+0x2a4>
 80071f4:	6041      	str	r1, [r0, #4]
 80071f6:	4658      	mov	r0, fp
 80071f8:	f000 fd8e 	bl	8007d18 <_Balloc>
 80071fc:	4682      	mov	sl, r0
 80071fe:	2800      	cmp	r0, #0
 8007200:	d13c      	bne.n	800727c <_dtoa_r+0x2ec>
 8007202:	4b1b      	ldr	r3, [pc, #108]	@ (8007270 <_dtoa_r+0x2e0>)
 8007204:	4602      	mov	r2, r0
 8007206:	f240 11af 	movw	r1, #431	@ 0x1af
 800720a:	e6d8      	b.n	8006fbe <_dtoa_r+0x2e>
 800720c:	2301      	movs	r3, #1
 800720e:	e7e0      	b.n	80071d2 <_dtoa_r+0x242>
 8007210:	2401      	movs	r4, #1
 8007212:	2300      	movs	r3, #0
 8007214:	9309      	str	r3, [sp, #36]	@ 0x24
 8007216:	940b      	str	r4, [sp, #44]	@ 0x2c
 8007218:	f04f 33ff 	mov.w	r3, #4294967295
 800721c:	9300      	str	r3, [sp, #0]
 800721e:	9307      	str	r3, [sp, #28]
 8007220:	2200      	movs	r2, #0
 8007222:	2312      	movs	r3, #18
 8007224:	e7d0      	b.n	80071c8 <_dtoa_r+0x238>
 8007226:	2301      	movs	r3, #1
 8007228:	930b      	str	r3, [sp, #44]	@ 0x2c
 800722a:	e7f5      	b.n	8007218 <_dtoa_r+0x288>
 800722c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800722e:	9300      	str	r3, [sp, #0]
 8007230:	9307      	str	r3, [sp, #28]
 8007232:	e7d7      	b.n	80071e4 <_dtoa_r+0x254>
 8007234:	3101      	adds	r1, #1
 8007236:	0052      	lsls	r2, r2, #1
 8007238:	e7d8      	b.n	80071ec <_dtoa_r+0x25c>
 800723a:	bf00      	nop
 800723c:	f3af 8000 	nop.w
 8007240:	636f4361 	.word	0x636f4361
 8007244:	3fd287a7 	.word	0x3fd287a7
 8007248:	8b60c8b3 	.word	0x8b60c8b3
 800724c:	3fc68a28 	.word	0x3fc68a28
 8007250:	509f79fb 	.word	0x509f79fb
 8007254:	3fd34413 	.word	0x3fd34413
 8007258:	080090d8 	.word	0x080090d8
 800725c:	08009192 	.word	0x08009192
 8007260:	7ff00000 	.word	0x7ff00000
 8007264:	080090b5 	.word	0x080090b5
 8007268:	3ff80000 	.word	0x3ff80000
 800726c:	08009288 	.word	0x08009288
 8007270:	080091ea 	.word	0x080091ea
 8007274:	0800918e 	.word	0x0800918e
 8007278:	080090b4 	.word	0x080090b4
 800727c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8007280:	6018      	str	r0, [r3, #0]
 8007282:	9b07      	ldr	r3, [sp, #28]
 8007284:	2b0e      	cmp	r3, #14
 8007286:	f200 80a4 	bhi.w	80073d2 <_dtoa_r+0x442>
 800728a:	2c00      	cmp	r4, #0
 800728c:	f000 80a1 	beq.w	80073d2 <_dtoa_r+0x442>
 8007290:	2f00      	cmp	r7, #0
 8007292:	dd33      	ble.n	80072fc <_dtoa_r+0x36c>
 8007294:	4bad      	ldr	r3, [pc, #692]	@ (800754c <_dtoa_r+0x5bc>)
 8007296:	f007 020f 	and.w	r2, r7, #15
 800729a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800729e:	ed93 7b00 	vldr	d7, [r3]
 80072a2:	05f8      	lsls	r0, r7, #23
 80072a4:	ed8d 7b04 	vstr	d7, [sp, #16]
 80072a8:	ea4f 1427 	mov.w	r4, r7, asr #4
 80072ac:	d516      	bpl.n	80072dc <_dtoa_r+0x34c>
 80072ae:	4ba8      	ldr	r3, [pc, #672]	@ (8007550 <_dtoa_r+0x5c0>)
 80072b0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80072b4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80072b8:	f7f9 fb00 	bl	80008bc <__aeabi_ddiv>
 80072bc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80072c0:	f004 040f 	and.w	r4, r4, #15
 80072c4:	2603      	movs	r6, #3
 80072c6:	4da2      	ldr	r5, [pc, #648]	@ (8007550 <_dtoa_r+0x5c0>)
 80072c8:	b954      	cbnz	r4, 80072e0 <_dtoa_r+0x350>
 80072ca:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80072ce:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80072d2:	f7f9 faf3 	bl	80008bc <__aeabi_ddiv>
 80072d6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80072da:	e028      	b.n	800732e <_dtoa_r+0x39e>
 80072dc:	2602      	movs	r6, #2
 80072de:	e7f2      	b.n	80072c6 <_dtoa_r+0x336>
 80072e0:	07e1      	lsls	r1, r4, #31
 80072e2:	d508      	bpl.n	80072f6 <_dtoa_r+0x366>
 80072e4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80072e8:	e9d5 2300 	ldrd	r2, r3, [r5]
 80072ec:	f7f9 f9bc 	bl	8000668 <__aeabi_dmul>
 80072f0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80072f4:	3601      	adds	r6, #1
 80072f6:	1064      	asrs	r4, r4, #1
 80072f8:	3508      	adds	r5, #8
 80072fa:	e7e5      	b.n	80072c8 <_dtoa_r+0x338>
 80072fc:	f000 80d2 	beq.w	80074a4 <_dtoa_r+0x514>
 8007300:	427c      	negs	r4, r7
 8007302:	4b92      	ldr	r3, [pc, #584]	@ (800754c <_dtoa_r+0x5bc>)
 8007304:	4d92      	ldr	r5, [pc, #584]	@ (8007550 <_dtoa_r+0x5c0>)
 8007306:	f004 020f 	and.w	r2, r4, #15
 800730a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800730e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007312:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007316:	f7f9 f9a7 	bl	8000668 <__aeabi_dmul>
 800731a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800731e:	1124      	asrs	r4, r4, #4
 8007320:	2300      	movs	r3, #0
 8007322:	2602      	movs	r6, #2
 8007324:	2c00      	cmp	r4, #0
 8007326:	f040 80b2 	bne.w	800748e <_dtoa_r+0x4fe>
 800732a:	2b00      	cmp	r3, #0
 800732c:	d1d3      	bne.n	80072d6 <_dtoa_r+0x346>
 800732e:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8007330:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8007334:	2b00      	cmp	r3, #0
 8007336:	f000 80b7 	beq.w	80074a8 <_dtoa_r+0x518>
 800733a:	4b86      	ldr	r3, [pc, #536]	@ (8007554 <_dtoa_r+0x5c4>)
 800733c:	2200      	movs	r2, #0
 800733e:	4620      	mov	r0, r4
 8007340:	4629      	mov	r1, r5
 8007342:	f7f9 fc03 	bl	8000b4c <__aeabi_dcmplt>
 8007346:	2800      	cmp	r0, #0
 8007348:	f000 80ae 	beq.w	80074a8 <_dtoa_r+0x518>
 800734c:	9b07      	ldr	r3, [sp, #28]
 800734e:	2b00      	cmp	r3, #0
 8007350:	f000 80aa 	beq.w	80074a8 <_dtoa_r+0x518>
 8007354:	9b00      	ldr	r3, [sp, #0]
 8007356:	2b00      	cmp	r3, #0
 8007358:	dd37      	ble.n	80073ca <_dtoa_r+0x43a>
 800735a:	1e7b      	subs	r3, r7, #1
 800735c:	9304      	str	r3, [sp, #16]
 800735e:	4620      	mov	r0, r4
 8007360:	4b7d      	ldr	r3, [pc, #500]	@ (8007558 <_dtoa_r+0x5c8>)
 8007362:	2200      	movs	r2, #0
 8007364:	4629      	mov	r1, r5
 8007366:	f7f9 f97f 	bl	8000668 <__aeabi_dmul>
 800736a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800736e:	9c00      	ldr	r4, [sp, #0]
 8007370:	3601      	adds	r6, #1
 8007372:	4630      	mov	r0, r6
 8007374:	f7f9 f90e 	bl	8000594 <__aeabi_i2d>
 8007378:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800737c:	f7f9 f974 	bl	8000668 <__aeabi_dmul>
 8007380:	4b76      	ldr	r3, [pc, #472]	@ (800755c <_dtoa_r+0x5cc>)
 8007382:	2200      	movs	r2, #0
 8007384:	f7f8 ffba 	bl	80002fc <__adddf3>
 8007388:	4605      	mov	r5, r0
 800738a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800738e:	2c00      	cmp	r4, #0
 8007390:	f040 808d 	bne.w	80074ae <_dtoa_r+0x51e>
 8007394:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007398:	4b71      	ldr	r3, [pc, #452]	@ (8007560 <_dtoa_r+0x5d0>)
 800739a:	2200      	movs	r2, #0
 800739c:	f7f8 ffac 	bl	80002f8 <__aeabi_dsub>
 80073a0:	4602      	mov	r2, r0
 80073a2:	460b      	mov	r3, r1
 80073a4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80073a8:	462a      	mov	r2, r5
 80073aa:	4633      	mov	r3, r6
 80073ac:	f7f9 fbec 	bl	8000b88 <__aeabi_dcmpgt>
 80073b0:	2800      	cmp	r0, #0
 80073b2:	f040 828b 	bne.w	80078cc <_dtoa_r+0x93c>
 80073b6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80073ba:	462a      	mov	r2, r5
 80073bc:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 80073c0:	f7f9 fbc4 	bl	8000b4c <__aeabi_dcmplt>
 80073c4:	2800      	cmp	r0, #0
 80073c6:	f040 8128 	bne.w	800761a <_dtoa_r+0x68a>
 80073ca:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 80073ce:	e9cd 3402 	strd	r3, r4, [sp, #8]
 80073d2:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80073d4:	2b00      	cmp	r3, #0
 80073d6:	f2c0 815a 	blt.w	800768e <_dtoa_r+0x6fe>
 80073da:	2f0e      	cmp	r7, #14
 80073dc:	f300 8157 	bgt.w	800768e <_dtoa_r+0x6fe>
 80073e0:	4b5a      	ldr	r3, [pc, #360]	@ (800754c <_dtoa_r+0x5bc>)
 80073e2:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80073e6:	ed93 7b00 	vldr	d7, [r3]
 80073ea:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80073ec:	2b00      	cmp	r3, #0
 80073ee:	ed8d 7b00 	vstr	d7, [sp]
 80073f2:	da03      	bge.n	80073fc <_dtoa_r+0x46c>
 80073f4:	9b07      	ldr	r3, [sp, #28]
 80073f6:	2b00      	cmp	r3, #0
 80073f8:	f340 8101 	ble.w	80075fe <_dtoa_r+0x66e>
 80073fc:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8007400:	4656      	mov	r6, sl
 8007402:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007406:	4620      	mov	r0, r4
 8007408:	4629      	mov	r1, r5
 800740a:	f7f9 fa57 	bl	80008bc <__aeabi_ddiv>
 800740e:	f7f9 fbdb 	bl	8000bc8 <__aeabi_d2iz>
 8007412:	4680      	mov	r8, r0
 8007414:	f7f9 f8be 	bl	8000594 <__aeabi_i2d>
 8007418:	e9dd 2300 	ldrd	r2, r3, [sp]
 800741c:	f7f9 f924 	bl	8000668 <__aeabi_dmul>
 8007420:	4602      	mov	r2, r0
 8007422:	460b      	mov	r3, r1
 8007424:	4620      	mov	r0, r4
 8007426:	4629      	mov	r1, r5
 8007428:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800742c:	f7f8 ff64 	bl	80002f8 <__aeabi_dsub>
 8007430:	f806 4b01 	strb.w	r4, [r6], #1
 8007434:	9d07      	ldr	r5, [sp, #28]
 8007436:	eba6 040a 	sub.w	r4, r6, sl
 800743a:	42a5      	cmp	r5, r4
 800743c:	4602      	mov	r2, r0
 800743e:	460b      	mov	r3, r1
 8007440:	f040 8117 	bne.w	8007672 <_dtoa_r+0x6e2>
 8007444:	f7f8 ff5a 	bl	80002fc <__adddf3>
 8007448:	e9dd 2300 	ldrd	r2, r3, [sp]
 800744c:	4604      	mov	r4, r0
 800744e:	460d      	mov	r5, r1
 8007450:	f7f9 fb9a 	bl	8000b88 <__aeabi_dcmpgt>
 8007454:	2800      	cmp	r0, #0
 8007456:	f040 80f9 	bne.w	800764c <_dtoa_r+0x6bc>
 800745a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800745e:	4620      	mov	r0, r4
 8007460:	4629      	mov	r1, r5
 8007462:	f7f9 fb69 	bl	8000b38 <__aeabi_dcmpeq>
 8007466:	b118      	cbz	r0, 8007470 <_dtoa_r+0x4e0>
 8007468:	f018 0f01 	tst.w	r8, #1
 800746c:	f040 80ee 	bne.w	800764c <_dtoa_r+0x6bc>
 8007470:	4649      	mov	r1, r9
 8007472:	4658      	mov	r0, fp
 8007474:	f000 fc90 	bl	8007d98 <_Bfree>
 8007478:	2300      	movs	r3, #0
 800747a:	7033      	strb	r3, [r6, #0]
 800747c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800747e:	3701      	adds	r7, #1
 8007480:	601f      	str	r7, [r3, #0]
 8007482:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8007484:	2b00      	cmp	r3, #0
 8007486:	f000 831d 	beq.w	8007ac4 <_dtoa_r+0xb34>
 800748a:	601e      	str	r6, [r3, #0]
 800748c:	e31a      	b.n	8007ac4 <_dtoa_r+0xb34>
 800748e:	07e2      	lsls	r2, r4, #31
 8007490:	d505      	bpl.n	800749e <_dtoa_r+0x50e>
 8007492:	e9d5 2300 	ldrd	r2, r3, [r5]
 8007496:	f7f9 f8e7 	bl	8000668 <__aeabi_dmul>
 800749a:	3601      	adds	r6, #1
 800749c:	2301      	movs	r3, #1
 800749e:	1064      	asrs	r4, r4, #1
 80074a0:	3508      	adds	r5, #8
 80074a2:	e73f      	b.n	8007324 <_dtoa_r+0x394>
 80074a4:	2602      	movs	r6, #2
 80074a6:	e742      	b.n	800732e <_dtoa_r+0x39e>
 80074a8:	9c07      	ldr	r4, [sp, #28]
 80074aa:	9704      	str	r7, [sp, #16]
 80074ac:	e761      	b.n	8007372 <_dtoa_r+0x3e2>
 80074ae:	4b27      	ldr	r3, [pc, #156]	@ (800754c <_dtoa_r+0x5bc>)
 80074b0:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80074b2:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80074b6:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80074ba:	4454      	add	r4, sl
 80074bc:	2900      	cmp	r1, #0
 80074be:	d053      	beq.n	8007568 <_dtoa_r+0x5d8>
 80074c0:	4928      	ldr	r1, [pc, #160]	@ (8007564 <_dtoa_r+0x5d4>)
 80074c2:	2000      	movs	r0, #0
 80074c4:	f7f9 f9fa 	bl	80008bc <__aeabi_ddiv>
 80074c8:	4633      	mov	r3, r6
 80074ca:	462a      	mov	r2, r5
 80074cc:	f7f8 ff14 	bl	80002f8 <__aeabi_dsub>
 80074d0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80074d4:	4656      	mov	r6, sl
 80074d6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80074da:	f7f9 fb75 	bl	8000bc8 <__aeabi_d2iz>
 80074de:	4605      	mov	r5, r0
 80074e0:	f7f9 f858 	bl	8000594 <__aeabi_i2d>
 80074e4:	4602      	mov	r2, r0
 80074e6:	460b      	mov	r3, r1
 80074e8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80074ec:	f7f8 ff04 	bl	80002f8 <__aeabi_dsub>
 80074f0:	3530      	adds	r5, #48	@ 0x30
 80074f2:	4602      	mov	r2, r0
 80074f4:	460b      	mov	r3, r1
 80074f6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80074fa:	f806 5b01 	strb.w	r5, [r6], #1
 80074fe:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8007502:	f7f9 fb23 	bl	8000b4c <__aeabi_dcmplt>
 8007506:	2800      	cmp	r0, #0
 8007508:	d171      	bne.n	80075ee <_dtoa_r+0x65e>
 800750a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800750e:	4911      	ldr	r1, [pc, #68]	@ (8007554 <_dtoa_r+0x5c4>)
 8007510:	2000      	movs	r0, #0
 8007512:	f7f8 fef1 	bl	80002f8 <__aeabi_dsub>
 8007516:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800751a:	f7f9 fb17 	bl	8000b4c <__aeabi_dcmplt>
 800751e:	2800      	cmp	r0, #0
 8007520:	f040 8095 	bne.w	800764e <_dtoa_r+0x6be>
 8007524:	42a6      	cmp	r6, r4
 8007526:	f43f af50 	beq.w	80073ca <_dtoa_r+0x43a>
 800752a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800752e:	4b0a      	ldr	r3, [pc, #40]	@ (8007558 <_dtoa_r+0x5c8>)
 8007530:	2200      	movs	r2, #0
 8007532:	f7f9 f899 	bl	8000668 <__aeabi_dmul>
 8007536:	4b08      	ldr	r3, [pc, #32]	@ (8007558 <_dtoa_r+0x5c8>)
 8007538:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800753c:	2200      	movs	r2, #0
 800753e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007542:	f7f9 f891 	bl	8000668 <__aeabi_dmul>
 8007546:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800754a:	e7c4      	b.n	80074d6 <_dtoa_r+0x546>
 800754c:	08009288 	.word	0x08009288
 8007550:	08009260 	.word	0x08009260
 8007554:	3ff00000 	.word	0x3ff00000
 8007558:	40240000 	.word	0x40240000
 800755c:	401c0000 	.word	0x401c0000
 8007560:	40140000 	.word	0x40140000
 8007564:	3fe00000 	.word	0x3fe00000
 8007568:	4631      	mov	r1, r6
 800756a:	4628      	mov	r0, r5
 800756c:	f7f9 f87c 	bl	8000668 <__aeabi_dmul>
 8007570:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8007574:	9415      	str	r4, [sp, #84]	@ 0x54
 8007576:	4656      	mov	r6, sl
 8007578:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800757c:	f7f9 fb24 	bl	8000bc8 <__aeabi_d2iz>
 8007580:	4605      	mov	r5, r0
 8007582:	f7f9 f807 	bl	8000594 <__aeabi_i2d>
 8007586:	4602      	mov	r2, r0
 8007588:	460b      	mov	r3, r1
 800758a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800758e:	f7f8 feb3 	bl	80002f8 <__aeabi_dsub>
 8007592:	3530      	adds	r5, #48	@ 0x30
 8007594:	f806 5b01 	strb.w	r5, [r6], #1
 8007598:	4602      	mov	r2, r0
 800759a:	460b      	mov	r3, r1
 800759c:	42a6      	cmp	r6, r4
 800759e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80075a2:	f04f 0200 	mov.w	r2, #0
 80075a6:	d124      	bne.n	80075f2 <_dtoa_r+0x662>
 80075a8:	4bac      	ldr	r3, [pc, #688]	@ (800785c <_dtoa_r+0x8cc>)
 80075aa:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 80075ae:	f7f8 fea5 	bl	80002fc <__adddf3>
 80075b2:	4602      	mov	r2, r0
 80075b4:	460b      	mov	r3, r1
 80075b6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80075ba:	f7f9 fae5 	bl	8000b88 <__aeabi_dcmpgt>
 80075be:	2800      	cmp	r0, #0
 80075c0:	d145      	bne.n	800764e <_dtoa_r+0x6be>
 80075c2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80075c6:	49a5      	ldr	r1, [pc, #660]	@ (800785c <_dtoa_r+0x8cc>)
 80075c8:	2000      	movs	r0, #0
 80075ca:	f7f8 fe95 	bl	80002f8 <__aeabi_dsub>
 80075ce:	4602      	mov	r2, r0
 80075d0:	460b      	mov	r3, r1
 80075d2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80075d6:	f7f9 fab9 	bl	8000b4c <__aeabi_dcmplt>
 80075da:	2800      	cmp	r0, #0
 80075dc:	f43f aef5 	beq.w	80073ca <_dtoa_r+0x43a>
 80075e0:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 80075e2:	1e73      	subs	r3, r6, #1
 80075e4:	9315      	str	r3, [sp, #84]	@ 0x54
 80075e6:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80075ea:	2b30      	cmp	r3, #48	@ 0x30
 80075ec:	d0f8      	beq.n	80075e0 <_dtoa_r+0x650>
 80075ee:	9f04      	ldr	r7, [sp, #16]
 80075f0:	e73e      	b.n	8007470 <_dtoa_r+0x4e0>
 80075f2:	4b9b      	ldr	r3, [pc, #620]	@ (8007860 <_dtoa_r+0x8d0>)
 80075f4:	f7f9 f838 	bl	8000668 <__aeabi_dmul>
 80075f8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80075fc:	e7bc      	b.n	8007578 <_dtoa_r+0x5e8>
 80075fe:	d10c      	bne.n	800761a <_dtoa_r+0x68a>
 8007600:	4b98      	ldr	r3, [pc, #608]	@ (8007864 <_dtoa_r+0x8d4>)
 8007602:	2200      	movs	r2, #0
 8007604:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007608:	f7f9 f82e 	bl	8000668 <__aeabi_dmul>
 800760c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007610:	f7f9 fab0 	bl	8000b74 <__aeabi_dcmpge>
 8007614:	2800      	cmp	r0, #0
 8007616:	f000 8157 	beq.w	80078c8 <_dtoa_r+0x938>
 800761a:	2400      	movs	r4, #0
 800761c:	4625      	mov	r5, r4
 800761e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007620:	43db      	mvns	r3, r3
 8007622:	9304      	str	r3, [sp, #16]
 8007624:	4656      	mov	r6, sl
 8007626:	2700      	movs	r7, #0
 8007628:	4621      	mov	r1, r4
 800762a:	4658      	mov	r0, fp
 800762c:	f000 fbb4 	bl	8007d98 <_Bfree>
 8007630:	2d00      	cmp	r5, #0
 8007632:	d0dc      	beq.n	80075ee <_dtoa_r+0x65e>
 8007634:	b12f      	cbz	r7, 8007642 <_dtoa_r+0x6b2>
 8007636:	42af      	cmp	r7, r5
 8007638:	d003      	beq.n	8007642 <_dtoa_r+0x6b2>
 800763a:	4639      	mov	r1, r7
 800763c:	4658      	mov	r0, fp
 800763e:	f000 fbab 	bl	8007d98 <_Bfree>
 8007642:	4629      	mov	r1, r5
 8007644:	4658      	mov	r0, fp
 8007646:	f000 fba7 	bl	8007d98 <_Bfree>
 800764a:	e7d0      	b.n	80075ee <_dtoa_r+0x65e>
 800764c:	9704      	str	r7, [sp, #16]
 800764e:	4633      	mov	r3, r6
 8007650:	461e      	mov	r6, r3
 8007652:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007656:	2a39      	cmp	r2, #57	@ 0x39
 8007658:	d107      	bne.n	800766a <_dtoa_r+0x6da>
 800765a:	459a      	cmp	sl, r3
 800765c:	d1f8      	bne.n	8007650 <_dtoa_r+0x6c0>
 800765e:	9a04      	ldr	r2, [sp, #16]
 8007660:	3201      	adds	r2, #1
 8007662:	9204      	str	r2, [sp, #16]
 8007664:	2230      	movs	r2, #48	@ 0x30
 8007666:	f88a 2000 	strb.w	r2, [sl]
 800766a:	781a      	ldrb	r2, [r3, #0]
 800766c:	3201      	adds	r2, #1
 800766e:	701a      	strb	r2, [r3, #0]
 8007670:	e7bd      	b.n	80075ee <_dtoa_r+0x65e>
 8007672:	4b7b      	ldr	r3, [pc, #492]	@ (8007860 <_dtoa_r+0x8d0>)
 8007674:	2200      	movs	r2, #0
 8007676:	f7f8 fff7 	bl	8000668 <__aeabi_dmul>
 800767a:	2200      	movs	r2, #0
 800767c:	2300      	movs	r3, #0
 800767e:	4604      	mov	r4, r0
 8007680:	460d      	mov	r5, r1
 8007682:	f7f9 fa59 	bl	8000b38 <__aeabi_dcmpeq>
 8007686:	2800      	cmp	r0, #0
 8007688:	f43f aebb 	beq.w	8007402 <_dtoa_r+0x472>
 800768c:	e6f0      	b.n	8007470 <_dtoa_r+0x4e0>
 800768e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8007690:	2a00      	cmp	r2, #0
 8007692:	f000 80db 	beq.w	800784c <_dtoa_r+0x8bc>
 8007696:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007698:	2a01      	cmp	r2, #1
 800769a:	f300 80bf 	bgt.w	800781c <_dtoa_r+0x88c>
 800769e:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 80076a0:	2a00      	cmp	r2, #0
 80076a2:	f000 80b7 	beq.w	8007814 <_dtoa_r+0x884>
 80076a6:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 80076aa:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80076ac:	4646      	mov	r6, r8
 80076ae:	9a08      	ldr	r2, [sp, #32]
 80076b0:	2101      	movs	r1, #1
 80076b2:	441a      	add	r2, r3
 80076b4:	4658      	mov	r0, fp
 80076b6:	4498      	add	r8, r3
 80076b8:	9208      	str	r2, [sp, #32]
 80076ba:	f000 fc21 	bl	8007f00 <__i2b>
 80076be:	4605      	mov	r5, r0
 80076c0:	b15e      	cbz	r6, 80076da <_dtoa_r+0x74a>
 80076c2:	9b08      	ldr	r3, [sp, #32]
 80076c4:	2b00      	cmp	r3, #0
 80076c6:	dd08      	ble.n	80076da <_dtoa_r+0x74a>
 80076c8:	42b3      	cmp	r3, r6
 80076ca:	9a08      	ldr	r2, [sp, #32]
 80076cc:	bfa8      	it	ge
 80076ce:	4633      	movge	r3, r6
 80076d0:	eba8 0803 	sub.w	r8, r8, r3
 80076d4:	1af6      	subs	r6, r6, r3
 80076d6:	1ad3      	subs	r3, r2, r3
 80076d8:	9308      	str	r3, [sp, #32]
 80076da:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80076dc:	b1f3      	cbz	r3, 800771c <_dtoa_r+0x78c>
 80076de:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80076e0:	2b00      	cmp	r3, #0
 80076e2:	f000 80b7 	beq.w	8007854 <_dtoa_r+0x8c4>
 80076e6:	b18c      	cbz	r4, 800770c <_dtoa_r+0x77c>
 80076e8:	4629      	mov	r1, r5
 80076ea:	4622      	mov	r2, r4
 80076ec:	4658      	mov	r0, fp
 80076ee:	f000 fcc7 	bl	8008080 <__pow5mult>
 80076f2:	464a      	mov	r2, r9
 80076f4:	4601      	mov	r1, r0
 80076f6:	4605      	mov	r5, r0
 80076f8:	4658      	mov	r0, fp
 80076fa:	f000 fc17 	bl	8007f2c <__multiply>
 80076fe:	4649      	mov	r1, r9
 8007700:	9004      	str	r0, [sp, #16]
 8007702:	4658      	mov	r0, fp
 8007704:	f000 fb48 	bl	8007d98 <_Bfree>
 8007708:	9b04      	ldr	r3, [sp, #16]
 800770a:	4699      	mov	r9, r3
 800770c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800770e:	1b1a      	subs	r2, r3, r4
 8007710:	d004      	beq.n	800771c <_dtoa_r+0x78c>
 8007712:	4649      	mov	r1, r9
 8007714:	4658      	mov	r0, fp
 8007716:	f000 fcb3 	bl	8008080 <__pow5mult>
 800771a:	4681      	mov	r9, r0
 800771c:	2101      	movs	r1, #1
 800771e:	4658      	mov	r0, fp
 8007720:	f000 fbee 	bl	8007f00 <__i2b>
 8007724:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007726:	4604      	mov	r4, r0
 8007728:	2b00      	cmp	r3, #0
 800772a:	f000 81cf 	beq.w	8007acc <_dtoa_r+0xb3c>
 800772e:	461a      	mov	r2, r3
 8007730:	4601      	mov	r1, r0
 8007732:	4658      	mov	r0, fp
 8007734:	f000 fca4 	bl	8008080 <__pow5mult>
 8007738:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800773a:	2b01      	cmp	r3, #1
 800773c:	4604      	mov	r4, r0
 800773e:	f300 8095 	bgt.w	800786c <_dtoa_r+0x8dc>
 8007742:	9b02      	ldr	r3, [sp, #8]
 8007744:	2b00      	cmp	r3, #0
 8007746:	f040 8087 	bne.w	8007858 <_dtoa_r+0x8c8>
 800774a:	9b03      	ldr	r3, [sp, #12]
 800774c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007750:	2b00      	cmp	r3, #0
 8007752:	f040 8089 	bne.w	8007868 <_dtoa_r+0x8d8>
 8007756:	9b03      	ldr	r3, [sp, #12]
 8007758:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800775c:	0d1b      	lsrs	r3, r3, #20
 800775e:	051b      	lsls	r3, r3, #20
 8007760:	b12b      	cbz	r3, 800776e <_dtoa_r+0x7de>
 8007762:	9b08      	ldr	r3, [sp, #32]
 8007764:	3301      	adds	r3, #1
 8007766:	9308      	str	r3, [sp, #32]
 8007768:	f108 0801 	add.w	r8, r8, #1
 800776c:	2301      	movs	r3, #1
 800776e:	930a      	str	r3, [sp, #40]	@ 0x28
 8007770:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007772:	2b00      	cmp	r3, #0
 8007774:	f000 81b0 	beq.w	8007ad8 <_dtoa_r+0xb48>
 8007778:	6923      	ldr	r3, [r4, #16]
 800777a:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800777e:	6918      	ldr	r0, [r3, #16]
 8007780:	f000 fb72 	bl	8007e68 <__hi0bits>
 8007784:	f1c0 0020 	rsb	r0, r0, #32
 8007788:	9b08      	ldr	r3, [sp, #32]
 800778a:	4418      	add	r0, r3
 800778c:	f010 001f 	ands.w	r0, r0, #31
 8007790:	d077      	beq.n	8007882 <_dtoa_r+0x8f2>
 8007792:	f1c0 0320 	rsb	r3, r0, #32
 8007796:	2b04      	cmp	r3, #4
 8007798:	dd6b      	ble.n	8007872 <_dtoa_r+0x8e2>
 800779a:	9b08      	ldr	r3, [sp, #32]
 800779c:	f1c0 001c 	rsb	r0, r0, #28
 80077a0:	4403      	add	r3, r0
 80077a2:	4480      	add	r8, r0
 80077a4:	4406      	add	r6, r0
 80077a6:	9308      	str	r3, [sp, #32]
 80077a8:	f1b8 0f00 	cmp.w	r8, #0
 80077ac:	dd05      	ble.n	80077ba <_dtoa_r+0x82a>
 80077ae:	4649      	mov	r1, r9
 80077b0:	4642      	mov	r2, r8
 80077b2:	4658      	mov	r0, fp
 80077b4:	f000 fcbe 	bl	8008134 <__lshift>
 80077b8:	4681      	mov	r9, r0
 80077ba:	9b08      	ldr	r3, [sp, #32]
 80077bc:	2b00      	cmp	r3, #0
 80077be:	dd05      	ble.n	80077cc <_dtoa_r+0x83c>
 80077c0:	4621      	mov	r1, r4
 80077c2:	461a      	mov	r2, r3
 80077c4:	4658      	mov	r0, fp
 80077c6:	f000 fcb5 	bl	8008134 <__lshift>
 80077ca:	4604      	mov	r4, r0
 80077cc:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80077ce:	2b00      	cmp	r3, #0
 80077d0:	d059      	beq.n	8007886 <_dtoa_r+0x8f6>
 80077d2:	4621      	mov	r1, r4
 80077d4:	4648      	mov	r0, r9
 80077d6:	f000 fd19 	bl	800820c <__mcmp>
 80077da:	2800      	cmp	r0, #0
 80077dc:	da53      	bge.n	8007886 <_dtoa_r+0x8f6>
 80077de:	1e7b      	subs	r3, r7, #1
 80077e0:	9304      	str	r3, [sp, #16]
 80077e2:	4649      	mov	r1, r9
 80077e4:	2300      	movs	r3, #0
 80077e6:	220a      	movs	r2, #10
 80077e8:	4658      	mov	r0, fp
 80077ea:	f000 faf7 	bl	8007ddc <__multadd>
 80077ee:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80077f0:	4681      	mov	r9, r0
 80077f2:	2b00      	cmp	r3, #0
 80077f4:	f000 8172 	beq.w	8007adc <_dtoa_r+0xb4c>
 80077f8:	2300      	movs	r3, #0
 80077fa:	4629      	mov	r1, r5
 80077fc:	220a      	movs	r2, #10
 80077fe:	4658      	mov	r0, fp
 8007800:	f000 faec 	bl	8007ddc <__multadd>
 8007804:	9b00      	ldr	r3, [sp, #0]
 8007806:	2b00      	cmp	r3, #0
 8007808:	4605      	mov	r5, r0
 800780a:	dc67      	bgt.n	80078dc <_dtoa_r+0x94c>
 800780c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800780e:	2b02      	cmp	r3, #2
 8007810:	dc41      	bgt.n	8007896 <_dtoa_r+0x906>
 8007812:	e063      	b.n	80078dc <_dtoa_r+0x94c>
 8007814:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8007816:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800781a:	e746      	b.n	80076aa <_dtoa_r+0x71a>
 800781c:	9b07      	ldr	r3, [sp, #28]
 800781e:	1e5c      	subs	r4, r3, #1
 8007820:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007822:	42a3      	cmp	r3, r4
 8007824:	bfbf      	itttt	lt
 8007826:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8007828:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 800782a:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800782c:	1ae3      	sublt	r3, r4, r3
 800782e:	bfb4      	ite	lt
 8007830:	18d2      	addlt	r2, r2, r3
 8007832:	1b1c      	subge	r4, r3, r4
 8007834:	9b07      	ldr	r3, [sp, #28]
 8007836:	bfbc      	itt	lt
 8007838:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 800783a:	2400      	movlt	r4, #0
 800783c:	2b00      	cmp	r3, #0
 800783e:	bfb5      	itete	lt
 8007840:	eba8 0603 	sublt.w	r6, r8, r3
 8007844:	9b07      	ldrge	r3, [sp, #28]
 8007846:	2300      	movlt	r3, #0
 8007848:	4646      	movge	r6, r8
 800784a:	e730      	b.n	80076ae <_dtoa_r+0x71e>
 800784c:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800784e:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8007850:	4646      	mov	r6, r8
 8007852:	e735      	b.n	80076c0 <_dtoa_r+0x730>
 8007854:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8007856:	e75c      	b.n	8007712 <_dtoa_r+0x782>
 8007858:	2300      	movs	r3, #0
 800785a:	e788      	b.n	800776e <_dtoa_r+0x7de>
 800785c:	3fe00000 	.word	0x3fe00000
 8007860:	40240000 	.word	0x40240000
 8007864:	40140000 	.word	0x40140000
 8007868:	9b02      	ldr	r3, [sp, #8]
 800786a:	e780      	b.n	800776e <_dtoa_r+0x7de>
 800786c:	2300      	movs	r3, #0
 800786e:	930a      	str	r3, [sp, #40]	@ 0x28
 8007870:	e782      	b.n	8007778 <_dtoa_r+0x7e8>
 8007872:	d099      	beq.n	80077a8 <_dtoa_r+0x818>
 8007874:	9a08      	ldr	r2, [sp, #32]
 8007876:	331c      	adds	r3, #28
 8007878:	441a      	add	r2, r3
 800787a:	4498      	add	r8, r3
 800787c:	441e      	add	r6, r3
 800787e:	9208      	str	r2, [sp, #32]
 8007880:	e792      	b.n	80077a8 <_dtoa_r+0x818>
 8007882:	4603      	mov	r3, r0
 8007884:	e7f6      	b.n	8007874 <_dtoa_r+0x8e4>
 8007886:	9b07      	ldr	r3, [sp, #28]
 8007888:	9704      	str	r7, [sp, #16]
 800788a:	2b00      	cmp	r3, #0
 800788c:	dc20      	bgt.n	80078d0 <_dtoa_r+0x940>
 800788e:	9300      	str	r3, [sp, #0]
 8007890:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007892:	2b02      	cmp	r3, #2
 8007894:	dd1e      	ble.n	80078d4 <_dtoa_r+0x944>
 8007896:	9b00      	ldr	r3, [sp, #0]
 8007898:	2b00      	cmp	r3, #0
 800789a:	f47f aec0 	bne.w	800761e <_dtoa_r+0x68e>
 800789e:	4621      	mov	r1, r4
 80078a0:	2205      	movs	r2, #5
 80078a2:	4658      	mov	r0, fp
 80078a4:	f000 fa9a 	bl	8007ddc <__multadd>
 80078a8:	4601      	mov	r1, r0
 80078aa:	4604      	mov	r4, r0
 80078ac:	4648      	mov	r0, r9
 80078ae:	f000 fcad 	bl	800820c <__mcmp>
 80078b2:	2800      	cmp	r0, #0
 80078b4:	f77f aeb3 	ble.w	800761e <_dtoa_r+0x68e>
 80078b8:	4656      	mov	r6, sl
 80078ba:	2331      	movs	r3, #49	@ 0x31
 80078bc:	f806 3b01 	strb.w	r3, [r6], #1
 80078c0:	9b04      	ldr	r3, [sp, #16]
 80078c2:	3301      	adds	r3, #1
 80078c4:	9304      	str	r3, [sp, #16]
 80078c6:	e6ae      	b.n	8007626 <_dtoa_r+0x696>
 80078c8:	9c07      	ldr	r4, [sp, #28]
 80078ca:	9704      	str	r7, [sp, #16]
 80078cc:	4625      	mov	r5, r4
 80078ce:	e7f3      	b.n	80078b8 <_dtoa_r+0x928>
 80078d0:	9b07      	ldr	r3, [sp, #28]
 80078d2:	9300      	str	r3, [sp, #0]
 80078d4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80078d6:	2b00      	cmp	r3, #0
 80078d8:	f000 8104 	beq.w	8007ae4 <_dtoa_r+0xb54>
 80078dc:	2e00      	cmp	r6, #0
 80078de:	dd05      	ble.n	80078ec <_dtoa_r+0x95c>
 80078e0:	4629      	mov	r1, r5
 80078e2:	4632      	mov	r2, r6
 80078e4:	4658      	mov	r0, fp
 80078e6:	f000 fc25 	bl	8008134 <__lshift>
 80078ea:	4605      	mov	r5, r0
 80078ec:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80078ee:	2b00      	cmp	r3, #0
 80078f0:	d05a      	beq.n	80079a8 <_dtoa_r+0xa18>
 80078f2:	6869      	ldr	r1, [r5, #4]
 80078f4:	4658      	mov	r0, fp
 80078f6:	f000 fa0f 	bl	8007d18 <_Balloc>
 80078fa:	4606      	mov	r6, r0
 80078fc:	b928      	cbnz	r0, 800790a <_dtoa_r+0x97a>
 80078fe:	4b84      	ldr	r3, [pc, #528]	@ (8007b10 <_dtoa_r+0xb80>)
 8007900:	4602      	mov	r2, r0
 8007902:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8007906:	f7ff bb5a 	b.w	8006fbe <_dtoa_r+0x2e>
 800790a:	692a      	ldr	r2, [r5, #16]
 800790c:	3202      	adds	r2, #2
 800790e:	0092      	lsls	r2, r2, #2
 8007910:	f105 010c 	add.w	r1, r5, #12
 8007914:	300c      	adds	r0, #12
 8007916:	f000 ffc1 	bl	800889c <memcpy>
 800791a:	2201      	movs	r2, #1
 800791c:	4631      	mov	r1, r6
 800791e:	4658      	mov	r0, fp
 8007920:	f000 fc08 	bl	8008134 <__lshift>
 8007924:	f10a 0301 	add.w	r3, sl, #1
 8007928:	9307      	str	r3, [sp, #28]
 800792a:	9b00      	ldr	r3, [sp, #0]
 800792c:	4453      	add	r3, sl
 800792e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007930:	9b02      	ldr	r3, [sp, #8]
 8007932:	f003 0301 	and.w	r3, r3, #1
 8007936:	462f      	mov	r7, r5
 8007938:	930a      	str	r3, [sp, #40]	@ 0x28
 800793a:	4605      	mov	r5, r0
 800793c:	9b07      	ldr	r3, [sp, #28]
 800793e:	4621      	mov	r1, r4
 8007940:	3b01      	subs	r3, #1
 8007942:	4648      	mov	r0, r9
 8007944:	9300      	str	r3, [sp, #0]
 8007946:	f7ff fa9b 	bl	8006e80 <quorem>
 800794a:	4639      	mov	r1, r7
 800794c:	9002      	str	r0, [sp, #8]
 800794e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8007952:	4648      	mov	r0, r9
 8007954:	f000 fc5a 	bl	800820c <__mcmp>
 8007958:	462a      	mov	r2, r5
 800795a:	9008      	str	r0, [sp, #32]
 800795c:	4621      	mov	r1, r4
 800795e:	4658      	mov	r0, fp
 8007960:	f000 fc70 	bl	8008244 <__mdiff>
 8007964:	68c2      	ldr	r2, [r0, #12]
 8007966:	4606      	mov	r6, r0
 8007968:	bb02      	cbnz	r2, 80079ac <_dtoa_r+0xa1c>
 800796a:	4601      	mov	r1, r0
 800796c:	4648      	mov	r0, r9
 800796e:	f000 fc4d 	bl	800820c <__mcmp>
 8007972:	4602      	mov	r2, r0
 8007974:	4631      	mov	r1, r6
 8007976:	4658      	mov	r0, fp
 8007978:	920e      	str	r2, [sp, #56]	@ 0x38
 800797a:	f000 fa0d 	bl	8007d98 <_Bfree>
 800797e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007980:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8007982:	9e07      	ldr	r6, [sp, #28]
 8007984:	ea43 0102 	orr.w	r1, r3, r2
 8007988:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800798a:	4319      	orrs	r1, r3
 800798c:	d110      	bne.n	80079b0 <_dtoa_r+0xa20>
 800798e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8007992:	d029      	beq.n	80079e8 <_dtoa_r+0xa58>
 8007994:	9b08      	ldr	r3, [sp, #32]
 8007996:	2b00      	cmp	r3, #0
 8007998:	dd02      	ble.n	80079a0 <_dtoa_r+0xa10>
 800799a:	9b02      	ldr	r3, [sp, #8]
 800799c:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 80079a0:	9b00      	ldr	r3, [sp, #0]
 80079a2:	f883 8000 	strb.w	r8, [r3]
 80079a6:	e63f      	b.n	8007628 <_dtoa_r+0x698>
 80079a8:	4628      	mov	r0, r5
 80079aa:	e7bb      	b.n	8007924 <_dtoa_r+0x994>
 80079ac:	2201      	movs	r2, #1
 80079ae:	e7e1      	b.n	8007974 <_dtoa_r+0x9e4>
 80079b0:	9b08      	ldr	r3, [sp, #32]
 80079b2:	2b00      	cmp	r3, #0
 80079b4:	db04      	blt.n	80079c0 <_dtoa_r+0xa30>
 80079b6:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80079b8:	430b      	orrs	r3, r1
 80079ba:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80079bc:	430b      	orrs	r3, r1
 80079be:	d120      	bne.n	8007a02 <_dtoa_r+0xa72>
 80079c0:	2a00      	cmp	r2, #0
 80079c2:	dded      	ble.n	80079a0 <_dtoa_r+0xa10>
 80079c4:	4649      	mov	r1, r9
 80079c6:	2201      	movs	r2, #1
 80079c8:	4658      	mov	r0, fp
 80079ca:	f000 fbb3 	bl	8008134 <__lshift>
 80079ce:	4621      	mov	r1, r4
 80079d0:	4681      	mov	r9, r0
 80079d2:	f000 fc1b 	bl	800820c <__mcmp>
 80079d6:	2800      	cmp	r0, #0
 80079d8:	dc03      	bgt.n	80079e2 <_dtoa_r+0xa52>
 80079da:	d1e1      	bne.n	80079a0 <_dtoa_r+0xa10>
 80079dc:	f018 0f01 	tst.w	r8, #1
 80079e0:	d0de      	beq.n	80079a0 <_dtoa_r+0xa10>
 80079e2:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80079e6:	d1d8      	bne.n	800799a <_dtoa_r+0xa0a>
 80079e8:	9a00      	ldr	r2, [sp, #0]
 80079ea:	2339      	movs	r3, #57	@ 0x39
 80079ec:	7013      	strb	r3, [r2, #0]
 80079ee:	4633      	mov	r3, r6
 80079f0:	461e      	mov	r6, r3
 80079f2:	3b01      	subs	r3, #1
 80079f4:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 80079f8:	2a39      	cmp	r2, #57	@ 0x39
 80079fa:	d052      	beq.n	8007aa2 <_dtoa_r+0xb12>
 80079fc:	3201      	adds	r2, #1
 80079fe:	701a      	strb	r2, [r3, #0]
 8007a00:	e612      	b.n	8007628 <_dtoa_r+0x698>
 8007a02:	2a00      	cmp	r2, #0
 8007a04:	dd07      	ble.n	8007a16 <_dtoa_r+0xa86>
 8007a06:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8007a0a:	d0ed      	beq.n	80079e8 <_dtoa_r+0xa58>
 8007a0c:	9a00      	ldr	r2, [sp, #0]
 8007a0e:	f108 0301 	add.w	r3, r8, #1
 8007a12:	7013      	strb	r3, [r2, #0]
 8007a14:	e608      	b.n	8007628 <_dtoa_r+0x698>
 8007a16:	9b07      	ldr	r3, [sp, #28]
 8007a18:	9a07      	ldr	r2, [sp, #28]
 8007a1a:	f803 8c01 	strb.w	r8, [r3, #-1]
 8007a1e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007a20:	4293      	cmp	r3, r2
 8007a22:	d028      	beq.n	8007a76 <_dtoa_r+0xae6>
 8007a24:	4649      	mov	r1, r9
 8007a26:	2300      	movs	r3, #0
 8007a28:	220a      	movs	r2, #10
 8007a2a:	4658      	mov	r0, fp
 8007a2c:	f000 f9d6 	bl	8007ddc <__multadd>
 8007a30:	42af      	cmp	r7, r5
 8007a32:	4681      	mov	r9, r0
 8007a34:	f04f 0300 	mov.w	r3, #0
 8007a38:	f04f 020a 	mov.w	r2, #10
 8007a3c:	4639      	mov	r1, r7
 8007a3e:	4658      	mov	r0, fp
 8007a40:	d107      	bne.n	8007a52 <_dtoa_r+0xac2>
 8007a42:	f000 f9cb 	bl	8007ddc <__multadd>
 8007a46:	4607      	mov	r7, r0
 8007a48:	4605      	mov	r5, r0
 8007a4a:	9b07      	ldr	r3, [sp, #28]
 8007a4c:	3301      	adds	r3, #1
 8007a4e:	9307      	str	r3, [sp, #28]
 8007a50:	e774      	b.n	800793c <_dtoa_r+0x9ac>
 8007a52:	f000 f9c3 	bl	8007ddc <__multadd>
 8007a56:	4629      	mov	r1, r5
 8007a58:	4607      	mov	r7, r0
 8007a5a:	2300      	movs	r3, #0
 8007a5c:	220a      	movs	r2, #10
 8007a5e:	4658      	mov	r0, fp
 8007a60:	f000 f9bc 	bl	8007ddc <__multadd>
 8007a64:	4605      	mov	r5, r0
 8007a66:	e7f0      	b.n	8007a4a <_dtoa_r+0xaba>
 8007a68:	9b00      	ldr	r3, [sp, #0]
 8007a6a:	2b00      	cmp	r3, #0
 8007a6c:	bfcc      	ite	gt
 8007a6e:	461e      	movgt	r6, r3
 8007a70:	2601      	movle	r6, #1
 8007a72:	4456      	add	r6, sl
 8007a74:	2700      	movs	r7, #0
 8007a76:	4649      	mov	r1, r9
 8007a78:	2201      	movs	r2, #1
 8007a7a:	4658      	mov	r0, fp
 8007a7c:	f000 fb5a 	bl	8008134 <__lshift>
 8007a80:	4621      	mov	r1, r4
 8007a82:	4681      	mov	r9, r0
 8007a84:	f000 fbc2 	bl	800820c <__mcmp>
 8007a88:	2800      	cmp	r0, #0
 8007a8a:	dcb0      	bgt.n	80079ee <_dtoa_r+0xa5e>
 8007a8c:	d102      	bne.n	8007a94 <_dtoa_r+0xb04>
 8007a8e:	f018 0f01 	tst.w	r8, #1
 8007a92:	d1ac      	bne.n	80079ee <_dtoa_r+0xa5e>
 8007a94:	4633      	mov	r3, r6
 8007a96:	461e      	mov	r6, r3
 8007a98:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007a9c:	2a30      	cmp	r2, #48	@ 0x30
 8007a9e:	d0fa      	beq.n	8007a96 <_dtoa_r+0xb06>
 8007aa0:	e5c2      	b.n	8007628 <_dtoa_r+0x698>
 8007aa2:	459a      	cmp	sl, r3
 8007aa4:	d1a4      	bne.n	80079f0 <_dtoa_r+0xa60>
 8007aa6:	9b04      	ldr	r3, [sp, #16]
 8007aa8:	3301      	adds	r3, #1
 8007aaa:	9304      	str	r3, [sp, #16]
 8007aac:	2331      	movs	r3, #49	@ 0x31
 8007aae:	f88a 3000 	strb.w	r3, [sl]
 8007ab2:	e5b9      	b.n	8007628 <_dtoa_r+0x698>
 8007ab4:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8007ab6:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 8007b14 <_dtoa_r+0xb84>
 8007aba:	b11b      	cbz	r3, 8007ac4 <_dtoa_r+0xb34>
 8007abc:	f10a 0308 	add.w	r3, sl, #8
 8007ac0:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8007ac2:	6013      	str	r3, [r2, #0]
 8007ac4:	4650      	mov	r0, sl
 8007ac6:	b019      	add	sp, #100	@ 0x64
 8007ac8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007acc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007ace:	2b01      	cmp	r3, #1
 8007ad0:	f77f ae37 	ble.w	8007742 <_dtoa_r+0x7b2>
 8007ad4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007ad6:	930a      	str	r3, [sp, #40]	@ 0x28
 8007ad8:	2001      	movs	r0, #1
 8007ada:	e655      	b.n	8007788 <_dtoa_r+0x7f8>
 8007adc:	9b00      	ldr	r3, [sp, #0]
 8007ade:	2b00      	cmp	r3, #0
 8007ae0:	f77f aed6 	ble.w	8007890 <_dtoa_r+0x900>
 8007ae4:	4656      	mov	r6, sl
 8007ae6:	4621      	mov	r1, r4
 8007ae8:	4648      	mov	r0, r9
 8007aea:	f7ff f9c9 	bl	8006e80 <quorem>
 8007aee:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8007af2:	f806 8b01 	strb.w	r8, [r6], #1
 8007af6:	9b00      	ldr	r3, [sp, #0]
 8007af8:	eba6 020a 	sub.w	r2, r6, sl
 8007afc:	4293      	cmp	r3, r2
 8007afe:	ddb3      	ble.n	8007a68 <_dtoa_r+0xad8>
 8007b00:	4649      	mov	r1, r9
 8007b02:	2300      	movs	r3, #0
 8007b04:	220a      	movs	r2, #10
 8007b06:	4658      	mov	r0, fp
 8007b08:	f000 f968 	bl	8007ddc <__multadd>
 8007b0c:	4681      	mov	r9, r0
 8007b0e:	e7ea      	b.n	8007ae6 <_dtoa_r+0xb56>
 8007b10:	080091ea 	.word	0x080091ea
 8007b14:	08009185 	.word	0x08009185

08007b18 <_free_r>:
 8007b18:	b538      	push	{r3, r4, r5, lr}
 8007b1a:	4605      	mov	r5, r0
 8007b1c:	2900      	cmp	r1, #0
 8007b1e:	d041      	beq.n	8007ba4 <_free_r+0x8c>
 8007b20:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007b24:	1f0c      	subs	r4, r1, #4
 8007b26:	2b00      	cmp	r3, #0
 8007b28:	bfb8      	it	lt
 8007b2a:	18e4      	addlt	r4, r4, r3
 8007b2c:	f000 f8e8 	bl	8007d00 <__malloc_lock>
 8007b30:	4a1d      	ldr	r2, [pc, #116]	@ (8007ba8 <_free_r+0x90>)
 8007b32:	6813      	ldr	r3, [r2, #0]
 8007b34:	b933      	cbnz	r3, 8007b44 <_free_r+0x2c>
 8007b36:	6063      	str	r3, [r4, #4]
 8007b38:	6014      	str	r4, [r2, #0]
 8007b3a:	4628      	mov	r0, r5
 8007b3c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007b40:	f000 b8e4 	b.w	8007d0c <__malloc_unlock>
 8007b44:	42a3      	cmp	r3, r4
 8007b46:	d908      	bls.n	8007b5a <_free_r+0x42>
 8007b48:	6820      	ldr	r0, [r4, #0]
 8007b4a:	1821      	adds	r1, r4, r0
 8007b4c:	428b      	cmp	r3, r1
 8007b4e:	bf01      	itttt	eq
 8007b50:	6819      	ldreq	r1, [r3, #0]
 8007b52:	685b      	ldreq	r3, [r3, #4]
 8007b54:	1809      	addeq	r1, r1, r0
 8007b56:	6021      	streq	r1, [r4, #0]
 8007b58:	e7ed      	b.n	8007b36 <_free_r+0x1e>
 8007b5a:	461a      	mov	r2, r3
 8007b5c:	685b      	ldr	r3, [r3, #4]
 8007b5e:	b10b      	cbz	r3, 8007b64 <_free_r+0x4c>
 8007b60:	42a3      	cmp	r3, r4
 8007b62:	d9fa      	bls.n	8007b5a <_free_r+0x42>
 8007b64:	6811      	ldr	r1, [r2, #0]
 8007b66:	1850      	adds	r0, r2, r1
 8007b68:	42a0      	cmp	r0, r4
 8007b6a:	d10b      	bne.n	8007b84 <_free_r+0x6c>
 8007b6c:	6820      	ldr	r0, [r4, #0]
 8007b6e:	4401      	add	r1, r0
 8007b70:	1850      	adds	r0, r2, r1
 8007b72:	4283      	cmp	r3, r0
 8007b74:	6011      	str	r1, [r2, #0]
 8007b76:	d1e0      	bne.n	8007b3a <_free_r+0x22>
 8007b78:	6818      	ldr	r0, [r3, #0]
 8007b7a:	685b      	ldr	r3, [r3, #4]
 8007b7c:	6053      	str	r3, [r2, #4]
 8007b7e:	4408      	add	r0, r1
 8007b80:	6010      	str	r0, [r2, #0]
 8007b82:	e7da      	b.n	8007b3a <_free_r+0x22>
 8007b84:	d902      	bls.n	8007b8c <_free_r+0x74>
 8007b86:	230c      	movs	r3, #12
 8007b88:	602b      	str	r3, [r5, #0]
 8007b8a:	e7d6      	b.n	8007b3a <_free_r+0x22>
 8007b8c:	6820      	ldr	r0, [r4, #0]
 8007b8e:	1821      	adds	r1, r4, r0
 8007b90:	428b      	cmp	r3, r1
 8007b92:	bf04      	itt	eq
 8007b94:	6819      	ldreq	r1, [r3, #0]
 8007b96:	685b      	ldreq	r3, [r3, #4]
 8007b98:	6063      	str	r3, [r4, #4]
 8007b9a:	bf04      	itt	eq
 8007b9c:	1809      	addeq	r1, r1, r0
 8007b9e:	6021      	streq	r1, [r4, #0]
 8007ba0:	6054      	str	r4, [r2, #4]
 8007ba2:	e7ca      	b.n	8007b3a <_free_r+0x22>
 8007ba4:	bd38      	pop	{r3, r4, r5, pc}
 8007ba6:	bf00      	nop
 8007ba8:	200006dc 	.word	0x200006dc

08007bac <malloc>:
 8007bac:	4b02      	ldr	r3, [pc, #8]	@ (8007bb8 <malloc+0xc>)
 8007bae:	4601      	mov	r1, r0
 8007bb0:	6818      	ldr	r0, [r3, #0]
 8007bb2:	f000 b825 	b.w	8007c00 <_malloc_r>
 8007bb6:	bf00      	nop
 8007bb8:	20000034 	.word	0x20000034

08007bbc <sbrk_aligned>:
 8007bbc:	b570      	push	{r4, r5, r6, lr}
 8007bbe:	4e0f      	ldr	r6, [pc, #60]	@ (8007bfc <sbrk_aligned+0x40>)
 8007bc0:	460c      	mov	r4, r1
 8007bc2:	6831      	ldr	r1, [r6, #0]
 8007bc4:	4605      	mov	r5, r0
 8007bc6:	b911      	cbnz	r1, 8007bce <sbrk_aligned+0x12>
 8007bc8:	f000 fe58 	bl	800887c <_sbrk_r>
 8007bcc:	6030      	str	r0, [r6, #0]
 8007bce:	4621      	mov	r1, r4
 8007bd0:	4628      	mov	r0, r5
 8007bd2:	f000 fe53 	bl	800887c <_sbrk_r>
 8007bd6:	1c43      	adds	r3, r0, #1
 8007bd8:	d103      	bne.n	8007be2 <sbrk_aligned+0x26>
 8007bda:	f04f 34ff 	mov.w	r4, #4294967295
 8007bde:	4620      	mov	r0, r4
 8007be0:	bd70      	pop	{r4, r5, r6, pc}
 8007be2:	1cc4      	adds	r4, r0, #3
 8007be4:	f024 0403 	bic.w	r4, r4, #3
 8007be8:	42a0      	cmp	r0, r4
 8007bea:	d0f8      	beq.n	8007bde <sbrk_aligned+0x22>
 8007bec:	1a21      	subs	r1, r4, r0
 8007bee:	4628      	mov	r0, r5
 8007bf0:	f000 fe44 	bl	800887c <_sbrk_r>
 8007bf4:	3001      	adds	r0, #1
 8007bf6:	d1f2      	bne.n	8007bde <sbrk_aligned+0x22>
 8007bf8:	e7ef      	b.n	8007bda <sbrk_aligned+0x1e>
 8007bfa:	bf00      	nop
 8007bfc:	200006d8 	.word	0x200006d8

08007c00 <_malloc_r>:
 8007c00:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007c04:	1ccd      	adds	r5, r1, #3
 8007c06:	f025 0503 	bic.w	r5, r5, #3
 8007c0a:	3508      	adds	r5, #8
 8007c0c:	2d0c      	cmp	r5, #12
 8007c0e:	bf38      	it	cc
 8007c10:	250c      	movcc	r5, #12
 8007c12:	2d00      	cmp	r5, #0
 8007c14:	4606      	mov	r6, r0
 8007c16:	db01      	blt.n	8007c1c <_malloc_r+0x1c>
 8007c18:	42a9      	cmp	r1, r5
 8007c1a:	d904      	bls.n	8007c26 <_malloc_r+0x26>
 8007c1c:	230c      	movs	r3, #12
 8007c1e:	6033      	str	r3, [r6, #0]
 8007c20:	2000      	movs	r0, #0
 8007c22:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007c26:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8007cfc <_malloc_r+0xfc>
 8007c2a:	f000 f869 	bl	8007d00 <__malloc_lock>
 8007c2e:	f8d8 3000 	ldr.w	r3, [r8]
 8007c32:	461c      	mov	r4, r3
 8007c34:	bb44      	cbnz	r4, 8007c88 <_malloc_r+0x88>
 8007c36:	4629      	mov	r1, r5
 8007c38:	4630      	mov	r0, r6
 8007c3a:	f7ff ffbf 	bl	8007bbc <sbrk_aligned>
 8007c3e:	1c43      	adds	r3, r0, #1
 8007c40:	4604      	mov	r4, r0
 8007c42:	d158      	bne.n	8007cf6 <_malloc_r+0xf6>
 8007c44:	f8d8 4000 	ldr.w	r4, [r8]
 8007c48:	4627      	mov	r7, r4
 8007c4a:	2f00      	cmp	r7, #0
 8007c4c:	d143      	bne.n	8007cd6 <_malloc_r+0xd6>
 8007c4e:	2c00      	cmp	r4, #0
 8007c50:	d04b      	beq.n	8007cea <_malloc_r+0xea>
 8007c52:	6823      	ldr	r3, [r4, #0]
 8007c54:	4639      	mov	r1, r7
 8007c56:	4630      	mov	r0, r6
 8007c58:	eb04 0903 	add.w	r9, r4, r3
 8007c5c:	f000 fe0e 	bl	800887c <_sbrk_r>
 8007c60:	4581      	cmp	r9, r0
 8007c62:	d142      	bne.n	8007cea <_malloc_r+0xea>
 8007c64:	6821      	ldr	r1, [r4, #0]
 8007c66:	1a6d      	subs	r5, r5, r1
 8007c68:	4629      	mov	r1, r5
 8007c6a:	4630      	mov	r0, r6
 8007c6c:	f7ff ffa6 	bl	8007bbc <sbrk_aligned>
 8007c70:	3001      	adds	r0, #1
 8007c72:	d03a      	beq.n	8007cea <_malloc_r+0xea>
 8007c74:	6823      	ldr	r3, [r4, #0]
 8007c76:	442b      	add	r3, r5
 8007c78:	6023      	str	r3, [r4, #0]
 8007c7a:	f8d8 3000 	ldr.w	r3, [r8]
 8007c7e:	685a      	ldr	r2, [r3, #4]
 8007c80:	bb62      	cbnz	r2, 8007cdc <_malloc_r+0xdc>
 8007c82:	f8c8 7000 	str.w	r7, [r8]
 8007c86:	e00f      	b.n	8007ca8 <_malloc_r+0xa8>
 8007c88:	6822      	ldr	r2, [r4, #0]
 8007c8a:	1b52      	subs	r2, r2, r5
 8007c8c:	d420      	bmi.n	8007cd0 <_malloc_r+0xd0>
 8007c8e:	2a0b      	cmp	r2, #11
 8007c90:	d917      	bls.n	8007cc2 <_malloc_r+0xc2>
 8007c92:	1961      	adds	r1, r4, r5
 8007c94:	42a3      	cmp	r3, r4
 8007c96:	6025      	str	r5, [r4, #0]
 8007c98:	bf18      	it	ne
 8007c9a:	6059      	strne	r1, [r3, #4]
 8007c9c:	6863      	ldr	r3, [r4, #4]
 8007c9e:	bf08      	it	eq
 8007ca0:	f8c8 1000 	streq.w	r1, [r8]
 8007ca4:	5162      	str	r2, [r4, r5]
 8007ca6:	604b      	str	r3, [r1, #4]
 8007ca8:	4630      	mov	r0, r6
 8007caa:	f000 f82f 	bl	8007d0c <__malloc_unlock>
 8007cae:	f104 000b 	add.w	r0, r4, #11
 8007cb2:	1d23      	adds	r3, r4, #4
 8007cb4:	f020 0007 	bic.w	r0, r0, #7
 8007cb8:	1ac2      	subs	r2, r0, r3
 8007cba:	bf1c      	itt	ne
 8007cbc:	1a1b      	subne	r3, r3, r0
 8007cbe:	50a3      	strne	r3, [r4, r2]
 8007cc0:	e7af      	b.n	8007c22 <_malloc_r+0x22>
 8007cc2:	6862      	ldr	r2, [r4, #4]
 8007cc4:	42a3      	cmp	r3, r4
 8007cc6:	bf0c      	ite	eq
 8007cc8:	f8c8 2000 	streq.w	r2, [r8]
 8007ccc:	605a      	strne	r2, [r3, #4]
 8007cce:	e7eb      	b.n	8007ca8 <_malloc_r+0xa8>
 8007cd0:	4623      	mov	r3, r4
 8007cd2:	6864      	ldr	r4, [r4, #4]
 8007cd4:	e7ae      	b.n	8007c34 <_malloc_r+0x34>
 8007cd6:	463c      	mov	r4, r7
 8007cd8:	687f      	ldr	r7, [r7, #4]
 8007cda:	e7b6      	b.n	8007c4a <_malloc_r+0x4a>
 8007cdc:	461a      	mov	r2, r3
 8007cde:	685b      	ldr	r3, [r3, #4]
 8007ce0:	42a3      	cmp	r3, r4
 8007ce2:	d1fb      	bne.n	8007cdc <_malloc_r+0xdc>
 8007ce4:	2300      	movs	r3, #0
 8007ce6:	6053      	str	r3, [r2, #4]
 8007ce8:	e7de      	b.n	8007ca8 <_malloc_r+0xa8>
 8007cea:	230c      	movs	r3, #12
 8007cec:	6033      	str	r3, [r6, #0]
 8007cee:	4630      	mov	r0, r6
 8007cf0:	f000 f80c 	bl	8007d0c <__malloc_unlock>
 8007cf4:	e794      	b.n	8007c20 <_malloc_r+0x20>
 8007cf6:	6005      	str	r5, [r0, #0]
 8007cf8:	e7d6      	b.n	8007ca8 <_malloc_r+0xa8>
 8007cfa:	bf00      	nop
 8007cfc:	200006dc 	.word	0x200006dc

08007d00 <__malloc_lock>:
 8007d00:	4801      	ldr	r0, [pc, #4]	@ (8007d08 <__malloc_lock+0x8>)
 8007d02:	f7ff b89c 	b.w	8006e3e <__retarget_lock_acquire_recursive>
 8007d06:	bf00      	nop
 8007d08:	200006d4 	.word	0x200006d4

08007d0c <__malloc_unlock>:
 8007d0c:	4801      	ldr	r0, [pc, #4]	@ (8007d14 <__malloc_unlock+0x8>)
 8007d0e:	f7ff b897 	b.w	8006e40 <__retarget_lock_release_recursive>
 8007d12:	bf00      	nop
 8007d14:	200006d4 	.word	0x200006d4

08007d18 <_Balloc>:
 8007d18:	b570      	push	{r4, r5, r6, lr}
 8007d1a:	69c6      	ldr	r6, [r0, #28]
 8007d1c:	4604      	mov	r4, r0
 8007d1e:	460d      	mov	r5, r1
 8007d20:	b976      	cbnz	r6, 8007d40 <_Balloc+0x28>
 8007d22:	2010      	movs	r0, #16
 8007d24:	f7ff ff42 	bl	8007bac <malloc>
 8007d28:	4602      	mov	r2, r0
 8007d2a:	61e0      	str	r0, [r4, #28]
 8007d2c:	b920      	cbnz	r0, 8007d38 <_Balloc+0x20>
 8007d2e:	4b18      	ldr	r3, [pc, #96]	@ (8007d90 <_Balloc+0x78>)
 8007d30:	4818      	ldr	r0, [pc, #96]	@ (8007d94 <_Balloc+0x7c>)
 8007d32:	216b      	movs	r1, #107	@ 0x6b
 8007d34:	f7ff f886 	bl	8006e44 <__assert_func>
 8007d38:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007d3c:	6006      	str	r6, [r0, #0]
 8007d3e:	60c6      	str	r6, [r0, #12]
 8007d40:	69e6      	ldr	r6, [r4, #28]
 8007d42:	68f3      	ldr	r3, [r6, #12]
 8007d44:	b183      	cbz	r3, 8007d68 <_Balloc+0x50>
 8007d46:	69e3      	ldr	r3, [r4, #28]
 8007d48:	68db      	ldr	r3, [r3, #12]
 8007d4a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8007d4e:	b9b8      	cbnz	r0, 8007d80 <_Balloc+0x68>
 8007d50:	2101      	movs	r1, #1
 8007d52:	fa01 f605 	lsl.w	r6, r1, r5
 8007d56:	1d72      	adds	r2, r6, #5
 8007d58:	0092      	lsls	r2, r2, #2
 8007d5a:	4620      	mov	r0, r4
 8007d5c:	f000 fdb3 	bl	80088c6 <_calloc_r>
 8007d60:	b160      	cbz	r0, 8007d7c <_Balloc+0x64>
 8007d62:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8007d66:	e00e      	b.n	8007d86 <_Balloc+0x6e>
 8007d68:	2221      	movs	r2, #33	@ 0x21
 8007d6a:	2104      	movs	r1, #4
 8007d6c:	4620      	mov	r0, r4
 8007d6e:	f000 fdaa 	bl	80088c6 <_calloc_r>
 8007d72:	69e3      	ldr	r3, [r4, #28]
 8007d74:	60f0      	str	r0, [r6, #12]
 8007d76:	68db      	ldr	r3, [r3, #12]
 8007d78:	2b00      	cmp	r3, #0
 8007d7a:	d1e4      	bne.n	8007d46 <_Balloc+0x2e>
 8007d7c:	2000      	movs	r0, #0
 8007d7e:	bd70      	pop	{r4, r5, r6, pc}
 8007d80:	6802      	ldr	r2, [r0, #0]
 8007d82:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8007d86:	2300      	movs	r3, #0
 8007d88:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8007d8c:	e7f7      	b.n	8007d7e <_Balloc+0x66>
 8007d8e:	bf00      	nop
 8007d90:	080090d8 	.word	0x080090d8
 8007d94:	080091fb 	.word	0x080091fb

08007d98 <_Bfree>:
 8007d98:	b570      	push	{r4, r5, r6, lr}
 8007d9a:	69c6      	ldr	r6, [r0, #28]
 8007d9c:	4605      	mov	r5, r0
 8007d9e:	460c      	mov	r4, r1
 8007da0:	b976      	cbnz	r6, 8007dc0 <_Bfree+0x28>
 8007da2:	2010      	movs	r0, #16
 8007da4:	f7ff ff02 	bl	8007bac <malloc>
 8007da8:	4602      	mov	r2, r0
 8007daa:	61e8      	str	r0, [r5, #28]
 8007dac:	b920      	cbnz	r0, 8007db8 <_Bfree+0x20>
 8007dae:	4b09      	ldr	r3, [pc, #36]	@ (8007dd4 <_Bfree+0x3c>)
 8007db0:	4809      	ldr	r0, [pc, #36]	@ (8007dd8 <_Bfree+0x40>)
 8007db2:	218f      	movs	r1, #143	@ 0x8f
 8007db4:	f7ff f846 	bl	8006e44 <__assert_func>
 8007db8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007dbc:	6006      	str	r6, [r0, #0]
 8007dbe:	60c6      	str	r6, [r0, #12]
 8007dc0:	b13c      	cbz	r4, 8007dd2 <_Bfree+0x3a>
 8007dc2:	69eb      	ldr	r3, [r5, #28]
 8007dc4:	6862      	ldr	r2, [r4, #4]
 8007dc6:	68db      	ldr	r3, [r3, #12]
 8007dc8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007dcc:	6021      	str	r1, [r4, #0]
 8007dce:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8007dd2:	bd70      	pop	{r4, r5, r6, pc}
 8007dd4:	080090d8 	.word	0x080090d8
 8007dd8:	080091fb 	.word	0x080091fb

08007ddc <__multadd>:
 8007ddc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007de0:	690d      	ldr	r5, [r1, #16]
 8007de2:	4607      	mov	r7, r0
 8007de4:	460c      	mov	r4, r1
 8007de6:	461e      	mov	r6, r3
 8007de8:	f101 0c14 	add.w	ip, r1, #20
 8007dec:	2000      	movs	r0, #0
 8007dee:	f8dc 3000 	ldr.w	r3, [ip]
 8007df2:	b299      	uxth	r1, r3
 8007df4:	fb02 6101 	mla	r1, r2, r1, r6
 8007df8:	0c1e      	lsrs	r6, r3, #16
 8007dfa:	0c0b      	lsrs	r3, r1, #16
 8007dfc:	fb02 3306 	mla	r3, r2, r6, r3
 8007e00:	b289      	uxth	r1, r1
 8007e02:	3001      	adds	r0, #1
 8007e04:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8007e08:	4285      	cmp	r5, r0
 8007e0a:	f84c 1b04 	str.w	r1, [ip], #4
 8007e0e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8007e12:	dcec      	bgt.n	8007dee <__multadd+0x12>
 8007e14:	b30e      	cbz	r6, 8007e5a <__multadd+0x7e>
 8007e16:	68a3      	ldr	r3, [r4, #8]
 8007e18:	42ab      	cmp	r3, r5
 8007e1a:	dc19      	bgt.n	8007e50 <__multadd+0x74>
 8007e1c:	6861      	ldr	r1, [r4, #4]
 8007e1e:	4638      	mov	r0, r7
 8007e20:	3101      	adds	r1, #1
 8007e22:	f7ff ff79 	bl	8007d18 <_Balloc>
 8007e26:	4680      	mov	r8, r0
 8007e28:	b928      	cbnz	r0, 8007e36 <__multadd+0x5a>
 8007e2a:	4602      	mov	r2, r0
 8007e2c:	4b0c      	ldr	r3, [pc, #48]	@ (8007e60 <__multadd+0x84>)
 8007e2e:	480d      	ldr	r0, [pc, #52]	@ (8007e64 <__multadd+0x88>)
 8007e30:	21ba      	movs	r1, #186	@ 0xba
 8007e32:	f7ff f807 	bl	8006e44 <__assert_func>
 8007e36:	6922      	ldr	r2, [r4, #16]
 8007e38:	3202      	adds	r2, #2
 8007e3a:	f104 010c 	add.w	r1, r4, #12
 8007e3e:	0092      	lsls	r2, r2, #2
 8007e40:	300c      	adds	r0, #12
 8007e42:	f000 fd2b 	bl	800889c <memcpy>
 8007e46:	4621      	mov	r1, r4
 8007e48:	4638      	mov	r0, r7
 8007e4a:	f7ff ffa5 	bl	8007d98 <_Bfree>
 8007e4e:	4644      	mov	r4, r8
 8007e50:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8007e54:	3501      	adds	r5, #1
 8007e56:	615e      	str	r6, [r3, #20]
 8007e58:	6125      	str	r5, [r4, #16]
 8007e5a:	4620      	mov	r0, r4
 8007e5c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007e60:	080091ea 	.word	0x080091ea
 8007e64:	080091fb 	.word	0x080091fb

08007e68 <__hi0bits>:
 8007e68:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8007e6c:	4603      	mov	r3, r0
 8007e6e:	bf36      	itet	cc
 8007e70:	0403      	lslcc	r3, r0, #16
 8007e72:	2000      	movcs	r0, #0
 8007e74:	2010      	movcc	r0, #16
 8007e76:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8007e7a:	bf3c      	itt	cc
 8007e7c:	021b      	lslcc	r3, r3, #8
 8007e7e:	3008      	addcc	r0, #8
 8007e80:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007e84:	bf3c      	itt	cc
 8007e86:	011b      	lslcc	r3, r3, #4
 8007e88:	3004      	addcc	r0, #4
 8007e8a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007e8e:	bf3c      	itt	cc
 8007e90:	009b      	lslcc	r3, r3, #2
 8007e92:	3002      	addcc	r0, #2
 8007e94:	2b00      	cmp	r3, #0
 8007e96:	db05      	blt.n	8007ea4 <__hi0bits+0x3c>
 8007e98:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8007e9c:	f100 0001 	add.w	r0, r0, #1
 8007ea0:	bf08      	it	eq
 8007ea2:	2020      	moveq	r0, #32
 8007ea4:	4770      	bx	lr

08007ea6 <__lo0bits>:
 8007ea6:	6803      	ldr	r3, [r0, #0]
 8007ea8:	4602      	mov	r2, r0
 8007eaa:	f013 0007 	ands.w	r0, r3, #7
 8007eae:	d00b      	beq.n	8007ec8 <__lo0bits+0x22>
 8007eb0:	07d9      	lsls	r1, r3, #31
 8007eb2:	d421      	bmi.n	8007ef8 <__lo0bits+0x52>
 8007eb4:	0798      	lsls	r0, r3, #30
 8007eb6:	bf49      	itett	mi
 8007eb8:	085b      	lsrmi	r3, r3, #1
 8007eba:	089b      	lsrpl	r3, r3, #2
 8007ebc:	2001      	movmi	r0, #1
 8007ebe:	6013      	strmi	r3, [r2, #0]
 8007ec0:	bf5c      	itt	pl
 8007ec2:	6013      	strpl	r3, [r2, #0]
 8007ec4:	2002      	movpl	r0, #2
 8007ec6:	4770      	bx	lr
 8007ec8:	b299      	uxth	r1, r3
 8007eca:	b909      	cbnz	r1, 8007ed0 <__lo0bits+0x2a>
 8007ecc:	0c1b      	lsrs	r3, r3, #16
 8007ece:	2010      	movs	r0, #16
 8007ed0:	b2d9      	uxtb	r1, r3
 8007ed2:	b909      	cbnz	r1, 8007ed8 <__lo0bits+0x32>
 8007ed4:	3008      	adds	r0, #8
 8007ed6:	0a1b      	lsrs	r3, r3, #8
 8007ed8:	0719      	lsls	r1, r3, #28
 8007eda:	bf04      	itt	eq
 8007edc:	091b      	lsreq	r3, r3, #4
 8007ede:	3004      	addeq	r0, #4
 8007ee0:	0799      	lsls	r1, r3, #30
 8007ee2:	bf04      	itt	eq
 8007ee4:	089b      	lsreq	r3, r3, #2
 8007ee6:	3002      	addeq	r0, #2
 8007ee8:	07d9      	lsls	r1, r3, #31
 8007eea:	d403      	bmi.n	8007ef4 <__lo0bits+0x4e>
 8007eec:	085b      	lsrs	r3, r3, #1
 8007eee:	f100 0001 	add.w	r0, r0, #1
 8007ef2:	d003      	beq.n	8007efc <__lo0bits+0x56>
 8007ef4:	6013      	str	r3, [r2, #0]
 8007ef6:	4770      	bx	lr
 8007ef8:	2000      	movs	r0, #0
 8007efa:	4770      	bx	lr
 8007efc:	2020      	movs	r0, #32
 8007efe:	4770      	bx	lr

08007f00 <__i2b>:
 8007f00:	b510      	push	{r4, lr}
 8007f02:	460c      	mov	r4, r1
 8007f04:	2101      	movs	r1, #1
 8007f06:	f7ff ff07 	bl	8007d18 <_Balloc>
 8007f0a:	4602      	mov	r2, r0
 8007f0c:	b928      	cbnz	r0, 8007f1a <__i2b+0x1a>
 8007f0e:	4b05      	ldr	r3, [pc, #20]	@ (8007f24 <__i2b+0x24>)
 8007f10:	4805      	ldr	r0, [pc, #20]	@ (8007f28 <__i2b+0x28>)
 8007f12:	f240 1145 	movw	r1, #325	@ 0x145
 8007f16:	f7fe ff95 	bl	8006e44 <__assert_func>
 8007f1a:	2301      	movs	r3, #1
 8007f1c:	6144      	str	r4, [r0, #20]
 8007f1e:	6103      	str	r3, [r0, #16]
 8007f20:	bd10      	pop	{r4, pc}
 8007f22:	bf00      	nop
 8007f24:	080091ea 	.word	0x080091ea
 8007f28:	080091fb 	.word	0x080091fb

08007f2c <__multiply>:
 8007f2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007f30:	4614      	mov	r4, r2
 8007f32:	690a      	ldr	r2, [r1, #16]
 8007f34:	6923      	ldr	r3, [r4, #16]
 8007f36:	429a      	cmp	r2, r3
 8007f38:	bfa8      	it	ge
 8007f3a:	4623      	movge	r3, r4
 8007f3c:	460f      	mov	r7, r1
 8007f3e:	bfa4      	itt	ge
 8007f40:	460c      	movge	r4, r1
 8007f42:	461f      	movge	r7, r3
 8007f44:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8007f48:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8007f4c:	68a3      	ldr	r3, [r4, #8]
 8007f4e:	6861      	ldr	r1, [r4, #4]
 8007f50:	eb0a 0609 	add.w	r6, sl, r9
 8007f54:	42b3      	cmp	r3, r6
 8007f56:	b085      	sub	sp, #20
 8007f58:	bfb8      	it	lt
 8007f5a:	3101      	addlt	r1, #1
 8007f5c:	f7ff fedc 	bl	8007d18 <_Balloc>
 8007f60:	b930      	cbnz	r0, 8007f70 <__multiply+0x44>
 8007f62:	4602      	mov	r2, r0
 8007f64:	4b44      	ldr	r3, [pc, #272]	@ (8008078 <__multiply+0x14c>)
 8007f66:	4845      	ldr	r0, [pc, #276]	@ (800807c <__multiply+0x150>)
 8007f68:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8007f6c:	f7fe ff6a 	bl	8006e44 <__assert_func>
 8007f70:	f100 0514 	add.w	r5, r0, #20
 8007f74:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8007f78:	462b      	mov	r3, r5
 8007f7a:	2200      	movs	r2, #0
 8007f7c:	4543      	cmp	r3, r8
 8007f7e:	d321      	bcc.n	8007fc4 <__multiply+0x98>
 8007f80:	f107 0114 	add.w	r1, r7, #20
 8007f84:	f104 0214 	add.w	r2, r4, #20
 8007f88:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8007f8c:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8007f90:	9302      	str	r3, [sp, #8]
 8007f92:	1b13      	subs	r3, r2, r4
 8007f94:	3b15      	subs	r3, #21
 8007f96:	f023 0303 	bic.w	r3, r3, #3
 8007f9a:	3304      	adds	r3, #4
 8007f9c:	f104 0715 	add.w	r7, r4, #21
 8007fa0:	42ba      	cmp	r2, r7
 8007fa2:	bf38      	it	cc
 8007fa4:	2304      	movcc	r3, #4
 8007fa6:	9301      	str	r3, [sp, #4]
 8007fa8:	9b02      	ldr	r3, [sp, #8]
 8007faa:	9103      	str	r1, [sp, #12]
 8007fac:	428b      	cmp	r3, r1
 8007fae:	d80c      	bhi.n	8007fca <__multiply+0x9e>
 8007fb0:	2e00      	cmp	r6, #0
 8007fb2:	dd03      	ble.n	8007fbc <__multiply+0x90>
 8007fb4:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8007fb8:	2b00      	cmp	r3, #0
 8007fba:	d05b      	beq.n	8008074 <__multiply+0x148>
 8007fbc:	6106      	str	r6, [r0, #16]
 8007fbe:	b005      	add	sp, #20
 8007fc0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007fc4:	f843 2b04 	str.w	r2, [r3], #4
 8007fc8:	e7d8      	b.n	8007f7c <__multiply+0x50>
 8007fca:	f8b1 a000 	ldrh.w	sl, [r1]
 8007fce:	f1ba 0f00 	cmp.w	sl, #0
 8007fd2:	d024      	beq.n	800801e <__multiply+0xf2>
 8007fd4:	f104 0e14 	add.w	lr, r4, #20
 8007fd8:	46a9      	mov	r9, r5
 8007fda:	f04f 0c00 	mov.w	ip, #0
 8007fde:	f85e 7b04 	ldr.w	r7, [lr], #4
 8007fe2:	f8d9 3000 	ldr.w	r3, [r9]
 8007fe6:	fa1f fb87 	uxth.w	fp, r7
 8007fea:	b29b      	uxth	r3, r3
 8007fec:	fb0a 330b 	mla	r3, sl, fp, r3
 8007ff0:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 8007ff4:	f8d9 7000 	ldr.w	r7, [r9]
 8007ff8:	4463      	add	r3, ip
 8007ffa:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8007ffe:	fb0a c70b 	mla	r7, sl, fp, ip
 8008002:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8008006:	b29b      	uxth	r3, r3
 8008008:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800800c:	4572      	cmp	r2, lr
 800800e:	f849 3b04 	str.w	r3, [r9], #4
 8008012:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8008016:	d8e2      	bhi.n	8007fde <__multiply+0xb2>
 8008018:	9b01      	ldr	r3, [sp, #4]
 800801a:	f845 c003 	str.w	ip, [r5, r3]
 800801e:	9b03      	ldr	r3, [sp, #12]
 8008020:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8008024:	3104      	adds	r1, #4
 8008026:	f1b9 0f00 	cmp.w	r9, #0
 800802a:	d021      	beq.n	8008070 <__multiply+0x144>
 800802c:	682b      	ldr	r3, [r5, #0]
 800802e:	f104 0c14 	add.w	ip, r4, #20
 8008032:	46ae      	mov	lr, r5
 8008034:	f04f 0a00 	mov.w	sl, #0
 8008038:	f8bc b000 	ldrh.w	fp, [ip]
 800803c:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8008040:	fb09 770b 	mla	r7, r9, fp, r7
 8008044:	4457      	add	r7, sl
 8008046:	b29b      	uxth	r3, r3
 8008048:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800804c:	f84e 3b04 	str.w	r3, [lr], #4
 8008050:	f85c 3b04 	ldr.w	r3, [ip], #4
 8008054:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8008058:	f8be 3000 	ldrh.w	r3, [lr]
 800805c:	fb09 330a 	mla	r3, r9, sl, r3
 8008060:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8008064:	4562      	cmp	r2, ip
 8008066:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800806a:	d8e5      	bhi.n	8008038 <__multiply+0x10c>
 800806c:	9f01      	ldr	r7, [sp, #4]
 800806e:	51eb      	str	r3, [r5, r7]
 8008070:	3504      	adds	r5, #4
 8008072:	e799      	b.n	8007fa8 <__multiply+0x7c>
 8008074:	3e01      	subs	r6, #1
 8008076:	e79b      	b.n	8007fb0 <__multiply+0x84>
 8008078:	080091ea 	.word	0x080091ea
 800807c:	080091fb 	.word	0x080091fb

08008080 <__pow5mult>:
 8008080:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008084:	4615      	mov	r5, r2
 8008086:	f012 0203 	ands.w	r2, r2, #3
 800808a:	4607      	mov	r7, r0
 800808c:	460e      	mov	r6, r1
 800808e:	d007      	beq.n	80080a0 <__pow5mult+0x20>
 8008090:	4c25      	ldr	r4, [pc, #148]	@ (8008128 <__pow5mult+0xa8>)
 8008092:	3a01      	subs	r2, #1
 8008094:	2300      	movs	r3, #0
 8008096:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800809a:	f7ff fe9f 	bl	8007ddc <__multadd>
 800809e:	4606      	mov	r6, r0
 80080a0:	10ad      	asrs	r5, r5, #2
 80080a2:	d03d      	beq.n	8008120 <__pow5mult+0xa0>
 80080a4:	69fc      	ldr	r4, [r7, #28]
 80080a6:	b97c      	cbnz	r4, 80080c8 <__pow5mult+0x48>
 80080a8:	2010      	movs	r0, #16
 80080aa:	f7ff fd7f 	bl	8007bac <malloc>
 80080ae:	4602      	mov	r2, r0
 80080b0:	61f8      	str	r0, [r7, #28]
 80080b2:	b928      	cbnz	r0, 80080c0 <__pow5mult+0x40>
 80080b4:	4b1d      	ldr	r3, [pc, #116]	@ (800812c <__pow5mult+0xac>)
 80080b6:	481e      	ldr	r0, [pc, #120]	@ (8008130 <__pow5mult+0xb0>)
 80080b8:	f240 11b3 	movw	r1, #435	@ 0x1b3
 80080bc:	f7fe fec2 	bl	8006e44 <__assert_func>
 80080c0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80080c4:	6004      	str	r4, [r0, #0]
 80080c6:	60c4      	str	r4, [r0, #12]
 80080c8:	f8d7 801c 	ldr.w	r8, [r7, #28]
 80080cc:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80080d0:	b94c      	cbnz	r4, 80080e6 <__pow5mult+0x66>
 80080d2:	f240 2171 	movw	r1, #625	@ 0x271
 80080d6:	4638      	mov	r0, r7
 80080d8:	f7ff ff12 	bl	8007f00 <__i2b>
 80080dc:	2300      	movs	r3, #0
 80080de:	f8c8 0008 	str.w	r0, [r8, #8]
 80080e2:	4604      	mov	r4, r0
 80080e4:	6003      	str	r3, [r0, #0]
 80080e6:	f04f 0900 	mov.w	r9, #0
 80080ea:	07eb      	lsls	r3, r5, #31
 80080ec:	d50a      	bpl.n	8008104 <__pow5mult+0x84>
 80080ee:	4631      	mov	r1, r6
 80080f0:	4622      	mov	r2, r4
 80080f2:	4638      	mov	r0, r7
 80080f4:	f7ff ff1a 	bl	8007f2c <__multiply>
 80080f8:	4631      	mov	r1, r6
 80080fa:	4680      	mov	r8, r0
 80080fc:	4638      	mov	r0, r7
 80080fe:	f7ff fe4b 	bl	8007d98 <_Bfree>
 8008102:	4646      	mov	r6, r8
 8008104:	106d      	asrs	r5, r5, #1
 8008106:	d00b      	beq.n	8008120 <__pow5mult+0xa0>
 8008108:	6820      	ldr	r0, [r4, #0]
 800810a:	b938      	cbnz	r0, 800811c <__pow5mult+0x9c>
 800810c:	4622      	mov	r2, r4
 800810e:	4621      	mov	r1, r4
 8008110:	4638      	mov	r0, r7
 8008112:	f7ff ff0b 	bl	8007f2c <__multiply>
 8008116:	6020      	str	r0, [r4, #0]
 8008118:	f8c0 9000 	str.w	r9, [r0]
 800811c:	4604      	mov	r4, r0
 800811e:	e7e4      	b.n	80080ea <__pow5mult+0x6a>
 8008120:	4630      	mov	r0, r6
 8008122:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008126:	bf00      	nop
 8008128:	08009254 	.word	0x08009254
 800812c:	080090d8 	.word	0x080090d8
 8008130:	080091fb 	.word	0x080091fb

08008134 <__lshift>:
 8008134:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008138:	460c      	mov	r4, r1
 800813a:	6849      	ldr	r1, [r1, #4]
 800813c:	6923      	ldr	r3, [r4, #16]
 800813e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8008142:	68a3      	ldr	r3, [r4, #8]
 8008144:	4607      	mov	r7, r0
 8008146:	4691      	mov	r9, r2
 8008148:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800814c:	f108 0601 	add.w	r6, r8, #1
 8008150:	42b3      	cmp	r3, r6
 8008152:	db0b      	blt.n	800816c <__lshift+0x38>
 8008154:	4638      	mov	r0, r7
 8008156:	f7ff fddf 	bl	8007d18 <_Balloc>
 800815a:	4605      	mov	r5, r0
 800815c:	b948      	cbnz	r0, 8008172 <__lshift+0x3e>
 800815e:	4602      	mov	r2, r0
 8008160:	4b28      	ldr	r3, [pc, #160]	@ (8008204 <__lshift+0xd0>)
 8008162:	4829      	ldr	r0, [pc, #164]	@ (8008208 <__lshift+0xd4>)
 8008164:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8008168:	f7fe fe6c 	bl	8006e44 <__assert_func>
 800816c:	3101      	adds	r1, #1
 800816e:	005b      	lsls	r3, r3, #1
 8008170:	e7ee      	b.n	8008150 <__lshift+0x1c>
 8008172:	2300      	movs	r3, #0
 8008174:	f100 0114 	add.w	r1, r0, #20
 8008178:	f100 0210 	add.w	r2, r0, #16
 800817c:	4618      	mov	r0, r3
 800817e:	4553      	cmp	r3, sl
 8008180:	db33      	blt.n	80081ea <__lshift+0xb6>
 8008182:	6920      	ldr	r0, [r4, #16]
 8008184:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8008188:	f104 0314 	add.w	r3, r4, #20
 800818c:	f019 091f 	ands.w	r9, r9, #31
 8008190:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8008194:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8008198:	d02b      	beq.n	80081f2 <__lshift+0xbe>
 800819a:	f1c9 0e20 	rsb	lr, r9, #32
 800819e:	468a      	mov	sl, r1
 80081a0:	2200      	movs	r2, #0
 80081a2:	6818      	ldr	r0, [r3, #0]
 80081a4:	fa00 f009 	lsl.w	r0, r0, r9
 80081a8:	4310      	orrs	r0, r2
 80081aa:	f84a 0b04 	str.w	r0, [sl], #4
 80081ae:	f853 2b04 	ldr.w	r2, [r3], #4
 80081b2:	459c      	cmp	ip, r3
 80081b4:	fa22 f20e 	lsr.w	r2, r2, lr
 80081b8:	d8f3      	bhi.n	80081a2 <__lshift+0x6e>
 80081ba:	ebac 0304 	sub.w	r3, ip, r4
 80081be:	3b15      	subs	r3, #21
 80081c0:	f023 0303 	bic.w	r3, r3, #3
 80081c4:	3304      	adds	r3, #4
 80081c6:	f104 0015 	add.w	r0, r4, #21
 80081ca:	4584      	cmp	ip, r0
 80081cc:	bf38      	it	cc
 80081ce:	2304      	movcc	r3, #4
 80081d0:	50ca      	str	r2, [r1, r3]
 80081d2:	b10a      	cbz	r2, 80081d8 <__lshift+0xa4>
 80081d4:	f108 0602 	add.w	r6, r8, #2
 80081d8:	3e01      	subs	r6, #1
 80081da:	4638      	mov	r0, r7
 80081dc:	612e      	str	r6, [r5, #16]
 80081de:	4621      	mov	r1, r4
 80081e0:	f7ff fdda 	bl	8007d98 <_Bfree>
 80081e4:	4628      	mov	r0, r5
 80081e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80081ea:	f842 0f04 	str.w	r0, [r2, #4]!
 80081ee:	3301      	adds	r3, #1
 80081f0:	e7c5      	b.n	800817e <__lshift+0x4a>
 80081f2:	3904      	subs	r1, #4
 80081f4:	f853 2b04 	ldr.w	r2, [r3], #4
 80081f8:	f841 2f04 	str.w	r2, [r1, #4]!
 80081fc:	459c      	cmp	ip, r3
 80081fe:	d8f9      	bhi.n	80081f4 <__lshift+0xc0>
 8008200:	e7ea      	b.n	80081d8 <__lshift+0xa4>
 8008202:	bf00      	nop
 8008204:	080091ea 	.word	0x080091ea
 8008208:	080091fb 	.word	0x080091fb

0800820c <__mcmp>:
 800820c:	690a      	ldr	r2, [r1, #16]
 800820e:	4603      	mov	r3, r0
 8008210:	6900      	ldr	r0, [r0, #16]
 8008212:	1a80      	subs	r0, r0, r2
 8008214:	b530      	push	{r4, r5, lr}
 8008216:	d10e      	bne.n	8008236 <__mcmp+0x2a>
 8008218:	3314      	adds	r3, #20
 800821a:	3114      	adds	r1, #20
 800821c:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8008220:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8008224:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8008228:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800822c:	4295      	cmp	r5, r2
 800822e:	d003      	beq.n	8008238 <__mcmp+0x2c>
 8008230:	d205      	bcs.n	800823e <__mcmp+0x32>
 8008232:	f04f 30ff 	mov.w	r0, #4294967295
 8008236:	bd30      	pop	{r4, r5, pc}
 8008238:	42a3      	cmp	r3, r4
 800823a:	d3f3      	bcc.n	8008224 <__mcmp+0x18>
 800823c:	e7fb      	b.n	8008236 <__mcmp+0x2a>
 800823e:	2001      	movs	r0, #1
 8008240:	e7f9      	b.n	8008236 <__mcmp+0x2a>
	...

08008244 <__mdiff>:
 8008244:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008248:	4689      	mov	r9, r1
 800824a:	4606      	mov	r6, r0
 800824c:	4611      	mov	r1, r2
 800824e:	4648      	mov	r0, r9
 8008250:	4614      	mov	r4, r2
 8008252:	f7ff ffdb 	bl	800820c <__mcmp>
 8008256:	1e05      	subs	r5, r0, #0
 8008258:	d112      	bne.n	8008280 <__mdiff+0x3c>
 800825a:	4629      	mov	r1, r5
 800825c:	4630      	mov	r0, r6
 800825e:	f7ff fd5b 	bl	8007d18 <_Balloc>
 8008262:	4602      	mov	r2, r0
 8008264:	b928      	cbnz	r0, 8008272 <__mdiff+0x2e>
 8008266:	4b3f      	ldr	r3, [pc, #252]	@ (8008364 <__mdiff+0x120>)
 8008268:	f240 2137 	movw	r1, #567	@ 0x237
 800826c:	483e      	ldr	r0, [pc, #248]	@ (8008368 <__mdiff+0x124>)
 800826e:	f7fe fde9 	bl	8006e44 <__assert_func>
 8008272:	2301      	movs	r3, #1
 8008274:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8008278:	4610      	mov	r0, r2
 800827a:	b003      	add	sp, #12
 800827c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008280:	bfbc      	itt	lt
 8008282:	464b      	movlt	r3, r9
 8008284:	46a1      	movlt	r9, r4
 8008286:	4630      	mov	r0, r6
 8008288:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800828c:	bfba      	itte	lt
 800828e:	461c      	movlt	r4, r3
 8008290:	2501      	movlt	r5, #1
 8008292:	2500      	movge	r5, #0
 8008294:	f7ff fd40 	bl	8007d18 <_Balloc>
 8008298:	4602      	mov	r2, r0
 800829a:	b918      	cbnz	r0, 80082a4 <__mdiff+0x60>
 800829c:	4b31      	ldr	r3, [pc, #196]	@ (8008364 <__mdiff+0x120>)
 800829e:	f240 2145 	movw	r1, #581	@ 0x245
 80082a2:	e7e3      	b.n	800826c <__mdiff+0x28>
 80082a4:	f8d9 7010 	ldr.w	r7, [r9, #16]
 80082a8:	6926      	ldr	r6, [r4, #16]
 80082aa:	60c5      	str	r5, [r0, #12]
 80082ac:	f109 0310 	add.w	r3, r9, #16
 80082b0:	f109 0514 	add.w	r5, r9, #20
 80082b4:	f104 0e14 	add.w	lr, r4, #20
 80082b8:	f100 0b14 	add.w	fp, r0, #20
 80082bc:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 80082c0:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 80082c4:	9301      	str	r3, [sp, #4]
 80082c6:	46d9      	mov	r9, fp
 80082c8:	f04f 0c00 	mov.w	ip, #0
 80082cc:	9b01      	ldr	r3, [sp, #4]
 80082ce:	f85e 0b04 	ldr.w	r0, [lr], #4
 80082d2:	f853 af04 	ldr.w	sl, [r3, #4]!
 80082d6:	9301      	str	r3, [sp, #4]
 80082d8:	fa1f f38a 	uxth.w	r3, sl
 80082dc:	4619      	mov	r1, r3
 80082de:	b283      	uxth	r3, r0
 80082e0:	1acb      	subs	r3, r1, r3
 80082e2:	0c00      	lsrs	r0, r0, #16
 80082e4:	4463      	add	r3, ip
 80082e6:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 80082ea:	eb00 4023 	add.w	r0, r0, r3, asr #16
 80082ee:	b29b      	uxth	r3, r3
 80082f0:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 80082f4:	4576      	cmp	r6, lr
 80082f6:	f849 3b04 	str.w	r3, [r9], #4
 80082fa:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80082fe:	d8e5      	bhi.n	80082cc <__mdiff+0x88>
 8008300:	1b33      	subs	r3, r6, r4
 8008302:	3b15      	subs	r3, #21
 8008304:	f023 0303 	bic.w	r3, r3, #3
 8008308:	3415      	adds	r4, #21
 800830a:	3304      	adds	r3, #4
 800830c:	42a6      	cmp	r6, r4
 800830e:	bf38      	it	cc
 8008310:	2304      	movcc	r3, #4
 8008312:	441d      	add	r5, r3
 8008314:	445b      	add	r3, fp
 8008316:	461e      	mov	r6, r3
 8008318:	462c      	mov	r4, r5
 800831a:	4544      	cmp	r4, r8
 800831c:	d30e      	bcc.n	800833c <__mdiff+0xf8>
 800831e:	f108 0103 	add.w	r1, r8, #3
 8008322:	1b49      	subs	r1, r1, r5
 8008324:	f021 0103 	bic.w	r1, r1, #3
 8008328:	3d03      	subs	r5, #3
 800832a:	45a8      	cmp	r8, r5
 800832c:	bf38      	it	cc
 800832e:	2100      	movcc	r1, #0
 8008330:	440b      	add	r3, r1
 8008332:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8008336:	b191      	cbz	r1, 800835e <__mdiff+0x11a>
 8008338:	6117      	str	r7, [r2, #16]
 800833a:	e79d      	b.n	8008278 <__mdiff+0x34>
 800833c:	f854 1b04 	ldr.w	r1, [r4], #4
 8008340:	46e6      	mov	lr, ip
 8008342:	0c08      	lsrs	r0, r1, #16
 8008344:	fa1c fc81 	uxtah	ip, ip, r1
 8008348:	4471      	add	r1, lr
 800834a:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800834e:	b289      	uxth	r1, r1
 8008350:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8008354:	f846 1b04 	str.w	r1, [r6], #4
 8008358:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800835c:	e7dd      	b.n	800831a <__mdiff+0xd6>
 800835e:	3f01      	subs	r7, #1
 8008360:	e7e7      	b.n	8008332 <__mdiff+0xee>
 8008362:	bf00      	nop
 8008364:	080091ea 	.word	0x080091ea
 8008368:	080091fb 	.word	0x080091fb

0800836c <__d2b>:
 800836c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8008370:	460f      	mov	r7, r1
 8008372:	2101      	movs	r1, #1
 8008374:	ec59 8b10 	vmov	r8, r9, d0
 8008378:	4616      	mov	r6, r2
 800837a:	f7ff fccd 	bl	8007d18 <_Balloc>
 800837e:	4604      	mov	r4, r0
 8008380:	b930      	cbnz	r0, 8008390 <__d2b+0x24>
 8008382:	4602      	mov	r2, r0
 8008384:	4b23      	ldr	r3, [pc, #140]	@ (8008414 <__d2b+0xa8>)
 8008386:	4824      	ldr	r0, [pc, #144]	@ (8008418 <__d2b+0xac>)
 8008388:	f240 310f 	movw	r1, #783	@ 0x30f
 800838c:	f7fe fd5a 	bl	8006e44 <__assert_func>
 8008390:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8008394:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8008398:	b10d      	cbz	r5, 800839e <__d2b+0x32>
 800839a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800839e:	9301      	str	r3, [sp, #4]
 80083a0:	f1b8 0300 	subs.w	r3, r8, #0
 80083a4:	d023      	beq.n	80083ee <__d2b+0x82>
 80083a6:	4668      	mov	r0, sp
 80083a8:	9300      	str	r3, [sp, #0]
 80083aa:	f7ff fd7c 	bl	8007ea6 <__lo0bits>
 80083ae:	e9dd 1200 	ldrd	r1, r2, [sp]
 80083b2:	b1d0      	cbz	r0, 80083ea <__d2b+0x7e>
 80083b4:	f1c0 0320 	rsb	r3, r0, #32
 80083b8:	fa02 f303 	lsl.w	r3, r2, r3
 80083bc:	430b      	orrs	r3, r1
 80083be:	40c2      	lsrs	r2, r0
 80083c0:	6163      	str	r3, [r4, #20]
 80083c2:	9201      	str	r2, [sp, #4]
 80083c4:	9b01      	ldr	r3, [sp, #4]
 80083c6:	61a3      	str	r3, [r4, #24]
 80083c8:	2b00      	cmp	r3, #0
 80083ca:	bf0c      	ite	eq
 80083cc:	2201      	moveq	r2, #1
 80083ce:	2202      	movne	r2, #2
 80083d0:	6122      	str	r2, [r4, #16]
 80083d2:	b1a5      	cbz	r5, 80083fe <__d2b+0x92>
 80083d4:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 80083d8:	4405      	add	r5, r0
 80083da:	603d      	str	r5, [r7, #0]
 80083dc:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 80083e0:	6030      	str	r0, [r6, #0]
 80083e2:	4620      	mov	r0, r4
 80083e4:	b003      	add	sp, #12
 80083e6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80083ea:	6161      	str	r1, [r4, #20]
 80083ec:	e7ea      	b.n	80083c4 <__d2b+0x58>
 80083ee:	a801      	add	r0, sp, #4
 80083f0:	f7ff fd59 	bl	8007ea6 <__lo0bits>
 80083f4:	9b01      	ldr	r3, [sp, #4]
 80083f6:	6163      	str	r3, [r4, #20]
 80083f8:	3020      	adds	r0, #32
 80083fa:	2201      	movs	r2, #1
 80083fc:	e7e8      	b.n	80083d0 <__d2b+0x64>
 80083fe:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8008402:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8008406:	6038      	str	r0, [r7, #0]
 8008408:	6918      	ldr	r0, [r3, #16]
 800840a:	f7ff fd2d 	bl	8007e68 <__hi0bits>
 800840e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8008412:	e7e5      	b.n	80083e0 <__d2b+0x74>
 8008414:	080091ea 	.word	0x080091ea
 8008418:	080091fb 	.word	0x080091fb

0800841c <__ssputs_r>:
 800841c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008420:	688e      	ldr	r6, [r1, #8]
 8008422:	461f      	mov	r7, r3
 8008424:	42be      	cmp	r6, r7
 8008426:	680b      	ldr	r3, [r1, #0]
 8008428:	4682      	mov	sl, r0
 800842a:	460c      	mov	r4, r1
 800842c:	4690      	mov	r8, r2
 800842e:	d82d      	bhi.n	800848c <__ssputs_r+0x70>
 8008430:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8008434:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8008438:	d026      	beq.n	8008488 <__ssputs_r+0x6c>
 800843a:	6965      	ldr	r5, [r4, #20]
 800843c:	6909      	ldr	r1, [r1, #16]
 800843e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008442:	eba3 0901 	sub.w	r9, r3, r1
 8008446:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800844a:	1c7b      	adds	r3, r7, #1
 800844c:	444b      	add	r3, r9
 800844e:	106d      	asrs	r5, r5, #1
 8008450:	429d      	cmp	r5, r3
 8008452:	bf38      	it	cc
 8008454:	461d      	movcc	r5, r3
 8008456:	0553      	lsls	r3, r2, #21
 8008458:	d527      	bpl.n	80084aa <__ssputs_r+0x8e>
 800845a:	4629      	mov	r1, r5
 800845c:	f7ff fbd0 	bl	8007c00 <_malloc_r>
 8008460:	4606      	mov	r6, r0
 8008462:	b360      	cbz	r0, 80084be <__ssputs_r+0xa2>
 8008464:	6921      	ldr	r1, [r4, #16]
 8008466:	464a      	mov	r2, r9
 8008468:	f000 fa18 	bl	800889c <memcpy>
 800846c:	89a3      	ldrh	r3, [r4, #12]
 800846e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8008472:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008476:	81a3      	strh	r3, [r4, #12]
 8008478:	6126      	str	r6, [r4, #16]
 800847a:	6165      	str	r5, [r4, #20]
 800847c:	444e      	add	r6, r9
 800847e:	eba5 0509 	sub.w	r5, r5, r9
 8008482:	6026      	str	r6, [r4, #0]
 8008484:	60a5      	str	r5, [r4, #8]
 8008486:	463e      	mov	r6, r7
 8008488:	42be      	cmp	r6, r7
 800848a:	d900      	bls.n	800848e <__ssputs_r+0x72>
 800848c:	463e      	mov	r6, r7
 800848e:	6820      	ldr	r0, [r4, #0]
 8008490:	4632      	mov	r2, r6
 8008492:	4641      	mov	r1, r8
 8008494:	f000 f9d8 	bl	8008848 <memmove>
 8008498:	68a3      	ldr	r3, [r4, #8]
 800849a:	1b9b      	subs	r3, r3, r6
 800849c:	60a3      	str	r3, [r4, #8]
 800849e:	6823      	ldr	r3, [r4, #0]
 80084a0:	4433      	add	r3, r6
 80084a2:	6023      	str	r3, [r4, #0]
 80084a4:	2000      	movs	r0, #0
 80084a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80084aa:	462a      	mov	r2, r5
 80084ac:	f000 fa31 	bl	8008912 <_realloc_r>
 80084b0:	4606      	mov	r6, r0
 80084b2:	2800      	cmp	r0, #0
 80084b4:	d1e0      	bne.n	8008478 <__ssputs_r+0x5c>
 80084b6:	6921      	ldr	r1, [r4, #16]
 80084b8:	4650      	mov	r0, sl
 80084ba:	f7ff fb2d 	bl	8007b18 <_free_r>
 80084be:	230c      	movs	r3, #12
 80084c0:	f8ca 3000 	str.w	r3, [sl]
 80084c4:	89a3      	ldrh	r3, [r4, #12]
 80084c6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80084ca:	81a3      	strh	r3, [r4, #12]
 80084cc:	f04f 30ff 	mov.w	r0, #4294967295
 80084d0:	e7e9      	b.n	80084a6 <__ssputs_r+0x8a>
	...

080084d4 <_svfiprintf_r>:
 80084d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80084d8:	4698      	mov	r8, r3
 80084da:	898b      	ldrh	r3, [r1, #12]
 80084dc:	061b      	lsls	r3, r3, #24
 80084de:	b09d      	sub	sp, #116	@ 0x74
 80084e0:	4607      	mov	r7, r0
 80084e2:	460d      	mov	r5, r1
 80084e4:	4614      	mov	r4, r2
 80084e6:	d510      	bpl.n	800850a <_svfiprintf_r+0x36>
 80084e8:	690b      	ldr	r3, [r1, #16]
 80084ea:	b973      	cbnz	r3, 800850a <_svfiprintf_r+0x36>
 80084ec:	2140      	movs	r1, #64	@ 0x40
 80084ee:	f7ff fb87 	bl	8007c00 <_malloc_r>
 80084f2:	6028      	str	r0, [r5, #0]
 80084f4:	6128      	str	r0, [r5, #16]
 80084f6:	b930      	cbnz	r0, 8008506 <_svfiprintf_r+0x32>
 80084f8:	230c      	movs	r3, #12
 80084fa:	603b      	str	r3, [r7, #0]
 80084fc:	f04f 30ff 	mov.w	r0, #4294967295
 8008500:	b01d      	add	sp, #116	@ 0x74
 8008502:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008506:	2340      	movs	r3, #64	@ 0x40
 8008508:	616b      	str	r3, [r5, #20]
 800850a:	2300      	movs	r3, #0
 800850c:	9309      	str	r3, [sp, #36]	@ 0x24
 800850e:	2320      	movs	r3, #32
 8008510:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8008514:	f8cd 800c 	str.w	r8, [sp, #12]
 8008518:	2330      	movs	r3, #48	@ 0x30
 800851a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80086b8 <_svfiprintf_r+0x1e4>
 800851e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8008522:	f04f 0901 	mov.w	r9, #1
 8008526:	4623      	mov	r3, r4
 8008528:	469a      	mov	sl, r3
 800852a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800852e:	b10a      	cbz	r2, 8008534 <_svfiprintf_r+0x60>
 8008530:	2a25      	cmp	r2, #37	@ 0x25
 8008532:	d1f9      	bne.n	8008528 <_svfiprintf_r+0x54>
 8008534:	ebba 0b04 	subs.w	fp, sl, r4
 8008538:	d00b      	beq.n	8008552 <_svfiprintf_r+0x7e>
 800853a:	465b      	mov	r3, fp
 800853c:	4622      	mov	r2, r4
 800853e:	4629      	mov	r1, r5
 8008540:	4638      	mov	r0, r7
 8008542:	f7ff ff6b 	bl	800841c <__ssputs_r>
 8008546:	3001      	adds	r0, #1
 8008548:	f000 80a7 	beq.w	800869a <_svfiprintf_r+0x1c6>
 800854c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800854e:	445a      	add	r2, fp
 8008550:	9209      	str	r2, [sp, #36]	@ 0x24
 8008552:	f89a 3000 	ldrb.w	r3, [sl]
 8008556:	2b00      	cmp	r3, #0
 8008558:	f000 809f 	beq.w	800869a <_svfiprintf_r+0x1c6>
 800855c:	2300      	movs	r3, #0
 800855e:	f04f 32ff 	mov.w	r2, #4294967295
 8008562:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008566:	f10a 0a01 	add.w	sl, sl, #1
 800856a:	9304      	str	r3, [sp, #16]
 800856c:	9307      	str	r3, [sp, #28]
 800856e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8008572:	931a      	str	r3, [sp, #104]	@ 0x68
 8008574:	4654      	mov	r4, sl
 8008576:	2205      	movs	r2, #5
 8008578:	f814 1b01 	ldrb.w	r1, [r4], #1
 800857c:	484e      	ldr	r0, [pc, #312]	@ (80086b8 <_svfiprintf_r+0x1e4>)
 800857e:	f7f7 fe5f 	bl	8000240 <memchr>
 8008582:	9a04      	ldr	r2, [sp, #16]
 8008584:	b9d8      	cbnz	r0, 80085be <_svfiprintf_r+0xea>
 8008586:	06d0      	lsls	r0, r2, #27
 8008588:	bf44      	itt	mi
 800858a:	2320      	movmi	r3, #32
 800858c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008590:	0711      	lsls	r1, r2, #28
 8008592:	bf44      	itt	mi
 8008594:	232b      	movmi	r3, #43	@ 0x2b
 8008596:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800859a:	f89a 3000 	ldrb.w	r3, [sl]
 800859e:	2b2a      	cmp	r3, #42	@ 0x2a
 80085a0:	d015      	beq.n	80085ce <_svfiprintf_r+0xfa>
 80085a2:	9a07      	ldr	r2, [sp, #28]
 80085a4:	4654      	mov	r4, sl
 80085a6:	2000      	movs	r0, #0
 80085a8:	f04f 0c0a 	mov.w	ip, #10
 80085ac:	4621      	mov	r1, r4
 80085ae:	f811 3b01 	ldrb.w	r3, [r1], #1
 80085b2:	3b30      	subs	r3, #48	@ 0x30
 80085b4:	2b09      	cmp	r3, #9
 80085b6:	d94b      	bls.n	8008650 <_svfiprintf_r+0x17c>
 80085b8:	b1b0      	cbz	r0, 80085e8 <_svfiprintf_r+0x114>
 80085ba:	9207      	str	r2, [sp, #28]
 80085bc:	e014      	b.n	80085e8 <_svfiprintf_r+0x114>
 80085be:	eba0 0308 	sub.w	r3, r0, r8
 80085c2:	fa09 f303 	lsl.w	r3, r9, r3
 80085c6:	4313      	orrs	r3, r2
 80085c8:	9304      	str	r3, [sp, #16]
 80085ca:	46a2      	mov	sl, r4
 80085cc:	e7d2      	b.n	8008574 <_svfiprintf_r+0xa0>
 80085ce:	9b03      	ldr	r3, [sp, #12]
 80085d0:	1d19      	adds	r1, r3, #4
 80085d2:	681b      	ldr	r3, [r3, #0]
 80085d4:	9103      	str	r1, [sp, #12]
 80085d6:	2b00      	cmp	r3, #0
 80085d8:	bfbb      	ittet	lt
 80085da:	425b      	neglt	r3, r3
 80085dc:	f042 0202 	orrlt.w	r2, r2, #2
 80085e0:	9307      	strge	r3, [sp, #28]
 80085e2:	9307      	strlt	r3, [sp, #28]
 80085e4:	bfb8      	it	lt
 80085e6:	9204      	strlt	r2, [sp, #16]
 80085e8:	7823      	ldrb	r3, [r4, #0]
 80085ea:	2b2e      	cmp	r3, #46	@ 0x2e
 80085ec:	d10a      	bne.n	8008604 <_svfiprintf_r+0x130>
 80085ee:	7863      	ldrb	r3, [r4, #1]
 80085f0:	2b2a      	cmp	r3, #42	@ 0x2a
 80085f2:	d132      	bne.n	800865a <_svfiprintf_r+0x186>
 80085f4:	9b03      	ldr	r3, [sp, #12]
 80085f6:	1d1a      	adds	r2, r3, #4
 80085f8:	681b      	ldr	r3, [r3, #0]
 80085fa:	9203      	str	r2, [sp, #12]
 80085fc:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8008600:	3402      	adds	r4, #2
 8008602:	9305      	str	r3, [sp, #20]
 8008604:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80086c8 <_svfiprintf_r+0x1f4>
 8008608:	7821      	ldrb	r1, [r4, #0]
 800860a:	2203      	movs	r2, #3
 800860c:	4650      	mov	r0, sl
 800860e:	f7f7 fe17 	bl	8000240 <memchr>
 8008612:	b138      	cbz	r0, 8008624 <_svfiprintf_r+0x150>
 8008614:	9b04      	ldr	r3, [sp, #16]
 8008616:	eba0 000a 	sub.w	r0, r0, sl
 800861a:	2240      	movs	r2, #64	@ 0x40
 800861c:	4082      	lsls	r2, r0
 800861e:	4313      	orrs	r3, r2
 8008620:	3401      	adds	r4, #1
 8008622:	9304      	str	r3, [sp, #16]
 8008624:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008628:	4824      	ldr	r0, [pc, #144]	@ (80086bc <_svfiprintf_r+0x1e8>)
 800862a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800862e:	2206      	movs	r2, #6
 8008630:	f7f7 fe06 	bl	8000240 <memchr>
 8008634:	2800      	cmp	r0, #0
 8008636:	d036      	beq.n	80086a6 <_svfiprintf_r+0x1d2>
 8008638:	4b21      	ldr	r3, [pc, #132]	@ (80086c0 <_svfiprintf_r+0x1ec>)
 800863a:	bb1b      	cbnz	r3, 8008684 <_svfiprintf_r+0x1b0>
 800863c:	9b03      	ldr	r3, [sp, #12]
 800863e:	3307      	adds	r3, #7
 8008640:	f023 0307 	bic.w	r3, r3, #7
 8008644:	3308      	adds	r3, #8
 8008646:	9303      	str	r3, [sp, #12]
 8008648:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800864a:	4433      	add	r3, r6
 800864c:	9309      	str	r3, [sp, #36]	@ 0x24
 800864e:	e76a      	b.n	8008526 <_svfiprintf_r+0x52>
 8008650:	fb0c 3202 	mla	r2, ip, r2, r3
 8008654:	460c      	mov	r4, r1
 8008656:	2001      	movs	r0, #1
 8008658:	e7a8      	b.n	80085ac <_svfiprintf_r+0xd8>
 800865a:	2300      	movs	r3, #0
 800865c:	3401      	adds	r4, #1
 800865e:	9305      	str	r3, [sp, #20]
 8008660:	4619      	mov	r1, r3
 8008662:	f04f 0c0a 	mov.w	ip, #10
 8008666:	4620      	mov	r0, r4
 8008668:	f810 2b01 	ldrb.w	r2, [r0], #1
 800866c:	3a30      	subs	r2, #48	@ 0x30
 800866e:	2a09      	cmp	r2, #9
 8008670:	d903      	bls.n	800867a <_svfiprintf_r+0x1a6>
 8008672:	2b00      	cmp	r3, #0
 8008674:	d0c6      	beq.n	8008604 <_svfiprintf_r+0x130>
 8008676:	9105      	str	r1, [sp, #20]
 8008678:	e7c4      	b.n	8008604 <_svfiprintf_r+0x130>
 800867a:	fb0c 2101 	mla	r1, ip, r1, r2
 800867e:	4604      	mov	r4, r0
 8008680:	2301      	movs	r3, #1
 8008682:	e7f0      	b.n	8008666 <_svfiprintf_r+0x192>
 8008684:	ab03      	add	r3, sp, #12
 8008686:	9300      	str	r3, [sp, #0]
 8008688:	462a      	mov	r2, r5
 800868a:	4b0e      	ldr	r3, [pc, #56]	@ (80086c4 <_svfiprintf_r+0x1f0>)
 800868c:	a904      	add	r1, sp, #16
 800868e:	4638      	mov	r0, r7
 8008690:	f7fd fde8 	bl	8006264 <_printf_float>
 8008694:	1c42      	adds	r2, r0, #1
 8008696:	4606      	mov	r6, r0
 8008698:	d1d6      	bne.n	8008648 <_svfiprintf_r+0x174>
 800869a:	89ab      	ldrh	r3, [r5, #12]
 800869c:	065b      	lsls	r3, r3, #25
 800869e:	f53f af2d 	bmi.w	80084fc <_svfiprintf_r+0x28>
 80086a2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80086a4:	e72c      	b.n	8008500 <_svfiprintf_r+0x2c>
 80086a6:	ab03      	add	r3, sp, #12
 80086a8:	9300      	str	r3, [sp, #0]
 80086aa:	462a      	mov	r2, r5
 80086ac:	4b05      	ldr	r3, [pc, #20]	@ (80086c4 <_svfiprintf_r+0x1f0>)
 80086ae:	a904      	add	r1, sp, #16
 80086b0:	4638      	mov	r0, r7
 80086b2:	f7fe f86f 	bl	8006794 <_printf_i>
 80086b6:	e7ed      	b.n	8008694 <_svfiprintf_r+0x1c0>
 80086b8:	08009350 	.word	0x08009350
 80086bc:	0800935a 	.word	0x0800935a
 80086c0:	08006265 	.word	0x08006265
 80086c4:	0800841d 	.word	0x0800841d
 80086c8:	08009356 	.word	0x08009356

080086cc <__sflush_r>:
 80086cc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80086d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80086d4:	0716      	lsls	r6, r2, #28
 80086d6:	4605      	mov	r5, r0
 80086d8:	460c      	mov	r4, r1
 80086da:	d454      	bmi.n	8008786 <__sflush_r+0xba>
 80086dc:	684b      	ldr	r3, [r1, #4]
 80086de:	2b00      	cmp	r3, #0
 80086e0:	dc02      	bgt.n	80086e8 <__sflush_r+0x1c>
 80086e2:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80086e4:	2b00      	cmp	r3, #0
 80086e6:	dd48      	ble.n	800877a <__sflush_r+0xae>
 80086e8:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80086ea:	2e00      	cmp	r6, #0
 80086ec:	d045      	beq.n	800877a <__sflush_r+0xae>
 80086ee:	2300      	movs	r3, #0
 80086f0:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80086f4:	682f      	ldr	r7, [r5, #0]
 80086f6:	6a21      	ldr	r1, [r4, #32]
 80086f8:	602b      	str	r3, [r5, #0]
 80086fa:	d030      	beq.n	800875e <__sflush_r+0x92>
 80086fc:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80086fe:	89a3      	ldrh	r3, [r4, #12]
 8008700:	0759      	lsls	r1, r3, #29
 8008702:	d505      	bpl.n	8008710 <__sflush_r+0x44>
 8008704:	6863      	ldr	r3, [r4, #4]
 8008706:	1ad2      	subs	r2, r2, r3
 8008708:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800870a:	b10b      	cbz	r3, 8008710 <__sflush_r+0x44>
 800870c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800870e:	1ad2      	subs	r2, r2, r3
 8008710:	2300      	movs	r3, #0
 8008712:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8008714:	6a21      	ldr	r1, [r4, #32]
 8008716:	4628      	mov	r0, r5
 8008718:	47b0      	blx	r6
 800871a:	1c43      	adds	r3, r0, #1
 800871c:	89a3      	ldrh	r3, [r4, #12]
 800871e:	d106      	bne.n	800872e <__sflush_r+0x62>
 8008720:	6829      	ldr	r1, [r5, #0]
 8008722:	291d      	cmp	r1, #29
 8008724:	d82b      	bhi.n	800877e <__sflush_r+0xb2>
 8008726:	4a2a      	ldr	r2, [pc, #168]	@ (80087d0 <__sflush_r+0x104>)
 8008728:	410a      	asrs	r2, r1
 800872a:	07d6      	lsls	r6, r2, #31
 800872c:	d427      	bmi.n	800877e <__sflush_r+0xb2>
 800872e:	2200      	movs	r2, #0
 8008730:	6062      	str	r2, [r4, #4]
 8008732:	04d9      	lsls	r1, r3, #19
 8008734:	6922      	ldr	r2, [r4, #16]
 8008736:	6022      	str	r2, [r4, #0]
 8008738:	d504      	bpl.n	8008744 <__sflush_r+0x78>
 800873a:	1c42      	adds	r2, r0, #1
 800873c:	d101      	bne.n	8008742 <__sflush_r+0x76>
 800873e:	682b      	ldr	r3, [r5, #0]
 8008740:	b903      	cbnz	r3, 8008744 <__sflush_r+0x78>
 8008742:	6560      	str	r0, [r4, #84]	@ 0x54
 8008744:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8008746:	602f      	str	r7, [r5, #0]
 8008748:	b1b9      	cbz	r1, 800877a <__sflush_r+0xae>
 800874a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800874e:	4299      	cmp	r1, r3
 8008750:	d002      	beq.n	8008758 <__sflush_r+0x8c>
 8008752:	4628      	mov	r0, r5
 8008754:	f7ff f9e0 	bl	8007b18 <_free_r>
 8008758:	2300      	movs	r3, #0
 800875a:	6363      	str	r3, [r4, #52]	@ 0x34
 800875c:	e00d      	b.n	800877a <__sflush_r+0xae>
 800875e:	2301      	movs	r3, #1
 8008760:	4628      	mov	r0, r5
 8008762:	47b0      	blx	r6
 8008764:	4602      	mov	r2, r0
 8008766:	1c50      	adds	r0, r2, #1
 8008768:	d1c9      	bne.n	80086fe <__sflush_r+0x32>
 800876a:	682b      	ldr	r3, [r5, #0]
 800876c:	2b00      	cmp	r3, #0
 800876e:	d0c6      	beq.n	80086fe <__sflush_r+0x32>
 8008770:	2b1d      	cmp	r3, #29
 8008772:	d001      	beq.n	8008778 <__sflush_r+0xac>
 8008774:	2b16      	cmp	r3, #22
 8008776:	d11e      	bne.n	80087b6 <__sflush_r+0xea>
 8008778:	602f      	str	r7, [r5, #0]
 800877a:	2000      	movs	r0, #0
 800877c:	e022      	b.n	80087c4 <__sflush_r+0xf8>
 800877e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008782:	b21b      	sxth	r3, r3
 8008784:	e01b      	b.n	80087be <__sflush_r+0xf2>
 8008786:	690f      	ldr	r7, [r1, #16]
 8008788:	2f00      	cmp	r7, #0
 800878a:	d0f6      	beq.n	800877a <__sflush_r+0xae>
 800878c:	0793      	lsls	r3, r2, #30
 800878e:	680e      	ldr	r6, [r1, #0]
 8008790:	bf08      	it	eq
 8008792:	694b      	ldreq	r3, [r1, #20]
 8008794:	600f      	str	r7, [r1, #0]
 8008796:	bf18      	it	ne
 8008798:	2300      	movne	r3, #0
 800879a:	eba6 0807 	sub.w	r8, r6, r7
 800879e:	608b      	str	r3, [r1, #8]
 80087a0:	f1b8 0f00 	cmp.w	r8, #0
 80087a4:	dde9      	ble.n	800877a <__sflush_r+0xae>
 80087a6:	6a21      	ldr	r1, [r4, #32]
 80087a8:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80087aa:	4643      	mov	r3, r8
 80087ac:	463a      	mov	r2, r7
 80087ae:	4628      	mov	r0, r5
 80087b0:	47b0      	blx	r6
 80087b2:	2800      	cmp	r0, #0
 80087b4:	dc08      	bgt.n	80087c8 <__sflush_r+0xfc>
 80087b6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80087ba:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80087be:	81a3      	strh	r3, [r4, #12]
 80087c0:	f04f 30ff 	mov.w	r0, #4294967295
 80087c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80087c8:	4407      	add	r7, r0
 80087ca:	eba8 0800 	sub.w	r8, r8, r0
 80087ce:	e7e7      	b.n	80087a0 <__sflush_r+0xd4>
 80087d0:	dfbffffe 	.word	0xdfbffffe

080087d4 <_fflush_r>:
 80087d4:	b538      	push	{r3, r4, r5, lr}
 80087d6:	690b      	ldr	r3, [r1, #16]
 80087d8:	4605      	mov	r5, r0
 80087da:	460c      	mov	r4, r1
 80087dc:	b913      	cbnz	r3, 80087e4 <_fflush_r+0x10>
 80087de:	2500      	movs	r5, #0
 80087e0:	4628      	mov	r0, r5
 80087e2:	bd38      	pop	{r3, r4, r5, pc}
 80087e4:	b118      	cbz	r0, 80087ee <_fflush_r+0x1a>
 80087e6:	6a03      	ldr	r3, [r0, #32]
 80087e8:	b90b      	cbnz	r3, 80087ee <_fflush_r+0x1a>
 80087ea:	f7fe f97f 	bl	8006aec <__sinit>
 80087ee:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80087f2:	2b00      	cmp	r3, #0
 80087f4:	d0f3      	beq.n	80087de <_fflush_r+0xa>
 80087f6:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80087f8:	07d0      	lsls	r0, r2, #31
 80087fa:	d404      	bmi.n	8008806 <_fflush_r+0x32>
 80087fc:	0599      	lsls	r1, r3, #22
 80087fe:	d402      	bmi.n	8008806 <_fflush_r+0x32>
 8008800:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008802:	f7fe fb1c 	bl	8006e3e <__retarget_lock_acquire_recursive>
 8008806:	4628      	mov	r0, r5
 8008808:	4621      	mov	r1, r4
 800880a:	f7ff ff5f 	bl	80086cc <__sflush_r>
 800880e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8008810:	07da      	lsls	r2, r3, #31
 8008812:	4605      	mov	r5, r0
 8008814:	d4e4      	bmi.n	80087e0 <_fflush_r+0xc>
 8008816:	89a3      	ldrh	r3, [r4, #12]
 8008818:	059b      	lsls	r3, r3, #22
 800881a:	d4e1      	bmi.n	80087e0 <_fflush_r+0xc>
 800881c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800881e:	f7fe fb0f 	bl	8006e40 <__retarget_lock_release_recursive>
 8008822:	e7dd      	b.n	80087e0 <_fflush_r+0xc>

08008824 <fiprintf>:
 8008824:	b40e      	push	{r1, r2, r3}
 8008826:	b503      	push	{r0, r1, lr}
 8008828:	4601      	mov	r1, r0
 800882a:	ab03      	add	r3, sp, #12
 800882c:	4805      	ldr	r0, [pc, #20]	@ (8008844 <fiprintf+0x20>)
 800882e:	f853 2b04 	ldr.w	r2, [r3], #4
 8008832:	6800      	ldr	r0, [r0, #0]
 8008834:	9301      	str	r3, [sp, #4]
 8008836:	f000 f8d1 	bl	80089dc <_vfiprintf_r>
 800883a:	b002      	add	sp, #8
 800883c:	f85d eb04 	ldr.w	lr, [sp], #4
 8008840:	b003      	add	sp, #12
 8008842:	4770      	bx	lr
 8008844:	20000034 	.word	0x20000034

08008848 <memmove>:
 8008848:	4288      	cmp	r0, r1
 800884a:	b510      	push	{r4, lr}
 800884c:	eb01 0402 	add.w	r4, r1, r2
 8008850:	d902      	bls.n	8008858 <memmove+0x10>
 8008852:	4284      	cmp	r4, r0
 8008854:	4623      	mov	r3, r4
 8008856:	d807      	bhi.n	8008868 <memmove+0x20>
 8008858:	1e43      	subs	r3, r0, #1
 800885a:	42a1      	cmp	r1, r4
 800885c:	d008      	beq.n	8008870 <memmove+0x28>
 800885e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008862:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008866:	e7f8      	b.n	800885a <memmove+0x12>
 8008868:	4402      	add	r2, r0
 800886a:	4601      	mov	r1, r0
 800886c:	428a      	cmp	r2, r1
 800886e:	d100      	bne.n	8008872 <memmove+0x2a>
 8008870:	bd10      	pop	{r4, pc}
 8008872:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008876:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800887a:	e7f7      	b.n	800886c <memmove+0x24>

0800887c <_sbrk_r>:
 800887c:	b538      	push	{r3, r4, r5, lr}
 800887e:	4d06      	ldr	r5, [pc, #24]	@ (8008898 <_sbrk_r+0x1c>)
 8008880:	2300      	movs	r3, #0
 8008882:	4604      	mov	r4, r0
 8008884:	4608      	mov	r0, r1
 8008886:	602b      	str	r3, [r5, #0]
 8008888:	f7f9 fc50 	bl	800212c <_sbrk>
 800888c:	1c43      	adds	r3, r0, #1
 800888e:	d102      	bne.n	8008896 <_sbrk_r+0x1a>
 8008890:	682b      	ldr	r3, [r5, #0]
 8008892:	b103      	cbz	r3, 8008896 <_sbrk_r+0x1a>
 8008894:	6023      	str	r3, [r4, #0]
 8008896:	bd38      	pop	{r3, r4, r5, pc}
 8008898:	200006d0 	.word	0x200006d0

0800889c <memcpy>:
 800889c:	440a      	add	r2, r1
 800889e:	4291      	cmp	r1, r2
 80088a0:	f100 33ff 	add.w	r3, r0, #4294967295
 80088a4:	d100      	bne.n	80088a8 <memcpy+0xc>
 80088a6:	4770      	bx	lr
 80088a8:	b510      	push	{r4, lr}
 80088aa:	f811 4b01 	ldrb.w	r4, [r1], #1
 80088ae:	f803 4f01 	strb.w	r4, [r3, #1]!
 80088b2:	4291      	cmp	r1, r2
 80088b4:	d1f9      	bne.n	80088aa <memcpy+0xe>
 80088b6:	bd10      	pop	{r4, pc}

080088b8 <abort>:
 80088b8:	b508      	push	{r3, lr}
 80088ba:	2006      	movs	r0, #6
 80088bc:	f000 fa62 	bl	8008d84 <raise>
 80088c0:	2001      	movs	r0, #1
 80088c2:	f7f9 fbba 	bl	800203a <_exit>

080088c6 <_calloc_r>:
 80088c6:	b570      	push	{r4, r5, r6, lr}
 80088c8:	fba1 5402 	umull	r5, r4, r1, r2
 80088cc:	b93c      	cbnz	r4, 80088de <_calloc_r+0x18>
 80088ce:	4629      	mov	r1, r5
 80088d0:	f7ff f996 	bl	8007c00 <_malloc_r>
 80088d4:	4606      	mov	r6, r0
 80088d6:	b928      	cbnz	r0, 80088e4 <_calloc_r+0x1e>
 80088d8:	2600      	movs	r6, #0
 80088da:	4630      	mov	r0, r6
 80088dc:	bd70      	pop	{r4, r5, r6, pc}
 80088de:	220c      	movs	r2, #12
 80088e0:	6002      	str	r2, [r0, #0]
 80088e2:	e7f9      	b.n	80088d8 <_calloc_r+0x12>
 80088e4:	462a      	mov	r2, r5
 80088e6:	4621      	mov	r1, r4
 80088e8:	f7fe f999 	bl	8006c1e <memset>
 80088ec:	e7f5      	b.n	80088da <_calloc_r+0x14>

080088ee <__ascii_mbtowc>:
 80088ee:	b082      	sub	sp, #8
 80088f0:	b901      	cbnz	r1, 80088f4 <__ascii_mbtowc+0x6>
 80088f2:	a901      	add	r1, sp, #4
 80088f4:	b142      	cbz	r2, 8008908 <__ascii_mbtowc+0x1a>
 80088f6:	b14b      	cbz	r3, 800890c <__ascii_mbtowc+0x1e>
 80088f8:	7813      	ldrb	r3, [r2, #0]
 80088fa:	600b      	str	r3, [r1, #0]
 80088fc:	7812      	ldrb	r2, [r2, #0]
 80088fe:	1e10      	subs	r0, r2, #0
 8008900:	bf18      	it	ne
 8008902:	2001      	movne	r0, #1
 8008904:	b002      	add	sp, #8
 8008906:	4770      	bx	lr
 8008908:	4610      	mov	r0, r2
 800890a:	e7fb      	b.n	8008904 <__ascii_mbtowc+0x16>
 800890c:	f06f 0001 	mvn.w	r0, #1
 8008910:	e7f8      	b.n	8008904 <__ascii_mbtowc+0x16>

08008912 <_realloc_r>:
 8008912:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008916:	4680      	mov	r8, r0
 8008918:	4615      	mov	r5, r2
 800891a:	460c      	mov	r4, r1
 800891c:	b921      	cbnz	r1, 8008928 <_realloc_r+0x16>
 800891e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008922:	4611      	mov	r1, r2
 8008924:	f7ff b96c 	b.w	8007c00 <_malloc_r>
 8008928:	b92a      	cbnz	r2, 8008936 <_realloc_r+0x24>
 800892a:	f7ff f8f5 	bl	8007b18 <_free_r>
 800892e:	2400      	movs	r4, #0
 8008930:	4620      	mov	r0, r4
 8008932:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008936:	f000 fa41 	bl	8008dbc <_malloc_usable_size_r>
 800893a:	4285      	cmp	r5, r0
 800893c:	4606      	mov	r6, r0
 800893e:	d802      	bhi.n	8008946 <_realloc_r+0x34>
 8008940:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8008944:	d8f4      	bhi.n	8008930 <_realloc_r+0x1e>
 8008946:	4629      	mov	r1, r5
 8008948:	4640      	mov	r0, r8
 800894a:	f7ff f959 	bl	8007c00 <_malloc_r>
 800894e:	4607      	mov	r7, r0
 8008950:	2800      	cmp	r0, #0
 8008952:	d0ec      	beq.n	800892e <_realloc_r+0x1c>
 8008954:	42b5      	cmp	r5, r6
 8008956:	462a      	mov	r2, r5
 8008958:	4621      	mov	r1, r4
 800895a:	bf28      	it	cs
 800895c:	4632      	movcs	r2, r6
 800895e:	f7ff ff9d 	bl	800889c <memcpy>
 8008962:	4621      	mov	r1, r4
 8008964:	4640      	mov	r0, r8
 8008966:	f7ff f8d7 	bl	8007b18 <_free_r>
 800896a:	463c      	mov	r4, r7
 800896c:	e7e0      	b.n	8008930 <_realloc_r+0x1e>

0800896e <__ascii_wctomb>:
 800896e:	4603      	mov	r3, r0
 8008970:	4608      	mov	r0, r1
 8008972:	b141      	cbz	r1, 8008986 <__ascii_wctomb+0x18>
 8008974:	2aff      	cmp	r2, #255	@ 0xff
 8008976:	d904      	bls.n	8008982 <__ascii_wctomb+0x14>
 8008978:	228a      	movs	r2, #138	@ 0x8a
 800897a:	601a      	str	r2, [r3, #0]
 800897c:	f04f 30ff 	mov.w	r0, #4294967295
 8008980:	4770      	bx	lr
 8008982:	700a      	strb	r2, [r1, #0]
 8008984:	2001      	movs	r0, #1
 8008986:	4770      	bx	lr

08008988 <__sfputc_r>:
 8008988:	6893      	ldr	r3, [r2, #8]
 800898a:	3b01      	subs	r3, #1
 800898c:	2b00      	cmp	r3, #0
 800898e:	b410      	push	{r4}
 8008990:	6093      	str	r3, [r2, #8]
 8008992:	da08      	bge.n	80089a6 <__sfputc_r+0x1e>
 8008994:	6994      	ldr	r4, [r2, #24]
 8008996:	42a3      	cmp	r3, r4
 8008998:	db01      	blt.n	800899e <__sfputc_r+0x16>
 800899a:	290a      	cmp	r1, #10
 800899c:	d103      	bne.n	80089a6 <__sfputc_r+0x1e>
 800899e:	f85d 4b04 	ldr.w	r4, [sp], #4
 80089a2:	f000 b933 	b.w	8008c0c <__swbuf_r>
 80089a6:	6813      	ldr	r3, [r2, #0]
 80089a8:	1c58      	adds	r0, r3, #1
 80089aa:	6010      	str	r0, [r2, #0]
 80089ac:	7019      	strb	r1, [r3, #0]
 80089ae:	4608      	mov	r0, r1
 80089b0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80089b4:	4770      	bx	lr

080089b6 <__sfputs_r>:
 80089b6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80089b8:	4606      	mov	r6, r0
 80089ba:	460f      	mov	r7, r1
 80089bc:	4614      	mov	r4, r2
 80089be:	18d5      	adds	r5, r2, r3
 80089c0:	42ac      	cmp	r4, r5
 80089c2:	d101      	bne.n	80089c8 <__sfputs_r+0x12>
 80089c4:	2000      	movs	r0, #0
 80089c6:	e007      	b.n	80089d8 <__sfputs_r+0x22>
 80089c8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80089cc:	463a      	mov	r2, r7
 80089ce:	4630      	mov	r0, r6
 80089d0:	f7ff ffda 	bl	8008988 <__sfputc_r>
 80089d4:	1c43      	adds	r3, r0, #1
 80089d6:	d1f3      	bne.n	80089c0 <__sfputs_r+0xa>
 80089d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080089dc <_vfiprintf_r>:
 80089dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80089e0:	460d      	mov	r5, r1
 80089e2:	b09d      	sub	sp, #116	@ 0x74
 80089e4:	4614      	mov	r4, r2
 80089e6:	4698      	mov	r8, r3
 80089e8:	4606      	mov	r6, r0
 80089ea:	b118      	cbz	r0, 80089f4 <_vfiprintf_r+0x18>
 80089ec:	6a03      	ldr	r3, [r0, #32]
 80089ee:	b90b      	cbnz	r3, 80089f4 <_vfiprintf_r+0x18>
 80089f0:	f7fe f87c 	bl	8006aec <__sinit>
 80089f4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80089f6:	07d9      	lsls	r1, r3, #31
 80089f8:	d405      	bmi.n	8008a06 <_vfiprintf_r+0x2a>
 80089fa:	89ab      	ldrh	r3, [r5, #12]
 80089fc:	059a      	lsls	r2, r3, #22
 80089fe:	d402      	bmi.n	8008a06 <_vfiprintf_r+0x2a>
 8008a00:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008a02:	f7fe fa1c 	bl	8006e3e <__retarget_lock_acquire_recursive>
 8008a06:	89ab      	ldrh	r3, [r5, #12]
 8008a08:	071b      	lsls	r3, r3, #28
 8008a0a:	d501      	bpl.n	8008a10 <_vfiprintf_r+0x34>
 8008a0c:	692b      	ldr	r3, [r5, #16]
 8008a0e:	b99b      	cbnz	r3, 8008a38 <_vfiprintf_r+0x5c>
 8008a10:	4629      	mov	r1, r5
 8008a12:	4630      	mov	r0, r6
 8008a14:	f000 f938 	bl	8008c88 <__swsetup_r>
 8008a18:	b170      	cbz	r0, 8008a38 <_vfiprintf_r+0x5c>
 8008a1a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008a1c:	07dc      	lsls	r4, r3, #31
 8008a1e:	d504      	bpl.n	8008a2a <_vfiprintf_r+0x4e>
 8008a20:	f04f 30ff 	mov.w	r0, #4294967295
 8008a24:	b01d      	add	sp, #116	@ 0x74
 8008a26:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008a2a:	89ab      	ldrh	r3, [r5, #12]
 8008a2c:	0598      	lsls	r0, r3, #22
 8008a2e:	d4f7      	bmi.n	8008a20 <_vfiprintf_r+0x44>
 8008a30:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008a32:	f7fe fa05 	bl	8006e40 <__retarget_lock_release_recursive>
 8008a36:	e7f3      	b.n	8008a20 <_vfiprintf_r+0x44>
 8008a38:	2300      	movs	r3, #0
 8008a3a:	9309      	str	r3, [sp, #36]	@ 0x24
 8008a3c:	2320      	movs	r3, #32
 8008a3e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8008a42:	f8cd 800c 	str.w	r8, [sp, #12]
 8008a46:	2330      	movs	r3, #48	@ 0x30
 8008a48:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8008bf8 <_vfiprintf_r+0x21c>
 8008a4c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8008a50:	f04f 0901 	mov.w	r9, #1
 8008a54:	4623      	mov	r3, r4
 8008a56:	469a      	mov	sl, r3
 8008a58:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008a5c:	b10a      	cbz	r2, 8008a62 <_vfiprintf_r+0x86>
 8008a5e:	2a25      	cmp	r2, #37	@ 0x25
 8008a60:	d1f9      	bne.n	8008a56 <_vfiprintf_r+0x7a>
 8008a62:	ebba 0b04 	subs.w	fp, sl, r4
 8008a66:	d00b      	beq.n	8008a80 <_vfiprintf_r+0xa4>
 8008a68:	465b      	mov	r3, fp
 8008a6a:	4622      	mov	r2, r4
 8008a6c:	4629      	mov	r1, r5
 8008a6e:	4630      	mov	r0, r6
 8008a70:	f7ff ffa1 	bl	80089b6 <__sfputs_r>
 8008a74:	3001      	adds	r0, #1
 8008a76:	f000 80a7 	beq.w	8008bc8 <_vfiprintf_r+0x1ec>
 8008a7a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008a7c:	445a      	add	r2, fp
 8008a7e:	9209      	str	r2, [sp, #36]	@ 0x24
 8008a80:	f89a 3000 	ldrb.w	r3, [sl]
 8008a84:	2b00      	cmp	r3, #0
 8008a86:	f000 809f 	beq.w	8008bc8 <_vfiprintf_r+0x1ec>
 8008a8a:	2300      	movs	r3, #0
 8008a8c:	f04f 32ff 	mov.w	r2, #4294967295
 8008a90:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008a94:	f10a 0a01 	add.w	sl, sl, #1
 8008a98:	9304      	str	r3, [sp, #16]
 8008a9a:	9307      	str	r3, [sp, #28]
 8008a9c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8008aa0:	931a      	str	r3, [sp, #104]	@ 0x68
 8008aa2:	4654      	mov	r4, sl
 8008aa4:	2205      	movs	r2, #5
 8008aa6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008aaa:	4853      	ldr	r0, [pc, #332]	@ (8008bf8 <_vfiprintf_r+0x21c>)
 8008aac:	f7f7 fbc8 	bl	8000240 <memchr>
 8008ab0:	9a04      	ldr	r2, [sp, #16]
 8008ab2:	b9d8      	cbnz	r0, 8008aec <_vfiprintf_r+0x110>
 8008ab4:	06d1      	lsls	r1, r2, #27
 8008ab6:	bf44      	itt	mi
 8008ab8:	2320      	movmi	r3, #32
 8008aba:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008abe:	0713      	lsls	r3, r2, #28
 8008ac0:	bf44      	itt	mi
 8008ac2:	232b      	movmi	r3, #43	@ 0x2b
 8008ac4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008ac8:	f89a 3000 	ldrb.w	r3, [sl]
 8008acc:	2b2a      	cmp	r3, #42	@ 0x2a
 8008ace:	d015      	beq.n	8008afc <_vfiprintf_r+0x120>
 8008ad0:	9a07      	ldr	r2, [sp, #28]
 8008ad2:	4654      	mov	r4, sl
 8008ad4:	2000      	movs	r0, #0
 8008ad6:	f04f 0c0a 	mov.w	ip, #10
 8008ada:	4621      	mov	r1, r4
 8008adc:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008ae0:	3b30      	subs	r3, #48	@ 0x30
 8008ae2:	2b09      	cmp	r3, #9
 8008ae4:	d94b      	bls.n	8008b7e <_vfiprintf_r+0x1a2>
 8008ae6:	b1b0      	cbz	r0, 8008b16 <_vfiprintf_r+0x13a>
 8008ae8:	9207      	str	r2, [sp, #28]
 8008aea:	e014      	b.n	8008b16 <_vfiprintf_r+0x13a>
 8008aec:	eba0 0308 	sub.w	r3, r0, r8
 8008af0:	fa09 f303 	lsl.w	r3, r9, r3
 8008af4:	4313      	orrs	r3, r2
 8008af6:	9304      	str	r3, [sp, #16]
 8008af8:	46a2      	mov	sl, r4
 8008afa:	e7d2      	b.n	8008aa2 <_vfiprintf_r+0xc6>
 8008afc:	9b03      	ldr	r3, [sp, #12]
 8008afe:	1d19      	adds	r1, r3, #4
 8008b00:	681b      	ldr	r3, [r3, #0]
 8008b02:	9103      	str	r1, [sp, #12]
 8008b04:	2b00      	cmp	r3, #0
 8008b06:	bfbb      	ittet	lt
 8008b08:	425b      	neglt	r3, r3
 8008b0a:	f042 0202 	orrlt.w	r2, r2, #2
 8008b0e:	9307      	strge	r3, [sp, #28]
 8008b10:	9307      	strlt	r3, [sp, #28]
 8008b12:	bfb8      	it	lt
 8008b14:	9204      	strlt	r2, [sp, #16]
 8008b16:	7823      	ldrb	r3, [r4, #0]
 8008b18:	2b2e      	cmp	r3, #46	@ 0x2e
 8008b1a:	d10a      	bne.n	8008b32 <_vfiprintf_r+0x156>
 8008b1c:	7863      	ldrb	r3, [r4, #1]
 8008b1e:	2b2a      	cmp	r3, #42	@ 0x2a
 8008b20:	d132      	bne.n	8008b88 <_vfiprintf_r+0x1ac>
 8008b22:	9b03      	ldr	r3, [sp, #12]
 8008b24:	1d1a      	adds	r2, r3, #4
 8008b26:	681b      	ldr	r3, [r3, #0]
 8008b28:	9203      	str	r2, [sp, #12]
 8008b2a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8008b2e:	3402      	adds	r4, #2
 8008b30:	9305      	str	r3, [sp, #20]
 8008b32:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8008c08 <_vfiprintf_r+0x22c>
 8008b36:	7821      	ldrb	r1, [r4, #0]
 8008b38:	2203      	movs	r2, #3
 8008b3a:	4650      	mov	r0, sl
 8008b3c:	f7f7 fb80 	bl	8000240 <memchr>
 8008b40:	b138      	cbz	r0, 8008b52 <_vfiprintf_r+0x176>
 8008b42:	9b04      	ldr	r3, [sp, #16]
 8008b44:	eba0 000a 	sub.w	r0, r0, sl
 8008b48:	2240      	movs	r2, #64	@ 0x40
 8008b4a:	4082      	lsls	r2, r0
 8008b4c:	4313      	orrs	r3, r2
 8008b4e:	3401      	adds	r4, #1
 8008b50:	9304      	str	r3, [sp, #16]
 8008b52:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008b56:	4829      	ldr	r0, [pc, #164]	@ (8008bfc <_vfiprintf_r+0x220>)
 8008b58:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8008b5c:	2206      	movs	r2, #6
 8008b5e:	f7f7 fb6f 	bl	8000240 <memchr>
 8008b62:	2800      	cmp	r0, #0
 8008b64:	d03f      	beq.n	8008be6 <_vfiprintf_r+0x20a>
 8008b66:	4b26      	ldr	r3, [pc, #152]	@ (8008c00 <_vfiprintf_r+0x224>)
 8008b68:	bb1b      	cbnz	r3, 8008bb2 <_vfiprintf_r+0x1d6>
 8008b6a:	9b03      	ldr	r3, [sp, #12]
 8008b6c:	3307      	adds	r3, #7
 8008b6e:	f023 0307 	bic.w	r3, r3, #7
 8008b72:	3308      	adds	r3, #8
 8008b74:	9303      	str	r3, [sp, #12]
 8008b76:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008b78:	443b      	add	r3, r7
 8008b7a:	9309      	str	r3, [sp, #36]	@ 0x24
 8008b7c:	e76a      	b.n	8008a54 <_vfiprintf_r+0x78>
 8008b7e:	fb0c 3202 	mla	r2, ip, r2, r3
 8008b82:	460c      	mov	r4, r1
 8008b84:	2001      	movs	r0, #1
 8008b86:	e7a8      	b.n	8008ada <_vfiprintf_r+0xfe>
 8008b88:	2300      	movs	r3, #0
 8008b8a:	3401      	adds	r4, #1
 8008b8c:	9305      	str	r3, [sp, #20]
 8008b8e:	4619      	mov	r1, r3
 8008b90:	f04f 0c0a 	mov.w	ip, #10
 8008b94:	4620      	mov	r0, r4
 8008b96:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008b9a:	3a30      	subs	r2, #48	@ 0x30
 8008b9c:	2a09      	cmp	r2, #9
 8008b9e:	d903      	bls.n	8008ba8 <_vfiprintf_r+0x1cc>
 8008ba0:	2b00      	cmp	r3, #0
 8008ba2:	d0c6      	beq.n	8008b32 <_vfiprintf_r+0x156>
 8008ba4:	9105      	str	r1, [sp, #20]
 8008ba6:	e7c4      	b.n	8008b32 <_vfiprintf_r+0x156>
 8008ba8:	fb0c 2101 	mla	r1, ip, r1, r2
 8008bac:	4604      	mov	r4, r0
 8008bae:	2301      	movs	r3, #1
 8008bb0:	e7f0      	b.n	8008b94 <_vfiprintf_r+0x1b8>
 8008bb2:	ab03      	add	r3, sp, #12
 8008bb4:	9300      	str	r3, [sp, #0]
 8008bb6:	462a      	mov	r2, r5
 8008bb8:	4b12      	ldr	r3, [pc, #72]	@ (8008c04 <_vfiprintf_r+0x228>)
 8008bba:	a904      	add	r1, sp, #16
 8008bbc:	4630      	mov	r0, r6
 8008bbe:	f7fd fb51 	bl	8006264 <_printf_float>
 8008bc2:	4607      	mov	r7, r0
 8008bc4:	1c78      	adds	r0, r7, #1
 8008bc6:	d1d6      	bne.n	8008b76 <_vfiprintf_r+0x19a>
 8008bc8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008bca:	07d9      	lsls	r1, r3, #31
 8008bcc:	d405      	bmi.n	8008bda <_vfiprintf_r+0x1fe>
 8008bce:	89ab      	ldrh	r3, [r5, #12]
 8008bd0:	059a      	lsls	r2, r3, #22
 8008bd2:	d402      	bmi.n	8008bda <_vfiprintf_r+0x1fe>
 8008bd4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008bd6:	f7fe f933 	bl	8006e40 <__retarget_lock_release_recursive>
 8008bda:	89ab      	ldrh	r3, [r5, #12]
 8008bdc:	065b      	lsls	r3, r3, #25
 8008bde:	f53f af1f 	bmi.w	8008a20 <_vfiprintf_r+0x44>
 8008be2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008be4:	e71e      	b.n	8008a24 <_vfiprintf_r+0x48>
 8008be6:	ab03      	add	r3, sp, #12
 8008be8:	9300      	str	r3, [sp, #0]
 8008bea:	462a      	mov	r2, r5
 8008bec:	4b05      	ldr	r3, [pc, #20]	@ (8008c04 <_vfiprintf_r+0x228>)
 8008bee:	a904      	add	r1, sp, #16
 8008bf0:	4630      	mov	r0, r6
 8008bf2:	f7fd fdcf 	bl	8006794 <_printf_i>
 8008bf6:	e7e4      	b.n	8008bc2 <_vfiprintf_r+0x1e6>
 8008bf8:	08009350 	.word	0x08009350
 8008bfc:	0800935a 	.word	0x0800935a
 8008c00:	08006265 	.word	0x08006265
 8008c04:	080089b7 	.word	0x080089b7
 8008c08:	08009356 	.word	0x08009356

08008c0c <__swbuf_r>:
 8008c0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008c0e:	460e      	mov	r6, r1
 8008c10:	4614      	mov	r4, r2
 8008c12:	4605      	mov	r5, r0
 8008c14:	b118      	cbz	r0, 8008c1e <__swbuf_r+0x12>
 8008c16:	6a03      	ldr	r3, [r0, #32]
 8008c18:	b90b      	cbnz	r3, 8008c1e <__swbuf_r+0x12>
 8008c1a:	f7fd ff67 	bl	8006aec <__sinit>
 8008c1e:	69a3      	ldr	r3, [r4, #24]
 8008c20:	60a3      	str	r3, [r4, #8]
 8008c22:	89a3      	ldrh	r3, [r4, #12]
 8008c24:	071a      	lsls	r2, r3, #28
 8008c26:	d501      	bpl.n	8008c2c <__swbuf_r+0x20>
 8008c28:	6923      	ldr	r3, [r4, #16]
 8008c2a:	b943      	cbnz	r3, 8008c3e <__swbuf_r+0x32>
 8008c2c:	4621      	mov	r1, r4
 8008c2e:	4628      	mov	r0, r5
 8008c30:	f000 f82a 	bl	8008c88 <__swsetup_r>
 8008c34:	b118      	cbz	r0, 8008c3e <__swbuf_r+0x32>
 8008c36:	f04f 37ff 	mov.w	r7, #4294967295
 8008c3a:	4638      	mov	r0, r7
 8008c3c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008c3e:	6823      	ldr	r3, [r4, #0]
 8008c40:	6922      	ldr	r2, [r4, #16]
 8008c42:	1a98      	subs	r0, r3, r2
 8008c44:	6963      	ldr	r3, [r4, #20]
 8008c46:	b2f6      	uxtb	r6, r6
 8008c48:	4283      	cmp	r3, r0
 8008c4a:	4637      	mov	r7, r6
 8008c4c:	dc05      	bgt.n	8008c5a <__swbuf_r+0x4e>
 8008c4e:	4621      	mov	r1, r4
 8008c50:	4628      	mov	r0, r5
 8008c52:	f7ff fdbf 	bl	80087d4 <_fflush_r>
 8008c56:	2800      	cmp	r0, #0
 8008c58:	d1ed      	bne.n	8008c36 <__swbuf_r+0x2a>
 8008c5a:	68a3      	ldr	r3, [r4, #8]
 8008c5c:	3b01      	subs	r3, #1
 8008c5e:	60a3      	str	r3, [r4, #8]
 8008c60:	6823      	ldr	r3, [r4, #0]
 8008c62:	1c5a      	adds	r2, r3, #1
 8008c64:	6022      	str	r2, [r4, #0]
 8008c66:	701e      	strb	r6, [r3, #0]
 8008c68:	6962      	ldr	r2, [r4, #20]
 8008c6a:	1c43      	adds	r3, r0, #1
 8008c6c:	429a      	cmp	r2, r3
 8008c6e:	d004      	beq.n	8008c7a <__swbuf_r+0x6e>
 8008c70:	89a3      	ldrh	r3, [r4, #12]
 8008c72:	07db      	lsls	r3, r3, #31
 8008c74:	d5e1      	bpl.n	8008c3a <__swbuf_r+0x2e>
 8008c76:	2e0a      	cmp	r6, #10
 8008c78:	d1df      	bne.n	8008c3a <__swbuf_r+0x2e>
 8008c7a:	4621      	mov	r1, r4
 8008c7c:	4628      	mov	r0, r5
 8008c7e:	f7ff fda9 	bl	80087d4 <_fflush_r>
 8008c82:	2800      	cmp	r0, #0
 8008c84:	d0d9      	beq.n	8008c3a <__swbuf_r+0x2e>
 8008c86:	e7d6      	b.n	8008c36 <__swbuf_r+0x2a>

08008c88 <__swsetup_r>:
 8008c88:	b538      	push	{r3, r4, r5, lr}
 8008c8a:	4b29      	ldr	r3, [pc, #164]	@ (8008d30 <__swsetup_r+0xa8>)
 8008c8c:	4605      	mov	r5, r0
 8008c8e:	6818      	ldr	r0, [r3, #0]
 8008c90:	460c      	mov	r4, r1
 8008c92:	b118      	cbz	r0, 8008c9c <__swsetup_r+0x14>
 8008c94:	6a03      	ldr	r3, [r0, #32]
 8008c96:	b90b      	cbnz	r3, 8008c9c <__swsetup_r+0x14>
 8008c98:	f7fd ff28 	bl	8006aec <__sinit>
 8008c9c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008ca0:	0719      	lsls	r1, r3, #28
 8008ca2:	d422      	bmi.n	8008cea <__swsetup_r+0x62>
 8008ca4:	06da      	lsls	r2, r3, #27
 8008ca6:	d407      	bmi.n	8008cb8 <__swsetup_r+0x30>
 8008ca8:	2209      	movs	r2, #9
 8008caa:	602a      	str	r2, [r5, #0]
 8008cac:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008cb0:	81a3      	strh	r3, [r4, #12]
 8008cb2:	f04f 30ff 	mov.w	r0, #4294967295
 8008cb6:	e033      	b.n	8008d20 <__swsetup_r+0x98>
 8008cb8:	0758      	lsls	r0, r3, #29
 8008cba:	d512      	bpl.n	8008ce2 <__swsetup_r+0x5a>
 8008cbc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8008cbe:	b141      	cbz	r1, 8008cd2 <__swsetup_r+0x4a>
 8008cc0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008cc4:	4299      	cmp	r1, r3
 8008cc6:	d002      	beq.n	8008cce <__swsetup_r+0x46>
 8008cc8:	4628      	mov	r0, r5
 8008cca:	f7fe ff25 	bl	8007b18 <_free_r>
 8008cce:	2300      	movs	r3, #0
 8008cd0:	6363      	str	r3, [r4, #52]	@ 0x34
 8008cd2:	89a3      	ldrh	r3, [r4, #12]
 8008cd4:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8008cd8:	81a3      	strh	r3, [r4, #12]
 8008cda:	2300      	movs	r3, #0
 8008cdc:	6063      	str	r3, [r4, #4]
 8008cde:	6923      	ldr	r3, [r4, #16]
 8008ce0:	6023      	str	r3, [r4, #0]
 8008ce2:	89a3      	ldrh	r3, [r4, #12]
 8008ce4:	f043 0308 	orr.w	r3, r3, #8
 8008ce8:	81a3      	strh	r3, [r4, #12]
 8008cea:	6923      	ldr	r3, [r4, #16]
 8008cec:	b94b      	cbnz	r3, 8008d02 <__swsetup_r+0x7a>
 8008cee:	89a3      	ldrh	r3, [r4, #12]
 8008cf0:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8008cf4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008cf8:	d003      	beq.n	8008d02 <__swsetup_r+0x7a>
 8008cfa:	4621      	mov	r1, r4
 8008cfc:	4628      	mov	r0, r5
 8008cfe:	f000 f88b 	bl	8008e18 <__smakebuf_r>
 8008d02:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008d06:	f013 0201 	ands.w	r2, r3, #1
 8008d0a:	d00a      	beq.n	8008d22 <__swsetup_r+0x9a>
 8008d0c:	2200      	movs	r2, #0
 8008d0e:	60a2      	str	r2, [r4, #8]
 8008d10:	6962      	ldr	r2, [r4, #20]
 8008d12:	4252      	negs	r2, r2
 8008d14:	61a2      	str	r2, [r4, #24]
 8008d16:	6922      	ldr	r2, [r4, #16]
 8008d18:	b942      	cbnz	r2, 8008d2c <__swsetup_r+0xa4>
 8008d1a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8008d1e:	d1c5      	bne.n	8008cac <__swsetup_r+0x24>
 8008d20:	bd38      	pop	{r3, r4, r5, pc}
 8008d22:	0799      	lsls	r1, r3, #30
 8008d24:	bf58      	it	pl
 8008d26:	6962      	ldrpl	r2, [r4, #20]
 8008d28:	60a2      	str	r2, [r4, #8]
 8008d2a:	e7f4      	b.n	8008d16 <__swsetup_r+0x8e>
 8008d2c:	2000      	movs	r0, #0
 8008d2e:	e7f7      	b.n	8008d20 <__swsetup_r+0x98>
 8008d30:	20000034 	.word	0x20000034

08008d34 <_raise_r>:
 8008d34:	291f      	cmp	r1, #31
 8008d36:	b538      	push	{r3, r4, r5, lr}
 8008d38:	4605      	mov	r5, r0
 8008d3a:	460c      	mov	r4, r1
 8008d3c:	d904      	bls.n	8008d48 <_raise_r+0x14>
 8008d3e:	2316      	movs	r3, #22
 8008d40:	6003      	str	r3, [r0, #0]
 8008d42:	f04f 30ff 	mov.w	r0, #4294967295
 8008d46:	bd38      	pop	{r3, r4, r5, pc}
 8008d48:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8008d4a:	b112      	cbz	r2, 8008d52 <_raise_r+0x1e>
 8008d4c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8008d50:	b94b      	cbnz	r3, 8008d66 <_raise_r+0x32>
 8008d52:	4628      	mov	r0, r5
 8008d54:	f000 f830 	bl	8008db8 <_getpid_r>
 8008d58:	4622      	mov	r2, r4
 8008d5a:	4601      	mov	r1, r0
 8008d5c:	4628      	mov	r0, r5
 8008d5e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008d62:	f000 b817 	b.w	8008d94 <_kill_r>
 8008d66:	2b01      	cmp	r3, #1
 8008d68:	d00a      	beq.n	8008d80 <_raise_r+0x4c>
 8008d6a:	1c59      	adds	r1, r3, #1
 8008d6c:	d103      	bne.n	8008d76 <_raise_r+0x42>
 8008d6e:	2316      	movs	r3, #22
 8008d70:	6003      	str	r3, [r0, #0]
 8008d72:	2001      	movs	r0, #1
 8008d74:	e7e7      	b.n	8008d46 <_raise_r+0x12>
 8008d76:	2100      	movs	r1, #0
 8008d78:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8008d7c:	4620      	mov	r0, r4
 8008d7e:	4798      	blx	r3
 8008d80:	2000      	movs	r0, #0
 8008d82:	e7e0      	b.n	8008d46 <_raise_r+0x12>

08008d84 <raise>:
 8008d84:	4b02      	ldr	r3, [pc, #8]	@ (8008d90 <raise+0xc>)
 8008d86:	4601      	mov	r1, r0
 8008d88:	6818      	ldr	r0, [r3, #0]
 8008d8a:	f7ff bfd3 	b.w	8008d34 <_raise_r>
 8008d8e:	bf00      	nop
 8008d90:	20000034 	.word	0x20000034

08008d94 <_kill_r>:
 8008d94:	b538      	push	{r3, r4, r5, lr}
 8008d96:	4d07      	ldr	r5, [pc, #28]	@ (8008db4 <_kill_r+0x20>)
 8008d98:	2300      	movs	r3, #0
 8008d9a:	4604      	mov	r4, r0
 8008d9c:	4608      	mov	r0, r1
 8008d9e:	4611      	mov	r1, r2
 8008da0:	602b      	str	r3, [r5, #0]
 8008da2:	f7f9 f93a 	bl	800201a <_kill>
 8008da6:	1c43      	adds	r3, r0, #1
 8008da8:	d102      	bne.n	8008db0 <_kill_r+0x1c>
 8008daa:	682b      	ldr	r3, [r5, #0]
 8008dac:	b103      	cbz	r3, 8008db0 <_kill_r+0x1c>
 8008dae:	6023      	str	r3, [r4, #0]
 8008db0:	bd38      	pop	{r3, r4, r5, pc}
 8008db2:	bf00      	nop
 8008db4:	200006d0 	.word	0x200006d0

08008db8 <_getpid_r>:
 8008db8:	f7f9 b927 	b.w	800200a <_getpid>

08008dbc <_malloc_usable_size_r>:
 8008dbc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008dc0:	1f18      	subs	r0, r3, #4
 8008dc2:	2b00      	cmp	r3, #0
 8008dc4:	bfbc      	itt	lt
 8008dc6:	580b      	ldrlt	r3, [r1, r0]
 8008dc8:	18c0      	addlt	r0, r0, r3
 8008dca:	4770      	bx	lr

08008dcc <__swhatbuf_r>:
 8008dcc:	b570      	push	{r4, r5, r6, lr}
 8008dce:	460c      	mov	r4, r1
 8008dd0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008dd4:	2900      	cmp	r1, #0
 8008dd6:	b096      	sub	sp, #88	@ 0x58
 8008dd8:	4615      	mov	r5, r2
 8008dda:	461e      	mov	r6, r3
 8008ddc:	da0d      	bge.n	8008dfa <__swhatbuf_r+0x2e>
 8008dde:	89a3      	ldrh	r3, [r4, #12]
 8008de0:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8008de4:	f04f 0100 	mov.w	r1, #0
 8008de8:	bf14      	ite	ne
 8008dea:	2340      	movne	r3, #64	@ 0x40
 8008dec:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8008df0:	2000      	movs	r0, #0
 8008df2:	6031      	str	r1, [r6, #0]
 8008df4:	602b      	str	r3, [r5, #0]
 8008df6:	b016      	add	sp, #88	@ 0x58
 8008df8:	bd70      	pop	{r4, r5, r6, pc}
 8008dfa:	466a      	mov	r2, sp
 8008dfc:	f000 f848 	bl	8008e90 <_fstat_r>
 8008e00:	2800      	cmp	r0, #0
 8008e02:	dbec      	blt.n	8008dde <__swhatbuf_r+0x12>
 8008e04:	9901      	ldr	r1, [sp, #4]
 8008e06:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8008e0a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8008e0e:	4259      	negs	r1, r3
 8008e10:	4159      	adcs	r1, r3
 8008e12:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8008e16:	e7eb      	b.n	8008df0 <__swhatbuf_r+0x24>

08008e18 <__smakebuf_r>:
 8008e18:	898b      	ldrh	r3, [r1, #12]
 8008e1a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008e1c:	079d      	lsls	r5, r3, #30
 8008e1e:	4606      	mov	r6, r0
 8008e20:	460c      	mov	r4, r1
 8008e22:	d507      	bpl.n	8008e34 <__smakebuf_r+0x1c>
 8008e24:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8008e28:	6023      	str	r3, [r4, #0]
 8008e2a:	6123      	str	r3, [r4, #16]
 8008e2c:	2301      	movs	r3, #1
 8008e2e:	6163      	str	r3, [r4, #20]
 8008e30:	b003      	add	sp, #12
 8008e32:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008e34:	ab01      	add	r3, sp, #4
 8008e36:	466a      	mov	r2, sp
 8008e38:	f7ff ffc8 	bl	8008dcc <__swhatbuf_r>
 8008e3c:	9f00      	ldr	r7, [sp, #0]
 8008e3e:	4605      	mov	r5, r0
 8008e40:	4639      	mov	r1, r7
 8008e42:	4630      	mov	r0, r6
 8008e44:	f7fe fedc 	bl	8007c00 <_malloc_r>
 8008e48:	b948      	cbnz	r0, 8008e5e <__smakebuf_r+0x46>
 8008e4a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008e4e:	059a      	lsls	r2, r3, #22
 8008e50:	d4ee      	bmi.n	8008e30 <__smakebuf_r+0x18>
 8008e52:	f023 0303 	bic.w	r3, r3, #3
 8008e56:	f043 0302 	orr.w	r3, r3, #2
 8008e5a:	81a3      	strh	r3, [r4, #12]
 8008e5c:	e7e2      	b.n	8008e24 <__smakebuf_r+0xc>
 8008e5e:	89a3      	ldrh	r3, [r4, #12]
 8008e60:	6020      	str	r0, [r4, #0]
 8008e62:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008e66:	81a3      	strh	r3, [r4, #12]
 8008e68:	9b01      	ldr	r3, [sp, #4]
 8008e6a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8008e6e:	b15b      	cbz	r3, 8008e88 <__smakebuf_r+0x70>
 8008e70:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008e74:	4630      	mov	r0, r6
 8008e76:	f000 f81d 	bl	8008eb4 <_isatty_r>
 8008e7a:	b128      	cbz	r0, 8008e88 <__smakebuf_r+0x70>
 8008e7c:	89a3      	ldrh	r3, [r4, #12]
 8008e7e:	f023 0303 	bic.w	r3, r3, #3
 8008e82:	f043 0301 	orr.w	r3, r3, #1
 8008e86:	81a3      	strh	r3, [r4, #12]
 8008e88:	89a3      	ldrh	r3, [r4, #12]
 8008e8a:	431d      	orrs	r5, r3
 8008e8c:	81a5      	strh	r5, [r4, #12]
 8008e8e:	e7cf      	b.n	8008e30 <__smakebuf_r+0x18>

08008e90 <_fstat_r>:
 8008e90:	b538      	push	{r3, r4, r5, lr}
 8008e92:	4d07      	ldr	r5, [pc, #28]	@ (8008eb0 <_fstat_r+0x20>)
 8008e94:	2300      	movs	r3, #0
 8008e96:	4604      	mov	r4, r0
 8008e98:	4608      	mov	r0, r1
 8008e9a:	4611      	mov	r1, r2
 8008e9c:	602b      	str	r3, [r5, #0]
 8008e9e:	f7f9 f91c 	bl	80020da <_fstat>
 8008ea2:	1c43      	adds	r3, r0, #1
 8008ea4:	d102      	bne.n	8008eac <_fstat_r+0x1c>
 8008ea6:	682b      	ldr	r3, [r5, #0]
 8008ea8:	b103      	cbz	r3, 8008eac <_fstat_r+0x1c>
 8008eaa:	6023      	str	r3, [r4, #0]
 8008eac:	bd38      	pop	{r3, r4, r5, pc}
 8008eae:	bf00      	nop
 8008eb0:	200006d0 	.word	0x200006d0

08008eb4 <_isatty_r>:
 8008eb4:	b538      	push	{r3, r4, r5, lr}
 8008eb6:	4d06      	ldr	r5, [pc, #24]	@ (8008ed0 <_isatty_r+0x1c>)
 8008eb8:	2300      	movs	r3, #0
 8008eba:	4604      	mov	r4, r0
 8008ebc:	4608      	mov	r0, r1
 8008ebe:	602b      	str	r3, [r5, #0]
 8008ec0:	f7f9 f91b 	bl	80020fa <_isatty>
 8008ec4:	1c43      	adds	r3, r0, #1
 8008ec6:	d102      	bne.n	8008ece <_isatty_r+0x1a>
 8008ec8:	682b      	ldr	r3, [r5, #0]
 8008eca:	b103      	cbz	r3, 8008ece <_isatty_r+0x1a>
 8008ecc:	6023      	str	r3, [r4, #0]
 8008ece:	bd38      	pop	{r3, r4, r5, pc}
 8008ed0:	200006d0 	.word	0x200006d0

08008ed4 <_init>:
 8008ed4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008ed6:	bf00      	nop
 8008ed8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008eda:	bc08      	pop	{r3}
 8008edc:	469e      	mov	lr, r3
 8008ede:	4770      	bx	lr

08008ee0 <_fini>:
 8008ee0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008ee2:	bf00      	nop
 8008ee4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008ee6:	bc08      	pop	{r3}
 8008ee8:	469e      	mov	lr, r3
 8008eea:	4770      	bx	lr
